Функция ПолучитьКлючЗаписи(РегистрИмя,СтрКлюча) Экспорт

// Функция формирует и возвращает ключ записи для переданного в параметре "РегистрИмя" регистра
// сведений. Ключ формируется из структуры, переданной в параметре "СтрКлюча"
// При возникновении ошибки возвращается Неопределенность
//-------------------------------------------------------------------------------------------------
	Попытка
		Ответ = РегистрыСведений[СокрЛП(РегистрИмя)].СоздатьКлючЗаписи(СтрКлюча);
		Возврат (Ответ);
	Исключение
	КонецПопытки;

	Возврат Неопределено; 
	
КонецФункции

Функция ПолучитьЗначениеРеквизита(СсылкаИлиОбъект,ИмяРеквизита) Экспорт

// Функция возвращает значение реквизита с именем "ИмяРеквизита" из элемента или объекта
// При возникновении ошибки возвращается Неопределенность
//-------------------------------------------------------------------------------------------------
	Попытка
		Ответ = СсылкаИлиОбъект[СокрЛП(ИмяРеквизита)];
		Возврат (Ответ);
	Исключение
	КонецПопытки;

	Возврат Неопределено;
КонецФункции

Функция ПолучитьЗначениеКонстанты(ИмяКонстанты) Экспорт

// Функция возвращает значение константы с именем "ИмяКонстанты"
// При возникновении ошибки возвращается Неопределенность
//-------------------------------------------------------------------------------------------------
	Попытка
		Ответ = Константы[СокрЛП(ИмяКонстанты)].Получить();
		Возврат (Ответ);
	Исключение
	КонецПопытки;

	Возврат Неопределено;
КонецФункции

//-------------------------------------------------------------------------------------------------

Процедура УстановитьЗначениеПараметраСеанса(ИмяПараметра,Значение) Экспорт

// Процедура устанавливает значение параметра сеанса с именем "ИмяПараметра"
//-------------------------------------------------------------------------------------------------
	Попытка
		ПараметрыСеанса[СокрЛП(ИмяПараметра)] = Значение;
	Исключение
	КонецПопытки;
КонецПроцедуры

Функция ПолучитьЗначениеПараметраСеанса(ИмяПараметра) Экспорт

// Функция возвращает значение параметра сеанса с именем "ИмяПараметра"
// При возникновении ошибки возвращается Неопределенность
//-------------------------------------------------------------------------------------------------
	Попытка
		Ответ = ПараметрыСеанса[СокрЛП(ИмяПараметра)];
		Возврат (Ответ);
	Исключение
	КонецПопытки;

	Возврат Неопределено;
КонецФункции

//-------------------------------------------------------------------------------------------------

Функция ПолучитьКонтактЦентр(ПользовательСсылка = Неопределено) Экспорт

// Функция возвращает ссылку на контакт-центр если пользователь является сотрудником контакт-центра
// Функция возвращает пустую ссылку во всех остальных случаях. Если параметр "ПользовательСсылка"
// не передан, то возвращается информация о текущем пользователе
//-------------------------------------------------------------------------------------------------
	Доступно = 		ТипЗнч(ПользовательСсылка) = Тип("СправочникСсылка.Пользователи")
				И 	ЗначениеЗаполнено(ПользовательСсылка);
	ЦелеваяСсылка = ?(Доступно,ПользовательСсылка,ПараметрыСеанса.ТекущийПользователь);

// Получим ссылку на контакт-центр к которому относится пользователь
//-------------------------------------------------------------------------------------------------
	Запрос = Новый Запрос("SELECT TOP 1 Ссылка FROM Справочник.КонтактЦентры.Пользователи WHERE	(Пользователь = &Пользователь)");
	Запрос.УстановитьПараметр("Пользователь", ЦелеваяСсылка);  
	Результат = Запрос.Выполнить().Выбрать();
	Если (Результат.Следующий()) Тогда
		Возврат (Результат.Ссылка);
	КонецЕсли;

	Возврат (Справочники.КонтактЦентры.ПустаяСсылка());
КонецФункции

Функция ДоступныеПодразделения() Экспорт

// Функция возвращает массив со списком подразделений иерархия которых доступна текущему
// пользователю. Если доступные подразделения не найдены, то возвращается пустой массив
// Если пользователь является сотрудником контакт-центра, то список доступных подразделений будет
// взят из настроек контакт-центра
//-------------------------------------------------------------------------------------------------
	КЦСсылка = ПолучитьКонтактЦентр();

	Если (ЗначениеЗаполнено(КЦСсылка)) Тогда
		Ответ = КЦСсылка.Подразделения.ВыгрузитьКолонку("Подразделение");
	Иначе
		Ответ = ПараметрыСеанса.ТекущийПользователь.Подразделения.ВыгрузитьКолонку("Подразделение");
	КонецЕсли;

	Возврат (Ответ);
КонецФункции

Функция ДоступныеЦелевыеТочки() Экспорт

// Функция возвращает массив со списком целевых точек доступных текущему пользователю.
// Если доступные целевые точки не найдены, то возвращается пустой массив.
// Если пользователь является сотрудником контакт-центра, то список доступных целевых точек будет
// взят из настроек доступа контакт-центра
//-------------------------------------------------------------------------------------------------
	Запрос = Новый Запрос("SELECT DISTINCT Ссылка FROM	Справочник.ТочкиЦелевые WHERE КонтактЦентр = &КЦСсылка");
	Запрос.УстановитьПараметр("КЦСсылка",ПолучитьКонтактЦентр());
	Ответ = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Если (Ответ.Количество() > 0) Тогда
		Возврат (Ответ);
	КонецЕсли;

// Если мы оказались здесь, значит пользователь не является сотрудником контакт-центра
// Получим список целевых точек, которые относятся к подразделениям доступным пользователю
//-------------------------------------------------------------------------------------------------
	ТекстЗапроса = "
	|SELECT	DISTINCT Рег.ТочкаЦелевая AS Ссылка
	|FROM	РегистрСведений.АгентыЦелевые Рег
	|INNER	JOIN РегистрСведений.ОбъектыПривязка Прив ON (Прив.Владелец В ИЕРАРХИИ (&Подразделения)) И (Прив.Объект = Рег.Телефон)";

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Подразделения",ДоступныеПодразделения());
	Ответ = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

	Возврат (Ответ);
КонецФункции

Функция ДоступныеЦелевыеТочки2() Экспорт

// Функция возвращает массив со списком целевых точек доступных текущему пользователю,
// вне зависимость от того является он сотрудинком контакт-центра или нет
// Если доступные целевые точки не найдены, то возвращается пустой массив.
// Если пользователь является сотрудником контакт-центра, то список доступных целевых точек будет
// взят из настроек доступа контакт-центра
//-------------------------------------------------------------------------------------------------
	ТекстЗапроса = "
	|SELECT	DISTINCT Рег.ТочкаЦелевая AS Ссылка
	|FROM	РегистрСведений.АгентыЦелевые Рег
	|INNER	JOIN РегистрСведений.ОбъектыПривязка Прив ON (Прив.Владелец В ИЕРАРХИИ (&Подразделения)) И (Прив.Объект = Рег.Телефон)";

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Подразделения",ДоступныеПодразделения());
	Ответ = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

	Возврат (Ответ);
КонецФункции

//-------------------------------------------------------------------------------------------------

Функция БлокировкаСостояниеПолучить() Экспорт

// Функция получает информацию о текущей или планируемой блокировке базы данных
// Возвращаемое значение:
// - Ложь - блокировки нет и не планируется
// - Истина - время блокировки наступило
// - Строка - строка с текстом сообщения о предстоящей блокировке
//-------------------------------------------------------------------------------------------------
	Блокировка = ПолучитьБлокировкуСеансов();

// Если флаг блокировки устанолен (блокировка запланирована)
// Проверим, не наступило ли время блокировки. Если наступило, то возвратим Истину
//-------------------------------------------------------------------------------------------------
	Если (Блокировка.Установлена = Истина) Тогда
		Доступно = (Блокировка.Начало <= ТекущаяДата());
		Доступно = Доступно И (НЕ ПараметрыСеанса.РольДоступнаАдминистратор);

		Если (Доступно = Истина) Тогда
			Возврат Истина;
		КонецЕсли;

// Время блокировки еще не наступило
// Возвратим строку с информацией о предстоящей блокировке
//-------------------------------------------------------------------------------------------------
		Ответ = "Внимание !!! Администратор системы извещает Вас
		|о том что сегодня в " + СокрЛП(Формат(Блокировка.Начало,"ДФ = 'ЧЧ'' час.''мм'' мин.'")) + " по Московскому времени
		|будет временно прекращен доступ к программе ориентировочно на 5 - 10 минут";
		Возврат (Ответ);
	КонецЕсли;

	Возврат Ложь;
КонецФункции

Функция ТекущийПользователь() Экспорт

// Функция возвращает ссылку на элемент справочника "Пользователи" (на пользователя, под которым
// в настоящее время выполняется сеанс работы)
//-------------------------------------------------------------------------------------------------
	Ответ = ПараметрыСеанса.ТекущийПользователь;
	Ответ = ?(ЗначениеЗаполнено(Ответ),Ответ,Справочники.Пользователи.ЛокальнаяСистема);

	Возврат (Ответ);
КонецФункции

Функция ТекущаяДатаСервер() Экспорт

// Функция возвращает текущую дату и время сервера
//-------------------------------------------------------------------------------------------------
	Возврат (ТекущаяДата());
КонецФункции

Функция ТекущаяДатаКлиент() Экспорт

// Функция возвращает текущую дату и время текущего пользователя сеанса
// Возвращаемое значение - время сервера плюс/минус смещение времени текущего пользователя
// относительно времени сервера (Московского времени)
//-------------------------------------------------------------------------------------------------
	ТекПользователь = ТекущийПользователь();
	СмещениеСекунд = (ТекПользователь.СмещениеВремени * 3600);
	Ответ = (ТекущаяДатаСервер() + СмещениеСекунд);

	Возврат (Ответ);
КонецФункции
