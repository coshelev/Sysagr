//*************************************************************************************************
// Управление компонентой телефонии
//*************************************************************************************************

&НаКлиенте
Функция СоединениеУстановить(ТелНомер, IPадресАстериск = "") Экспорт

// Функция выполняет установку, подключение и авторизацию компоненты ROM-Asterisk
// При успехе в реквизит "Клиент" глобальной структуры "ГлобТелефония1" помещается объект телефонной
// компоненты. В случае успеха возвращается Истина. В случае неудачи - возвращается Ложь
//-------------------------------------------------------------------------------------------------
	ТипКомпоненты = "AddIn.Pbx.ROM-Asterisk-Native";
	АдресКомпоненты = "ОбщийМакет.КомпонентаТелефония";
	СоединениеРазорвать();

// Убедимся в правильности переданных параметров
//-------------------------------------------------------------------------------------------------
	Доступно = (ТипЗнч(ТелНомер) = Тип("Строка"));
	Доступно = Доступно И Конвертация.ЭтоТолькоЦифры(ТелНомер);
	Доступно = Доступно И (СтрДлина(СокрЛП(ТелНомер)) = 4);

	Если (Доступно = Ложь) Тогда
		Предупреждение("Контакт-центр: Не передан номер оператора для установки соединения",10);
		Возврат Ложь;
	КонецЕсли;

// Попытаемся создать объект телефонии (компонента ранее должна быть подключена и установлена)
//-------------------------------------------------------------------------------------------------
	Попытка
		ГлобТелефония1.Клиент = Новый(ТипКомпоненты);
	Исключение
	КонецПопытки;

// Если клиент не получен, то попытаемся установить и подключить внешнюю компоненту
//-------------------------------------------------------------------------------------------------
	Если (ГлобТелефония1.Клиент = Неопределено) Тогда
		Если (ПодключитьВнешнююКомпоненту(АдресКомпоненты,"Pbx") = Ложь) Тогда
			УстановитьВнешнююКомпоненту(АдресКомпоненты);
			ПодключитьВнешнююКомпоненту(АдресКомпоненты,"Pbx");
		КонецЕсли;

// Попытаемся повторно создать объект телефонии
//-------------------------------------------------------------------------------------------------
		Попытка
			ГлобТелефония1.Клиент = Новый(ТипКомпоненты);
		Исключение
		КонецПопытки;
	КонецЕсли;

// Если на данном этапе клиент телефонии не создан, то завершим работу с ошибкой
//-------------------------------------------------------------------------------------------------
	Если (ГлобТелефония1.Клиент = Неопределено) Тогда
		Темп = "Контакт-центр: Ошибка инициализации телефонной компоненты" + Символы.ПС;
		Темп = Темп + "Убедитесь в том, что в папке %APPDATA%\1C\1Cv8\ExtCompT\ существуют ";
		Темп = Темп + "файлы ""ROM-Asterisk-Native.dll"" и ""registry.xml""";
		Предупреждение(Темп,10);
		Возврат Ложь;
	КонецЕсли;

// Выполним подключение клиента к серверу телефонии
//-------------------------------------------------------------------------------------------------
	Попытка
		Если ЗначениеЗаполнено(IPадресАстериск) Тогда
			СерверАдрес = СокрЛП(СтрЗаменить(IPадресАстериск," ",""));
		Иначе
			СерверАдрес = "192.168.0.248";
		КонецЕсли;
		ГлобТелефония1.Клиент.Подключиться(СерверАдрес,"5038");
		ГлобТелефония1.Оператор = ВРег(СокрЛП(ТелНомер));
	Исключение
		Предупреждение("Контакт-центр: Ошибка подключения телефонной компоненты к серверу телефонии",10);
		СоединениеРазорвать();
		Возврат Ложь;
	КонецПопытки;

// Выполним подключение клиента к AMI сервера телефонии
//-------------------------------------------------------------------------------------------------
    credentials = Телефония.Asterisk_login_password();
	Доступно = ЗначениеЗаполнено(credentials.Asterisk_login) И ЗначениеЗаполнено(credentials.Asterisk_password);
	Если Не Доступно Тогда
		Возврат ("Не найдены реквизиты для входа в Asterisk");
	КонецЕсли;
	
	Логин  = credentials.Asterisk_login;
	Пароль = credentials.Asterisk_password;
	Если ЗначениеЗаполнено(ТелНомер) И IPадресАстериск = "192.168.0.252" Тогда
		Логин  = "cc"+ ТелНомер;
		Пароль = ""  + ТелНомер;
	КонецЕсли;
	
	ТекстКоманды = Новый Массив;
	ТекстКоманды.Добавить("Action: Login");
	ТекстКоманды.Добавить("Username:  "	+ Логин);
	ТекстКоманды.Добавить("Secret: "	+ Пароль);
	ВыполнитьКоманду(ТекстКоманды);

// На данном этапе должно существовать соединение
//-------------------------------------------------------------------------------------------------
	Если (СоединениеСуществует() = Ложь) Тогда
		Предупреждение("Контакт-центр: Ошибка подключения компоненты к серверу телефонии",10);
		СоединениеРазорвать();
		Возврат Ложь;
	КонецЕсли;

	СобытиеHangup();
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура СоединениеРазорвать() Экспорт

// Функция выполняет отключение компоненты от сервера телефонии. Всегда возвращает Истину
//-------------------------------------------------------------------------------------------------
	Попытка
		ВыполнитьКоманду("Action: Logoff");
		ГлобТелефония1.Клиент.Отключиться();
	Исключение
	КонецПопытки;

// Выполним инициализацию структуры клиента телефонии
//-------------------------------------------------------------------------------------------------
	ГлобТелефония1.Состояние = 0;
	ГлобТелефония1.Клиент = Неопределено;
	ГлобТелефония1.Оператор = Неопределено;
	ГлобТелефония1.КаналСистемный = Неопределено;
	ГлобТелефония1.КаналИнициатор = Неопределено;
	ГлобТелефония1.АбонентВнешний = Неопределено;
КонецПроцедуры

&НаКлиенте
Функция СоединениеСуществует() Экспорт

// Возвращает Истину если Клиент существует и у него установлено активное подключение к серверу
// телефонии. Во всех остальных случаях функция возвращает Ложь
//-------------------------------------------------------------------------------------------------
	Попытка
		Ответ = ?(ЗначениеЗаполнено(ГлобТелефония1.Клиент.Подключено),Истина,Ложь);
		Возврат (Ответ);
	Исключение
	КонецПопытки;

	Возврат Ложь;
КонецФункции

&НаКлиенте
Функция ЗвонокСостояние() Экспорт

// Возвращает состояние клиента в привязке к звонку
// 0 - ошибка обнаружения клиента (клиент не существует или не подключен к серверу телефонии)
// 1 - состояние ожидания (звонок не выполняется)
// 2 - состояние исходящего звонка
// 3 - состояние входящего звонка
//-------------------------------------------------------------------------------------------------
	Ответ = ?(СоединениеСуществует(),ГлобТелефония1.Состояние,0);
	Возврат (Ответ);
КонецФункции

//-------------------------------------------------------------------------------------------------

&НаКлиенте
Процедура ФильтрРазговораУстановить(КаналНомер) Экспорт

// Процедура устанавливает фильтр на прослушивание событий прекращения разговора на переданном
// канале. Имеет смысл только в случае существования канала (разговора)
//-------------------------------------------------------------------------------------------------
	Доступно = (ТипЗнч(КаналНомер) = Тип("Строка"));
	Доступно = Доступно И ЗначениеЗаполнено(КаналНомер);

	Если (Доступно = Истина) Тогда
		Попытка
			//СтрокаФильтра = "Event: Hangup[\w\W\s]+?Channel: " + СокрЛП(КаналНомер);  		//Работатает. Но были сбои.			
			//СтрокаФильтра = "Event: Hangup[^Request]";  										//Работает. Включает все Hangup, исключает HangupRequest и SorfHangupRequest
			СтрокаФильтра = "Event: Hangup[^Request][\w\W\s]+?Channel: "+СокрЛП(КаналНомер); 	//Работает. Включает все Hangup по конкретному номеру 
			ГлобТелефония1.Клиент.УстановитьРегулярноеВыражение(СтрокаФильтра);
		Исключение
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФильтрОжиданияУстановить() Экспорт

// Процедура устанавливает фильтр на отлов событий начала вызова
//-------------------------------------------------------------------------------------------------
	ТелефонОператора = СокрЛП(ГлобТелефония1.Оператор);
	Попытка
		СтрокаФильтра = "Event: DialBegin[\w\W\s]+?CallerIDNum: " 					+ ТелефонОператора;
		СтрокаФильтра = СтрокаФильтра + "|Event: DialBegin[\w\W\s]+?DestExten: " 	+ ТелефонОператора;
		СтрокаФильтра = СтрокаФильтра + "|Event: AgentCalled[\w\W\s]+?MemberName: " + ТелефонОператора;
		ГлобТелефония1.Клиент.УстановитьРегулярноеВыражение(СтрокаФильтра);
		ГлобТелефония1.Клиент.РежимПрослушивания(Истина);
	Исключение
	КонецПопытки;
КонецПроцедуры

//-------------------------------------------------------------------------------------------------

&НаКлиенте
Процедура КомандаHangup() Экспорт

// Процедура выполняет завершение разговора в системном канале
//-------------------------------------------------------------------------------------------------
	ТекстКоманды = Новый Массив;
	ТекстКоманды.Добавить("Action: Hangup");
	ТекстКоманды.Добавить("Channel: " + СокрЛП(ГлобТелефония1.КаналСистемный));
	ВыполнитьКоманду(ТекстКоманды);
КонецПроцедуры

&НаКлиенте
Процедура _КомандаAtxfer(ТелНомер) Экспорт

// Процедура выполняет сопровождаемый перевод звонка на переданный телефон
//-------------------------------------------------------------------------------------------------
	Доступно = (ТипЗнч(ТелНомер) = Тип("Строка"));
	Доступно = Доступно И ЗначениеЗаполнено(ТелНомер);

	Если (Доступно = Истина) Тогда
		ТекстКоманды = Новый Массив;
		ТекстКоманды.Добавить("Action: Atxfer");
		ТекстКоманды.Добавить("Channel: " + СокрЛП(ГлобТелефония1.КаналСистемный));
		ТекстКоманды.Добавить("Exten: " + ВРег(СокрЛП(ТелНомер)));
		ТекстКоманды.Добавить("Context: default");
		ТекстКоманды.Добавить("Priority: 1");
		ВыполнитьКоманду(ТекстКоманды);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _КомандаBlindTransfer(ТелНомер) Экспорт

// Процедура выполняет несопровождаемый перевод звонка на переданный телефон
//-------------------------------------------------------------------------------------------------
	Доступно = (ТипЗнч(ТелНомер) = Тип("Строка"));
	Доступно = Доступно И ЗначениеЗаполнено(ТелНомер);

	Если (Доступно = Истина) Тогда
		ТекстКоманды = Новый Массив;
		ТекстКоманды.Добавить("Action: BlindTransfer");
		ТекстКоманды.Добавить("Channel: " + СокрЛП(ГлобТелефония1.КаналСистемный));
		ТекстКоманды.Добавить("Exten: " + ВРег(СокрЛП(ТелНомер)));
		ТекстКоманды.Добавить("Context: default");
		ВыполнитьКоманду(ТекстКоманды);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ВыполнитьКоманду(Знач СтрокаИлиМассив)

// Функция возвращает Истину если переданная команда выполнена успешно
// Команда может быть передана либо как строка, либо как массив с набором строк
//-------------------------------------------------------------------------------------------------
	Если (ТипЗнч(СтрокаИлиМассив) = Тип("Массив")) Тогда
		СтрокаИлиМассив = СтрСоединить(СтрокаИлиМассив,Символы.ПС);
	КонецЕсли;

// Если на данном этапе в переменной "СтрокаИлиМассив" находится непустая строка, значит команда
// сформирована. Добавим к строке признак окончания команды (двойной перевод строки)
//-------------------------------------------------------------------------------------------------
	Ответ = (ТипЗнч(СтрокаИлиМассив) = Тип("Строка"));
	Ответ = Ответ И ЗначениеЗаполнено(СтрокаИлиМассив);
	Ответ = Ответ И СоединениеСуществует();

	Если (Ответ = Истина) Тогда
		СтрКоманда = СокрЛП(СтрокаИлиМассив) + Символы.ПС + Символы.ПС;

		Если (ГлобТелефония1.Клиент.ВыполнитьКоманду(СтрКоманда)) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;

	Возврат Ложь;
КонецФункции

//-------------------------------------------------------------------------------------------------

&НаКлиенте
Функция СобытиеКомпоненты(Источник,Событие,Данные) Экспорт

// Функция возвращает Истину если переданное Событие является событием компоненты ROM-Asterisk
//-------------------------------------------------------------------------------------------------
	Ответ = (ТипЗнч(Источник) = Тип("Строка"));
	Ответ = Ответ И (ТипЗнч(Данные) = Тип("Строка"));
	Ответ = Ответ И (ТипЗнч(Событие) = Тип("Строка"));
	Ответ = Ответ И (СтрНайти(ВРег(Источник),"ASTERISK") > 0);

	Если (Ответ = Ложь) Тогда
		Возврат Ложь;
	КонецЕсли;

// Если мы оказались здесь, значит получено событие клиента телефонии
//-------------------------------------------------------------------------------------------------
	Если (ВРег(СокрЛП(Событие)) = "DISCONNECT") Тогда
		СобытиеHangup();
		Возврат Истина;
	КонецЕсли;

// Получим сведения о типе события
// В процессе получения сведений может измениться признак события
// DialBegin - входящий прямой, AgentCalled - входящий из очереди, Hangup - завершение звонка
//-------------------------------------------------------------------------------------------------
	ТипСобытия = ВРег(СокрЛП(Конвертация.ПараметрПолучить(Данные,"Event")));

	Если (ТипСобытия = "DIALBEGIN") Тогда
		СобытиеDialBegin(Данные,Ответ);
	ИначеЕсли (ТипСобытия = "AGENTCALLED") Тогда
		СобытиеAgentCalled(Данные,Ответ);
	ИначеЕсли (ТипСобытия = "HANGUP") Тогда
		СобытиеHangup();
	КонецЕсли;

	Возврат (Ответ);
КонецФункции

&НаКлиенте
Процедура СобытиеAgentCalled(Данные,Ответ)

// Поступил входящий звонок из очереди на агента
// Получим и нормализуем номер внешнего абонента
//-------------------------------------------------------------------------------------------------
	Темп = Конвертация.ПараметрПолучить(Данные,"CallerIDNum");
	Темп = Конвертация.ТелефонВнешнийНормализовать(Темп);
	ГлобТелефония1.АбонентВнешний = СокрЛП(Темп);

// Сведения о назначенных каналах звонка
//-------------------------------------------------------------------------------------------------
	ГлобТелефония1.КаналИнициатор = Конвертация.ПараметрПолучить(Данные,"CallerIDName");
	ГлобТелефония1.КаналСистемный = Конвертация.ПараметрПолучить(Данные,"DestChannel");
	ФильтрРазговораУстановить(ГлобТелефония1.КаналСистемный);
	ГлобТелефония1.Состояние = 3;
КонецПроцедуры

&НаКлиенте
Процедура СобытиеDialBegin(Данные,Ответ)

// Выполняется прямой вызов (вызов не из очереди)
// Выясним выполняется ли данный вызов в режиме "CallBack" (т.е. телефонный сервер вызывает
// абонента). Системный вызов отличается от полноценного тем, что у него нет реквизита "Channel"
//-------------------------------------------------------------------------------------------------
	Если (НЕ ЗначениеЗаполнено(Конвертация.ПараметрПолучить(Данные,"Channel"))) Тогда
		Ответ = Ложь;
		Возврат;
	КонецЕсли;

// Получим номер телефона инициатора звонка и сравним его с номером телефона оператора. Если
// телефоны равны, значит выполняется исходящий звонок (инициатором является сам оператор)
//-------------------------------------------------------------------------------------------------
	ТелИнициатор = Конвертация.ПараметрПолучить(Данные,"CallerIDNum");

	Если (ВРег(СокрЛП(ТелИнициатор)) = ВРег(СокрЛП(ГлобТелефония1.Оператор))) Тогда
		ГлобТелефония1.АбонентВнешний = Конвертация.ПараметрПолучить(Данные,"DestCallerIDNum");
		ГлобТелефония1.КаналСистемный = Конвертация.ПараметрПолучить(Данные,"Channel");
		ГлобТелефония1.Состояние = 2;
	Иначе
		ГлобТелефония1.АбонентВнешний = Конвертация.ПараметрПолучить(Данные,"CallerIDNum");
		ГлобТелефония1.КаналСистемный = Конвертация.ПараметрПолучить(Данные,"DestChannel");
		ГлобТелефония1.Состояние = 3;
	КонецЕсли;

// Нормализуем номер телефона внешнего абонента
//-------------------------------------------------------------------------------------------------
	ГлобТелефония1.АбонентВнешний = Конвертация.ТелефонВнешнийНормализовать(ГлобТелефония1.АбонентВнешний);
	ФильтрРазговораУстановить(ГлобТелефония1.КаналСистемный);
	ГлобТелефония1.КаналИнициатор = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура СобытиеHangup()

// Процедура выполняет теплую инициализацию компоненты телефонии:
// Очищает параметры текущего звонка
// Включает прослушивание линии с фильтрами для режима ожидания
//-------------------------------------------------------------------------------------------------
	ГлобТелефония1.Состояние = ?(СоединениеСуществует(),1,0);
	ГлобТелефония1.КаналСистемный = Неопределено;
	ГлобТелефония1.КаналИнициатор = Неопределено;
	ГлобТелефония1.АбонентВнешний = Неопределено;
	ФильтрОжиданияУстановить();
КонецПроцедуры

//Добавлено из Агрегатора

&НаКлиенте
Функция КомандаOriginate(ТелефонНомер, SYSAGR = "") Экспорт

// Функция выполняет соединение текущего оператора (параметр сеанса "ККЦТелефон") с абонентом
// Звонок оператору выполняется только на его стационарный телефонный аппарат. В случае успешного
// вызова возвращается Истина
//-------------------------------------------------------------------------------------------------
	ОператорСсылка = ЗначенияСервера.ПолучитьЗначениеПараметраСеанса("ККЦТелефон");
	ОператорНомер = ЗначенияСервера.ПолучитьЗначениеРеквизита(ОператорСсылка,"Код");
	АбонентНомер = Конвертация.ТелефонДляВызоваПолучить(ТелефонНомер);

// Проверим правильность заполнения параметров
//-------------------------------------------------------------------------------------------------
	Доступно = (ТипЗнч(ТелефонНомер) = Тип("Строка"));
	Доступно = Доступно И ЗначениеЗаполнено(АбонентНомер);
	Доступно = Доступно И ЗначениеЗаполнено(ОператорНомер);

	Если (Доступно = Истина) Тогда
		ТекстКоманды = 					"Action: Originate" 																	+ Символы.ПС;
		ТекстКоманды = ТекстКоманды + 	"Channel: SIP/" 		+ СокрЛП(ОператорНомер) 										+ Символы.ПС;
		ТекстКоманды = ТекстКоманды + 	"CallerID: " 			+ СокрЛП(ОператорНомер)	+ " <" + СокрЛП(ОператорНомер) + ">" 	+ Символы.ПС;
		ТекстКоманды = ТекстКоманды + 	"Exten: " 				+ СокрЛП(АбонентНомер)											+ Символы.ПС;
		ТекстКоманды = ТекстКоманды + 	"Context: default" 																		+ Символы.ПС;
		ТекстКоманды = ТекстКоманды + 	"Variable: SYSAGR="		+ SYSAGR														+ Символы.ПС;
		//<06.02.2019, =>, уменьшим время дозвона до опеатора контакт-центра при исходящем>
		//ТекстКоманды = ТекстКоманды + 	"Timeout: 30000" 																		+ Символы.ПС;
		ТекстКоманды = ТекстКоманды + 	"Timeout: 10000" 																		+ Символы.ПС;
		//</06.02.2019>
		ТекстКоманды = ТекстКоманды + 	"Priority: 1" 																			+ Символы.ПС;
		ТекстКоманды = ТекстКоманды + 	"Async: True" 														   	   + Символы.ПС + Символы.ПС;

		Если ГлобТелефония1.Клиент.ВыполнитьКоманду(ТекстКоманды) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;

	Возврат Ложь;
КонецФункции

&НаКлиенте
Функция КомандаAtxfer(Канал,ТелефонНомер) Экспорт

// Функция выполняет сопровождаемый перевод звонка в переданном Канале на телефон "ТелефонНомер"
// Возвращает Истину в случае успеха
//-------------------------------------------------------------------------------------------------
	АбонентНомер = Конвертация.ТелефонДляВызоваПолучить(ТелефонНомер);

// Проверим правильность заполнения параметров
//-------------------------------------------------------------------------------------------------
	Доступно = (ТипЗнч(Канал) = Тип("Строка"));
	Доступно = Доступно И ЗначениеЗаполнено(Канал);
	Доступно = Доступно И ЗначениеЗаполнено(АбонентНомер);

	Если (Доступно = Истина) Тогда
		ТекстКоманды = "Action: Atxfer" + Символы.ПС;
		ТекстКоманды = ТекстКоманды + "Channel: " + СокрЛП(Канал) + Символы.ПС;
		ТекстКоманды = ТекстКоманды + "Exten: " + СокрЛП(АбонентНомер) + Символы.ПС;
		ТекстКоманды = ТекстКоманды + "Context: default" + Символы.ПС;
		ТекстКоманды = ТекстКоманды + "Priority: 1" + Символы.ПС + Символы.ПС;

		Если ГлобТелефония1.Клиент.ВыполнитьКоманду(ТекстКоманды) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;

	Возврат Ложь;
КонецФункции

&НаКлиенте
Функция КомандаBlindTransfer(Канал,ТелефонНомер) Экспорт

// Функция выполняет несопровождаемый перевод звонка в переданном Канале на телефон "ТелефонНомер"
// Возвращает Истину в случае успеха
//-------------------------------------------------------------------------------------------------
	АбонентНомер = Конвертация.ТелефонДляВызоваПолучить(ТелефонНомер);

// Проверим правильность заполнения параметров
//-------------------------------------------------------------------------------------------------
	Доступно = (ТипЗнч(Канал) = Тип("Строка"));
	Доступно = Доступно И ЗначениеЗаполнено(Канал);
	Доступно = Доступно И ЗначениеЗаполнено(АбонентНомер);

	Если (Доступно = Истина) Тогда
		ТекстКоманды = "Action: BlindTransfer" + Символы.ПС;
		ТекстКоманды = ТекстКоманды + "Channel: " + СокрЛП(Канал) + Символы.ПС;
		ТекстКоманды = ТекстКоманды + "Exten: " + СокрЛП(АбонентНомер) + Символы.ПС;
		ТекстКоманды = ТекстКоманды + "Context: default" + Символы.ПС + Символы.ПС;

		Если ГлобТелефония1.Клиент.ВыполнитьКоманду(ТекстКоманды) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;

	Возврат Ложь;
КонецФункции
