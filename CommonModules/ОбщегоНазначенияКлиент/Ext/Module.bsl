
////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с внешними приложениями.

// Открывает навигационную ссылку в программе, которая ассоциирована с протоколом навигационной ссылки.
//
// Допустимые протоколы: http, https, e1c, v8help, mailto, tel, skype.
//
// Для открытия проводника или файла в программе просмотра не следует формировать ссылку по протоколу file://
// - для открытия проводника см. ОткрытьПроводник.
// - для открытия файла по расширению см. ОткрытьФайлВПрограммеПросмотра.
//
// Параметры:
//  НавигационнаяСсылка - Строка - ссылка, которую требуется открыть.
//  Оповещение          - ОписаниеОповещения, Неопределено - оповещение о результате открытия.
//                            - если оповещение не задано - в случае ошибки будет показано предупреждение.
//      * ПриложениеЗапущено      - Булево    - Истина, если внешнее приложение не вызвало ошибок при открытии.
//      * ДополнительныеПараметры - Структура - значение, которое было указано при создании объекта ОписаниеОповещения.
//
// Пример:
//  ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку("e1cib/navigationpoint/startpage"); // начальная страница.
//  ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку("v8help://1cv8/QueryLanguageFullTextSearchInData");
//  ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку("https://1c.ru");
//  ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку("mailto:help@1c.ru");
//  ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку("skype:echo123?call");
//
Процедура ОткрытьНавигационнуюСсылку(НавигационнаяСсылка, Знач Оповещение = Неопределено) Экспорт
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		// Особенность платформы: ПерейтиПоНавигационнойСсылке не доступен в толстом клиенте обычного приложения.
		Оповещение = Новый ОписаниеОповещения;
		НачатьЗапускПриложения(Оповещение, НавигационнаяСсылка);
	#Иначе
		ПерейтиПоНавигационнойСсылке(НавигационнаяСсылка);
	#КонецЕсли

КонецПроцедуры
//*************************************************************************************************
// Работа с подсистемой взаимодействия
//*************************************************************************************************

&НаКлиенте
Процедура СВДОбработкаСкрытыхСообщений(Сообщение,ДополнительныеПараметры) Экспорт

// Проверим правильность полученных параметров
// Убедимся в том, что полученное сообщение было отправлено не более 10 секунд назад
//-------------------------------------------------------------------------------------------------
	Доступно = (ТипЗнч(Сообщение) = Тип("СообщениеСистемыВзаимодействия"));
	Доступно = Доступно И ((ЗначенияСервера.ТекущаяДатаСервер() - Сообщение.Дата) < 10);
	Доступно = Доступно И (ТипЗнч(Сообщение.Данные) = Тип("Структура"));

// Если мы оказались здесь, значит получено актуальное сообщение системы взаимодействия
// Сформируем оповещение для всех открытых форм приложения (параметр оповещения - Сообщение.Данные)
//-------------------------------------------------------------------------------------------------
	Если (Доступно = Истина) Тогда
		Оповестить("СкрытыйКанал",Сообщение.Данные,"СистемаВзаимодействия");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СВДОбработкаДействияСообщения(Сообщение,Действие,ДополнительныеПараметры) Экспорт

// Процедура вызывается в момент перехода пользователя по гиперссылке из сообщения-оповещения
// Вызов процедуры всегда выполняется при интерактивном нажатии гиперссылки. В параметре "Действие"
// обязательно должна передаваться структура с параметрами требуемого действия
//-------------------------------------------------------------------------------------------------
	Если (ТипЗнч(Сообщение) = Тип("СообщениеСистемыВзаимодействия")) Тогда
		Попытка ОткрытьЗначение(Действие); Исключение КонецПопытки;
	КонецЕсли;
КонецПроцедуры

//====================================================================================================================== 

&НаКлиенте
Функция ТЦПроверитьДопустимыйПроцентНаценки(Объект, Отказ) Экспорт
	МассивРасхождений = Новый Массив;
	
	Если Отказ=Истина Тогда                                                     
		Возврат МассивРасхождений;		
	КонецЕсли; 
	
	Для каждого текСтрока Из Объект.Товары Цикл
		ОграничениеСкидки = Ценообразование.ПолучитьОграничениеСкидкиПоТовару(Объект.ТочкаОформления, текСтрока.Номенклатура, Объект.ДоговорВзаиморасчетов); 
		Если ТипЗнч(ОграничениеСкидки)<>Тип("Структура") Тогда
			Продолжить;			
		КонецЕсли; 
		
		СтрЗапроса = Новый Структура;
		СтрЗапроса.Вставить("Дата", Объект.Дата);
		СтрЗапроса.Вставить("Товар", текСтрока.Номенклатура);
		СтрЗапроса.Вставить("ТипЦены", ОграничениеСкидки.ТипЦены);
		СтрЗапроса.Вставить("ТочкаОформления", Объект.ТочкаОформления);
		
		МинимальнаяЦена = Ценообразование.ТоварЦена(СтрЗапроса);
		МинимальнаяЦена = МинимальнаяЦена - Окр((МинимальнаяЦена*ОграничениеСкидки.ПроцентСкидки)/100, 2);
		МинимальнаяЦена = ?(МинимальнаяЦена<0, 0, МинимальнаяЦена);
		
		Если ОграничениеСкидки.Свойство("ЦенаДоговора")=Истина Тогда
			МинимальнаяЦена = Мин(МинимальнаяЦена, ОграничениеСкидки.ЦенаДоговора);
		КонецЕсли; 
		
		Если МинимальнаяЦена>текСтрока.Цена Тогда
			СтрокаРасхождение = Новый Структура;
			СтрокаРасхождение.Вставить("Идентификатор", текСтрока.ПолучитьИдентификатор());
			СтрокаРасхождение.Вставить("НомерСтроки", текСтрока.НомерСтроки);
			СтрокаРасхождение.Вставить("МинимальнаяЦена", МинимальнаяЦена);
			СтрокаРасхождение.Вставить("ОписаниеОграничения", Формат(ОграничениеСкидки.ПроцентСкидки, "ЧН=0; ЧГ=0")+"% от типа цен """+СокрЛП(ОграничениеСкидки.ТипЦены)+"""");
			
			МассивРасхождений.Добавить(СтрокаРасхождение);
			
			Отказ = Истина;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат МассивРасхождений;		
КонецФункции
 