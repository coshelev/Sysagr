//*************************************************************************************************
// Продажи автомобилей
//*************************************************************************************************
Процедура ПродажиЗагрузить() Экспорт
		
	//Загрузи продажи и задачи лояльности
	ДатаПродажи 	= ТекущаяДата()- 2*24*60*60;
	Начало 			= НачалоДня(ДатаПродажи);
	Окончание 		= КонецДня(ДатаПродажи);
	ЗагрузиПродажиАвто_И_ЗадачиЛояльности(Начало, Окончание);
	
	//Обнови контрагентов
	ОбновиКонтрагентовИзПродаж();	
КонецПроцедуры

Процедура ОбновиКонтрагентовИзПродаж() Экспорт
	
	//Обнови контрагентов ОУ
	КонсолидацияСервер.ДобавьОбновиКонтрагентовИзПродаж(Справочники.ИБ_ТипыДанных.НайтиПоКоду("000000009"));	
КонецПроцедуры

Функция ЗагрузиПродажиАвто_И_ЗадачиЛояльности(ДатаНачала, ДатаОкончания) Экспорт
		
	ТЗ = ПрочитайПродажиАвтоИзОУ(ДатаНачала, ДатаОкончания);
	Если ТЗ.Количество()= 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИсточникДанных = Справочники.ИБ_ИсточникиДанных.НайтиПоРеквизиту("Префикс", "OU");
	Если ИсточникДанных = Неопределено Тогда
		ЗаписьЖурналаРегистрации("ЗагрузиПродажиАвто_И_ЗадачиЛояльности", УровеньЖурналаРегистрации.Ошибка, , "Префикс = OU", " Не найден элемент справочника по реквизиту");
		Возврат Ложь;
	КонецЕсли;
	
	БИ = ОбщегоНазначения.ПолучитьПодключениеБД(ИсточникДанных.ПараметрыСоединения);
	Если  БИ = Неопределено Тогда
		ЗаписьЖурналаРегистрации("ЗагрузиПродажиАвто_И_ЗадачиЛояльности", УровеньЖурналаРегистрации.Ошибка, "Источник.ПараметрыСоединения = "+ ИсточникДанных.ПараметрыСоединения, "Ошибка подключения к информационной базе");
		Возврат Ложь;
	КонецЕсли;
	
	ПлановыйИсполнитель = Справочники.КонтактЦентры.НайтиПоКоду("000000001");
	
	//Запиши продажи в регистр сведений Продажи, и если записали - запиши задачу
	Для Каждого э Из ТЗ Цикл	
		
		Если Не ЗначениеЗаполнено(э["Покупатель"]) Тогда
			Продолжить
		КонецЕсли; 
					
		СигнатураДокумента = "OU#"+э["ГУИДДокументаИсточникаСтрокой"];
				
		Выполнено = РегистрыСведений.Продажи.Загрузить(
		СигнатураДокумента, 
		э["УчетнаяПрограмма"], 
		э["ТочкаОформления"], 
		э["Дата"],
		э["Номер"],
		э["ДопДата"],
		"Продажа авто",
		э["НаименованиеАвто"],
		э["Комплектация"],
		э["Покупатель"], 
		э["НомерТелефонаИзСделки"],
		э["Сотрудник"],
		,
		э["Заказчик"],
		э["КонтактноеЛицо"], 
		э["СотрудникГУИД"],
		э["Количество"],
		э["НавСсылка"],
		э["Магистральный"]); 
		
		// Запиши задачи в регистр сведений ЗадачиЗвонокЛояльности
		Если Выполнено Тогда
			ТекДата = ТекущаяДата();
			РегистрыСведений.ЗадачиЗвонокЛояльности.Загрузить(э["Покупатель"], СигнатураДокумента, , Перечисления.ТипЗадачи.ЛояльностьПродажАвто,
						ПлановыйИсполнитель, , э["НомерТелефонаИзСделки"], э["НомерТелефона"], , ТекДата, , ТекДата+1*8*60*60); // Задача актуальна в течении 8-ми часов с момента постановки
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;	
	
КонецФункции

Функция ПрочитайПродажиАвтоИзОУ(ДатаНачала, ДатаОкончания) Экспорт
	
	ТЗ = Новый ТаблицаЗначений();
	
	ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ = ТЗ;
	
	ИсточникДанных = Справочники.ИБ_ИсточникиДанных.НайтиПоРеквизиту("Префикс", "OU");
	Если ИсточникДанных = Неопределено Тогда
		ЗаписьЖурналаРегистрации("ПрочитайПродажиАвтоИзОУ", УровеньЖурналаРегистрации.Ошибка,, "Префикс = OU", "Не найден элемент справочника по реквизиту");
		Возврат ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ;
	КонецЕсли;
	
	БИ = ОбщегоНазначения.ПолучитьПодключениеБД(ИсточникДанных.ПараметрыСоединения);
	Если  БИ = Неопределено Тогда
		ЗаписьЖурналаРегистрации("ПрочитайПродажиАвтоИзОУ", УровеньЖурналаРегистрации.Ошибка,, СтрШаблон("Источник.ПараметрыСоединения = %1", ИсточникДанных.ПараметрыСоединения), "Ошибка подключения к информационной базе");
		Возврат ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ;
	КонецЕсли;
	
	//Получи список контрагентов, по которым не нужно проверять лояльность
	НеПроверять = БИ.Справочники.ЗначенияСвойствОбъектов.ЛояльностьАвтосалон_НеПроверятьКонтрагентов.Комментарий;
	БИ_Мс = БИ.NewObject("Массив");
	Если ЗначениеЗаполнено(НеПроверять) Тогда
		Чт = Новый ЧтениеJSON();
		Чт.УстановитьСтроку(НеПроверять);
		Попытка
			Фаб = ПрочитатьJSON(Чт);
		Исключение
		    Фаб = "";
		КонецПопытки;
		Мс = Новый Массив();
		Доступно =  ТипЗнч(Фаб) = Тип("Структура") И Фаб.Свойство("Корень") И ТипЗнч(Фаб.Корень)=Тип("Массив") И Фаб.Корень.Количество()>0;
		Если Доступно Тогда
			Для Каждого Э Из Фаб.Корень Цикл
				Мс.Добавить(Э.Контрагент);
			КонецЦикла;
		КонецЕсли;
		Если Мс.Количество()>0 Тогда
			Для Каждого Э Из Мс Цикл
				БИ_Мс.Добавить(БИ.Справочники.Контрагенты.ПолучитьСсылку(БИ.NewObject("УникальныйИдентификатор",Э)));	
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	//Получи список контрагентов, по которым нужно проверять лояльность один раз за отчетный период - т.н. контрагенты категории "Габарит"
	ЗвонитьЕдиножды = БИ.Справочники.ЗначенияСвойствОбъектов.ЛояльностьАвтосалон_КонтрагентыЗвонитьЕдиножды.Комментарий;
	БИ_мсЗвонитьЕдиножды = БИ.NewObject("Массив");
	Если ЗначениеЗаполнено(ЗвонитьЕдиножды) Тогда
		Чт = Новый ЧтениеJSON();
		Чт.УстановитьСтроку(ЗвонитьЕдиножды);
		Попытка
			Фаб = ПрочитатьJSON(Чт);
		Исключение
		    Фаб = "";
		КонецПопытки;
		мсЗвонитьЕдиножды = Новый Массив();
		Доступно =  ТипЗнч(Фаб) = Тип("Структура") И Фаб.Свойство("Корень") И ТипЗнч(Фаб.Корень)=Тип("Массив") И Фаб.Корень.Количество()>0;
		Если Доступно Тогда
			Для Каждого Э Из Фаб.Корень Цикл
				мсЗвонитьЕдиножды.Добавить(Э.Контрагент);
			КонецЦикла;
		КонецЕсли;
		Если мсЗвонитьЕдиножды.Количество()>0 Тогда
			Для Каждого Э Из мсЗвонитьЕдиножды Цикл
				БИ_мсЗвонитьЕдиножды.Добавить(БИ.Справочники.Контрагенты.ПолучитьСсылку(БИ.NewObject("УникальныйИдентификатор",Э)));	
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	БИ_Запрос = БИ.NewObject("Запрос");
	БИ_Запрос.Текст = 	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Контрагенты.Ссылка КАК Ссылка,
	|	Контрагенты.ИНН КАК ИНН
	|ПОМЕСТИТЬ ВТ0101
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка В(&НеПроверять)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ01.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ02_НеПроверятьКонтрагентов
	|ИЗ
	|	ВТ0101 КАК ВТ01
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН В
	|			(ВЫБРАТЬ
	|				ВТ0101.ИНН
	|			ИЗ
	|				ВТ0101
	|			ГДЕ
	|				ВТ0101.ИНН <> """")
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Контрагенты.Ссылка КАК Ссылка,
	|	Контрагенты.ИНН КАК ИНН
	|ПОМЕСТИТЬ ВТ04
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка В(&ЗвонитьЕдиножды)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ04.Ссылка КАК Контрагент,
	|	ИСТИНА КАК ЗвонитьЕдиножды
	|ПОМЕСТИТЬ ВТ05_ЗвонитьЕдиножды
	|ИЗ
	|	ВТ04 КАК ВТ04
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Контрагенты.Ссылка,
	|	ИСТИНА
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН В
	|			(ВЫБРАТЬ
	|				ВТ04.ИНН
	|			ИЗ
	|				ВТ04
	|			ГДЕ
	|				ВТ04.ИНН <> """")
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НЭ.Ссылка КАК Ссылка,
	|	НЭ.Ссылка.Номер КАК Номер,
	|	НЭ.Ссылка.Дата КАК Дата,
	|	НЭ.Ссылка.УчетнаяПрограмма.Наименование КАК УчетнаяПрограмма,
	|	НЭ.Ссылка.СотрудникОтветственный.Наименование КАК Сотрудник,
	|	НЭ.Ссылка.Основание.СотрудникОтветственный КАК СотрудникСсылка,
	|	НЭ.Ссылка.ТочкаОформления.Наименование КАК ТочкаОформления,
	|	ВЫБОР
	|		КОГДА НЭ.Ссылка.Основание.Лизингополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА НЭ.Ссылка.Получатель.Наименование
	|		ИНАЧЕ НЭ.Ссылка.Основание.Лизингополучатель.Наименование
	|	КОНЕЦ КАК Покупатель,
	|	ВЫБОР
	|		КОГДА НЭ.Ссылка.Основание.Лизингополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА НЭ.Ссылка.Получатель
	|		ИНАЧЕ НЭ.Ссылка.Основание.Лизингополучатель
	|	КОНЕЦ КАК ПокупательСсылка,
	|	ВЫБОР
	|		КОГДА НЭ.Ссылка.Основание.Лизингополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА НЭ.Ссылка.Получатель.НомерТелефона
	|		ИНАЧЕ НЭ.Ссылка.Основание.Лизингополучатель.НомерТелефона
	|	КОНЕЦ КАК НомерТелефона,
	|	НЭ.Ссылка.Основание.НомерТелефона КАК НомерТелефонаИзСделки,
	|	НЭ.Ссылка.Основание.Заголовок КАК КонтактноеЛицо,
	|	СУММА(1) КАК КолВоПроданныхАвто
	|ПОМЕСТИТЬ ВТ01
	|ИЗ
	|	Документ.НЭРеализация.НомерныеЭлементы КАК НЭ
	|ГДЕ
	|	НЭ.Ссылка.Проведен = ИСТИНА
	|	И НЭ.Ссылка.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаНачала, ДЕНЬ) И КОНЕЦПЕРИОДА(&ДатаОкончания, ДЕНЬ)
	|	И НЕ НЭ.Ссылка.УчетнаяПрограмма.Наименование ПОДОБНО ""%Владимир%""
	|	И (НЭ.Ссылка.УчетнаяПрограмма.Наименование ПОДОБНО ""%Собственные%""
	|			ИЛИ НЭ.Ссылка.УчетнаяПрограмма.Наименование ПОДОБНО ""%Активные продажи%""
	|			ИЛИ НЭ.Ссылка.УчетнаяПрограмма.Наименование ПОДОБНО ""%Ford%""
	|			ИЛИ НЭ.Ссылка.УчетнаяПрограмма.Наименование ПОДОБНО ""%УАЗ%""
	|			ИЛИ НЭ.Ссылка.УчетнаяПрограмма.Наименование ПОДОБНО ""%CHERY%""
	|			ИЛИ НЭ.Ссылка.УчетнаяПрограмма.Наименование ПОДОБНО ""%КАМАЗ%""
	|			ИЛИ НЭ.Ссылка.УчетнаяПрограмма.Наименование = ""МТЗ/Нижний Новгород""
	|			ИЛИ НЭ.Ссылка.УчетнаяПрограмма.Наименование = ""ГАЗ/Нижний Новгород/Ларина/Спецтехника"")
	|	И НЭ.Ссылка.Покупатель.ТипОтношений <> ЗНАЧЕНИЕ(Перечисление.ТипОтношений.Субдилер)
	|	И НЕ НЭ.Ссылка.ТочкаОформления.Код В (&ИсключитьТочкиОформления)
	|
	|СГРУППИРОВАТЬ ПО
	|	НЭ.Ссылка,
	|	НЭ.Ссылка.Номер,
	|	НЭ.Ссылка.Дата,
	|	НЭ.Ссылка.СотрудникОтветственный.Наименование,
	|	НЭ.Ссылка.ТочкаОформления.Наименование,
	|	НЭ.Ссылка.УчетнаяПрограмма.Наименование,
	|	ВЫБОР
	|		КОГДА НЭ.Ссылка.Основание.Лизингополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА НЭ.Ссылка.Получатель
	|		ИНАЧЕ НЭ.Ссылка.Основание.Лизингополучатель
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЭ.Ссылка.Основание.Лизингополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА НЭ.Ссылка.Получатель.Наименование
	|		ИНАЧЕ НЭ.Ссылка.Основание.Лизингополучатель.Наименование
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЭ.Ссылка.Основание.Лизингополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА НЭ.Ссылка.Получатель.НомерТелефона
	|		ИНАЧЕ НЭ.Ссылка.Основание.Лизингополучатель.НомерТелефона
	|	КОНЕЦ,
	|	НЭ.Ссылка.Основание.НомерТелефона,
	|	НЭ.Ссылка.Основание.Заголовок,
	|	НЭ.Ссылка.Основание.СотрудникОтветственный
	|
	|ИМЕЮЩИЕ
	|	СУММА(1) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НЭ.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ВТ01.КолВоПроданныхАвто > 1
	|			ТОГДА &НЕСКОЛЬКО_АВТОМОБИЛЕЙ
	|		ИНАЧЕ НЭ.НомернойЭлемент.Наименование
	|	КОНЕЦ КАК НаименованиеАвто,
	|	ВЫБОР
	|		КОГДА ВТ01.КолВоПроданныхАвто > 1
	|			ТОГДА &НЕСКОЛЬКО_АВТОМОБИЛЕЙ
	|		ИНАЧЕ НЭ.НомернойЭлемент.НомерВин
	|	КОНЕЦ КАК НомерВин,
	|	ВЫБОР
	|		КОГДА ВТ01.КолВоПроданныхАвто > 1
	|			ТОГДА &НЕСКОЛЬКО_АВТОМОБИЛЕЙ
	|		ИНАЧЕ НЭ.НомернойЭлемент.Модель.Наименование
	|	КОНЕЦ КАК Модель,
	|	ВТ01.КолВоПроданныхАвто КАК КолВоПроданныхАвто
	|ПОМЕСТИТЬ ВТ02
	|ИЗ
	|	Документ.НЭРеализация.НомерныеЭлементы КАК НЭ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ01 КАК ВТ01
	|		ПО НЭ.Ссылка = ВТ01.Ссылка
	|ГДЕ
	|	НЭ.Ссылка.Проведен = ИСТИНА
	|	И НЭ.Ссылка.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаНачала, ДЕНЬ) И КОНЕЦПЕРИОДА(&ДатаОкончания, ДЕНЬ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ02.Ссылка КАК Ссылка,
	|	ВТ02.НаименованиеАвто КАК НаименованиеАвто,
	|	ВТ02.НомерВин КАК НомерВин,
	|	ВТ02.Модель КАК Модель,
	|	ВТ02.КолВоПроданныхАвто КАК КолВоПроданныхАвто
	|ПОМЕСТИТЬ ВТ03
	|ИЗ
	|	ВТ02 КАК ВТ02
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ02.Ссылка,
	|	ВТ02.Модель,
	|	ВТ02.НомерВин,
	|	ВТ02.НаименованиеАвто,
	|	ВТ02.КолВоПроданныхАвто
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ     
	|	ВТ01.Ссылка КАК Ссылка,	
	|	ПРЕДСТАВЛЕНИЕ(УНИКАЛЬНЫЙИДЕНТИФИКАТОР(ВТ01.Ссылка)) КАК ГУИДДокументаИсточникаСтрокой,
	|	ВТ01.Номер КАК Номер,
	|	ВТ01.Дата КАК Дата,
	|	ВТ01.УчетнаяПрограмма КАК УчетнаяПрограмма,
	|	ВТ01.Сотрудник КАК Сотрудник,
	|	ПРЕДСТАВЛЕНИЕ(УНИКАЛЬНЫЙИДЕНТИФИКАТОР(ВТ01.СотрудникСсылка)) КАК СотрудникГУИД,
	|	ВТ01.ТочкаОформления КАК ТочкаОформления,
	|	ВТ01.Покупатель КАК Покупатель,
	|	ПРЕДСТАВЛЕНИЕ(УНИКАЛЬНЫЙИДЕНТИФИКАТОР(ВТ01.ПокупательСсылка)) КАК Заказчик,
	|	ВЫБОР
	|		КОГДА ВТ01.ПокупательСсылка.ТипОтношений = ЗНАЧЕНИЕ(Перечисление.ТипОтношений.Магистральный)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Магистральный,
	|	ВТ01.КонтактноеЛицо КАК КонтактноеЛицо,
	|	ВТ01.НомерТелефона КАК НомерТелефона,
	|	ВТ01.НомерТелефонаИзСделки КАК НомерТелефонаИзСделки,
	|	ВТ03.НаименованиеАвто КАК НаименованиеАвто,
	|	ВТ03.НомерВин КАК НомерВин,
	|	ВТ03.Модель КАК Модель,
	|	ВТ03.КолВоПроданныхАвто КАК КолВоПроданныхАвто,
	|	ВТ01.КолВоПроданныхАвто КАК Количество
	|ИЗ
	|	ВТ03 КАК ВТ03
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ01 КАК ВТ01
	|		ПО (ВТ01.Ссылка = ВТ03.Ссылка)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ВТ01.ПокупательСсылка В
	|					(ВЫБРАТЬ
	|						ВТ02.Ссылка
	|					ИЗ
	|						ВТ02_НеПроверятьКонтрагентов КАК ВТ02)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА ВТ01.ПокупательСсылка В
	|						(ВЫБРАТЬ
	|							ВТ05.Контрагент
	|						ИЗ
	|							ВТ05_ЗвонитьЕдиножды КАК ВТ05)
	|					И ДЕНЬ(ВТ01.Дата) В (26, 27, 28, 29, 30, 31, 1, 2)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	
	БИ_Запрос.УстановитьПараметр("НеПроверять",					БИ_Мс);
	БИ_Запрос.УстановитьПараметр("ЗвонитьЕдиножды",				БИ_мсЗвонитьЕдиножды);
	БИ_Запрос.УстановитьПараметр("ДатаНачала", 					ДатаНачала);
	БИ_Запрос.УстановитьПараметр("ДатаОкончания", 				ДатаОкончания);
	БИ_Запрос.УстановитьПараметр("НЕСКОЛЬКО_АВТОМОБИЛЕЙ", 		"НЕСКОЛЬКО_АВТОМОБИЛЕЙ");	
	БИ_Запрос.УстановитьПараметр("ИсключитьТочкиОформления", 	"000000009");  // Ларина Региональный отдел
	
	БИ_РезультатЗапроса = БИ_Запрос.Выполнить();	
	Если БИ_РезультатЗапроса.Пустой() Тогда
		Возврат ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ;
	КонецЕсли;
	
	БИ_Выборка = БИ_РезультатЗапроса.Выбрать();
	
	ТипСтрока 	= ОбщегоНазначения.ТипСтрока();
	ТипДата		= ОбщегоНазначения.ТипДата(); 		
	ТипЧисло	= ОбщегоНазначения.ТипЧисло();
	ТипБулево	= ОбщегоНазначения.ТипБулево();
	
	ТЗ.Колонки.Добавить("ГУИДДокументаИсточникаСтрокой",	ТипСтрока);		//	ГУИД документ в базе-источнике
	ТЗ.Колонки.Добавить("Номер",							ТипСтрока);		//	Номер документа
	ТЗ.Колонки.Добавить("Дата",								ТипДата);		//	Дата документа
	ТЗ.Колонки.Добавить("ДопДата",							ТипДата);		//	Дата документа
	ТЗ.Колонки.Добавить("УчетнаяПрограмма",					ТипСтрока);		//	Учетная программа реализации
	ТЗ.Колонки.Добавить("Сотрудник",						ТипСтрока);     //	Сотрудник, ответственный за продажу
	ТЗ.Колонки.Добавить("СотрудникГУИД",					ТипСтрока);		//	ГУИД сотрудника в базе-источнике
	ТЗ.Колонки.Добавить("ТочкаОформления",					ТипСтрока);		//	Точка оформления продажи
	ТЗ.Колонки.Добавить("Покупатель",						ТипСтрока);		//	Покупатель или лизингополучатель (точнее - наименование) строкой
	ТЗ.Колонки.Добавить("КонтактноеЛицо",					ТипСтрока);     //	КонтактноеЛицо. Пока не использую
	ТЗ.Колонки.Добавить("НомерТелефона",					ТипСтрока);		//	Номер телефона покупателя, указанный в документе Сделка
	ТЗ.Колонки.Добавить("НаименованиеАвто",					ТипСтрока);		//	Название автомобиля
	ТЗ.Колонки.Добавить("НомерВин",							ТипСтрока);		//	VIN автомобиля
	ТЗ.Колонки.Добавить("Модель",							ТипСтрока);		//	Модель автомобиля	
	ТЗ.Колонки.Добавить("Комплектация",						ТипСтрока);		//	С 12.03.2021 - БРЕНД из названия УЧЕТНОЙ ПРОГРАММЫ
	ТЗ.Колонки.Добавить("КолВоПроданныхАвто",				ТипСтрока);		//  Количество проданных автомобилей в документе строкой. Если несколько тогда будет "НЕСКОЛЬКО"
	ТЗ.Колонки.Добавить("Заказчик",							ТипСтрока);		//  Покупатель или лизингополучатель - ГУИД из базы источника
	ТЗ.Колонки.Добавить("Магистральный",					ТипБулево);		//  Признак магистрального
	ТЗ.Колонки.Добавить("НомерТелефонаИзСделки",			ТипСтрока);		//	Другие телефоны контрагента (из сделки) 
	ТЗ.Колонки.Добавить("Количество",						ТипЧисло);
	ТЗ.Колонки.Добавить("НавСсылка",					 	ТипСтрока);		//	навигационная ссылка на документ

	Пока БИ_Выборка.Следующий() Цикл
		i = ТЗ.Добавить();
		ЗаполнитьЗначенияСвойств(i, БИ_Выборка, "ГУИДДокументаИсточникаСтрокой, Номер, Дата, УчетнаяПрограмма, Сотрудник, СотрудникГУИД, ТочкаОформления, Покупатель, Заказчик, Магистральный, КонтактноеЛицо, НомерТелефона, НаименованиеАвто, НомерВин, Модель, КолВоПроданныхАвто, НомерТелефонаИзСделки, Количество");
		
		//Поле тз.Комплектация мiппится в поле РС.Продажи.Характеристика - с 12.03.2021 фиксируется БРЕНД из названия УЧЕТНОЙ ПРОГРАММЫ
		ПозицияСлеша 						= 	СтрНайти(БИ_Выборка.УчетнаяПрограмма, "/");
		i["Комплектация"] 					= 	?(ПозицияСлеша = 0, "", Лев(БИ_Выборка.УчетнаяПрограмма, ПозицияСлеша-1));
		
		//Переопредели название авто, если iто несколько автомобилей - добавь бренд в название авто
		Доступно = i["НаименованиеАвто"] = "НЕСКОЛЬКО_АВТОМОБИЛЕЙ" И ЗначениеЗаполнено(i["Комплектация"]);
		i["НаименованиеАвто"] = ?(Доступно = Ложь, i["НаименованиеАвто"], СтрШаблон("%1-%2", i["Комплектация"], i["НаименованиеАвто"]));
		
		i["НавСсылка"]						=	БИ.ПолучитьНавигационнуюСсылку(БИ_Выборка.Ссылка);		
	КонецЦикла;
	ОбщегоНазначения.РазорватьПодключениеБД(БИ);
	
	Для Каждого i Из ТЗ Цикл
		i["НомерТелефона"] 			= Конвертация.ТелефонВнешнийНормализовать(i["НомерТелефона"]);
		i["НомерТелефонаИзСделки"]  = Конвертация.ТелефонВнешнийНормализовать(i["НомерТелефонаИзСделки"]); 
	КонецЦикла;
	
	Возврат ТЗ
КонецФункции

Функция ЗагрузиРемонтыАвто_И_ЗадачиЛояльности_ОУСТО() Экспорт
	ТекДата 		= ТекущаяДата();
	Окончание   	= ТекущаяДата();
	Начало 			= ДобавитьМесяц(ТекДата,-2); 

	ИсточникДанных = Справочники.ИБ_ИсточникиДанных.НайтиПоРеквизиту("Префикс", "OU");
	Если ИсточникДанных = Неопределено Тогда
		ЗаписьЖурналаРегистрации("ПрочитайПродажиАвтоИзОУ", УровеньЖурналаРегистрации.Ошибка, , "Префикс = ОУ", " Не найден элемент справочника по реквизиту"); 
		Возврат "";
	КонецЕсли;
	ЗагрузиРемонтыАвто_И_СоздайЗадачиЛояльности_Из_ОУСТО(ИсточникДанных.ПараметрыСоединения, "SK", Начало, Окончание);	
КонецФункции

Функция  ЗагрузиРемонтыАвто_И_ЗадачиЛояльности_Владимир() Экспорт
	ТекДата 		= ТекущаяДата();
	ИмяФайла ="\\vladfs\Exchange1cAgr\zn.xml";
	
	ЗагрузиРемонтыАвто_И_ЗадачиЛояльности_Из_Владимира(ИмяФайла, "VA", ТекДата, ТекДата);	
КонецФункции

Функция ЗагрузиРемонтыАвто_И_СоздайЗадачиЛояльности_Из_ОУСТО(ПараметрыПодключения, ПрефиксБазы, ДатаНачала, ДатаОкончания) Экспорт
	
	//Прочитай ремонты
	ТЗ = ПрочитайРемонты_Из_ОУСТО(ПараметрыПодключения, ПрефиксБазы, ДатаНачала, ДатаОкончания);
	Если ТЗ.Количество()= 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПлановыйИсполнитель		 	= 	Справочники.КонтактЦентры.НайтиПоКоду("000000001");	// Плановый исполнитель задачи
	ТекДата						=	ТекущаяДата();	
	ДатаПостановки		 		= 	ТекДата;	// Дата постановки задачи
	ДатаАктуальности			=	ТекДата;	// Дата актуальности задачи
	
	//Запиши продажи в регистр сведений Продажи
	Для Каждого э Из ТЗ Цикл	
		
		Если э["ЗвонитьЕдиножды"] Тогда
			//Если уже есть анкета в отчетном периоде - не грузим
			Запрос = Новый Запрос();
			Запрос.Текст = 
			"ВЫБРАТЬ 	ПЕРВЫЕ 1 Анкеты.Ответ КАК Ответ
			|ИЗ 		РегистрСведений.АнкетыРасширенные КАК Анкеты ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Продажи КАК Продажи ПО Анкеты.СигнатураЗадачQ = Продажи.Сигнатура
			|ГДЕ 		Анкеты.Период МЕЖДУ НАЧАЛОПЕРИОДА(&Окончание, МЕСЯЦ) И &Окончание И Продажи.Заказчик = &Заказчик";
			Запрос.УстановитьПараметр("Окончание", 	ДатаОкончания);
			Запрос.УстановитьПараметр("Заказчик", 	э["Заказчик"]);
			Если Не Запрос.Выполнить().Пустой() Тогда
				Продолжить;
			КонецЕсли;
			
			//Если есть открытая задача в отчетном периоде - не грузим
			Запрос = Новый Запрос();
			Запрос.Текст = 
			"ВЫБРАТЬ 	Продажи.Сигнатура КАК Сигнатура
			|ИЗ 		РегистрСведений.Продажи КАК Продажи ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиЗвонокЛояльности КАК ЗадачиЗвонокЛояльности
			|			ПО Продажи.Сигнатура = ЗадачиЗвонокЛояльности.СигнатураПродажи
			|ГДЕ		Продажи.Заказчик = &Заказчик И ЗадачиЗвонокЛояльности.ДатаЗакрытия = ДАТАВРЕМЯ(1,1,1)";
			Запрос.УстановитьПараметр("Заказчик", э["Заказчик"]);
			Если Не Запрос.Выполнить().Пустой() Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		СигнатураДокумента = э["ИдВнешнейИБ"]+"#"+э["ГУИДДокументаИсточникаСтрокой"];
		Выполнено = РегистрыСведений.Продажи.Загрузить(СигнатураДокумента, э["УчетнаяПрограмма"], э["ТочкаОформления"], э["Дата"], э["Номер"],
		э["ДатаЗакрытия"],
		"Ремонт авто",
		э["НаименованиеАвто"],
		э["Комплектация"],
		э["Покупатель"],
		э["НомерТелефона"],
		э["Сотрудник"],
		э["ДругиеСотрудники"],
		э["Заказчик"],
		э["КонтактноеЛицо"],
		,
		,
		,
		э["Машинозаезд"],
		э["ТочкаОформленияЗаказНаряда"]); 
		
		Если Выполнено Тогда
			//Запиши машинозаезд
			РегистрыСведений.ПродажиМашинозаезды.Загрузить(э["Машинозаезд"], э["МашинозаездНомер"], э["МашинозаездДата"], э["МашинозаездДатаЗакрытия"]);
			
			// Запиши задачу лояльности
			РегистрыСведений.ЗадачиЗвонокЛояльности.Загрузить(э["Покупатель"], СигнатураДокумента, , Перечисления.ТипЗадачи.ЛояльностьРемонтаАвто, ПлановыйИсполнитель, ,
																э["НомерТелефона"], , , ДатаПостановки, ,ДатаАктуальности); // Задача актуальна в течении 8-ми часов с момента постановки
		КонецЕсли;
	КонецЦикла;
	
	//Закрой открытые задачи 
	АвтозакрытыеЗадачи = ЗакройОткрытыеЗадачиРемонтаПриЗагрузкеСвежихЗадач(ДатаПостановки);
	
	//Если есть автозакрытые задачи - сгруппируй их в пакеты
	СпакетируйАвтозакрытыеЗадачи(АвтозакрытыеЗадачи);
	
	Возврат Истина;
	
КонецФункции

Функция ЗакройОткрытыеЗадачиРемонтаПриЗагрузкеСвежихЗадач(ДатаПостановки)
	//Закрывает автоматически созданные в прошлые периоды открытые задачи, по которым не звонили или недозвонились
	//Параметры:	ДатаПостановки 	(дата)				- дата постановки новых задач 
	//Возвращает массив закрытых автозакрытием зада
	
	ЗакрытыеЗадачи	= Новый Массив();
	
	Доступно =  ТипЗнч(ДатаПостановки) = Тип("Дата") И 	ЗначениеЗаполнено(ДатаПостановки);
	Если Не Доступно Тогда
		Возврат ЗакрытыеЗадачи;
	КонецЕсли;
	
	//Закрой ранее загруженные задачи
	Запрос = Новый Запрос();
	Запрос.Текст =	
	"ВЫБРАТЬ
	|	Задачи.СигнатураПродажи КАК СигнатураПродажи,
	|	Задачи.Телефон КАК Телефон,
	|	Продажи.Точка КАК Точка,
	|	Продажи.Контрагент КАК Покупатель,
	|	Продажи.Машинозаезд КАК Машинозаезд
	|ПОМЕСТИТЬ ВТ02_НовыеОткрытыеЗадачи
	|ИЗ
	|	РегистрСведений.ЗадачиЗвонокЛояльности КАК Задачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Продажи КАК Продажи
	|		ПО Задачи.СигнатураПродажи = Продажи.Сигнатура
	|ГДЕ
	|	Задачи.Тип = ЗНАЧЕНИЕ(Перечисление.ТипЗадачи.ЛояльностьРемонтаАвто)
	|	И ПОДСТРОКА(ВЫРАЗИТЬ(Задачи.СигнатураПродажи КАК СТРОКА(39)), 1, 2) = ""SK""
	|	И Задачи.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
	|	И НАЧАЛОПЕРИОДА(Задачи.ДатаПостановки, ДЕНЬ) = НАЧАЛОПЕРИОДА(&ДатаПостановки, ДЕНЬ)
	|	И НЕ Продажи.ХарактеристикаОбъекта ПОДОБНО ""%УАЗ%""
	|	И НЕ Продажи.ХарактеристикаОбъекта ПОДОБНО ""%Ford%""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Задачи.СигнатураПродажи КАК СуществующаяОткрытаяЗадача,
	|	Задачи.НапоминаниеПерезвонить КАК НапоминаниеПерезвонить,
	|	Задачи.Телефон КАК Телефон,
	|	Продажи.Контрагент КАК Покупатель,
	|	Продажи.Точка КАК Точка,
	|	Продажи.Машинозаезд КАК Машинозаезд
	|ПОМЕСТИТЬ ВТ03_РанееСуществовашиеЗадачи
	|ИЗ
	|	РегистрСведений.ЗадачиЗвонокЛояльности КАК Задачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Продажи КАК Продажи
	|		ПО Задачи.СигнатураПродажи = Продажи.Сигнатура
	|ГДЕ
	|	Задачи.Тип = ЗНАЧЕНИЕ(Перечисление.ТипЗадачи.ЛояльностьРемонтаАвто)
	|	И ПОДСТРОКА(ВЫРАЗИТЬ(Задачи.СигнатураПродажи КАК СТРОКА(39)), 1, 2) = ""SK""
	|	И Задачи.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
	|	И НАЧАЛОПЕРИОДА(Задачи.ДатаПостановки, ДЕНЬ) < НАЧАЛОПЕРИОДА(&ДатаПостановки, ДЕНЬ)
	|	И НЕ Продажи.ХарактеристикаОбъекта ПОДОБНО ""%УАЗ%""
	|	И НЕ Продажи.ХарактеристикаОбъекта ПОДОБНО ""%Ford%""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ03.СуществующаяОткрытаяЗадача КАК СуществующаяОткрытаяЗадача,
	|	ВТ03.НапоминаниеПерезвонить КАК НапоминаниеПерезвонить,
	|	ВТ02.СигнатураПродажи КАК НоваяЗадача
	|ИЗ
	|	ВТ03_РанееСуществовашиеЗадачи КАК ВТ03
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ02_НовыеОткрытыеЗадачи КАК ВТ02
	|		ПО ВТ03.Телефон = ВТ02.Телефон
	|			И ВТ03.Покупатель = ВТ02.Покупатель
	|			И ВТ03.Точка = ВТ02.Точка
	|			И ВТ03.Машинозаезд <> ВТ02.Машинозаезд";
	Запрос.УстановитьПараметр("ДатаПостановки",	ДатаПостановки);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ЗакрытыеЗадачи;
	КонецЕсли;
	ТекДата 			= ТекущаяДата();
	Исполнитель 		= Справочники.Пользователи.НайтиПоНаименованию("Губарь Ирина Николаевна");
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ПричинаЗакрытия = ?(ЗначениеЗаполнено(Выборка.НапоминаниеПерезвонить), "Недозвон", "Задача закрыта - не прозвонили");
		Успех 			= РегистрыСведений.ЗадачиЗвонокЛояльности.ЗакрытьПричинойРучногоЗакрытия(Выборка.СуществующаяОткрытаяЗадача, ТекДата, ПричинаЗакрытия, "Автозакрытие задачей "+Выборка.НоваяЗадача, Исполнитель);  
		ЗакрытыеЗадачи.Добавить(Выборка.СуществующаяОткрытаяЗадача);
	КонецЦикла;

	//В текущей загрузке тоже могут быть одинаковые задачи (одновременно закрыли разные машинозаезды по разным автомобилям одного контаргента по одной точке),
	//причем одна из таких задач должна остатьтся действующей, не должно быть закольцовки: закрытая в одной итерацци не может быть закрывающей в другой
	//--------------------------------------------------------------------------------------------------------------------------------------------------------
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Задачи.СигнатураПродажи КАК СигнатураПродажи,
	|	Задачи.Телефон КАК Телефон,
	|	Продажи.Точка КАК Точка,
	|	Продажи.Контрагент КАК Покупатель,
	|	Продажи.Машинозаезд КАК Машинозаезд
	|ПОМЕСТИТЬ ВТ01
	|ИЗ
	|	РегистрСведений.ЗадачиЗвонокЛояльности КАК Задачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Продажи КАК Продажи
	|		ПО Задачи.СигнатураПродажи = Продажи.Сигнатура
	|ГДЕ
	|	Задачи.Тип = ЗНАЧЕНИЕ(Перечисление.ТипЗадачи.ЛояльностьРемонтаАвто)
	|	И ПОДСТРОКА(ВЫРАЗИТЬ(Задачи.СигнатураПродажи КАК СТРОКА(39)), 1, 2) = ""SK""
	|	И Задачи.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
	|	И НАЧАЛОПЕРИОДА(Задачи.ДатаПостановки, ДЕНЬ) = НАЧАЛОПЕРИОДА(&ДатаПостановки, ДЕНЬ)
	|	И НЕ Продажи.ХарактеристикаОбъекта ПОДОБНО ""%УАЗ%""
	|	И НЕ Продажи.ХарактеристикаОбъекта ПОДОБНО ""%Ford%""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ01.СигнатураПродажи КАК СигнатураПродажи,
	|	ВТ011.СигнатураПродажи КАК СигнатураЗадачиДубля
	|ИЗ
	|	ВТ01 КАК ВТ01
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ01 КАК ВТ011
	|		ПО ВТ01.Телефон = ВТ011.Телефон
	|			И ВТ01.Покупатель = ВТ011.Покупатель
	|			И ВТ01.Точка = ВТ011.Точка
	|			И ВТ01.Машинозаезд <> ВТ011.Машинозаезд";
	Запрос.УстановитьПараметр("ДатаПостановки", ДатаПостановки);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ЗакрытыеЗадачи;
	КонецЕсли;
	тз = РезультатЗапроса.Выгрузить();
	тз.Колонки.Добавить("Закрыта", Новый ОписаниеТипов("Булево"));
	
	Для Каждого е Из тз Цикл
		Если е.Закрыта Тогда
				Продолжить;
		КонецЕсли;
			
		//закрытая в одной итерацией не может быть закрывающей в другой
		Если ЗакрытыеЗадачи.Найти(е.СигнатураПродажи) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПричинаЗакрытия = "Задача закрыта - групповой заезд";
		Успех =  РегистрыСведений.ЗадачиЗвонокЛояльности.ЗакрытьПричинойРучногоЗакрытия(е.СигнатураЗадачиДубля, ТекДата, ПричинаЗакрытия, "Автозакрытие задачей "+е.СигнатураПродажи, Исполнитель);  
		
		//Обработка случая, когда из-за левого соединения одна и таже задача фигурирует в результате запроса многократно в колонке "СигнатураЗадачиДубля"
		Парам = Новый Структура("СигнатураЗадачиДубля", е.СигнатураЗадачиДубля); 
		СтрокиДубля = тз.НайтиСтроки(Парам);
		Для Каждого СтрДубль Из СтрокиДубля Цикл
			СтрДубль.Закрыта = Истина;
		КонецЦикла;
		
		ЗакрытыеЗадачи.Добавить(е.СигнатураЗадачиДубля);

	КонецЦикла;	
	
	Возврат ЗакрытыеЗадачи;
КонецФункции

Процедура СпакетируйАвтозакрытыеЗадачи(АвтозакрытыеЗадачи) Экспорт
	//Пакетирует автоматически закрытые задачи, если в предполагемом пакете не менее двх задач (как минимум мастер и slave)
	//Параметры: АвтозакрытыеЗадачи - массив сигнатур автозакрытых задач
	Доступно = ТипЗнч(АвтозакрытыеЗадачи) = Тип("Массив") И	АвтозакрытыеЗадачи.Количество()>0;
	Если Не Доступно Тогда
		Возврат;
	КонецЕсли;
	
	//Случай 1, база Матрица. Получи автозакрытые задачи. Они должны быть закрыты и не входить в пакеты
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ Задачи.СигнатураПродажи КАК СигнатураПродажи, 1 КАК Количество, Продажи.Машинозаезд КАК Машинозаезд
	|ИЗ		РегистрСведений.ЗадачиЗвонокЛояльности КАК Задачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Продажи КАК Продажи
	|		ПО Задачи.СигнатураПродажи = Продажи.Сигнатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиЛояльностиПакеты КАК ЗадачиПакеты
	|		ПО (ЗадачиПакеты.Продажа = Задачи.СигнатураПродажи)
	|ГДЕ	Задачи.СигнатураПродажи В(&АвтозакрытыеЗадачи)
	|		И Продажи.Машинозаезд <> """"
	|		И Задачи.ДатаЗакрытия <> ДАТАВРЕМЯ(1, 1, 1)
	|		И ЕСТЬNULL(ЗадачиПакеты.Продажа, 0) = 0
	|ИТОГИ  СУММА(Количество)
	|ПО		Машинозаезд";
	Запрос.УстановитьПараметр("АвтозакрытыеЗадачи", АвтозакрытыеЗадачи);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выб1 = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выб1.Следующий() Цикл
		Если Выб1.Количество<2 Тогда
			//Не пакетируем, если в пакете получется только одна задача
			Продолжить;
		КонецЕсли;
		Выб2 = Выб1.Выбрать();
		i = 0;
		МастерЗадача = "";
		Пока Выб2.Следующий() Цикл
			i = i + 1;	
			Если i=1 Тогда
				//Получаем первую задачу - задаз-наряд машинозаезда, признаем ее мастер-задачей, пакет не формируем
				МастерЗадача = Выб2.СигнатураПродажи;
			Иначе
				 РегистрыСведений.ЗадачиЛояльностиПакеты.Добавить(МастерЗадача,  Выб2.СигнатураПродажи);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры
	
Функция ПрочитайРемонты_Из_ОУСТО(ПараметрыПодключения, ПрефиксБазы, ДатаНачала, ДатаОкончания) Экспорт
	//Возвращает таблицу значений закрытых заказ нарядов, отвечающих условию: в нее не включены такие закрытые заказ-наряды 
	//(в новой ОУ СТО вместо ДатаЗакрытия берем ДатаОкончанияФакт - в форме заказ-наряда "Дата выдачи"), по автомобилям которых
	//существуют другие незакрытые заказ-наряды по той же точке оформления
	
	ТЗ = Новый ТаблицаЗначений();
	ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ = ТЗ;
	
	Доступно = 		ТипЗнч(ПараметрыПодключения) 	= Тип("Строка") И  ТипЗнч(ПрефиксБазы) 	= Тип("Строка") И ТипЗнч(ДатаНачала) = Тип("Дата") И ТипЗнч(ДатаОкончания) = Тип("Дата")
				И ЗначениеЗаполнено(ПараметрыПодключения) И ЗначениеЗаполнено(ПрефиксБазы) И ЗначениеЗаполнено(ДатаНачала) 	И ЗначениеЗаполнено(ДатаОкончания);
	Если Не Доступно Тогда
		Возврат ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ
	КонецЕсли;
	
	БИст = ОбщегоНазначения.ПолучитьПодключениеБД(ПараметрыПодключения);	
	Если БИст = Неопределено Тогда
		Возврат ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ;
	КонецЕсли;
	
	//Получи список контрагентов, по которым не нужно проверять лояльность
	//--------------------------------------------------------------------    
	НеПроверять = БИст.Справочники.ЗначенияСвойствОбъектов.ЛояльностьСТО_НеПроверятьКонтрагентов.Комментарий;
	БИ_Мс = БИст.NewObject("Массив");
	Если ЗначениеЗаполнено(НеПроверять) Тогда
		Чт = Новый ЧтениеJSON();
		Чт.УстановитьСтроку(НеПроверять);
		Попытка
			Фаб = ПрочитатьJSON(Чт);
		Исключение
		    Фаб = "";
		КонецПопытки;
		Мс = Новый Массив();
		Доступно =  ТипЗнч(Фаб) = Тип("Структура") И Фаб.Свойство("Корень") И ТипЗнч(Фаб.Корень)=Тип("Массив") И Фаб.Корень.Количество()>0;
		Если Доступно Тогда
			Для Каждого Э Из Фаб.Корень Цикл
				Мс.Добавить(Э.Контрагент); 
			КонецЦикла;
		КонецЕсли;
		Если Мс.Количество()>0 Тогда
			Для Каждого Э Из Мс Цикл
				БИ_Мс.Добавить(БИст.Справочники.Контрагенты.ПолучитьСсылку(БИст.NewObject("УникальныйИдентификатор",Э)));	
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;  
	
	//Получи список контрагентов, по которым нужно проверять лояльность один раз за отчетный период - т.н. контрагенты категории "Габарит"
	//--------------------------------------------------------------------
	ЗвонитьЕдиножды = БИст.Справочники.ЗначенияСвойствОбъектов.ЛояльностьСТО_КонтрагентыЗвонитьЕдиножды.Комментарий;
	БИ_мсЗвонитьЕдиножды = БИст.NewObject("Массив");
	Если ЗначениеЗаполнено(ЗвонитьЕдиножды) Тогда
		Чт = Новый ЧтениеJSON();
		Чт.УстановитьСтроку(ЗвонитьЕдиножды);
		Попытка
			Фаб = ПрочитатьJSON(Чт);
		Исключение
		    Фаб = "";
		КонецПопытки;
		мсЗвонитьЕдиножды = Новый Массив();
		Доступно =  ТипЗнч(Фаб) = Тип("Структура") И Фаб.Свойство("Корень") И ТипЗнч(Фаб.Корень)=Тип("Массив") И Фаб.Корень.Количество()>0;
		Если Доступно Тогда
			Для Каждого Э Из Фаб.Корень Цикл
				мсЗвонитьЕдиножды.Добавить(Э.Контрагент);
			КонецЦикла;
		КонецЕсли;
		Если мсЗвонитьЕдиножды.Количество()>0 Тогда
			Для Каждого Э Из мсЗвонитьЕдиножды Цикл
				БИ_мсЗвонитьЕдиножды.Добавить(БИст.Справочники.Контрагенты.ПолучитьСсылку(БИст.NewObject("УникальныйИдентификатор",Э)));	
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
		
	БИ_Запрос = БИст.NewObject("Запрос");
	БИ_Запрос.Текст =  
 	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Контрагенты.Ссылка КАК Ссылка,
	|	Контрагенты.ИНН КАК ИНН,
	|	Контрагенты.КПП КАК КПП
	|ПОМЕСТИТЬ ВТ01
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка В(&НеПроверять)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ01.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ02_НеПроверятьКонтрагентов
	|ИЗ
	|	ВТ01 КАК ВТ01
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	(Контрагенты.ИНН, Контрагенты.КПП) В
	|			(ВЫБРАТЬ
	|				ВТ01.ИНН,
	|				ВТ01.КПП
	|			ИЗ
	|				ВТ01
	|			ГДЕ
	|				ВТ01.ИНН <> """")
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.ТелефонМоб КАК Телефон
	|ПОМЕСТИТЬ ВТ03_ТелефоныСотрудников
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Сотрудники.ТелефонКор
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Контрагенты.Ссылка КАК Ссылка,
	|	Контрагенты.ИНН КАК ИНН,
	|	Контрагенты.КПП КАК КПП
	|ПОМЕСТИТЬ ВТ04
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка В(&ЗвонитьЕдиножды)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ04.Ссылка КАК Контрагент,
	|	ИСТИНА КАК ЗвонитьЕдиножды
	|ПОМЕСТИТЬ ВТ05_ЗвонитьЕдиножды
	|ИЗ
	|	ВТ04 КАК ВТ04
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Контрагенты.Ссылка,
	|	ИСТИНА
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	(Контрагенты.ИНН, Контрагенты.КПП) В
	|			(ВЫБРАТЬ
	|				ВТ04.ИНН,
	|				ВТ04.КПП
	|			ИЗ
	|				ВТ04
	|			ГДЕ
	|				ВТ04.ИНН <> """")
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(УНИКАЛЬНЫЙИДЕНТИФИКАТОР(З.Ссылка)) КАК ГУИДДокументаИсточникаСтрокой,
	|	З.Номер КАК Номер,
	|	З.Дата КАК Дата,
	|	З.ДатаНачалаФакт КАК ДатаНачала,
	|	З.ДатаОкончанияФакт КАК ДатаОкончания,
	|	З.ДокументОснование.Автомобиль.Наименование КАК НаименованиеАвто,
	|	З.ДокументОснование.ГосНомер КАК ГосНомер,
	|	ПРЕДСТАВЛЕНИЕ(УНИКАЛЬНЫЙИДЕНТИФИКАТОР(З.Заказчик)) КАК ПокупательСсылка,
	|	З.Заказчик.Наименование КАК Покупатель,
	|	ВЫБОР
	|		КОГДА З.Заказчик.ТипОтношений = ЗНАЧЕНИЕ(Перечисление.ТипОтношений.Магистральный)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Магистральный,
	|	З.ВидРемонта.Наименование КАК ВидРемонта,
	|	З.СотрудникРуководитель.Наименование КАК ДругиеСотрудники,
	|	З.СотрудникОткрытия.Наименование КАК Сотрудник,
	|	З.ДокументОснование.ТочкаОформления.Наименование КАК ТочкаОформления,
	|	З.ТочкаОформления.Наименование КАК ТочкаОформленияЗаказНаряда,
	|	З.КонтактноеЛицо КАК КонтактноеЛицо,
	|	З.КонтактныйТелефон КАК КонтактныйТелефон,
	|	1 КАК КолВоПроданныхАвто,
	|	ВЫБОР
	|		КОГДА З.ВидРемонта = ЗНАЧЕНИЕ(Справочник.ВидыРемонта.Внутренний)
	|				ИЛИ З.ВидРемонта = ЗНАЧЕНИЕ(Справочник.ВидыРемонта.ГарантияГАЗ)
	|				ИЛИ З.ВидРемонта = ЗНАЧЕНИЕ(Справочник.ВидыРемонта.Рекламация)
	|			ТОГДА З.ДатаОкончанияФакт
	|		ИНАЧЕ З.ДатаЗакрытия
	|	КОНЕЦ КАК ДатаЗакрытия,
	|	ПРЕДСТАВЛЕНИЕ(УНИКАЛЬНЫЙИДЕНТИФИКАТОР(З.ДокументОснование.Ссылка)) КАК Машинозаезд,
	|	З.ДокументОснование.Номер КАК МашинозаездНомер,
	|	З.ДокументОснование.Дата КАК МашинозаездДата,
	|	З.ДокументОснование.ДатаЗакрытия КАК МашинозаездДатаЗакрытия,
	|	ЕСТЬNULL(ВТ05.ЗвонитьЕдиножды, ЛОЖЬ) КАК ЗвонитьЕдиножды
	|ИЗ
	|	Документ.ЗаказНаряд КАК З
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ05_ЗвонитьЕдиножды КАК ВТ05
	|		ПО З.Заказчик = ВТ05.Контрагент
	|ГДЕ
	|	(З.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Начало, ДЕНЬ) И КОНЕЦПЕРИОДА(&Окончание, ДЕНЬ)
	|			ИЛИ З.ДатаЗакрытия МЕЖДУ НАЧАЛОПЕРИОДА(&Начало, ДЕНЬ) И КОНЕЦПЕРИОДА(&Окончание, ДЕНЬ))
	|	И З.ДокументОснование <> ЗНАЧЕНИЕ(Документ.Машинозаезд.ПустаяСсылка)
	|	И З.ДокументОснование.Автомобиль <> ЗНАЧЕНИЕ(Справочник.НомерныеЭлементы.ПустаяСсылка)
	|	И З.ВидРемонта.Родитель В (ЗНАЧЕНИЕ(Справочник.ВидыРемонта.ГруппаГарантийный), ЗНАЧЕНИЕ(Справочник.ВидыРемонта.ГруппаВнутренняяГарантия), ЗНАЧЕНИЕ(Справочник.ВидыРемонта.ГруппаКоммерческий), ЗНАЧЕНИЕ(Справочник.ВидыРемонта.ГруппаТО), ЗНАЧЕНИЕ(Справочник.ВидыРемонта.ГруппаКузовнойРемонт))
	|	И НЕ З.ВидРемонта = ЗНАЧЕНИЕ(Справочник.ВидыРемонта.ДиагностикаВтор)
	|	И НЕ З.Заказчик В
	|				(ВЫБРАТЬ
	|					ВТ02.Ссылка
	|				ИЗ
	|					ВТ02_НеПроверятьКонтрагентов КАК ВТ02)
	|	И НЕ З.КонтактныйТелефон В
	|				(ВЫБРАТЬ
	|					ВТ03.Телефон
	|				ИЗ
	|					ВТ03_ТелефоныСотрудников КАК ВТ03)
	|	И ПОДСТРОКА(З.КонтактныйТелефон, 10, 1) <> """"
	|	И З.Состояние = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.Закрыт)
	|	И З.ДокументОснование.Состояние = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.Закрыт)
	|	И НЕ З.ВидРемонта.Наименование ПОДОБНО &ВидРемонтаLADA
	|	И НЕ З.Заказчик.Наименование ПОДОБНО &Луидор
	|	И НЕ З.ДокументОснование.Состояние = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.Отменен)
	|	И НЕ З.ТочкаОформления.Наименование В (""НН-Гарант-Л18-Люксовка"", ""Казань-Гарант-Кузовной ремонт"", ""Москва-Гарант-Кузовной ремонт"")
	|	И ВЫБОР
	|			КОГДА ЕСТЬNULL(ВТ05.ЗвонитьЕдиножды, ЛОЖЬ) = ИСТИНА
	|					И ДЕНЬ(З.ДокументОснование.ДатаЗакрытия) В (26, 27, 28, 29, 30, 31, 1, 2)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	БИ_Запрос.УстановитьПараметр("НеПроверять",		БИ_Мс);
	БИ_Запрос.УстановитьПараметр("ЗвонитьЕдиножды",	БИ_мсЗвонитьЕдиножды);
	БИ_Запрос.УстановитьПараметр("Начало",			ДатаНачала);
	БИ_Запрос.УстановитьПараметр("Окончание",		ДатаОкончания);	
	БИ_Запрос.УстановитьПараметр("Луидор", 			"%Луидор%");
	БИ_Запрос.УстановитьПараметр("ВидРемонтаLADA", 	"%LADA%");
	Попытка
		БИ_РезультатЗапроса = БИ_Запрос.Выполнить();
	Исключение
		ЗаписьЖурналаРегистрации("ПрочитайРемонты_Из_ОУСТО", УровеньЖурналаРегистрации.Ошибка,, "ПараметрыПодключения =" + ПараметрыПодключения + " ;ПрефиксБазы=" + ПрефиксБазы + " ;ДатаНачала=" + ДатаНачала + " ;ДатаЗакрытияЗаказНарядаОкончание=" + ДатаОкончания, ОписаниеОшибки());
		Возврат ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ;
	КонецПопытки;
	
	Если БИ_РезультатЗапроса.Пустой() Тогда
		Возврат ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ;
	КонецЕсли;
	
	МасСтрока = Новый Массив();
	МасСтрока.Добавить(Тип("Строка"));
	ТипСтрока = Новый ОписаниеТипов(МасСтрока);
	
	МасДата	= Новый Массив();
	МасДата.Добавить(Тип("Дата"));
	ТипДата	= Новый	ОписаниеТипов(МасДата);	
	
	МасЧисло = Новый Массив();
	МасЧисло.Добавить(Тип("Число"));
	ТипЧисло = Новый ОписаниеТипов(МасЧисло);	
	
	ТЗ.Колонки.Добавить("ИдВнешнейИБ", 						ТипСтрока);	//	Идентификатор внешней ИБ
	ТЗ.Колонки.Добавить("ГУИДДокументаИсточникаСтрокой", 	Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));	//	ГУИД документ в базе-источнике
	ТЗ.Колонки.Добавить("Номер", 							ТипСтрока);	//	Номер документа
	ТЗ.Колонки.Добавить("Дата",								ТипДата);	//	Дата документа
	ТЗ.Колонки.Добавить("ДатаЗакрытия",						ТипДата);	//	Дата закрытия заказ-наряда
	ТЗ.Колонки.Добавить("УчетнаяПрограмма", 				ТипСтрока);	//	Учетная программа реализации
	ТЗ.Колонки.Добавить("Сотрудник", 						ТипСтрока); //	Сотрудник, ответственный за продажу
	ТЗ.Колонки.Добавить("ДругиеСотрудники", 				ТипСтрока); //	Сотрудник, курирующий сотрудника (В Альфе для НН и МСК это старший мастер)
	ТЗ.Колонки.Добавить("ТочкаОформления", 					Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(32)));	//	Точка оформления продажи. С 04.06.2020 для заказ-нарядов ОУ подменяем точкой оформления машинозаезда
	ТЗ.Колонки.Добавить("ТочкаОформленияЗаказНаряда",		ТипСтрока);	//	Точка оформления продажи без подмены на точку оформления машинозаезда.
	ТЗ.Колонки.Добавить("Покупатель", 						Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(64)));	//	Покупатель (заказчик)
	ТЗ.Колонки.Добавить("НомерТелефона", 					Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(15)));	//	Номер телефона покупателя, указанный в документе Сделка
	ТЗ.Колонки.Добавить("ВсеТелефонныеНомера",				ТипСтрока);	//	Номера всех телефонных номеров контрагента из контактной информации
	ТЗ.Колонки.Добавить("НаименованиеАвто", 				ТипСтрока);	//	Название автомобиля
	ТЗ.Колонки.Добавить("Комплектация",						ТипСтрока);	//	Комплектарция автомобиля
	ТЗ.Колонки.Добавить("КолВоПроданныхАвто",				ТипСтрока);	//  Количество проданных автомобилей в документе
	ТЗ.Колонки.Добавить("КонтактноеЛицо",					ТипСтрока);	//	ФИО контактного лица для прозвона лояльности(новый функционал с 10.01.2017)
	ТЗ.Колонки.Добавить("КонтактноеЛицоЛояльностьТелефон", 	ТипСтрока);	//	Телефон контактного лица для прозвона лояльности (новый функционал с 10.01.2017)
	ТЗ.Колонки.Добавить("Заказчик", 						ТипСтрока);	// ГУИД заказчика
	ТЗ.Колонки.Добавить("Магистральный",					ОбщегоНазначения.ТипБулево());
	ТЗ.Колонки.Добавить("ДатаНачала",						ТипДата);	// Дата фактического начала работ или дата приемки авто в ремонт	
	ТЗ.Колонки.Добавить("ДатаОкончания",					ТипДата);   // Дата фактического окончания работ (дата когда автомобиль покинул ремзону)
	ТЗ.Колонки.Добавить("Машинозаезд",						Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));	//	ГУИД машинозаезда
	ТЗ.Колонки.Добавить("МашинозаездНомер",					ТипСтрока); //	Номер машинозаезда
	ТЗ.Колонки.Добавить("МашинозаездДата",					ТипДата);	//	Дата машинозаезда
	ТЗ.Колонки.Добавить("МашинозаездДатаЗакрытия",			ТипДата);	//	Дата закрытия машинозаезда
	ТЗ.Колонки.Добавить("ЗвонитьЕдиножды",					ОбщегоНазначения.ТипБулево());

	БИ_Выб = БИ_РезультатЗапроса.Выбрать();
	Пока БИ_Выб.Следующий() Цикл
			
		i = ТЗ.Добавить();	
		i["ИдВнешнейИБ"] 					=	ПрефиксБазы;
		ЗаполнитьЗначенияСвойств(i, БИ_Выб,"ГУИДДокументаИсточникаСтрокой, Номер, Дата, ДатаЗакрытия, Сотрудник, ДругиеСотрудники, ТочкаОформления, ТочкаОформленияЗаказНаряда, Покупатель, Магистральный, ДатаНачала, ДатаОкончания, Машинозаезд, МашинозаездНомер, МашинозаездДата, МашинозаездДатаЗакрытия, ЗвонитьЕдиножды, КонтактноеЛицо, КолВоПроданныхАвто");	
		i["НомерТелефона"]					=	БИ_Выб.КонтактныйТелефон;			
		i["НаименованиеАвто"]				=	БИ_Выб.НаименованиеАвто+?(СтрДлина(БИ_Выб.ГосНомер)>0, ", Госномер: "+БИ_Выб.ГосНомер, "");
		i["Комплектация"]					=	БИ_Выб.ВидРемонта;
		i["КонтактноеЛицоЛояльностьТелефон"]=	БИ_Выб.КонтактныйТелефон;
		i["Заказчик"]						=  	БИ_Выб.ПокупательСсылка;   
	КонецЦикла;
	
	ОбщегоНазначения.РазорватьПодключениеБД(БИст);
	
	Для Каждого i Из ТЗ Цикл
		i.НомерТелефона = Конвертация.ТелефонВнешнийНормализовать(i.НомерТелефона);
	КонецЦикла;
	Возврат ТЗ
КонецФункции

Функция ПрочитайЗакрытыеМашинозаезды_Из_ОУСТО(ПараметрыПодключения, ПрефиксБазы, ДатаНачала, ДатаОкончания) Экспорт
	//Возвращает таблицу значений закрытых машинозаездов, отвечающих условию: в нее не включены такие закрытые машишнозаезды 
	//(в новой ОУ СТО вместо ДатаЗакрытия берем ДатаОкончанияФакт - в форме заказ-наряда "Дата выдачи"), по автомобилям которых
	//существуют другие незакрытые заказ-наряды по той же точке оформления
	
	ТЗ = Новый ТаблицаЗначений();
	ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ = ТЗ;
	
	Доступно = ТипЗнч(ПараметрыПодключения) = Тип("Строка") И ЗначениеЗаполнено(ПараметрыПодключения) И ТипЗнч(ПрефиксБазы) = Тип("Строка") И ЗначениеЗаполнено(ПрефиксБазы)
		И ТипЗнч(ДатаНачала) = Тип("Дата") И ЗначениеЗаполнено(ДатаНачала) И ТипЗнч(ДатаОкончания)=Тип("Дата") И ЗначениеЗаполнено(ДатаОкончания);	
	Если Не Доступно Тогда
		Возврат ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ
	КонецЕсли;
	
	БИ = ОбщегоНазначения.ПолучитьПодключениеБД(ПараметрыПодключения);	
	
	Если БИ = Неопределено Тогда
		Возврат ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ;
	КонецЕсли;
	
	БИ_Запрос = БИ.NewObject("Запрос");
	БИ_Запрос.Текст = "	ВЫБРАТЬ ПРЕДСТАВЛЕНИЕ(УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Ссылка)) КАК Сигнатура, ДатаЗакрытия 
						|ИЗ 	Документ.Машинозаезд 
						|ГДЕ 	Дата МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаНачала, ДЕНЬ) И КОНЕЦПЕРИОДА(&ДатаОкончания, ДЕНЬ)	
						|			И НЕ Заказчик.Наименование ПОДОБНО &Луидор	И Состояние В (ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.Закрыт))";
	БИ_Запрос.УстановитьПараметр("ДатаНачала",		ДатаНачала);
	БИ_Запрос.УстановитьПараметр("ДатаОкончания",	ДатаОкончания);	
	БИ_Запрос.УстановитьПараметр("Луидор", 			"%Луидор%");
	
	Попытка
		БИ_РезультатЗапроса = БИ_Запрос.Выполнить();
	Исключение
		ЗаписьЖурналаРегистрации("ПрочитайЗакрытыеМашинозаезды_Из_ОУСТО", УровеньЖурналаРегистрации.Ошибка, ,  "ПараметрыПодключения =" + ПараметрыПодключения + " ;ПрефиксБазы=" + ПрефиксБазы + " ;ДатаНачала=" + ДатаНачала + " ;ДатаЗакрытияЗаказНарядаОкончание=" + ДатаОкончания, ОписаниеОшибки());
		Возврат ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ;
	КонецПопытки;
	
	Если БИ_РезультатЗапроса.Пустой() Тогда
		Возврат ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ;
	КонецЕсли;
		
	ТЗ.Колонки.Добавить("Сигнатура", 	ОбщегоНазначения.ТипСтрока());	//	ГУИД документ в базе-источнике
	ТЗ.Колонки.Добавить("ДатаЗакрытия",	ОбщегоНазначения.ТипДата());	//	Дата закрытия заказ-наряда
	
	БИ_Выборка = БИ_РезультатЗапроса.Выбрать();
	Пока БИ_Выборка.Следующий() Цикл		
		Зап = ТЗ.Добавить();	                    
		ЗаполнитьЗначенияСвойств(Зап, БИ_Выборка);
	КонецЦикла;
	
	ОбщегоНазначения.РазорватьПодключениеБД(БИ);
	Возврат ТЗ

КонецФункции  

Функция ЗагрузиРемонтыАвто_И_ЗадачиЛояльности_Из_Владимира(ПараметрыПодключения, ПрефиксБазы, ДатаНачала, ДатаОкончания) Экспорт
	
	ЗначениеПоУмолчанию = Ложь;
	ТЗ = ПрочитайРемонты_Из_АльфаАвтоВладимир(ПараметрыПодключения, ПрефиксБазы, ДатаНачала, ДатаОкончания);
	Если ТЗ.Количество()= 0 Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
		
	ПлановыйИсполнительЗадачи 	= 	Справочники.КонтактЦентры.НайтиПоКоду("000000001");
	ТекДата						=	ТекущаяДата();	
	ДатаПостановки 				= 	ТекДата;	// Дата постановки задачи
	ДатаАктуальности			=	ТекДата;	// Дата актуальности задачи
	
	//Запиши продажи в регистр сведений Продажи
	//-----------------------------------------
	Для Каждого i Из ТЗ Цикл
		СигнатураДокумента = i["ИдВнешнейИБ"]+"#"+i["ГУИДДокументаИсточникаСтрокой"];   
		Тел = Конвертация.ТелефонВнешнийНормализовать(i["КонтактноеЛицоЛояльностьТелефон"]); 
		
		Выполнено = РегистрыСведений.Продажи.Загрузить(СигнатураДокумента, i["УчетнаяПрограмма"], i["ТочкаОформления"], i["Дата"], i["Номер"],
			i["ДатаЗакрытия"],
			"Ремонт авто",
			i["НаименованиеАвто"],
			i["Комплектация"],
			i["Покупатель"],
			Тел,
			i["Сотрудник"],
			i["ДругиеСотрудники"],
			i["Заказчик"],
			i["КонтактноеЛицоЛояльностьФИО"]
		);
		
		Если Выполнено Тогда
			Выполнено = РегистрыСведений.ЗадачиЗвонокЛояльности.Загрузить(i["Покупатель"], СигнатураДокумента, , Перечисления.ТипЗадачи.ЛояльностьРемонтаАвто,
			ПлановыйИсполнительЗадачи, , Тел, , , ДатаПостановки, , ДатаАктуальности);
		КонецЕсли;
	КонецЦикла;
			
	//Обнови статус у открытых заказ-нарядов - возможно они закрылись
	ИмяФайлаДатаЗакрытияЗаказНарядов = "\\vladfs\Exchange1cAgr\zn_finished.xml";
	ОбновиДатыЗакрытия_Из_АльфаАвтоВладимир(ИмяФайлаДатаЗакрытияЗаказНарядов, ПрефиксБазы, ДатаНачала, ДатаОкончания);

	Возврат Истина;

КонецФункции

Функция ПрочитайРемонты_Из_АльфаАвтоВладимир(ПараметрыПодключения, ПрефиксБазы, ДатаНачала, ДатаОкончания)Экспорт
	//Чтение всех заказ-нарядов из Чебоксар, кроме тех, которые в статусе "Заявка" и "прп". Статус "прп" не используется (помечен на удаление, не виден пользователям)
	
	Данные = "ПараметрыПодключения = "+ПараметрыПодключения+" ;ПрефиксБазы = "+ ПрефиксБазы + "; ДатаНачала = " + ДатаНачала + ";ДатаОкончания = "+ ДатаОкончания;
	
	ТЗ = Новый ТаблицаЗначений();
	ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ = ТЗ;
	
	Доступно = 		ТипЗнч(ПараметрыПодключения) = Тип("Строка") И ТипЗнч(ПрефиксБазы) = Тип("Строка") И ТипЗнч(ДатаНачала) = Тип("Дата") И ТипЗнч(ДатаОкончания)	= Тип("Дата")
				И ЗначениеЗаполнено(ПараметрыПодключения) И ЗначениеЗаполнено(ПрефиксБазы) И ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаОкончания);	
	Если Не Доступно Тогда
		Возврат ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ
	КонецЕсли;
	
	ТипСтрока 	= ОбщегоНазначения.ТипСтрока();
	ТипДата		= ОбщегоНазначения.ТипДата();	
	
	ТЗ.Колонки.Добавить("ИдВнешнейИБ", 						ТипСтрока);	//	Идентификатор внешней ИБ
	ТЗ.Колонки.Добавить("ГУИДДокументаИсточникаСтрокой", 	ТипСтрока);	//	ГУИД документ в базе-источнике
	ТЗ.Колонки.Добавить("Номер", 							ТипСтрока);	//	Номер документа
	ТЗ.Колонки.Добавить("Дата",								ТипДата);	//	Дата документа
	ТЗ.Колонки.Добавить("ДатаЗакрытия",						ТипДата);	//	Дата закрытия заказ-наряда
	ТЗ.Колонки.Добавить("УчетнаяПрограмма", 				ТипСтрока);	//	Учетная программа реализации
	ТЗ.Колонки.Добавить("Сотрудник", 						ТипСтрока); //	Сотрудник, ответственный за продажу
	ТЗ.Колонки.Добавить("ДругиеСотрудники", 				ТипСтрока); //	Сотрудник, курирующий сотрудника (В Альфе для НН и МСК это старший мастер)
	ТЗ.Колонки.Добавить("ТочкаОформления", 					ТипСтрока);	//	Точка оформления продажи
	ТЗ.Колонки.Добавить("Покупатель", 						ТипСтрока);	//	Покупатель
	ТЗ.Колонки.Добавить("НомерТелефона", 					ТипСтрока);	//	Номер телефона покупателя, указанный в документе Сделка
	ТЗ.Колонки.Добавить("ВсеТелефонныеНомера",				ТипСтрока);	//	Номера всех телефонных номеров контрагента из контактной информации
	ТЗ.Колонки.Добавить("НаименованиеАвто", 				ТипСтрока);	//	Название автомобиля
	ТЗ.Колонки.Добавить("НомерВин", 						ТипСтрока);	//	VIN автомобиля
	ТЗ.Колонки.Добавить("Модель",							ТипСтрока);	//	Модель автомобиля	
	ТЗ.Колонки.Добавить("Комплектация",						ТипСтрока);	//	Комплектарция автомобиля
	ТЗ.Колонки.Добавить("КолВоПроданныхАвто",				ТипСтрока);	//  Количество проданных автомобилей в документе	
	ТЗ.Колонки.Добавить("КонтактноеЛицоЛояльностьФИО",		ТипСтрока);	//	ФИО контактного лица для прозвона лояльности(новый функционал с 10.01.2017)
	ТЗ.Колонки.Добавить("КонтактноеЛицоЛояльностьТелефон", 	ТипСтрока);	//	Телефон контактного лица для прозвона лояльности (новый функционал с 10.01.2017)
	ТЗ.Колонки.Добавить("ДатаНачала",	 					ТипДата); 	//	Дата начала работ по заказ-наряду
	ТЗ.Колонки.Добавить("ДатаОкончания",					ТипДата);	//	Дата окончания работ по заказ-наряду
	ТЗ.Колонки.Добавить("Заказчик",							ТипСтрока); //	Заказчик ГУИД
	
	Фл = Новый Файл(ПараметрыПодключения);
	Если Не Фл.Существует() Тогда
		ЗаписьЖурналаРегистрации("ПрочитайРемонты_Из_АльфаАвтоВладиимир", УровеньЖурналаРегистрации.Ошибка,, Данные, "Файл "+ПараметрыПодключения+" не существует");
		Возврат ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ;
	КонецЕсли;
	
	//Создай копию файла в архиве
	ИмяФайлаПриемника = Константы.БиблиотекаФайловПуть.Получить()+"\_"+"file1"+"_"+Строка(ТекущаяДата())+".xml";
	ИмяФайлаПриемника = СтрЗаменить(ИмяФайлаПриемника, ":", "-");
	КопироватьФайл(ПараметрыПодключения, ИмяФайлаПриемника);
	
	Чт = Новый ЧтениеXML();
	Чт.ОткрытьФайл(ПараметрыПодключения);
	
	Пока Чт.Прочитать() Цикл
				
		Если Не Чт.ТипУзла = ТипУзлаXML.Текст Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрНайти(Чт.Значение, "Ссылка")= 0 Тогда
			Продолжить;
		КонецЕсли;
		j = ЗначениеИзСтрокиВнутр(Чт.Значение);
		
		i=ТЗ.Добавить();		
		i["ИдВнешнейИБ"] 						=	ПрефиксБазы;
		i["ГУИДДокументаИсточникаСтрокой"]		=	j.Ссылка;
		i["Номер"]								=	j.Номер;
		i["Дата"]								=	j.Дата;
		i["ДатаЗакрытия"]						=	j.ДатаОкончания;		
		i["Сотрудник"]                      	=	j.МастерНаименование;
		i["ТочкаОформления"]					=	"Владимир";		
		i["Покупатель"]				  			=	j.ЗаказчикНаименование;
		i["НаименованиеАвто"]					=	j.АвтомобильНаименование;
		i["НомерВин"]							=	j.АвтомобильVIN;
		i["Модель"]								=	j.АвтомобильМодельНаименование;	
		i["Комплектация"]						=	j.ВидРемонтаНаименование;
		i["КолВоПроданныхАвто"]					=  	1;
		i["КонтактноеЛицоЛояльностьФИО"]		=	j.Представитель;		//	ФИО контактного лица для прозвона лояльности(новый функционал с 10.01.2017)
		i["КонтактноеЛицоЛояльностьТелефон"]	=	j.НомерТелефона;		//	Телефон контактного лица для прозвона лояльности (новый функционал с 10.01.2017)	
	КонецЦикла;
	Чт.Закрыть();	
	Возврат ТЗ
КонецФункции

Функция ОбновиДатыЗакрытия_Из_АльфаАвтоВладимир(ПараметрыПодключения, ПрефиксБазы, ДатаНачала, ДатаОкончания)
	// Устанавливает даты закрытия у заказ-нарядов, которые при первоначальной закгрузке были загружены открытыми
	ТЗ = ПрочитайЗакрытыеЗаказНаряды_Из_АльфаАвтоВладимир(ПараметрыПодключения, ПрефиксБазы, ДатаНачала, ДатаОкончания);
	
	Если ТЗ.Количество()=0 Тогда
		Возврат Ложь;	
	КонецЕсли;

	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ 	Т.Сигнатура КАК Сигнатура, Т.ДатаЗакрытия КАК ДатаЗакрытия
	|ПОМЕСТИТЬ 	ВТ01_ЗакрытыеЗаказНаряды
	|ИЗ 		&Т КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ	Продажи.Сигнатура КАК Сигнатура, ВТ01.ДатаЗакрытия КАК ДатаЗакрытия
	|ИЗ			РегистрСведений.Продажи КАК Продажи ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ01_ЗакрытыеЗаказНаряды КАК ВТ01
	|			ПО ((ВЫРАЗИТЬ(Продажи.Сигнатура КАК СТРОКА(39))) = (ВЫРАЗИТЬ(ВТ01.Сигнатура КАК СТРОКА(39))))
	|ГДЕ	Продажи.ДопДата = ДАТАВРЕМЯ(1, 1, 1)";
	
	Запрос.УстановитьПараметр("Т", ТЗ);
	РезультатЗапроса = ОбщегоНазначения.ВыполнитьЗапрос(Запрос, "Обновление даты закрытия заказ-наряда");
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка =  РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.Продажи.УстановиЗначениеРеквизита(Выборка.Сигнатура, "ДопДата", Выборка.ДатаЗакрытия);	
	КонецЦикла;

	Возврат Истина;
КонецФункции

Функция ПрочитайЗакрытыеЗаказНаряды_Из_АльфаАвтоВладимир(ПараметрыПодключения, ПрефиксБазы, ДатаНачала, ДатаОкончания) Экспорт
	//Чтение заказ-нарядов для МСК и НН
	//В этой альфе состояние заказ-наряда - элемент перечисления, а не справочника, аргумент КодСостояниеЗакрытЗаказаНаряда оставлен для возможной переработки кода
		
	ТЗ = Новый ТаблицаЗначений();
	ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ = ТЗ;
	
	Доступно = 		ТипЗнч(ПараметрыПодключения) = Тип("Строка") И ТипЗнч(ПрефиксБазы) = Тип("Строка") И ТипЗнч(ДатаНачала) 	= Тип("Дата") И ТипЗнч(ДатаОкончания) = Тип("Дата")
				И 	ЗначениеЗаполнено(ПараметрыПодключения) И ЗначениеЗаполнено(ПрефиксБазы) И ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаОкончания);	
	Если Не Доступно Тогда
		Возврат ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ
	КонецЕсли;
			
	//Создание таблицы значений
	ТЗ.Колонки.Добавить("Сигнатура", 	ОбщегоНазначения.ТипСтрока());	//	ГУИД документ в базе-источнике
	ТЗ.Колонки.Добавить("ДатаЗакрытия",	ОбщегоНазначения.ТипДата());	//	Дата закрытия заказ-наряда
	
	Фл = Новый Файл(ПараметрыПодключения);
	Если Не Фл.Существует() Тогда
		Данные = "ПараметрыПодключения = "+ПараметрыПодключения+" ;ПрефиксБазы = "+ ПрефиксБазы + "; ДатаНачала = " + ДатаНачала + ";ДатаОкончания = "+ ДатаОкончания;
		ЗаписьЖурналаРегистрации("ПрочитайРемонты_Из_АльфаАвтоВладиимир", УровеньЖурналаРегистрации.Ошибка,,Данные,  "Файл "+ПараметрыПодключения+" не существует"); 
		Возврат ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ;
	КонецЕсли;
	
	//Создай копию файла в архиве
	ИмяФайлаПриемника = Константы.БиблиотекаФайловПуть.Получить()+"\_"+"file2"+"_"+Строка(ТекущаяДата())+".xml";
	ИмяФайлаПриемника = СтрЗаменить(ИмяФайлаПриемника, ":","-");
	КопироватьФайл(ПараметрыПодключения, ИмяФайлаПриемника);
	
	Чт = Новый ЧтениеXML();
	Чт.ОткрытьФайл(ПараметрыПодключения);
	Пока Чт.Прочитать() Цикл
				
		Если Не Чт.ТипУзла = ТипУзлаXML.Текст Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрНайти(Чт.Значение, "Ссылка")= 0 Тогда
			Продолжить;
		КонецЕсли;
		j = ЗначениеИзСтрокиВнутр(Чт.Значение);
		
		i = ТЗ.Добавить();	
		i["Сигнатура"]		=	ПрефиксБазы+"#"+j.Ссылка;
		i["ДатаЗакрытия"]	=	j.ДатаОкончания;				
	КонецЦикла;

	Чт.Закрыть();

	Возврат ТЗ

КонецФункции
