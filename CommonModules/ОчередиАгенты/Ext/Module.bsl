//*************************************************************************************************
// ОЧЕРЕДИ
//*************************************************************************************************

Функция ОчередьПолучить(ТелОчередь) Экспорт

// Функция возвращает ссылку на элемент таблицы "Очереди" сервера Asterisk
// Функция возвращает Неопределено в случае неудачи
//-------------------------------------------------------------------------------------------------
// ТелОчередь (строка или ссылка) - номер телефона или наименование системной очереди
//-------------------------------------------------------------------------------------------------
	ОчередьСсылка = Конвертация.ТелОчередьПолучитьСсылку(ТелОчередь);

// Проверим на возможность поиска данных
//-------------------------------------------------------------------------------------------------
	Доступно = ЗначениеЗаполнено(ОчередьСсылка);
	Доступно = Доступно И ЗначениеЗаполнено(ОчередьСсылка.Наименование);
	Доступно = Доступно И ЗначениеЗаполнено(ОчередьСсылка.Сервер.ИсточникДанных);

	Если (Доступно = Истина) Тогда
		ИмяОчереди = ВРег(СокрЛП(ОчередьСсылка.Наименование));
		ИмяИсточника = СокрЛП(ОчередьСсылка.Сервер.ИсточникДанных);
		Попытка 
			СпрСсылка = ВнешниеИсточникиДанных[ИмяИсточника].Таблицы.Очереди.НайтиПоПолю("Name",ИмяОчереди);
		Исключение
			Данные = "ТелОчередь = "+ТелОчередь;
			Комментарий = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("ОчередьПолучить", УровеньЖурналаРегистрации.Ошибка, Метаданные.ОбщиеМодули.ОчередиАгенты, Данные, Комментарий);
			Возврат Неопределено;
		КонецПопытки;

		Если (ЗначениеЗаполнено(СпрСсылка)) Тогда
			Возврат (СпрСсылка);
		КонецЕсли;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

Функция ОчередиПолучитьПоАгенту(ТелАгент) Экспорт

// Функция возвращает массив ссылок на системные очереди, в которых переданный внутренний телефон
// или системная очередь зарегистрированы в качестве агента. В случае если очереди не найдены
// функция возвращает Неопределено
//-------------------------------------------------------------------------------------------------
// ТелАгент (строка или ссылка) - внутренний телефон или системная очередь
//-------------------------------------------------------------------------------------------------
	ТелСсылка = Конвертация.ТелПолучитьСсылку(ТелАгент);
	Ответ = Неопределено;

	Если (НЕ ЗначениеЗаполнено(ТелСсылка)) Тогда
		Возврат Неопределено;
	КонецЕсли;

// Переберем все доступные управляемые серверы. Найденные очереди поместим в таблицу значений
//-------------------------------------------------------------------------------------------------
	ТЗТемп = Новый ТаблицаЗначений;
	ТЗТемп.Колонки.Добавить("Очередь");
	Выборка = Справочники.ТелСерверы.Выбрать();

	Пока (Выборка.Следующий()) Цикл
		Если (ЗначениеЗаполнено(Выборка.ИсточникДанных)) Тогда
			ТекстЗапроса = "
			|SELECT	DISTINCT Queue_Name
			|FROM	ВнешнийИсточникДанных." + СокрЛП(Выборка.ИсточникДанных) + ".Таблица.Агенты
			|WHERE	(Queue_Name <> """") И (MemberName = &Агент)";

			Запрос = Новый Запрос;
			Запрос.Текст = ТекстЗапроса;
			Запрос.УстановитьПараметр("Агент",ВРег(СокрЛП(ТелСсылка.Наименование))); 
			
			Попытка
				Результат = Запрос.Выполнить().Выбрать();
			Исключение
				Продолжить;
			КонецПопытки;

			Пока (Результат.Следующий()) Цикл
				ОчередьСсылка = Конвертация.ТелОчередьПолучитьСсылку(Результат.Queue_Name);

				Если (ЗначениеЗаполнено(ОчередьСсылка)) Тогда
					НовСтрока = ТЗТемп.Добавить();
					НовСтрока.Очередь = ОчередьСсылка;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

// Сейчас в ТЗТемп находятся ссылки на системные очереди, в которых переданный телефон
// зарегистрирован в качестве Агента. Свернем таблицу значений, преобразуем в массив и вернем
//-------------------------------------------------------------------------------------------------
	Если (ТЗТемп.Количество() > 0) Тогда
		ТЗТемп.Свернуть("Очередь");
		Ответ = ТЗТемп.ВыгрузитьКолонку("Очередь");
	КонецЕсли;

	Возврат (Ответ);
КонецФункции

Функция ОчередьУстановитьРежим(ТелОчередь,Локальный = Ложь) Экспорт
	// Функция устанавливает режим работы для переданной очереди (Локальный или Конвергентный)
	// Возвращает пустую строку в случае успеха. В случае неудачи возвращает строку с описанием ошибки
	//-------------------------------------------------------------------------------------------------
	// ТелОчередь (строка или ссылка) - ссылка или наименование системной очереди
	// Локальный (булево) - Истина если необходимо установить локальный режим. Иначе - конвергентный
	//-------------------------------------------------------------------------------------------------

	НовыйВариант = Истина;
	Если НовыйВариант Тогда
		queue_name = ?(ТипЗнч(ТелОчередь) = Тип("СправочникСсылка.ТелОчереди"), СокрЛП(ТелОчередь.Наименование), СокрЛП(ТелОчередь));
		queue_mode = ?(Локальный = Ложь, "0", "1");
		
		Результат = "ОчередьУстановитьРежим: Ошибка переключения режима";
		Доступно = 		ТипЗнч(queue_name) = Тип("Строка")
					И	ТипЗнч(queue_mode) = Тип("Строка")
					И 	ЗначениеЗаполнено(queue_name)
					И 	ЗначениеЗаполнено(queue_mode);
		Если Не Доступно Тогда
			ЗаписьЖурналаРегистрации("ОчередьУстановитьРежим", УровеньЖурналаРегистрации.Ошибка, , "ТелОчередь = "+ТелОчередь+"; Локальный = "+ Локальный+"; queue_name = "+queue_name+"; queue_mode = "+ queue_mode, "Ошибка в типе/значении queue_name или queue_mode");
			Возврат (Результат);	
		КонецЕсли;
		ОпределениеСервиса 	= Новый WSОпределения("http://astws.main.luidorauto.ru:8081/asterisk_ws/soap/description");
		ВебСервис 			= Новый WSПрокси(ОпределениеСервиса, "http://tempuri.org/", "asterisk_ws", "asterisk_ws"); 
		json	= СтрШаблон( "{""queue_local"":""%1""}" , queue_mode);
		Ответ	= ВебСервис.queue_manage("edit", queue_name, json);	
	
		Если (ТипЗнч(Ответ) = Тип("Строка")) И (ЗначениеЗаполнено(Ответ)) Тогда
			ЗаписьЖурналаРегистрации("ОчередьУстановитьРежим", УровеньЖурналаРегистрации.Ошибка, , "ТелОчередь = "+ТелОчередь+"; Локальный = "+ Локальный+"; queue_name = "+queue_name+"; queue_mode = "+ queue_mode, "Ошибка при вызове вэб-сервиса change_queue_mode");
			Возврат (Результат);
		КонецЕсли;
		Возврат "";
	Иначе
		ОчередьСсылка = Конвертация.ТелОчередьПолучитьСсылку(ТелОчередь);
		РежимЛокальный = ?(Локальный = Истина,Истина,Ложь);
		СпрСсылка = ОчередьПолучить(ТелОчередь);
		
		// Проверим правильность переданных параметров
		//-------------------------------------------------------------------------------------------------
		Доступно = 		ЗначениеЗаполнено(ОчередьСсылка)
					И 	ЗначениеЗаполнено(СпрСсылка);
		
		Если (Доступно = Ложь) Тогда
			ТекстСообщения = "ОчередьУстановитьРежим: Переданная Очередь не зарегистрирована в системе, ";
			ТекстСообщения = ТекстСообщения + "либо сервер, обслуживающий ее не управляется через MySQL";
			Возврат (ТекстСообщения);
		КонецЕсли;
		
		// Получим список Агентов для очереди
		//-------------------------------------------------------------------------------------------------
		ТекстЗапроса = "
		|SELECT	MemberName AS Агент,(1 - ISNULL(Paused,0)) AS Активность
		|FROM	ВнешнийИсточникДанных." + СокрЛП(ОчередьСсылка.Сервер.ИсточникДанных) + ".Таблица.Агенты
		|WHERE	(queue_name = &Очередь)";
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("Очередь",ВРег(СокрЛП(ОчередьСсылка.Наименование)));
		Попытка
			ТЗАгенты = Запрос.Выполнить().Выгрузить();
		Исключение
			ТекстСообщения = "ОчередьУстановитьРежим: Ошибка переключения режима: " + СокрЛП(ОписаниеОшибки());
			Возврат (ТекстСообщения);
		КонецПопытки;
		
		// Каждого Агента очереди удалим из очереди и добавим снова, только с требуемым интерфейсом
		//-------------------------------------------------------------------------------------------------
		Для Каждого ТекСтрока Из ТЗАгенты Цикл
			Результат = ОчередиАгенты.АгентУдалить(ОчередьСсылка,ТекСтрока.Агент);
			Если (НЕ ЗначениеЗаполнено(Результат)) Тогда
				ОчередиАгенты.АгентДобавить(ОчередьСсылка,ТекСтрока.Агент,ТекСтрока.Активность,РежимЛокальный);
			КонецЕсли;
		КонецЦикла;
		
		// Скорректируем реквизит "Asterisk.TimeOut" (для локального режима - 10, иначе - 25 секунд)
		//-------------------------------------------------------------------------------------------------
		Попытка
			СпрОбъект = СпрСсылка.ПолучитьОбъект();
			СпрОбъект.TimeOut = ?(РежимЛокальный = Истина,10,25);
			СпрОбъект.Записать();
		Исключение
			ТекстСообщения = "ОчередьУстановитьРежим: Ошибка переключения режима: " + СокрЛП(ОписаниеОшибки());
			Возврат (ТекстСообщения);
		КонецПопытки;
		
		Возврат ("");
		
	КонецЕсли;
КонецФункции

Процедура ОчередьВЛокальныйРежим_6ч() Экспорт
	Очереди = Новый Массив();
	Очереди.Добавить("CHEL-SALES");

	ОчередиУстановитьРежим(Очереди, Истина);
КонецПроцедуры

Процедура ОчередьВЛокальныйРежим_7ч() Экспорт
	Очереди = Новый Массив();
	
	ОчередиУстановитьРежим(Очереди, Истина);	
КонецПроцедуры

Процедура ОчередьВЛокальныйРежим_8ч() Экспорт
	ТекДата = ТекущаяДата();
	                                     
	//Исключаем праздники: 08 марта
	Если День(ТекДата) = 8 И Месяц(ТекДата)=3 Тогда
		Возврат
	КонецЕсли;
	
	Очереди = Новый Массив();
	Очереди.Добавить("SALES1");
	Очереди.Добавить("CHEB-SALES");
	Очереди.Добавить("AZIMUT-SALES");
	Очереди.Добавить("SARANSK-SALES");
	
	ОчередиУстановитьРежим(Очереди, Истина);
КонецПроцедуры

Процедура ОчередьВЛокальныйРежим_8ч30м() Экспорт
	Очереди = Новый Массив();
	Очереди.Добавить("VLAD-SALES");
	
	ОчередиУстановитьРежим(Очереди, Истина);
КонецПроцедуры

Процедура ОчередьВЛокальныйРежим_9ч() Экспорт
	Очереди = Новый Массив();	
	ОчередиУстановитьРежим(Очереди, Истина);
КонецПроцедуры

Процедура ОчередьИзЛокальногоРежима_15ч() Экспорт
	Очереди = Новый Массив();
	Очереди.Добавить("UFA-SALES");
	Очереди.Добавить("CHEL-SALES");

	ОчередиУстановитьРежим(Очереди, Ложь);
КонецПроцедуры

Процедура ОчередьИзЛокальногоРежима_16ч() Экспорт
КонецПроцедуры

Процедура ОчередьИзЛокальногоРежима_17ч() Экспорт
	Очереди = Новый Массив();
	Очереди.Добавить("SARANSK-SALES");
	Очереди.Добавить("AZIMUT-SALES");
	Очереди.Добавить("SALES1");

	ОчередиУстановитьРежим(Очереди,Ложь);
КонецПроцедуры

Процедура ОчередьИзЛокальногоРежима_18ч() Экспорт
	Очереди = Новый Массив();
	Очереди.Добавить("CHEB-SALES");
	Очереди.Добавить("VLAD-SALES");   
	
	ОчередиУстановитьРежим(Очереди, Ложь);	
КонецПроцедуры

Функция ОчередиУстановитьРежим(Очереди,Локальный = Ложь) Экспорт
	// Изменяет режим работы для очередей
	// Очереди - массив из строк - имен очередей
	// Локальный - режим работы очеред
	// Возвращает пустую строку в случае успеха или строку с описанием ошибки в случае неудачи
	Доступно = ТипЗнч(Очереди) = Тип("Массив");
	
	Если Не Доступно Тогда
		Возврат "Передан пустой массив имен очередей";
	КонецЕсли;
	Для Каждого Очередь Из Очереди Цикл
		Попытка
			ОчередьУстановитьРежим(Очередь, Локальный);
		Исключение
			Продолжить;
		КонецПопытки;
	КонецЦикла;	
КонецФункции

//*************************************************************************************************
// АГЕНТЫ
//*************************************************************************************************

Функция АгентПолучить(ТелОчередь,ТелАгент) Экспорт

// Функция возвращает ссылку на элемент таблицы "Агенты" сервера Asterisk, которая получена путем
// поиска записи для Очереди и Агента. Функция возвращает Неопределено в случае неудачи
//-------------------------------------------------------------------------------------------------
// ТелОчередь (строка или ссылка) - номер телефона или наименование системной очереди
// ТелАгент (строка или ссылка) - внутренний телефон или системная очередь - удаляемый агент
//-------------------------------------------------------------------------------------------------
	ОчередьСсылка = Конвертация.ТелОчередьПолучитьСсылку(ТелОчередь);
	АгентСсылка = Конвертация.ТелПолучитьСсылку(ТелАгент);

// Проверим на возможность поиска данных
//-------------------------------------------------------------------------------------------------
	Доступно = ЗначениеЗаполнено(ОчередьСсылка);
	Доступно = Доступно И ЗначениеЗаполнено(АгентСсылка);
	Доступно = Доступно И ЗначениеЗаполнено(ОчередьСсылка.Сервер.ИсточникДанных);
	Ответ = Неопределено;

	Если (Доступно = Истина) Тогда
		ТекстЗапроса = "
		|SELECT	TOP 1 Ссылка
		|FROM	ВнешнийИсточникДанных." + СокрЛП(ОчередьСсылка.Сервер.ИсточникДанных) + ".Таблица.Агенты
		|WHERE	(Queue_Name = &Очередь) И (MemberName = &Агент)";

		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("Агент",ВРег(СокрЛП(АгентСсылка.Наименование)));
		Запрос.УстановитьПараметр("Очередь",ВРег(СокрЛП(ОчередьСсылка.Наименование)));
		Попытка
			Результат = Запрос.Выполнить().Выбрать();
		Исключение
			Данные = "ТелОчередь = "+ТелОчередь+"; ТелАгент = "+ТелАгент;
			Комментарий = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("АгентПолучить", УровеньЖурналаРегистрации.Ошибка, Метаданные.ОбщиеМодули.ОчередиАгенты, Данные,Комментарий);
			Возврат (Ответ)
		КонецПопытки;

		Если (Результат.Следующий()) Тогда
			Ответ = Результат.Ссылка;
		КонецЕсли;
	КонецЕсли;

	Возврат (Ответ);
КонецФункции

Функция АгентДобавитьЧерезВэбСервис(ТелОчередь,ТелАгент,Активность = Ложь,ТолькоЛокально = Неопределено) Экспорт

// Функция добавляет в переданную очередь заданного Агента через ВэбСервис. В отличие от функции
// АгентДобавить мы не знаем текущий режим работы очереди, поэтому определяем его косвенно - через таймаут. 
// Если параметр "ТолькоЛокально" равен Истине, то для агента в очереди прописывается SIP/НомерВнутрТелефона
//, т.е. вызов принудительно приземляется на стационарный телефонный аппарат. Возвращает
// пустую строку в случае успеха. Иначе - возвращает строку с описанием ошибки
//-------------------------------------------------------------------------------------------------
// ТелОчередь (строка или ссылка) - номер телефона или наименование системной очереди
// ТелАгент (строка или ссылка) - внутренний телефон или системная очередь - добавляемый агент
//-------------------------------------------------------------------------------------------------
	ОчередьСсылка = Конвертация.ТелОчередьПолучитьСсылку(ТелОчередь);
	АгентСсылка = Конвертация.ТелПолучитьСсылку(ТелАгент);

// Проверим правильность переданных параметров
//-------------------------------------------------------------------------------------------------
	Доступно = ЗначениеЗаполнено(ОчередьСсылка);
	Доступно = Доступно И ЗначениеЗаполнено(АгентСсылка);
	Доступно = Доступно И ЗначениеЗаполнено(ОчередьСсылка.Сервер.ИсточникДанных);

	Если (Доступно = Ложь) Тогда
		ТекстСообщения = "АгентДобавить: Переданные Очередь или Агент не зарегистрированы в системе, ";
		ТекстСообщения = ТекстСообщения + "либо сервер, обслуживающий эту пару не управляется через MySQL";
		Возврат (ТекстСообщения);
	КонецЕсли;

// Сформируем локальный интерфейс (STATE_INTERFACE) и маршрут (INTERFACE) для агента
//-------------------------------------------------------------------------------------------------
	ЛокИнтерфейс = "local/" + ВРег(СокрЛП(АгентСсылка.Код)) + "@default/n";
	МарИнтерфейс = ЛокИнтерфейс;
	
	//<Кошелев_22032017_12-03, +, Если у очереди режим "локальные вызовы", тогда у телефона должен быть интерфейс "SIP/">
	Если Не (ТолькоЛокально = Истина) Тогда
		//значит интерфейс может быть либо "local/" либо "SIP/"
		
		АстерискОчередьСсылка = ОчередиАгенты.ОчередьПолучить(ТелОчередь);
		Если АстерискОчередьСсылка <> Неопределено Тогда
			// нашли очередь во внешнем источнике данных
			
			TimeOut = 10; //default value
			TimeOut = АстерискОчередьСсылка.timeout;
			Если TimeOut < 25 И СтрНайти(МарИнтерфейс, "local/")>0 Тогда
				//значит очередь работает в режиме локальных вызовов, интерфейс сформировали некорректно, должен быть "SIP/", а не "local/"
				//изменим значение аргумента, чтобы отаботал следующий блок "Если...КонецЕсли;
				ТолькоЛокально = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//</Кошелев_22032017_12-03>

// Если требуемый режим включения агента - конвергентный, то интерфейс и маршрут не меняются
// Если требуемый режим включения - локальный, то убедимся в том, что переданный Агент является
// телефонов, а не очередью. Также убедимся в том, что у Агента есть стационарный аппарат
//-------------------------------------------------------------------------------------------------
	Если (ТолькоЛокально = Истина) Тогда
		Если (ТипЗнч(АгентСсылка) = Тип("СправочникСсылка.ТелВнутренние")) Тогда
			СтрСостояние = Телефония.ТелВнутреннийСостояниеПолучить(АгентСсылка);

			Если (СтрСостояние = Неопределено) Тогда
				ТекстСообщения = "АгентДобавить: Не удалось добавить переданного Агента в Очередь, т.к. не ";
				ТекстСообщения = ТекстСообщения + "удалось получить структуру состояния телефона Агента";
				Возврат (ТекстСообщения);
			КонецЕсли;

// Если у Агента есть стационарный аппарат, то разрешим локальный режим
//-------------------------------------------------------------------------------------------------
			Доступно = (СтрСостояние.ТипТерминала = "S");
			Доступно = Доступно ИЛИ (СтрСостояние.ТипТерминала = "A");

			Если (Доступно = Истина) Тогда
				// звонок будет поступать только на стационарный телефонный аппарат
				МарИнтерфейс = "SIP/" + ВРег(СокрЛП(АгентСсылка.Код));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	

// Найдем переданного Агента в заданной Очереди
// Если агент уже присутствует в очереди и его интерфейс совпадает с вычисленным МарИнтерфейсом,
// то завершим работу функции - все исполнено
//-------------------------------------------------------------------------------------------------
	СпрСсылка = АгентПолучить(ОчередьСсылка,АгентСсылка);

	Если (СпрСсылка <> Неопределено) Тогда
		Если (ВРег(СокрЛП(СпрСсылка.Interface)) = ВРег(СокрЛП(МарИнтерфейс))) Тогда
			Возврат ("");
		КонецЕсли;

		АгентУдалить(ОчередьСсылка,АгентСсылка);
	КонецЕсли;

// Добавим Агента в очередь в вычисленным интерфейсом
//-------------------------------------------------------------------------------------------------
	ИмяСервера = СокрЛП(ОчередьСсылка.Сервер.ИсточникДанных);
	СпрОбъект = ВнешниеИсточникиДанных[ИмяСервера].Таблицы.Агенты.СоздатьОбъект();

// Если мы находимся здесь, значит существует объект "СпрОбъект", который требует перезаписи
//-------------------------------------------------------------------------------------------------
	СпрОбъект.MemberName = ВРег(СокрЛП(АгентСсылка.Наименование));
	СпрОбъект.Queue_Name = ВРег(СокрЛП(ОчередьСсылка.Наименование));
	СпрОбъект.State_Interface = СокрЛП(ЛокИнтерфейс);
	СпрОбъект.Interface = СокрЛП(МарИнтерфейс);
	СпрОбъект.Paused = ?(Активность,0,1);
	Ответ = "";

	Попытка
		СпрОбъект.Записать();
	Исключение
		Ответ = "При попытке добавления агента [" + СокрЛП(АгентСсылка.Наименование) + "] в ";
		Ответ = Ответ + "системную очередь [" + СокрЛП(ОчередьСсылка.Наименование) + "] ";
		Ответ = Ответ + "произошла ошибка: " + СокрЛП(ОписаниеОшибки());
	КонецПопытки;

	Возврат (Ответ);
КонецФункции

Функция АгентДобавить(ТелОчередь,ТелАгент,Активность = Ложь,ТолькоЛокально = Неопределено) Экспорт

// Функция добавляет в переданную очередь заданного Агента. В отличие от функции
// АгентДобавитьЧерезВэбСервис мы точно знаем текущий режим работы очереди.
// Если параметр "ТолькоЛокально" равен Истине, то для агента в очереди прописывается SIP/НомерВнутрТелефона
//, т.е. вызов принудительно приземляется на стационарный телефонный аппарат. Возвращает
// пустую строку в случае успеха. Иначе - возвращает строку с описанием ошибки
//-------------------------------------------------------------------------------------------------
// ТелОчередь (строка или ссылка) - номер телефона или наименование системной очереди
// ТелАгент (строка или ссылка) - внутренний телефон или системная очередь - добавляемый агент
//-------------------------------------------------------------------------------------------------
	ОчередьСсылка = Конвертация.ТелОчередьПолучитьСсылку(ТелОчередь);
	АгентСсылка = Конвертация.ТелПолучитьСсылку(ТелАгент);

// Проверим правильность переданных параметров
//-------------------------------------------------------------------------------------------------
	Доступно = ЗначениеЗаполнено(ОчередьСсылка);
	Доступно = Доступно И ЗначениеЗаполнено(АгентСсылка);
	Доступно = Доступно И ЗначениеЗаполнено(ОчередьСсылка.Сервер.ИсточникДанных);

	Если (Доступно = Ложь) Тогда
		ТекстСообщения = "АгентДобавить: Переданные Очередь или Агент не зарегистрированы в системе, ";
		ТекстСообщения = ТекстСообщения + "либо сервер, обслуживающий эту пару не управляется через MySQL";
		Возврат (ТекстСообщения);
	КонецЕсли;

// Сформируем локальный интерфейс (STATE_INTERFACE) и маршрут (INTERFACE) для агента
//-------------------------------------------------------------------------------------------------
	ЛокИнтерфейс = "local/" + ВРег(СокрЛП(АгентСсылка.Код)) + "@default/n";
	МарИнтерфейс = ЛокИнтерфейс;
	
// Если требуемый режим включения агента - конвергентный, то интерфейс и маршрут не меняются
// Если требуемый режим включения - локальный, то убедимся в том, что переданный Агент является
// телефонов, а не очередью. Также убедимся в том, что у Агента есть стационарный аппарат
//-------------------------------------------------------------------------------------------------
	Если (ТолькоЛокально = Истина) Тогда
		Если (ТипЗнч(АгентСсылка) = Тип("СправочникСсылка.ТелВнутренние")) Тогда
			СтрСостояние = Телефония.ТелВнутреннийСостояниеПолучить(АгентСсылка);

			Если (СтрСостояние = Неопределено) Тогда
				ТекстСообщения = "АгентДобавить: Не удалось добавить переданного Агента в Очередь, т.к. не ";
				ТекстСообщения = ТекстСообщения + "удалось получить структуру состояния телефона Агента";
				Возврат (ТекстСообщения);
			КонецЕсли;

// Если у Агента есть стационарный аппарат, то разрешим локальный режим
//-------------------------------------------------------------------------------------------------
			Доступно = (СтрСостояние.ТипТерминала = "S");
			Доступно = Доступно ИЛИ (СтрСостояние.ТипТерминала = "A");

			Если (Доступно = Истина) Тогда
				// звонок будет поступать только на стационарный телефонный аппарат
				МарИнтерфейс = "SIP/" + ВРег(СокрЛП(АгентСсылка.Код));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	

// Найдем переданного Агента в заданной Очереди
// Если агент уже присутствует в очереди и его интерфейс совпадает с вычисленным МарИнтерфейсом,
// то завершим работу функции - все исполнено
//-------------------------------------------------------------------------------------------------
	СпрСсылка = АгентПолучить(ОчередьСсылка,АгентСсылка);

	Если (СпрСсылка <> Неопределено) Тогда
		Если (ВРег(СокрЛП(СпрСсылка.Interface)) = ВРег(СокрЛП(МарИнтерфейс))) Тогда
			Возврат ("");
		КонецЕсли;

		АгентУдалить(ОчередьСсылка,АгентСсылка);
	КонецЕсли;

// Добавим Агента в очередь в вычисленным интерфейсом
//-------------------------------------------------------------------------------------------------
	ИмяСервера = СокрЛП(ОчередьСсылка.Сервер.ИсточникДанных);
	СпрОбъект = ВнешниеИсточникиДанных[ИмяСервера].Таблицы.Агенты.СоздатьОбъект();

// Если мы находимся здесь, значит существует объект "СпрОбъект", который требует перезаписи
//-------------------------------------------------------------------------------------------------
	СпрОбъект.MemberName = ВРег(СокрЛП(АгентСсылка.Наименование));
	СпрОбъект.Queue_Name = ВРег(СокрЛП(ОчередьСсылка.Наименование));
	СпрОбъект.State_Interface = СокрЛП(ЛокИнтерфейс);
	СпрОбъект.Interface = СокрЛП(МарИнтерфейс);
	СпрОбъект.Paused = ?(Активность,0,1);
	Ответ = "";

	Попытка
		СпрОбъект.Записать();
	Исключение
		Ответ = "При попытке добавления агента [" + СокрЛП(АгентСсылка.Наименование) + "] в ";
		Ответ = Ответ + "системную очередь [" + СокрЛП(ОчередьСсылка.Наименование) + "] ";
		Ответ = Ответ + "произошла ошибка: " + СокрЛП(ОписаниеОшибки());
	КонецПопытки;

	Возврат (Ответ);
КонецФункции

Функция АгентУдалить(ТелОчередь,ТелАгент) Экспорт

// Функция удаляет из переданной Очереди заданного Агента. Возвращает пустую строку в случае успеха
// При возникновении ошибки возвращает строку с описанием ошибки
//-------------------------------------------------------------------------------------------------
// ТелОчередь (строка или ссылка) - номер телефона или наименование системной очереди
// ТелАгент (строка или ссылка) - внутренний телефон или системная очередь - удаляемый агент
//-------------------------------------------------------------------------------------------------
	СпрСсылка = АгентПолучить(ТелОчередь,ТелАгент);

	Если (НЕ ЗначениеЗаполнено(СпрСсылка)) Тогда
		ТекстСообщения = "АгентУдалить: Переданная пара Очередь/Агент не найдена в системных очередях, ";
		ТекстСообщения = ТекстСообщения + "либо сервер, обслуживающий эту пару не управляется через MySQL";
		Возврат (ТекстСообщения);
	КонецЕсли;

// Выполним удаление
//-------------------------------------------------------------------------------------------------
	Попытка
		СпрСсылка.ПолучитьОбъект().Удалить();
	Исключение
		ТекстСообщения = "При попытке удаления агента """ + СокрЛП(ТелАгент);
		ТекстСообщения = ТекстСообщения + """ из очереди """ + СокрЛП(ТелОчередь);
		ТекстСообщения = ТекстСообщения + """ произошла ошибка: " + СокрЛП(ОписаниеОшибки());
		Возврат (ТекстСообщения);
	КонецПопытки;

	Возврат ("");
КонецФункции

//-------------------------------------------------------------------------------------------------

Функция АгентПаузаПолучить(ТелОчередь,ТелАгент) Экспорт

// Функция возвращает состояние флага "Paused" (булево) для переданного Агента в переданной Очереди
// Функция возвращает Неопределено в случае если не удалось получить сведения
//-------------------------------------------------------------------------------------------------
// ТелОчередь (строка или ссылка) - номер телефона или наименование системной очереди
// ТелАгент (строка или ссылка) - внутренний телефон или системная очередь - удаляемый агент
//-------------------------------------------------------------------------------------------------
	СпрСсылка = АгентПолучить(ТелОчередь,ТелАгент);
	Ответ = Неопределено;

	Если (ЗначениеЗаполнено(СпрСсылка)) Тогда
		Ответ = ?(СпрСсылка.Paused = 1,Истина,Ложь);
	КонецЕсли;

	Возврат (Ответ);
КонецФункции

Функция АгентПаузаИзменить(ТелОчередь,ТелАгент,НовыйРежим = Неопределено) Экспорт

// Функция включает или отключает у переданного агента в переданной очереди режим паузы.
// Возвращает пустую строку в случае успеха, иначе - возвращает строку с описанием ошибки
//-------------------------------------------------------------------------------------------------
// ТелОчередь (строка или ссылка) - номер телефона или наименование системной очереди
// ТелАгент (строка или ссылка) - внутренний телефон или системная очередь - удаляемый агент
// Режим (булево) - Истина включает режим паузы, Ложь - отключает
//-------------------------------------------------------------------------------------------------
	СпрСсылка = АгентПолучить(ТелОчередь,ТелАгент);

	Если (НЕ ЗначениеЗаполнено(СпрСсылка)) Тогда
		ТекстСообщения = "АгентИзменитьПаузу: Переданная пара Очередь/Агент не найдена в системных очередях, ";
		ТекстСообщения = ТекстСообщения + "либо сервер, обслуживающий эту пару не управляется через MySQL";
		Возврат (ТекстСообщения);
	КонецЕсли;

// Получим требуемое новое состояние
// Выполним отключение режима паузы
// Зарегистрируем событие переключения
//-------------------------------------------------------------------------------------------------
	ТекРежим = ?(СпрСсылка.Paused = 1,Истина,Ложь);
	Доступно = (ТипЗнч(НовыйРежим) = Тип("Булево"));
	Доступно = Доступно И (ТекРежим <> НовыйРежим);

	Если (Доступно = Истина) Тогда
		Если СокрЛП(Константы.Отладка.Получить())="AgentBlockSet" Тогда
			Данные = "ТелАгент = "+ТелАгент;
			ЗаписьЖурналаРегистрации("АгентПаузаИзменить", УровеньЖурналаРегистрации.Ошибка, Метаданные.WebСервисы.ОбщегоНазначения, Данные);
		КонецЕсли;		
		Попытка
			СпрОбъект = СпрСсылка.ПолучитьОбъект();
			СпрОбъект.Paused = ?(НовыйРежим = Истина,1,0);
			СпрОбъект.Записать();

			АгентСостояниеЗарегистрировать(ТелАгент,НовыйРежим);
		Исключение
			Возврат ("АгентИзменитьПаузу: Ошибка записи: " + СокрЛП(ОписаниеОшибки()));
		КонецПопытки;
	КонецЕсли;

	Возврат ("");
КонецФункции

Процедура АгентСостояниеЗарегистрировать(ТелВнутренний,НовыйРежим) Экспорт
КонецПроцедуры


//*************************************************************************************************
// ЦЕЛЕВЫЕ АГЕНТЫ
//*************************************************************************************************

Функция ЦелевойАгентАктивировать(ТелВнутренний) Экспорт
	Ответ = АгентАктивироватьВоВсехОчередях(ТелВнутренний); 
	Возврат Ответ;

// Функция снимает с паузы (активирует) агента с переданным номером телефона
// В случае успеха возвращает пустую строку. Иначе - строку с описанием ошибки
//-------------------------------------------------------------------------------------------------
	ТелСсылка = Конвертация.ТелВнутреннийПолучитьСсылку(ТелВнутренний);

	Если (НЕ ЗначениеЗаполнено(ТелСсылка)) Тогда
		Возврат ("АгентАктивировать: Переданное значение не является внутренним телефоном");
	КонецЕсли;

// Определим является ли внутренний абонент звонка целевым
//-------------------------------------------------------------------------------------------------
	ЦелевойАгент = РегистрыСведений.АгентыЦелевые.СоздатьМенеджерЗаписи();
	ЦелевойАгент.Телефон = ТелСсылка;
	ЦелевойАгент.Прочитать();

	Если (ЦелевойАгент.Выбран() = Ложь) Тогда
		Возврат ("АгентАктивировать: Переданный телефон не является целевым агентом");
	КонецЕсли;

// Агент является целевым
// Выясним можно ли Активировать агента (проверим наличие у него действующей блокировки)
//-------------------------------------------------------------------------------------------------
	Доступно = ЗначениеЗаполнено(ЦелевойАгент.КонБлокировки);
	Доступно = Доступно И (ЦелевойАгент.КонБлокировки >= ТекущаяДата());

	Если (Доступно = Истина) Тогда
		Ответ = "Подключение к очереди звонков запрещено. Причина: " + СокрЛП(ЦелевойАгент.ТекстБлокировки) + ". ";
		Ответ = Ответ + "Запрет действует до " + СокрЛП(Формат(ЦелевойАгент.КонБлокировки,"ДЛФ=DDT")) + " (Мск)";
		Возврат (Ответ);
	КонецЕсли;

// Все проверки успешно завершены
// Переключим переданного агента в активный режим
//-------------------------------------------------------------------------------------------------
	Ответ = АгентПаузаИзменить(ЦелевойАгент.ТочкаЦелевая.Очередь,ТелСсылка,Ложь);
	Возврат (Ответ);

КонецФункции

Функция АгентАктивироватьВоВсехОчередях(ТелВнутренний) Экспорт
	
	// Функция снимает с паузы (активирует) агента с переданным номером телефона
	// В случае успеха возвращает пустую строку. Иначе - строку с описанием ошибки
	//-------------------------------------------------------------------------------------------------
	ТелСсылка = Конвертация.ТелВнутреннийПолучитьСсылку(ТелВнутренний);
	
	Если (НЕ ЗначениеЗаполнено(ТелСсылка)) Тогда
		Возврат ("АгентАктивировать: Переданное значение не является внутренним телефоном");
	КонецЕсли;
	
	// Определим является ли внутренний абонент звонка целевым
	//-------------------------------------------------------------------------------------------------
	ЦелевойАгент = РегистрыСведений.АгентыЦелевые.СоздатьМенеджерЗаписи();
	ЦелевойАгент.Телефон = ТелСсылка;
	ЦелевойАгент.Прочитать();
	
	//<Кошелев_10022017_09-54, //, Обработка всех очередей, в  которых переданный номер является агентом, а не только целевой>
	//Если (ЦелевойАгент.Выбран() = Ложь) Тогда
	//	Возврат ("АгентАктивировать: Переданный телефон не является целевым агентом");
	//КонецЕсли;
	//</Кошелев_10022017_09-54>
	
	
	//<Кошелев_10022017_09-54, +, Если агент является целевым>
	Если ЦелевойАгент.Выбран() Тогда
		//</Кошелев_10022017_09-54>	
		
		// Агент является целевым
		// Выясним можно ли Активировать агента (проверим наличие у него действующей блокировки)
		//-------------------------------------------------------------------------------------------------
		Доступно = ЗначениеЗаполнено(ЦелевойАгент.КонБлокировки);
		Доступно = Доступно И (ЦелевойАгент.КонБлокировки >= ТекущаяДата());
		
		Если (Доступно = Истина) Тогда
			Ответ = "Подключение к очереди звонков запрещено. Причина: " + СокрЛП(ЦелевойАгент.ТекстБлокировки) + ". ";
			Ответ = Ответ + "Запрет действует до " + СокрЛП(Формат(ЦелевойАгент.КонБлокировки,"ДЛФ=DDT")) + " (Мск)";
			Возврат (Ответ);
		КонецЕсли;
		
	//<Кошелев_10022017_09-54, +, Если агент является целевым>
	КонецЕсли;
	//</Кошелев_10022017_09-54>	
	
	
	// Все проверки успешно завершены
	// Переключим переданного агента в активный режим
	//-------------------------------------------------------------------------------------------------
	
	//<Кошелев_01012017_12-13, =>, Обработка всех очередей, в  которых переданный номер является агентом, а не только целевой>
	
	//Ответ = АгентПаузаИзменить(ЦелевойАгент.ТочкаЦелевая.Очередь,ТелСсылка,Ложь);
	//Возврат (Ответ);
	//=>
	НачатьТранзакцию();
	Ответ = "";
	МассивОчередей = ОчередиПолучитьПоАгенту(ТелВнутренний);
	Если ТипЗнч(МассивОчередей)<> Тип("Массив") Тогда
		Ответ = "АгентАктивировать: Переданный телефон не найден ни в одной очереди";
		Возврат Ответ;
	КонецЕсли;
	Если МассивОчередей.Количество()= 0 Тогда
		Ответ = "АгентАктивировать: Переданный телефон не найден ни в одной очереди";
		Возврат Ответ;
	КонецЕсли;
	
	Для Каждого ОчередьСсылка Из МассивОчередей Цикл
		Ответ = АгентПаузаИзменить(ОчередьСсылка,ТелСсылка,Ложь);
		
		//Прерви, если возникла ошибка
		Если СтрДлина(Ответ)>0 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	//Если возникла ошибка
	Если СтрДлина(Ответ)>0 Тогда
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		Возврат Ответ;	
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	Возврат Ответ;
	//</Кошелев_01012017_12-13>
	
КонецФункции


Функция ЦелевойАгентЗаблокировать(СтрПараметры) Экспорт

// Функция выполняет блокировку агента (создает заявку на блокировку)
// Возвращает пустую строку если заявка успешно создана или уже существует. Если при создании
// заявки возникла ошибка, то функция возвращает строку с описанием ошибки
//-------------------------------------------------------------------------------------------------
// Входные параметры:
// - Телефон (строка или ссылка) - внутренний телефон блокируемого агента
// - КонПериода (дата и время) - дата и время окончания действия блокировки
// - Комментарий (строка) - комментарий к блокировке (текст сообщения возвращаемого агенту)
//-------------------------------------------------------------------------------------------------
	Доступно = ЗначениеЗаполнено(СтрПараметры.Телефон);
	Доступно = Доступно И ЗначениеЗаполнено(СтрПараметры.КонПериода);
	Доступно = Доступно И ЗначениеЗаполнено(СтрПараметры.Комментарий);

	Если (Доступно = Ложь) Тогда
		Возврат ("АгентЗаблокировать: Ошибка в переданных параметрах");
	КонецЕсли;

// Получим ссылку на переданный внутренний телефон
//-------------------------------------------------------------------------------------------------
	ТелСсылка = Конвертация.ТелВнутреннийПолучитьСсылку(СтрПараметры.Телефон);

	Если (НЕ ЗначениеЗаполнено(ТелСсылка)) Тогда
		Возврат ("АгентЗаблокировать: Переданный номер телефона не зарегистрирован как внутренний телефон");
	КонецЕсли;

// Определим является ли внутренний абонент звонка целевым
//-------------------------------------------------------------------------------------------------
	ЦелевойАгент = РегистрыСведений.АгентыЦелевые.СоздатьМенеджерЗаписи();
	ЦелевойАгент.Телефон = ТелСсылка;
	ЦелевойАгент.Прочитать();

	Если (ЦелевойАгент.Выбран() = Ложь) Тогда
		Возврат ("АгентЗаблокировать: Переданный телефон не является целевым агентом");
	КонецЕсли;

// Переданный телефон является целевым агентом
// Проверим на наличие действующей в настоящее время блокировки
//-------------------------------------------------------------------------------------------------
	Доступно = ЗначениеЗаполнено(ЦелевойАгент.КонБлокировки);
	Доступно = Доступно И (ЦелевойАгент.КонБлокировки >= ТекущаяДата());

	Если (Доступно = Истина) Тогда
		Возврат ("");
	КонецЕсли;

// Попытаемся деактивировать агента
//-------------------------------------------------------------------------------------------------
	//<Кошелев_10022017_11-24, =>, создаем запись в РС.Целевые агенты, если удалось установить паузу для агента во всех очередях>
	//ЦелевойАгентДеактивировать(ТелСсылка,Ложь);
	Ответ = "";
	Ответ = АгентДеактивироватьВоВсехОчередях(ТелСсылка, Ложь, СтрПараметры.Комментарий);
	Если Ответ <> "" Тогда
		Возврат("АгентЗаблокировать: Ошибка деактивациии агента");
	КонецЕсли;
	//</Кошелев_10022017_11-24>

// Создадим новую блокировку
//-------------------------------------------------------------------------------------------------
	ЦелевойАгент.ТекстБлокировки 	= СокрЛП(СтрПараметры.Комментарий);
	ЦелевойАгент.КонБлокировки 		= СтрПараметры.КонПериода;
	ЦелевойАгент.НачБлокировки 		= ТекущаяДата();
	ЦелевойАгент.ИницаторБлокировки = Справочники.Пользователи.ПустаяСсылка();
	ЦелевойАгент.Записать(Истина);

	Возврат ("");
КонецФункции

Функция ЦелевойАгентДеактивировать(ТелВнутренний,Вручную = Ложь) Экспорт
	
	//<Кошелев_01012017_12-29, +, Деактивировть во всех очередях, а не только в целевой>
	Ответ = АгентДеактивироватьВоВсехОчередях(ТелВнутренний,Вручную);
	Возврат Ответ;
	//</Кошелев_01012017_12-29>
	
	// Функция устанавливает на паузу агента с переданным номером телефона
	// В случае успеха возвращает пустую строку. Иначе - строку с описанием ошибки
	//-------------------------------------------------------------------------------------------------
	ТелСсылка = Конвертация.ТелВнутреннийПолучитьСсылку(ТелВнутренний);
	
	Если (НЕ ЗначениеЗаполнено(ТелСсылка)) Тогда
		Возврат ("АгентДеактивировать: Переданное значение не является внутренним телефоном");
	КонецЕсли;
	
	// Определим является ли внутренний абонент звонка целевым
	//-------------------------------------------------------------------------------------------------
	ЦелевойАгент = РегистрыСведений.АгентыЦелевые.СоздатьМенеджерЗаписи();
	ЦелевойАгент.Телефон = ТелСсылка;
	ЦелевойАгент.Прочитать();
	
	Если (ЦелевойАгент.Выбран() = Ложь) Тогда
		Возврат ("АгентДеактивировать: Переданный телефон не является целевым агентом");
	КонецЕсли;
	
	// Получим ссылку на основную системную очередь агента
	//-------------------------------------------------------------------------------------------------
	
	ОчередьСсылка = ЦелевойАгент.ТочкаЦелевая.Очередь;
	
	ИмяСервера = СокрЛП(ОчередьСсылка.Сервер.ИсточникДанных);
	
	Если (НЕ ЗначениеЗаполнено(ИмяСервера)) Тогда
		Возврат ("АгентДеактивировать: Переданный телефон принадлежит неуправляемому серверу телефонии");
	КонецЕсли;
	
	// Агент является целевым
	// Выясним можно ли деактивировать агента без риска опустошения очереди
	//-------------------------------------------------------------------------------------------------
	ТекстЗапроса = "
	|SELECT	COUNT(*) AS Количество
	|FROM	ВнешнийИсточникДанных." + ИмяСервера + ".Таблица.Агенты
	|WHERE	(Queue_Name = &Очередь) И (MemberName <> &Телефон) И (ISNULL(Paused,0) = 0)";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Телефон",СокрЛП(ТелСсылка.Код));
	Запрос.УстановитьПараметр("Очередь",СокрЛП(ОчередьСсылка.Наименование));
	Результат = Запрос.Выполнить().Выбрать();
	
	Если (Результат.Следующий() И Результат.Количество > 0) Тогда
		Ответ = АгентПаузаИзменить(ОчередьСсылка,ТелСсылка,Истина);
		Возврат (Ответ);
	КонецЕсли;
	
	// Если мы оказались здесь, значит текущий агент является единственным активным агентом в очереди
	// Если функция вызвана неинтерактивно (агент деактивируется системой - параметр "Вручную" = Ложь)
	// то больше никаких проверок выполнять не будем, т.е. откажем в деактивации
	//-------------------------------------------------------------------------------------------------
	СтрРасписание = ОбщегоНазначения.РежимРаботыНаДатуПолучить(ТекущаяДата(),ЦелевойАгент.ТочкаЦелевая);
	Доступно = (СтрРасписание.Режим = Перечисления.РежимРаботыОбъекта.Выходной);
	Доступно = Доступно ИЛИ (Вручную = Ложь);
	
	Если (Доступно = Истина) Тогда
		Возврат ("АгентДеактивировать: Переданный агент является единственным активным в очереди");
	КонецЕсли;
	
	// Если мы оказались здесь, значит текущий агент является единственным активным агентом в очереди и
	// этот агент сам себя пытается принудительно деактивировать. Разрешим это если до окончания работы
	// очереди осталось не более 30 минут. Расчитаем локальное время агента и увеличим его на 30 минут
	//-------------------------------------------------------------------------------------------------
	СмещениеВремени = (ОчередьСсылка.Сервер.ТочкаРазмещения.Родитель.СмещениеВремени);
	ВремяАгента = (ТекущаяДата() + СмещениеВремени * 3600 + 1800);
	
	ВремяОкончания = (Час(СтрРасписание.КонВремя) * 3600) + (Минута(СтрРасписание.КонВремя) * 60);
	ВремяОкончания = (НачалоДня(ТекущаяДата()) + ВремяОкончания);
	
	Если (ВремяАгента < ВремяОкончания) Тогда
		Ответ = "Отключение запрещено, т.к. в противном случае в очереди не останется ";
		Ответ = Ответ + "активных агентов. Полная деактивация очереди разрешена не ранее ";
		Ответ = Ответ + СокрЛП(Формат(СтрРасписание.КонВремя,"ДФ=""ЧЧ 'час.' мм 'мин.'"""));
		Возврат (Ответ);
	КонецЕсли;
	
	// Все проверки успешно завершены
	// Переключим переданного агента в режим паузы
	//-------------------------------------------------------------------------------------------------
	Ответ = АгентПаузаИзменить(ОчередьСсылка,ТелСсылка,Истина);
	
	Возврат (Ответ);
КонецФункции

//<Кошелев>
Функция АгентДеактивироватьВоВсехОчередях(ТелВнутренний,Вручную = Ложь, ТекстБлокировки = "") Экспорт
	//Когда Вручную = Ложь тогда это неинтерактивый вызов функции (напр. как часть вэб-сервиса)
	//Когда Вручную = Истина тогда это интерактивный вызов функции из интерфейса агрегатора (напр. оператор КЦ)
	//Если вызов из веб-сервиса и ТекстБлокировки = "Были зафиксированы звонки ожидающие обработки более суток"
	//и агент имеет признак не блокировать за ожидающие обработки более суток, тогда блокировка не выполняется
	
	// Функция устанавливает на паузу агента с переданным номером телефона
	// В случае успеха возвращает пустую строку. Иначе - строку с описанием ошибки
	//-------------------------------------------------------------------------------------------------
	
	ТелСсылка = Конвертация.ТелВнутреннийПолучитьСсылку(ТелВнутренний);
	
	Если (НЕ ЗначениеЗаполнено(ТелСсылка)) Тогда
		Возврат ("АгентДеактивировать: Переданное значение не является внутренним телефоном");
	КонецЕсли;
	
	// Определим является ли внутренний абонент звонка целевым
	//-------------------------------------------------------------------------------------------------
	ЦелевойАгент = РегистрыСведений.АгентыЦелевые.СоздатьМенеджерЗаписи();
	ЦелевойАгент.Телефон = ТелСсылка;
	ЦелевойАгент.Прочитать();
		
	Ответ = "";
	МассивОчередей = ОчередиПолучитьПоАгенту(ТелВнутренний);
	Если ТипЗнч(МассивОчередей)<> Тип("Массив") Тогда
		Ответ = "АгентАктивировать: Переданный телефон не найден ни в одной очереди";
		Возврат Ответ;
	КонецЕсли;
	Если МассивОчередей.Количество()= 0 Тогда
		Ответ = "АгентАктивировать: Переданный телефон не найден ни в одной очереди";
		Возврат Ответ;
	КонецЕсли;
	
	//В этом цикле ничего не записываем во внешние источники данных, только проверяем
	//-------------------------------------------------------------------------------
	Для Каждого ОчередьСсылка Из МассивОчередей Цикл
		
		ИмяСервера = СокрЛП(ОчередьСсылка.Сервер.ИсточникДанных);
		
		Если (НЕ ЗначениеЗаполнено(ИмяСервера)) Тогда
			Ответ = "АгентДеактивировать: Переданный телефон принадлежит неуправляемому серверу телефонии";
			Прервать;
		КонецЕсли;
		
		// Если функция вызвана интерактивно (агент деактивируется оператором КЦ - параметр "Вручную" = Истина)
		//тогда никаких проверок не выполняем
		//------------------------------------------------------------------------------------------------
		Если Вручную = Истина Тогда
				Продолжить;
		КонецЕсли;
				
		//Если оказались здесь, значит функция вызвана неинтерактивно, самим агентом (агент деактивируется системой - параметр "Вручную" = Ложь)
		//Проверки выполняются только для агентов, у которых одна из очередей является целевой.
		//Агент является целевым
		//----------------------------------------------------------------------------------------------------
		Если (ЦелевойАгент.Выбран() = Истина) Тогда
			
			//Доступно = ТекстБлокировки = "Были зафиксированы звонки ожидающие обработки более суток";
			//Доступно = Доступно И ЦелевойАгент.НеБлокироватьЗаЗвонкиОжидающиеОбработкиБолееСуток = Истина;	
			//Если Доступно Тогда
			//	Ответ = "АгентДеактивировать: Переданный агент имеет признак не блокировать за ожидающие обработки более суток" + ОчередьСсылка.Наименование;
			//	Прервать;
			//КонецЕсли;
			
			// Выясним можно ли деактивировать агента без риска опустошения очереди
			//-------------------------------------------------------------------------------------------------
			ТекстЗапроса = "
			|SELECT	COUNT(*) AS Количество
			|FROM	ВнешнийИсточникДанных." + ИмяСервера + ".Таблица.Агенты
			|WHERE	(Queue_Name = &Очередь) И (MemberName <> &Телефон) И (ISNULL(Paused,0) = 0)";
			
			Запрос = Новый Запрос;
			Запрос.Текст = ТекстЗапроса;
			Запрос.УстановитьПараметр("Телефон",СокрЛП(ТелСсылка.Код));
			Запрос.УстановитьПараметр("Очередь",СокрЛП(ОчередьСсылка.Наименование));
			Попытка
				Результат = Запрос.Выполнить().Выбрать();
			Исключение
				Ответ = "АгентДеактивировать: Ошибка доступа к внешнему источнику данных";
			Прервать;
	
			КонецПопытки;
			
			Если (Результат.Следующий() И Результат.Количество > 0) Тогда
				Продолжить;
			КонецЕсли;
			
			// Если мы оказались здесь, значит текущий агент является единственным активным агентом в очереди
			// Если функция вызвана неинтерактивно (агент деактивируется системой - параметр "Вручную" = Ложь)
			// то больше никаких проверок выполнять не будем, т.е. откажем в деактивации
			//-------------------------------------------------------------------------------------------------
			СтрРасписание = ОбщегоНазначения.РежимРаботыНаДатуПолучить(ТекущаяДата(),ЦелевойАгент.ТочкаЦелевая);
			Доступно = (СтрРасписание.Режим = Перечисления.РежимРаботыОбъекта.Выходной);
			Доступно = Доступно ИЛИ (Вручную = Ложь);
			
			Если (Доступно = Истина) Тогда
				Ответ = "АгентДеактивировать: Переданный агент является единственным активным в очереди " + ОчередьСсылка.Наименование;
				Прервать;
			КонецЕсли;
			
			// Если мы оказались здесь, значит текущий агент является единственным активным агентом в очереди и
			// этот агент сам себя пытается принудительно деактивировать. Разрешим это если до окончания работы
			// очереди осталось не более 30 минут. Расчитаем локальное время агента и увеличим его на 30 минут
			//-------------------------------------------------------------------------------------------------
			СмещениеВремени = (ОчередьСсылка.Сервер.ТочкаРазмещения.Родитель.СмещениеВремени);
			ВремяАгента = (ТекущаяДата() + СмещениеВремени * 3600 + 1800);
			
			ВремяОкончания = (Час(СтрРасписание.КонВремя) * 3600) + (Минута(СтрРасписание.КонВремя) * 60);
			ВремяОкончания = (НачалоДня(ТекущаяДата()) + ВремяОкончания);
			
			Если (ВремяАгента < ВремяОкончания) Тогда
				Ответ = "Отключение запрещено, т.к. в противном случае в очереди не останется ";
				Ответ = Ответ + "активных агентов. Полная деактивация очереди разрешена не ранее ";
				Ответ = Ответ + СокрЛП(Формат(СтрРасписание.КонВремя,"ДФ=""ЧЧ 'час.' мм 'мин.'"""));
				Прервать;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
	//Если возникла ошибка
	Если СтрДлина(Ответ)>0 Тогда
		Возврат Ответ;	
	КонецЕсли;
	
	//В этом цикле записываем во внешние источники данных
	//---------------------------------------------------
	Для Каждого ОчередьСсылка Из МассивОчередей Цикл
		Если СокрЛП(Константы.Отладка.Получить())="AgentBlockSet" Тогда
			Данные = "ТелСсылка = "+ТелСсылка+",ОчередьСсылка = "+ОчередьСсылка;
			ЗаписьЖурналаРегистрации("АгентДеактивироватьВоВсехОчередях", УровеньЖурналаРегистрации.Ошибка, Метаданные.WebСервисы.ОбщегоНазначения, Данные);
		КонецЕсли;

		Ответ = АгентПаузаИзменить(ОчередьСсылка,ТелСсылка,Истина);
		Если СтрДлина(Ответ)>0 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;

	
	Возврат Ответ;
КонецФункции  //<Кошелев>



//*************************************************************************************************
// КОНТАКТ-ЦЕНТРЫ
//*************************************************************************************************

Функция КонтактЦентрыТелефоныПолучить() Экспорт

// Функция возвращает таблицу значений с номерами телефонов и системных очередей всех существующих
// в системе контакт-центров. В случае ошибки функция возвращает пустую таблицу значений
//-------------------------------------------------------------------------------------------------
	Ответ = Новый ТаблицаЗначений;
	Ответ.Колонки.Добавить("Телефон");
	Ответ.Колонки.Добавить("КонтактЦентр");

// Получим выборку по всем контакт-центрам
//-------------------------------------------------------------------------------------------------
	Выборка = Справочники.КонтактЦентры.Выбрать();

	Пока (Выборка.Следующий()) Цикл
		Если (Выборка.ЭтоГруппа = Истина) Тогда
			МассивТелефонов = КонтактЦентрТелефоныПолучить(Выборка.Ссылка);

			Для Каждого ТекСтрока Из МассивТелефонов Цикл
				НовСтрока = Ответ.Добавить();
				НовСтрока.Телефон = СокрЛП(ТекСтрока);
				НовСтрока.КонтактЦентр = Выборка.Ссылка;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	Возврат (Ответ);
КонецФункции

Функция КонтактЦентрТелефоныПолучить(СпрСсылка) Экспорт

// Функция возвращает массив строк с номерами внутренних телефонов и кодами системных очередей
// переданного контакт-центра. Если произошла ошибка, то функция возвращает пустой массив
//-------------------------------------------------------------------------------------------------
	Доступно = (ТипЗнч(СпрСсылка) = Тип("СправочникСсылка.КонтактЦентры"));
	Доступно = Доступно И ЗначениеЗаполнено(СпрСсылка);
	Доступно = Доступно И (СпрСсылка.ЭтоГруппа);
	Ответ = Новый Массив;

	Если (Доступно = Ложь) Тогда
		Возврат (Ответ);
	КонецЕсли;

// Получим целевую очередь контакт-центра
// Сразу поместим телефонный код и наименование очереди в массив
//-------------------------------------------------------------------------------------------------
	Если (ЗначениеЗаполнено(СпрСсылка.Очередь)) Тогда
		Ответ.Добавить(ВРег(СокрЛП(СпрСсылка.Очередь.Код)));
		Ответ.Добавить(ВРег(СокрЛП(СпрСсылка.Очередь.Наименование)));
		ИсточникДанных = СокрЛП(СпрСсылка.Очередь.Сервер.ИсточникДанных);

		Если (ЗначениеЗаполнено(ИсточникДанных)) Тогда
			ТекстЗапроса = "
			|SELECT	DISTINCT MemberName
			|FROM	ВнешнийИсточникДанных." + ИсточникДанных + ".Таблица.Агенты
			|WHERE	(Queue_Name = &Очередь)";

			Запрос = Новый Запрос;
			Запрос.Текст = ТекстЗапроса;
			Запрос.УстановитьПараметр("Очередь",ВРег(СокрЛП(СпрСсылка.Очередь.Наименование)));
			
			Попытка 
				Результат = Запрос.Выполнить().Выбрать();
			Исключение
				Возврат Ответ;
			КонецПопытки;

			Пока (Результат.Следующий()) Цикл
				Ответ.Добавить(ВРег(СокрЛП(Результат.MemberName)));
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Возврат (Ответ);
КонецФункции

Процедура ОчередьВЛокальныйРежим() Экспорт
	// Вставить содержимое обработчика.
КонецПроцедуры

//***********************************************
//Прочее
//***********************************************
Процедура РассылкаЭффективностиМенеджеровВтор() Экспорт
	ИсточникДанных = Справочники.ИБ_ИсточникиДанных.НайтиПоРеквизиту("Префикс", "OU");
	Если ИсточникДанных = Неопределено Тогда
		Данные 		= "Префикс = ОУ";
		Комментарий = " Не найден элемент справочника по реквизиту";
		ОбслуживаниеСервер.ЗарегистрироватьСобытие("РассылкаЭффективностиМенеджеровВтор", УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.ИБ_ИсточникиДанных, Данные, Комментарий,, "Сервер", ИмяКомпьютера()); 
	КонецЕсли;
	БазаИсточник = ОбщегоНазначения.ПолучитьПодключениеБД(ИсточникДанных.ПараметрыСоединения);
	БазаИсточник.АвтоСПробегом.РассылкаЭффективностьМенеджеров();
КонецПроцедуры