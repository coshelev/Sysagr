//*************************************************************************************************
// Управление компонентой
//*************************************************************************************************

Функция КомпонентаИнициализировать() Экспорт

// Функция выполняет регистрацию телефонной компоненты в системе
// В случае успешной регистрации возвращает пустую строку. Иначе - строку с описанием ошибки
//-------------------------------------------------------------------------------------------------
	Если (КомпонентаСуществует() = Ложь) Тогда
		Попытка
			АдресКомпоненты = "ОбщийМакет.КомпонентаТелефонии";
			Доступно = ПодключитьВнешнююКомпоненту(АдресКомпоненты,"TCP",ТипВнешнейКомпоненты.Native);

			Если (Доступно = Ложь) Тогда
				УстановитьВнешнююКомпоненту(АдресКомпоненты);
				Доступно = ПодключитьВнешнююКомпоненту(АдресКомпоненты,"TCP",ТипВнешнейКомпоненты.Native);
			КонецЕсли;

			Если (Доступно = Истина) Тогда
				ГлобТелефония = Новый("Addin.TCP.TCPClient");
			КонецЕсли;

// Если компонента до сих пор не подключена, то выведем ошибку
//-------------------------------------------------------------------------------------------------
		Исключение
			Ответ = "Компонента телефонии не проинициализирована по причине: ";
			Ответ = Ответ + СокрЛП(ОписаниеОшибки());
			Возврат (Ответ);
		КонецПопытки;
	КонецЕсли;

	Возврат ("");
КонецФункции

Функция КомпонентаПодключить(НомерТелефона = "", IPадресАстериск = "") Экспорт

// Функция выполняет подключение и авторизацию телефонной компоненты к серверу телефонии
// В случае успеха возвращает пустую строку. Иначе - строку с описанием ошибки

// Параметры:
// - НомерТелефона - если задано, то используется для фильтрации потока событий в событии AgentCalled

//-------------------------------------------------------------------------------------------------
	ТелСсылка = ЗначенияСервера.ПолучитьЗначениеПараметраСеанса("ККЦТелефон");
	ТелСервер = ЗначенияСервера.ПолучитьЗначениеРеквизита(ТелСсылка,"Сервер");
	СерверАдрес = ЗначенияСервера.ПолучитьЗначениеРеквизита(ТелСервер,"IPАдрес");
	КомпонентаОтключить();

// Проверим заполненность необходимых реквизитов
//-------------------------------------------------------------------------------------------------
	Доступно = КомпонентаСуществует();
	Доступно = Доступно И ЗначениеЗаполнено(ТелСсылка);
	Доступно = Доступно И ЗначениеЗаполнено(ТелСервер);
	Доступно = Доступно И ЗначениеЗаполнено(СерверАдрес);

	Если (Доступно = Ложь) Тогда
		Ответ = "Ошибка подключения телефонной компоненты к серверу. Возможные причины:";
		Ответ = Ответ + Символы.ПС + "- телефонная компонента не зарегистрирована в системе";
		Ответ = Ответ + Символы.ПС + "- неправильно заданы реквизиты сервера телефонии";
		Возврат (Ответ);
	КонецЕсли;

// Настройка параметров компоненты
//-------------------------------------------------------------------------------------------------
	ГлобТелефония._РазмерОчередиСообщений = 10;
	ГлобТелефония._ОтправлятьСобытия = Истина;
	ГлобТелефония._ВестиЛог = Ложь;
	ГлобТелефония._ОчиститьЛог();

// Подключение компоненты к серверу телефонии
//-------------------------------------------------------------------------------------------------
	ТелНомер = ЗначенияСервера.ПолучитьЗначениеРеквизита(ТелСсылка,"Код");
	
	Если ЗначениеЗаполнено(IPадресАстериск) Тогда
		СерверАдрес = IPадресАстериск; 	
	Иначе
		СерверАдрес = СокрЛП(СтрЗаменить(СерверАдрес," ",""));
	КонецЕсли;

	Если (ГлобТелефония.Connect(СерверАдрес,5038,Ложь,Истина) = Ложь) Тогда
		Ответ = "Ошибка подключения телефонной компоненты к серверу. Возможные причины:";
		Ответ = Ответ + Символы.ПС + "- телефонная компонента не зарегистрирована в системе";
		Ответ = Ответ + Символы.ПС + "- не определен или не найден сервер телефонии";
		Возврат (Ответ);
	КонецЕсли;

// Авторизация на сервере телефонии
//-------------------------------------------------------------------------------------------------
    credentials = Телефония.Asterisk_login_password();
	Доступно = ЗначениеЗаполнено(credentials.Asterisk_login) И ЗначениеЗаполнено(credentials.Asterisk_password);
	Если Не Доступно Тогда
		Возврат ("Не найдены реквизиты для входа в Asterisk");
	КонецЕсли;

	Логин  = credentials.Asterisk_login;
	Пароль = credentials.Asterisk_password;
	Если ЗначениеЗаполнено(НомерТелефона) И IPадресАстериск = "192.168.0.252" Тогда
		Логин  = "cc"+НомерТелефона;
		Пароль = ""+НомерТелефона;
	КонецЕсли;
	
	ТекстКоманды = "Action: Login" + Символы.ПС;
	ТекстКоманды = ТекстКоманды + "Username: "+ Логин + Символы.ПС;
	ТекстКоманды = ТекстКоманды + "Secret: "  + Пароль + Символы.ПС + Символы.ПС;

	Если (КомпонентаВыполнитьКоманду(ТекстКоманды) = Ложь) Тогда
		Возврат ("Ошибка при авторизации на сервере телефонии");
	КонецЕсли;

// Настроим фильтрацию событий для компоненты
//-------------------------------------------------------------------------------------------------
	ТекстКоманды = "Action: Filter" + Символы.ПС;
	ТекстКоманды = ТекстКоманды + "Operation: Add" + Символы.ПС;
	ТекстКоманды = ТекстКоманды + "Filter: Exten: " + СокрЛП(ТелНомер) + Символы.ПС + Символы.ПС;
	Ответ = КомпонентаВыполнитьКоманду(ТекстКоманды);
		
	ТекстКоманды = "Action: Filter" + Символы.ПС;
	ТекстКоманды = ТекстКоманды + "Operation: Add" + Символы.ПС;
	ТекстКоманды = ТекстКоманды + "Filter: Hangup" + Символы.ПС + Символы.ПС;
	Ответ = ?(Ответ,КомпонентаВыполнитьКоманду(ТекстКоманды),Ответ);

	ТекстКоманды = "Action: Filter" + Символы.ПС;
	ТекстКоманды = ТекстКоманды + "Operation: Add" + Символы.ПС;
	ТекстКоманды = ТекстКоманды + "Filter: ConnectedLineNum: " + СокрЛП(ТелНомер) + Символы.ПС + Символы.ПС;
	Ответ = ?(Ответ,КомпонентаВыполнитьКоманду(ТекстКоманды),Ответ);

	ТекстКоманды = "Action: Filter" + Символы.ПС;
	ТекстКоманды = ТекстКоманды + "Operation: Add" + Символы.ПС;
	ТекстКоманды = ТекстКоманды + "Filter: MemberName: " + СокрЛП(ТелНомер) + Символы.ПС + Символы.ПС;
	Ответ = ?(Ответ,КомпонентаВыполнитьКоманду(ТекстКоманды),Ответ);
	
	//Не передавать на клиент информацию о следующих событиях
	//========================================================
	
	// Получи все события 
	//---------------------------------------------------------------------------
	ТекстДок =ОбщегоНазначения.СоздайОбъектИзОбщегоМакета("Asterisk_AMI_Events");
	
	// Установи фильтр по необрабатывемым событиям
	//----------------------------------------------
	Для Сч=1 По ТекстДок.КоличествоСтрок() Цикл
		
		ИмяСобытия = СокрЛП(ТекстДок.ПолучитьСтроку(Сч));
		
		//Закоментаненные события "//" не фильтровать, т.е. передедавать в консоль
		//------------------------------------------------------------------------
		Если Лев(ИмяСобытия,2)="//" Тогда
			Продолжить;
		КонецЕсли;
		
		//Команда телефонному серверу не оповещать о событиях
		//-------------------------------------------------------------------------------------
		ТекстКоманды = "Action: Filter" + Символы.ПС;
		ТекстКоманды = ТекстКоманды + "Operation: Add" + Символы.ПС;
		ТекстКоманды = ТекстКоманды + "Filter: !Event: "+ ИмяСобытия + Символы.ПС + Символы.ПС;
		Ответ = ?(Ответ,КонтактЦентр.КомпонентаВыполнитьКоманду(ТекстКоманды),Ответ);
	
	КонецЦикла;
	
// Добавь фильтры по событиям, выявленным в консоли опытным путем
//------------------------------------------------------------------------------------------------
	
	ТекстКоманды = "Action: Filter" + Символы.ПС;
	ТекстКоманды = ТекстКоманды + "Operation: Add" + Символы.ПС;
	ТекстКоманды = ТекстКоманды + "Filter: !Event: Newexten" + Символы.ПС + Символы.ПС;
	Ответ = ?(Ответ,КомпонентаВыполнитьКоманду(ТекстКоманды),Ответ);
	
// Если задан номер телефона, тогда используем его как фильт в событии AgentCalled
//-------------------------------------------------------------------------------------------------
	Если ЗначениеЗаполнено(НомерТелефона) Тогда
	
		// Фильт для отбора только своих событий AgentCalled по MemberName
		//----------------------------------------------------------------
		ТекстКоманды = 	"Action: Filter" + Символы.ПС+
						"Operation: Add" + Символы.ПС+
						"Filter: MemberName: "+ НомерТелефона + Символы.ПС + Символы.ПС;
		Ответ = ?(Ответ,КомпонентаВыполнитьКоманду(ТекстКоманды),Ответ);
		
		ИсключитьНомера = КонтактЦентрСервер.ВнутренниеТелефоныКроме(НомерТелефона);
		
		//Фильт для отбора событий Hangup по каналу 
		//------------------------------------------
		КоличествоИсключаемых = ИсключитьНомера.Количество();
		Если КоличествоИсключаемых>0 Тогда
			i = 0;
			Для Каждого ИсключитьНомер Из ИсключитьНомера Цикл
				i = i + 1;
				
				ТекстКоманды =	"Action: Filter" 				 				+ Символы.ПС +
								"Operation: Add" 								+ Символы.ПС +
								"Filter: !Channel: SIP/" + ИсключитьНомер +"-*" + Символы.ПС + Символы.ПС;
				Ответ = ?(Ответ,КомпонентаВыполнитьКоманду(ТекстКоманды),Ответ);
				
				ТекстКоманды =	"Action: Filter" 								+ Символы.ПС +
								"Operation: Add" 								+ Символы.ПС +
								"Filter: !MemberName: " + ИсключитьНомер 	 	+ Символы.ПС + Символы.ПС;
				Ответ = ?(Ответ,КомпонентаВыполнитьКоманду(ТекстКоманды),Ответ);
	
				//Код для задержки времени, иначе вылетает тонкий клиент
				//------------------------------------------------------
				Прогресс = ОКР(i/КоличествоИсключаемых*100, 0);
				Прогресс = ?(Прогресс=0, 1, Прогресс);
				Состояние("Настройка фильтров", Прогресс);
			КонецЦикла;
		КонецЕсли;
		
		//Этот код обеспечит корректную работу, если телефоны операторов контакт-центра не имеют FMC
		//------------------------------------------------------------------------------------------
		ТекстКоманды =	"Action: Filter" 				+ Символы.ПС +
						"Operation: Add" 				+ Символы.ПС +
						"Filter: !Channel: SIP/MTS-*"	+ Символы.ПС + Символы.ПС;
		Ответ = ?(Ответ,КомпонентаВыполнитьКоманду(ТекстКоманды),Ответ);
		
		ТекстКоманды =	"Action: Filter" 			+ Символы.ПС +
						"Operation: Add" 			+ Символы.ПС +
						"Filter: !Channel: Local/*"	+ Символы.ПС + Символы.ПС;
		Ответ = ?(Ответ,КомпонентаВыполнитьКоманду(ТекстКоманды),Ответ);
				
	КонецЕсли;

// Включим прием событий
//-------------------------------------------------------------------------------------------------
	ТекстКоманды = "Action: Events" + Символы.ПС;
	ТекстКоманды = ТекстКоманды + "Eventmask: call,agent" + Символы.ПС + Символы.ПС;
	Ответ = ?(Ответ,КомпонентаВыполнитьКоманду(ТекстКоманды),Ответ);

	Если (Ответ = Ложь) Тогда
		Возврат ("Ошибка при настройке фильтрации потока телефонии");
	КонецЕсли;
		
	Возврат ("");
КонецФункции

Функция КомпонентаПодключитьТест(НомерТелефона = "", IPадресАстериск = "") Экспорт

// Функция выполняет подключение и авторизацию телефонной компоненты к серверу телефонии
// В случае успеха возвращает пустую строку. Иначе - строку с описанием ошибки

// Параметры:
// - НомерТелефона - если задано, то используется для фильтрации потока событий в событии AgentCalled

//-------------------------------------------------------------------------------------------------
	ТелСсылка = ЗначенияСервера.ПолучитьЗначениеПараметраСеанса("ККЦТелефон");
	ТелСервер = ЗначенияСервера.ПолучитьЗначениеРеквизита(ТелСсылка,"Сервер");
	СерверАдрес = ЗначенияСервера.ПолучитьЗначениеРеквизита(ТелСервер,"IPАдрес");
	КомпонентаОтключить();

// Проверим заполненность необходимых реквизитов
//-------------------------------------------------------------------------------------------------
	Доступно = КомпонентаСуществует();
	Доступно = Доступно И ЗначениеЗаполнено(ТелСсылка);
	Доступно = Доступно И ЗначениеЗаполнено(ТелСервер);
	Доступно = Доступно И ЗначениеЗаполнено(СерверАдрес);

	Если (Доступно = Ложь) Тогда
		Ответ = "Ошибка подключения телефонной компоненты к серверу. Возможные причины:";
		Ответ = Ответ + Символы.ПС + "- телефонная компонента не зарегистрирована в системе";
		Ответ = Ответ + Символы.ПС + "- неправильно заданы реквизиты сервера телефонии";
		Возврат (Ответ);
	КонецЕсли;

// Настройка параметров компоненты
//-------------------------------------------------------------------------------------------------
	ГлобТелефония._РазмерОчередиСообщений = 10;
	ГлобТелефония._ОтправлятьСобытия = Истина;
	ГлобТелефония._ВестиЛог = Ложь;
	ГлобТелефония._ОчиститьЛог();

// Подключение компоненты к серверу телефонии
//-------------------------------------------------------------------------------------------------
	ТелНомер = ЗначенияСервера.ПолучитьЗначениеРеквизита(ТелСсылка,"Код");
	
	Если ЗначениеЗаполнено(IPадресАстериск) Тогда
		СерверАдрес = IPадресАстериск; 	
	Иначе
		СерверАдрес = СокрЛП(СтрЗаменить(СерверАдрес," ",""));
	КонецЕсли;

	Если (ГлобТелефония.Connect(СерверАдрес,5038,Ложь,Истина) = Ложь) Тогда
		Ответ = "Ошибка подключения телефонной компоненты к серверу. Возможные причины:";
		Ответ = Ответ + Символы.ПС + "- телефонная компонента не зарегистрирована в системе";
		Ответ = Ответ + Символы.ПС + "- не определен или не найден сервер телефонии";
		Возврат (Ответ);
	КонецЕсли;

// Авторизация на сервере телефонии
//-------------------------------------------------------------------------------------------------
	credentials = Телефония.Asterisk_login_password();
	Доступно = ЗначениеЗаполнено(credentials.Asterisk_login) И ЗначениеЗаполнено(credentials.Asterisk_password);
	Если Не Доступно Тогда
		Возврат ("Не найдены реквизиты для входа в Asterisk");
	КонецЕсли; 
	
	Логин  = credentials.Asterisk_login;
	Пароль = credentials.Asterisk_password;
	Если ЗначениеЗаполнено(НомерТелефона) Тогда
		Логин  = "Username: "+"cc"+НомерТелефона;
		Пароль = ""+НомерТелефона;
	КонецЕсли;
	
	ТекстКоманды = "Action: Login" + Символы.ПС;
	ТекстКоманды = ТекстКоманды + "Username: "+ Логин + Символы.ПС;
	ТекстКоманды = ТекстКоманды + "Secret: "  + Пароль + Символы.ПС + Символы.ПС;

	Если (КомпонентаВыполнитьКоманду(ТекстКоманды) = Ложь) Тогда
		Возврат ("Ошибка при авторизации на сервере телефонии");
	КонецЕсли;

// Настроим фильтрацию событий для компоненты
//-------------------------------------------------------------------------------------------------
	Ответ = Истина;
	//
	ТекстКоманды = "Action: Filter" + Символы.ПС;
	ТекстКоманды = ТекстКоманды + "Operation: Add" + Символы.ПС;
	ТекстКоманды = ТекстКоманды + "Filter: AgentCalled" + Символы.ПС + Символы.ПС;
	Ответ = ?(Ответ,КомпонентаВыполнитьКоманду(ТекстКоманды),Ответ);
	//
	//ТекстКоманды = "Action: Filter" + Символы.ПС;
	////ТекстКоманды = ТекстКоманды + "Operation: Add" + Символы.ПС;
	//ТекстКоманды = ТекстКоманды + "Filter: DialBegin" + Символы.ПС + Символы.ПС;
	//Ответ = ?(Ответ,КомпонентаВыполнитьКоманду(ТекстКоманды),Ответ);

	//ТекстКоманды = "Action: Filter" + Символы.ПС;
	//ТекстКоманды = ТекстКоманды + "Operation: Add" + Символы.ПС;
	//ТекстКоманды = ТекстКоманды + "Filter: Hangup" + Символы.ПС + Символы.ПС;
	//Ответ = ?(Ответ,КомпонентаВыполнитьКоманду(ТекстКоманды),Ответ);

// Включим прием событий
//-------------------------------------------------------------------------------------------------
	ТекстКоманды = "Action: Events" + Символы.ПС;
	ТекстКоманды = ТекстКоманды + "Eventmask: on" + Символы.ПС + Символы.ПС;
	Ответ = ?(Ответ,КомпонентаВыполнитьКоманду(ТекстКоманды),Ответ);

	Если (Ответ = Ложь) Тогда
		Возврат ("Ошибка при настройке фильтрации потока телефонии");
	КонецЕсли;
		
	Возврат ("");
КонецФункции

Процедура КомпонентаОтключить() Экспорт

// Функция выполняет отключение компоненты от сервера телефонии. Всегда возвращает Истину
//-------------------------------------------------------------------------------------------------
	Если (КомпонентаПодключена()) Тогда
		ТекстКоманды = "Action: Events" + Символы.ПС;
		ТекстКоманды = ТекстКоманды + "Eventmask: off" + Символы.ПС + Символы.ПС;
		КомпонентаВыполнитьКоманду(ТекстКоманды);

		ТекстКоманды = "Action: Logoff" + Символы.ПС + Символы.ПС;
		КомпонентаВыполнитьКоманду(ТекстКоманды);
		ГлобТелефония.Disconnect();
	КонецЕсли;
КонецПроцедуры

//-------------------------------------------------------------------------------------------------

Функция КомпонентаСуществует() Экспорт

// Функция возвращает Истину если объект "ГлобТелефония" содержит компоненту "ROM-Asterisk"
//-------------------------------------------------------------------------------------------------
	Попытка
		Ответ = (ТипЗнч(ГлобТелефония) = Тип("Addin.TCP.TCPClient"));
		Возврат (Ответ);
	Исключение
	КонецПопытки;

	Возврат Ложь;
КонецФункции

Функция КомпонентаПодключена() Экспорт

// Функция возвращает Истину если компонента телефонии находится в режиме "On-Line"
//-------------------------------------------------------------------------------------------------
	Попытка
		Ответ = КомпонентаСуществует();
		Ответ = Ответ И (ГлобТелефония.RecvThID > 0);
		Ответ = Ответ И (ГлобТелефония.Connected = Истина);
		Ответ = Ответ И (ГлобТелефония._SendingEvents = Истина);
	Исключение
		Ответ = Ложь;
	КонецПопытки;

	Возврат (Ответ);
КонецФункции

//*************************************************************************************************
// Команды компоненты
//*************************************************************************************************

Функция КомандаHangup(Канал) Экспорт

// Функция выполняет отключение звонка в переданном Канале
// Возвращает Истину в случае успеха
//-------------------------------------------------------------------------------------------------
	Доступно = (ТипЗнч(Канал) = Тип("Строка"));
	Доступно = Доступно И ЗначениеЗаполнено(Канал);

	Если (Доступно = Истина) Тогда
		ТекстКоманды = "Action: Hangup" + Символы.ПС;
		ТекстКоманды = ТекстКоманды + "Channel: " + СокрЛП(Канал) + Символы.ПС + Символы.ПС;

		Если (КомпонентаВыполнитьКоманду(ТекстКоманды) = Истина) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;

	Возврат Ложь;
КонецФункции

Функция КомандаOriginate(ТелефонНомер, SYSAGR = "") Экспорт

// Функция выполняет соединение текущего оператора (параметр сеанса "ККЦТелефон") с абонентом
// Звонок оператору выполняется только на его стационарный телефонный аппарат. В случае успешного
// вызова возвращается Истина
//-------------------------------------------------------------------------------------------------
	ОператорСсылка = ЗначенияСервера.ПолучитьЗначениеПараметраСеанса("ККЦТелефон");
	ОператорНомер = ЗначенияСервера.ПолучитьЗначениеРеквизита(ОператорСсылка,"Код");
	АбонентНомер = Конвертация.ТелефонДляВызоваПолучить(ТелефонНомер);

// Проверим правильность заполнения параметров
//-------------------------------------------------------------------------------------------------
	Доступно = (ТипЗнч(ТелефонНомер) = Тип("Строка"));
	Доступно = Доступно И ЗначениеЗаполнено(АбонентНомер);
	Доступно = Доступно И ЗначениеЗаполнено(ОператорНомер);

	Если (Доступно = Истина) Тогда
		ТекстКоманды = 					"Action: Originate" 																	+ Символы.ПС;
		ТекстКоманды = ТекстКоманды + 	"Channel: SIP/" 		+ СокрЛП(ОператорНомер) 										+ Символы.ПС;
		ТекстКоманды = ТекстКоманды + 	"CallerID: " 			+ СокрЛП(ОператорНомер)	+ " <" + СокрЛП(ОператорНомер) + ">" 	+ Символы.ПС;
		ТекстКоманды = ТекстКоманды + 	"Exten: " 				+ СокрЛП(АбонентНомер)											+ Символы.ПС;
		ТекстКоманды = ТекстКоманды + 	"Context: default" 																		+ Символы.ПС;
		ТекстКоманды = ТекстКоманды + 	"Variable: SYSAGR="		+ SYSAGR														+ Символы.ПС;
		//<06.02.2019, =>, уменьшим время дозвона до опеатора контакт-центра при исходящем>
		//ТекстКоманды = ТекстКоманды + 	"Timeout: 30000" 																		+ Символы.ПС;
		ТекстКоманды = ТекстКоманды + 	"Timeout: 10000" 																		+ Символы.ПС;
		//</06.02.2019>
		ТекстКоманды = ТекстКоманды + 	"Priority: 1" 																			+ Символы.ПС;
		ТекстКоманды = ТекстКоманды + 	"Async: True" 														   	   + Символы.ПС + Символы.ПС;

		Если (КомпонентаВыполнитьКоманду(ТекстКоманды) = Истина) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;

	Возврат Ложь;
КонецФункции

Функция КомандаAtxfer(Канал,ТелефонНомер) Экспорт

// Функция выполняет сопровождаемый перевод звонка в переданном Канале на телефон "ТелефонНомер"
// Возвращает Истину в случае успеха
//-------------------------------------------------------------------------------------------------
	АбонентНомер = Конвертация.ТелефонДляВызоваПолучить(ТелефонНомер);

// Проверим правильность заполнения параметров
//-------------------------------------------------------------------------------------------------
	Доступно = (ТипЗнч(Канал) = Тип("Строка"));
	Доступно = Доступно И ЗначениеЗаполнено(Канал);
	Доступно = Доступно И ЗначениеЗаполнено(АбонентНомер);

	Если (Доступно = Истина) Тогда
		ТекстКоманды = "Action: Atxfer" + Символы.ПС;
		ТекстКоманды = ТекстКоманды + "Channel: " + СокрЛП(Канал) + Символы.ПС;
		ТекстКоманды = ТекстКоманды + "Exten: " + СокрЛП(АбонентНомер) + Символы.ПС;
		ТекстКоманды = ТекстКоманды + "Context: default" + Символы.ПС;
		ТекстКоманды = ТекстКоманды + "Priority: 1" + Символы.ПС + Символы.ПС;

		Если (КомпонентаВыполнитьКоманду(ТекстКоманды) = Истина) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;

	Возврат Ложь;
КонецФункции

Функция КомандаBlindTransfer(Канал,ТелефонНомер) Экспорт

// Функция выполняет несопровождаемый перевод звонка в переданном Канале на телефон "ТелефонНомер"
// Возвращает Истину в случае успеха
//-------------------------------------------------------------------------------------------------
	АбонентНомер = Конвертация.ТелефонДляВызоваПолучить(ТелефонНомер);

// Проверим правильность заполнения параметров
//-------------------------------------------------------------------------------------------------
	Доступно = (ТипЗнч(Канал) = Тип("Строка"));
	Доступно = Доступно И ЗначениеЗаполнено(Канал);
	Доступно = Доступно И ЗначениеЗаполнено(АбонентНомер);

	Если (Доступно = Истина) Тогда
		ТекстКоманды = "Action: BlindTransfer" + Символы.ПС;
		ТекстКоманды = ТекстКоманды + "Channel: " + СокрЛП(Канал) + Символы.ПС;
		ТекстКоманды = ТекстКоманды + "Exten: " + СокрЛП(АбонентНомер) + Символы.ПС;
		ТекстКоманды = ТекстКоманды + "Context: default" + Символы.ПС + Символы.ПС;

		Если (КомпонентаВыполнитьКоманду(ТекстКоманды) = Истина) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;

	Возврат Ложь;
КонецФункции

Функция КомпонентаВыполнитьКоманду(ТекстКоманды) Экспорт

// Функция возвращает Истину если переданная команда выполнена успешно
//-------------------------------------------------------------------------------------------------
	Если (КомпонентаСуществует() = Истина) Тогда
		Попытка
			Если (ГлобТелефония.Send(ТекстКоманды) > 0) Тогда
				Возврат Истина;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЕсли;

	Возврат Ложь;
КонецФункции

#Область Команды_телефонии_через_Rest_API
Функция _ВыполнитьКоманду(ТекстКоманды)
	
	ТекстКоманды = СтрЗаменить(ТекстКоманды, Символы.ПС, "\n");
	
	#Если ВебКлиент Тогда
		КонтактЦентрСервер._ВыполнитьКоманду(ТекстКоманды);
		Возврат Истина;	
	#КонецЕсли
	
	Соединение 	= Новый HTTPСоединение("192.168.0.137", 8084);
	
	//Запрос 		= Новый HTTPЗапрос("/ami/?action="+ТекстКоманды);
	//Соединение.Get(Запрос);	
	Запрос 		= Новый HTTPЗапрос("/ami/action"+ТекстКоманды);
	Запрос.Заголовки.Вставить("Par1", ТекстКоманды);
	HTTPОтвет = Соединение.Post(Запрос);
	//s = HTTPОтвет.ПолучитьТелоКакСтроку();
	//Сообщить(s);
	Возврат Истина;
КонецФункции

Функция _КомандаOriginate(ТелефонНомер, SYSAGR = "") Экспорт

// Функция выполняет соединение текущего оператора (параметр сеанса "ККЦТелефон") с абонентом
// Звонок оператору выполняется только на его стационарный телефонный аппарат. В случае успешного
// вызова возвращается Истина
//-------------------------------------------------------------------------------------------------
	ОператорСсылка = ЗначенияСервера.ПолучитьЗначениеПараметраСеанса("ККЦТелефон");
	ОператорНомер = ЗначенияСервера.ПолучитьЗначениеРеквизита(ОператорСсылка,"Код");
	АбонентНомер = Конвертация.ТелефонДляВызоваПолучить(ТелефонНомер);

// Проверим правильность заполнения параметров
//-------------------------------------------------------------------------------------------------
	Доступно = (ТипЗнч(ТелефонНомер) = Тип("Строка"));
	Доступно = Доступно И ЗначениеЗаполнено(АбонентНомер);
	Доступно = Доступно И ЗначениеЗаполнено(ОператорНомер);

	Если (Доступно = Истина) Тогда
		ТекстКоманды = 					"Action: Originate" 																	+ Символы.ПС;
		ТекстКоманды = ТекстКоманды + 	"Channel: SIP/" 		+ СокрЛП(ОператорНомер) 										+ Символы.ПС;
		ТекстКоманды = ТекстКоманды + 	"CallerID: " 			+ СокрЛП(ОператорНомер)	+ " <" + СокрЛП(ОператорНомер) + ">" 	+ Символы.ПС;
		ТекстКоманды = ТекстКоманды + 	"Exten: " 				+ СокрЛП(АбонентНомер)											+ Символы.ПС;
		ТекстКоманды = ТекстКоманды + 	"Context: default" 																		+ Символы.ПС;
		//ТекстКоманды = ТекстКоманды + 	"Variable: "				 														+ Символы.ПС;
		ТекстКоманды = ТекстКоманды + 	"Variable: SYSAGR="		+ SYSAGR														+ Символы.ПС;
		ТекстКоманды = ТекстКоманды + 	"Timeout: 30000" 																		+ Символы.ПС;
		ТекстКоманды = ТекстКоманды + 	"Priority: 1" 																			+ Символы.ПС;
		ТекстКоманды = ТекстКоманды + 	"Async: True" 														   	   + Символы.ПС + Символы.ПС;

		Если (_ВыполнитьКоманду(ТекстКоманды) = Истина) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;

	Возврат Ложь;
КонецФункции

	
Функция _КомандаAtxfer(Канал,ТелефонНомер) Экспорт

// Функция выполняет сопровождаемый перевод звонка в переданном Канале на телефон "ТелефонНомер"
// Возвращает Истину в случае успеха
//-------------------------------------------------------------------------------------------------
	АбонентНомер = Конвертация.ТелефонДляВызоваПолучить(ТелефонНомер);

// Проверим правильность заполнения параметров
//-------------------------------------------------------------------------------------------------
	Доступно = (ТипЗнч(Канал) = Тип("Строка"));
	Доступно = Доступно И ЗначениеЗаполнено(Канал);
	Доступно = Доступно И ЗначениеЗаполнено(АбонентНомер);

	Если (Доступно = Истина) Тогда
		ТекстКоманды = "Action: Atxfer" + Символы.ПС;
		ТекстКоманды = ТекстКоманды + "Channel: " + СокрЛП(Канал) + Символы.ПС;
		ТекстКоманды = ТекстКоманды + "Exten: " + СокрЛП(АбонентНомер) + Символы.ПС;
		ТекстКоманды = ТекстКоманды + "Context: default" + Символы.ПС;
		ТекстКоманды = ТекстКоманды + "Priority: 1" + Символы.ПС + Символы.ПС;

		Если (_ВыполнитьКоманду(ТекстКоманды) = Истина) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;

	Возврат Ложь;
КонецФункции

Функция _КомандаBlindTransfer(Канал,ТелефонНомер) Экспорт

// Функция выполняет несопровождаемый перевод звонка в переданном Канале на телефон "ТелефонНомер"
// Возвращает Истину в случае успеха
//-------------------------------------------------------------------------------------------------
	АбонентНомер = Конвертация.ТелефонДляВызоваПолучить(ТелефонНомер);

// Проверим правильность заполнения параметров
//-------------------------------------------------------------------------------------------------
	Доступно = (ТипЗнч(Канал) = Тип("Строка"));
	Доступно = Доступно И ЗначениеЗаполнено(Канал);
	Доступно = Доступно И ЗначениеЗаполнено(АбонентНомер);

	Если (Доступно = Истина) Тогда
		ТекстКоманды = "Action: BlindTransfer" + Символы.ПС;
		ТекстКоманды = ТекстКоманды + "Channel: " + СокрЛП(Канал) + Символы.ПС;
		ТекстКоманды = ТекстКоманды + "Exten: " + СокрЛП(АбонентНомер) + Символы.ПС;
		ТекстКоманды = ТекстКоманды + "Context: default" + Символы.ПС + Символы.ПС;

		Если (_ВыполнитьКоманду(ТекстКоманды) = Истина) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;

	Возврат Ложь;
КонецФункции

Функция _КомандаHangup(Канал) Экспорт

// Функция выполняет отключение звонка в переданном Канале
// Возвращает Истину в случае успеха
//-------------------------------------------------------------------------------------------------
	Доступно = (ТипЗнч(Канал) = Тип("Строка"));
	Доступно = Доступно И ЗначениеЗаполнено(Канал);

	Если (Доступно = Истина) Тогда
		ТекстКоманды = "Action: Hangup" + Символы.ПС;
		ТекстКоманды = ТекстКоманды + "Channel: " + СокрЛП(Канал) + Символы.ПС + Символы.ПС;

		Если (_ВыполнитьКоманду(ТекстКоманды) = Истина) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;

	Возврат Ложь;
КонецФункции


#КонецОбласти
