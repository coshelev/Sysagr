//*************************************************************************************************
// Регламентные задания
//*************************************************************************************************

Процедура ЗвонкиЗагрузить(ОпорнаяДата = '00010101') Экспорт

// Обработаем все серверы телефонии, которые могут выдавать информацию о звонках
//-------------------------------------------------------------------------------------------------
	КЦСписок = ОчередиАгенты.КонтактЦентрыТелефоныПолучить();
	Выборка = Справочники.ТелСерверы.Выбрать();
	
	Если ОпорнаяДата = '00010101' Тогда
		ОпорнаяДата = ТекущаяДата();
	КонецЕсли;

	Пока (Выборка.Следующий()) Цикл
		Если (НЕ ЗначениеЗаполнено(Выборка.ИсточникДанных)) Тогда
			Продолжить;
		КонецЕсли;
	
// Получим идентификаторы необработанных звонков
//-------------------------------------------------------------------------------------------------
			ТекстЗапроса = "
		|SELECT	DISTINCT LinkedID AS Сигнатура,Истина AS ЭтоВходящий
		|FROM	ВнешнийИсточникДанных." + СокрЛП(Выборка.ИсточникДанных) + ".Таблица.ЗвонкиВходящие
		|WHERE	(EventTime BETWEEN ДОБАВИТЬКДАТЕ(&НачПериода, ЧАС,-5) И &КонПериода) И (Done = 0) И (LinkedID <> """")

		|UNION	ALL

		|SELECT	DISTINCT LinkedID AS Сигнатура,Ложь AS ЭтоВходящий
		|FROM	ВнешнийИсточникДанных." + СокрЛП(Выборка.ИсточникДанных) + ".Таблица.ЗвонкиИсходящие
		|WHERE	(EventTime BETWEEN &НачПериода И &КонПериода) И (Done = 0) И (LinkedID <> """")";

		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("КонПериода",КонецДня(ОпорнаяДата));
		Запрос.УстановитьПараметр("НачПериода",НачалоДня(ОпорнаяДата));

		Попытка
			ТЗЗвонки = Запрос.Выполнить().Выгрузить();
		Исключение
			Продолжить;
		КонецПопытки;

// Получим набор записей - событий текущего звонка
//-------------------------------------------------------------------------------------------------
		Для Каждого ТекСтрока Из ТЗЗвонки Цикл
			ИмяСервера = СокрЛП(Выборка.ИсточникДанных);
			ИмяТаблицы = ?(ТекСтрока.ЭтоВходящий,"ЗвонкиВходящие","ЗвонкиИсходящие");

			События = ВнешниеИсточникиДанных[ИмяСервера].Таблицы[ИмяТаблицы].СоздатьНаборЗаписей();
			События.Отбор.LinkedID.Установить(СокрЛП(ТекСтрока.Сигнатура));
			События.Прочитать();

// Сформируем полную Сигнатуру полученного звонка
//-------------------------------------------------------------------------------------------------
			ЗвонокСигнатура = ?(ТекСтрока.ЭтоВходящий,"1","0");
			ЗвонокСигнатура = ЗвонокСигнатура + "#" + ВРег(СокрЛП(ТекСтрока.Сигнатура));
			ЗвонокСигнатура = ЗвонокСигнатура + "#" + СокрЛП(Выборка.Ссылка.Код);

// Найдем звонок с такой Сигнатурой в регистре сведений "Звонки". Создадим звонок если он не найден
//-------------------------------------------------------------------------------------------------
			ТекЗвонок = РегистрыСведений.Звонки.СоздатьМенеджерЗаписи();
			ТекЗвонок.Сигнатура = ЗвонокСигнатура;
			ТекЗвонок.Прочитать();
			ЗвонокНовый = Ложь;

			Если (ТекЗвонок.Выбран() = Ложь) Тогда
				ТекЗвонок = РегистрыСведений.Звонки.СоздатьМенеджерЗаписи();
				ТекЗвонок.ЭтоВходящий = ТекСтрока.ЭтоВходящий;
				ТекЗвонок.Сигнатура = ЗвонокСигнатура;
				ТекЗвонок.Сервер = Выборка.Ссылка;
				ЗвонокНовый = Истина;
			КонецЕсли;

// Выполним загрузку или корректировку звонка
// В случае успеха выполним процедуры дополнительной обработки звонка
//-------------------------------------------------------------------------------------------------
			Доступно = ЗвонокЗагрузить(ТекЗвонок,События);
			Доступно = Доступно И (ЗвонокНовый = Истина);

			Если (Доступно = Истина) Тогда
				СтатистикаСформировать(ТекЗвонок,КЦСписок);
				
				ЗадачиОбратныйЗвонокЗакрыть(ТекЗвонок);
				ЗадачиГАЗЗакрыть(ТекЗвонок);
			
				ТелефоныНеответаОбработать(ТекЗвонок);
				НепринятыйЗвонокОбработать(ТекЗвонок);
				ЦелевойЗвонокОбработать(ТекЗвонок);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Функция ЗвонокЗагрузить(НовЗвонок,События)

// Процедура выполняет загрузку переданного пакета событий (одного звонка) в базу данных
// В случае успешной загрузки помечает все события звонка как обработанные и возвращает Истину
// В случае ошибки - события не помечаются как обработанные и функция возвращает Ложь
//-------------------------------------------------------------------------------------------------
	Доступно = События.Выбран();
	Доступно = Доступно И (События.Количество() > 0);
	Доступно = Доступно И (ВРег(СокрЛП(События.Получить(0).Event)) = "START");

	Если (Доступно = Ложь) Тогда
		Возврат Ложь;
	КонецЕсли;

// Получим первую запись из пакета событий звонка
//-------------------------------------------------------------------------------------------------
	ЗвонокСтарт = События.Получить(0);

// Заполним начальные сведения
//-------------------------------------------------------------------------------------------------
	НовЗвонок.ФайлЗаписи = СокрЛП(ЗвонокСтарт.LinkedID);
	НовЗвонок.Дата = ЗвонокСтарт.EventTime;
	НовЗвонок.Принят = Ложь;
	ЗвонокЗавершен = Ложь;

// Если текущий звонок входящий, то сформируем информацию о внешнем канале, по которому он поступил
// Если инициатором явился внешний телефон и он включен в серию, то в качестве инициатора возьмем
// пилотирующий номер серии
//-------------------------------------------------------------------------------------------------
	Если (НовЗвонок.ЭтоВходящий = Истина) Тогда
		НовЗвонок.Инициатор = Конвертация.ТелВнешнийПолучитьСсылку(ЗвонокСтарт.Data);
		КодГорода = "";

		Если (ЗначениеЗаполнено(НовЗвонок.Инициатор)) Тогда
			ПилотныйИнициатор = НовЗвонок.Инициатор.Родитель;
			КодГорода = НовЗвонок.Инициатор.КодГорода;

			Если (ЗначениеЗаполнено(ПилотныйИнициатор)) Тогда
				НовЗвонок.Инициатор = ПилотныйИнициатор;
				КодГорода = ПилотныйИнициатор.КодГорода;
			КонецЕсли;
		КонецЕсли;
	Иначе
		НовЗвонок.Инициатор = Конвертация.ТелВнутреннийПолучитьСсылку(ЗвонокСтарт.Src);
		НовЗвонок.АбонентВнутренний = НовЗвонок.Инициатор;
		КодГорода = НовЗвонок.Сервер.КодГорода;
	КонецЕсли;

// Сформируем информацию о номере телефона внешнего абонента
//-------------------------------------------------------------------------------------------------
	НомерТелефонаАбонента = ?(НовЗвонок.ЭтоВходящий,ЗвонокСтарт.Src,ЗвонокСтарт.Dst);
	НовЗвонок.АбонентВнешний = Конвертация.ТелефонВнешнийНормализовать(НомерТелефонаАбонента,КодГорода);
	НовЗвонок.Регион = Конвертация.РегионПолучитьПоНомеруТелефона(НовЗвонок.АбонентВнешний);

// Создадим набор записей "Маршрут" для регистрации всех событий текущего звонка
//-------------------------------------------------------------------------------------------------
	Маршрут = РегистрыСведений.ЗвонкиМаршруты.СоздатьНаборЗаписей();
	Маршрут.Отбор.Сигнатура.Установить(СокрЛП(НовЗвонок.Сигнатура));
	Маршрут.Очистить();

	
	//Если был RINGCANCELED, то сохраним ссылку здесь
	ОператорRINGCANCELED = Справочники.ТелВнутренние.ПустаяСсылка();
	
// Последовательно обработаем все строки набора записей "События"
// По окончании обработки каждой строки набора поместим результат в набор записей
// Обработка цикла завершается либо по его окончании, либо при получения события "END"
//-------------------------------------------------------------------------------------------------
Для Каждого ТекСтрока Из События Цикл
	   // Сформируем сведения об Источнике и Приемнике события
		//-------------------------------------------------------------------------------------------------
		СтрИсточник = Новый Структура;
		СтрИсточник.Вставить("Ссылка",Конвертация.ТелПолучитьСсылку(ТекСтрока.Src));
		СтрИсточник.Вставить("ЭтоОчередь",ТипЗнч(СтрИсточник.Ссылка) = Тип("СправочникСсылка.ТелОчереди"));
		
		////20.11.2019, +, Так как справочники не ведутся в Агрегаторе, а в сервис-деске
		////Такие звонки найдем в Астериске по Done = 0
		//Если СтрДлина(ТекСтрока.Src)=4 И СтрИсточник.Ссылка = Неопределено Тогда
		//	Данные 		= "НовЗвонок.Сигнатура = "+ НовЗвонок.Сигнатура+"; ТекСтрока.Src = "+ ТекСтрока.Src;
		//	Комментарий = "Не найден телефон в справочнике";
		//	ЗаписьЖурналаРегистрации("ЗвонокЗагрузить", УровеньЖурналаРегистрации.Ошибка,,Данные, Комментарий);
		//	Продолжить;
		//КонецЕсли;

		СтрПриемник = Новый Структура;
		СтрПриемник.Вставить("Ссылка",Конвертация.ТелПолучитьСсылку(ТекСтрока.Dst));
		СтрПриемник.Вставить("ЭтоОчередь",ТипЗнч(СтрПриемник.Ссылка) = Тип("СправочникСсылка.ТелОчереди"));

		////20.11.2019, +, Так как справочники не ведутся в Агрегаторе, а в сервис-деске
		////Такие звонки найдем в Астериске по Done = 0
		//Если СтрДлина(ТекСтрока.Dst)=4 И ТекСтрока.Dst <>"NONE" И ТекСтрока.Dst <>"0000" И СтрПриемник.Ссылка = Неопределено Тогда
		//	Данные 		= "НовЗвонок.Сигнатура = "+ НовЗвонок.Сигнатура + "; ТекСтрока.Dst = "+ ТекСтрока.Dst;
		//	Комментарий = "Не найден телефон в справочнике";
		//	ЗаписьЖурналаРегистрации("ЗвонокЗагрузить", УровеньЖурналаРегистрации.Ошибка,,Данные, Комментарий);
		//	Продолжить;
		//КонецЕсли;
		
		НовМаршрут = Маршрут.Добавить();
		НовМаршрут.Дата = ТекСтрока.EventTime;
		НовМаршрут.НомерСобытия = Маршрут.Количество();
		НовМаршрут.Сигнатура = СокрЛП(НовЗвонок.Сигнатура);
		НовМаршрут.КодСобытия = СтрЗаменить(ТекСтрока.Event," ","");
		НовМаршрут.КодСобытия = ВРег(СокрЛП(НовМаршрут.КодСобытия));

		ТекСтрока.Done = 1;


// START - дозвон до абонента (приемника)
// Данное событие обрабатывается только в том случае если звонок исходящий
//-------------------------------------------------------------------------------------------------
		Если (НовЗвонок.ЭтоВходящий = Ложь) И (НовМаршрут.КодСобытия = "START") Тогда
			НовЗвонок.Принят = (ВРег(СокрЛП(ТекСтрока.Data)) = "ANSWERED");
			НовЗвонок.АбонентВнутренний = СтрИсточник.Ссылка;
						
			НовМаршрут.ИмяСобытия = ?(НовЗвонок.Принят,"Абонент ответил","Абонент не ответил");
			НовМаршрут.Оператор = СтрИсточник.Ссылка;
			
			//<Кошелев_31.01.2017_12-09>
			НовМаршрут.СвойстваСобытия =  ТекСтрока.Data;
			//</Кошелев_31.01.2017_12-09>

// ENTERQUEUE - вход в очередь
//-------------------------------------------------------------------------------------------------
		ИначеЕсли (НовМаршрут.КодСобытия = "ENTERQUEUE") Тогда
			НовМаршрут.ИмяСобытия = "Звонок помещен в очередь";
			НовМаршрут.Оператор = СтрИсточник.Ссылка;
			
			//<Кошелев_28092016_14-40>
			Если ЗначениеЗаполнено(ТекСтрока.data) Тогда
				НовЗвонок.НомерВходаОчередь = Число(ТекСтрока.data);
				НовМаршрут.СвойстваСобытия = "номер в очереди = "+СокрЛП(ТекСтрока.data);
			КонецЕсли;
			//</Кошелев_28092016_14-40>

// EXITWITHTIMEOUT - выход из очереди по истечению времени ожидания
//-------------------------------------------------------------------------------------------------
		ИначеЕсли (НовМаршрут.КодСобытия = "EXITWITHTIMEOUT") Тогда
			НовМаршрут.ИмяСобытия = "Очередь не ответила";
			НовМаршрут.Оператор = СтрИсточник.Ссылка;

// RINGNOANSWER, NOANSWER - ожидание ответа оператора
//-------------------------------------------------------------------------------------------------
		ИначеЕсли (Найти(НовМаршрут.КодСобытия,"NOANSWER") > 0) Тогда
			НовМаршрут.ИмяСобытия = "Оператор не ответил";
			НовМаршрут.Оператор = СтрПриемник.Ссылка;

			Доступно = ЗначениеЗаполнено(СтрПриемник.Ссылка);
			Доступно = Доступно И (СтрПриемник.ЭтоОчередь = Ложь);
			НовЗвонок.АбонентВнутренний = ?(Доступно,СтрПриемник.Ссылка,НовЗвонок.АбонентВнутренний);

// ANSWER - ответ на звонок
//-------------------------------------------------------------------------------------------------
		ИначеЕсли (НовМаршрут.КодСобытия = "ANSWER") Тогда
			НовМаршрут.ИмяСобытия = "Оператор ответил";
			НовЗвонок.АбонентВнутренний = СтрПриемник.Ссылка;
			НовМаршрут.Оператор = СтрПриемник.Ссылка;
			НовЗвонок.Принят = Истина;
			
//RINGCANCELED - выбран агент очереди, абонент стал звонить  ему, но положил трубку (добавлено 25.02.2020 11:45
//https://wiki.asterisk.org/wiki/display/AST/Queue+Logs
//-------------------------------------------------------------------------------------------------
		ИначеЕсли (НовМаршрут.КодСобытия = "RINGCANCELED") Тогда
			НовМаршрут.ИмяСобытия = "Оператор не успел ответить - абонент прервал вызов";
			//НовМаршрут.Оператор = СтрИсточник.Ссылка;
			НовМаршрут.Оператор = Справочники.ТелВнутренние.НайтиПоКоду(ТекСтрока.Dst);
			НовЗвонок.АбонентВнутренний = НовМаршрут.Оператор;

// ABANDON - отмена звонка абонентом
//-------------------------------------------------------------------------------------------------
		ИначеЕсли (НовМаршрут.КодСобытия = "ABANDON") Тогда
			НовМаршрут.ИмяСобытия = "Абонент прервал вызов";
			НовМаршрут.Оператор = СтрИсточник.Ссылка;	
			НовЗвонок.Принят = Ложь;
			ЗвонокЗавершен = Истина;
			
			//<Кошелев_28092016_14-40>
			Если ЗначениеЗаполнено(ТекСтрока.data) Тогда
				НовЗвонок.НомерВыходаОчередь = Число(ТекСтрока.data);	
				НовМаршрут.СвойстваСобытия = "номер в очереди = "+СокрЛП(ТекСтрока.data);
			КонецЕсли;
			//</Кошелев_28092016_14-40>


// BUSY - оператор занят
//-------------------------------------------------------------------------------------------------
		ИначеЕсли (НовМаршрут.КодСобытия = "BUSY") Тогда
			НовМаршрут.ИмяСобытия = "Оператор занят";
			НовМаршрут.Оператор = СтрПриемник.Ссылка;
			НовЗвонок.АбонентВнутренний = СтрПриемник.Ссылка;

// FAILED - ошибка переключения
//-------------------------------------------------------------------------------------------------
		ИначеЕсли (НовМаршрут.КодСобытия = "FAILED") Тогда
			НовМаршрут.ИмяСобытия = "Ошибка переключения";
			НовМаршрут.Оператор = СтрПриемник.Ссылка;
			НовЗвонок.Принят = Ложь;

// PICKUP - гарантированный перехват вызова другим оператором
//-------------------------------------------------------------------------------------------------
		ИначеЕсли (НовМаршрут.КодСобытия = "PICKUP") Тогда
			НовМаршрут.ИмяСобытия = "Перехват звонка оператором";
			НовЗвонок.АбонентВнутренний = СтрПриемник.Ссылка;
			НовМаршрут.Оператор = СтрПриемник.Ссылка;
			НовЗвонок.Принят = Истина;

// B-TRANSFER - перевод вызова на другого оператора без уведомления
//-------------------------------------------------------------------------------------------------
		ИначеЕсли (НовМаршрут.КодСобытия = "TRANSFER") ИЛИ (НовМаршрут.КодСобытия = "B-TRANSFER") Тогда
			НовМаршрут.ИмяСобытия = "Перевод без уведомления";
			НовМаршрут.Оператор = СтрПриемник.Ссылка;
			НовМаршрут.КодСобытия = "B-TRANSFER";
			НовЗвонок.Принят = Ложь;

			Доступно = ЗначениеЗаполнено(СтрПриемник.Ссылка);
			Доступно = Доступно И (СтрПриемник.ЭтоОчередь = Ложь);
			НовЗвонок.АбонентВнутренний = ?(Доступно,СтрПриемник.Ссылка,НовЗвонок.АбонентВнутренний);

// A-TRANSFER - перевод вызова на другого оператора с предварительным уведомлением
//-------------------------------------------------------------------------------------------------
		ИначеЕсли (НовМаршрут.КодСобытия = "A-TRANSFER") Тогда
			НовМаршрут.ИмяСобытия = "Перевод с уведомлением";
			НовМаршрут.Оператор = СтрПриемник.Ссылка;
			НовЗвонок.Принят = Истина;

			Доступно = ЗначениеЗаполнено(СтрПриемник.Ссылка);
			Доступно = Доступно И (СтрПриемник.ЭтоОчередь = Ложь);
			НовЗвонок.АбонентВнутренний = ?(Доступно,СтрПриемник.Ссылка,НовЗвонок.АбонентВнутренний);

// COMPLETEAGENT - разговор успешно завершен Оператором
//-------------------------------------------------------------------------------------------------
		ИначеЕсли (НовМаршрут.КодСобытия = "COMPLETEAGENT") И (ЗвонокЗавершен = Ложь) Тогда
			НовМаршрут.ИмяСобытия = "Звонок завершен";
			НовМаршрут.Оператор = ?(СтрПриемник.ЭтоОчередь,НовЗвонок.АбонентВнутренний,СтрПриемник.Ссылка);
			НовЗвонок.АбонентВнутренний = НовМаршрут.Оператор;
			ЗвонокЗавершен = Истина;

// COMPLETECALLER - разговор успешно завершен Абонентом
//-------------------------------------------------------------------------------------------------
		ИначеЕсли (НовМаршрут.КодСобытия = "COMPLETECALLER") И (ЗвонокЗавершен = Ложь) Тогда
			НовМаршрут.ИмяСобытия = "Звонок завершен";
			НовМаршрут.Оператор = ?(СтрПриемник.ЭтоОчередь,НовЗвонок.АбонентВнутренний,СтрПриемник.Ссылка);
			НовЗвонок.АбонентВнутренний = НовМаршрут.Оператор;
			ЗвонокЗавершен = Истина;

// END - окончание разговора
//-------------------------------------------------------------------------------------------------
		//<19.01.2017_14-03, =>, Изменился порядок событий в таблице Астериска
		//ИначеЕсли (НовМаршрут.КодСобытия = "END") И (ЗвонокЗавершен = Ложь) Тогда
		//	НовМаршрут.ИмяСобытия = "Звонок завершен";
		//	НовМаршрут.Оператор = НовЗвонок.АбонентВнутренний;
		//	ЗвонокЗавершен = Истина;
		
		//=>
		
		//Если предшествующее событие не COMPLETEAGENT|COMPLETECALLER, ABANDON
		ИначеЕсли (НовМаршрут.КодСобытия = "END") Тогда
			Если ЗвонокЗавершен = Ложь 		
				//Или если предпредпоследнее событие ANSWER (а предпоследниее будет COMPLETEAGENT|COMPLETECALLER, но оно не записано в Маршрут, т.к событие звонок завершен 
				// будет записано этим событием END)	
				Или (НовМаршрут.КодСобытия = "END") И Маршрут[(Маршрут.Количество()-2)].КодСобытия = "ANSWER"  Тогда
				НовМаршрут.ИмяСобытия = "Звонок завершен";
				НовМаршрут.Оператор = НовЗвонок.АбонентВнутренний;
				ЗвонокЗавершен = Истина;
			Иначе
				// не обрабатываем, т.к. завершение звонка в маршруте будет зафиксировано через COMPLETEAGENT|COMPLETECALLER, ABANDON
			КонецЕсли;	
			
			//<Кошелев_27032018_11-31>
			Если ЗначениеЗаполнено(ТекСтрока.data) Тогда
				НовМаршрут.СвойстваСобытия = СокрЛП(ТекСтрока.data);
			КонецЕсли;
			//</Кошелев_27032018_11-31>
			
			//</19.01.2017_14-03>
		

// NIGHT - сообщение абоненту о нерабочем времени
//-------------------------------------------------------------------------------------------------
		ИначеЕсли (НовМаршрут.КодСобытия = "NIGHT") Тогда
			НовМаршрут.ИмяСобытия = "Уведомление о нерабочем времени";
			НовМаршрут.Оператор = СтрИсточник.Ссылка;
			НовЗвонок.Принят = Ложь;
			ЗвонокЗавершен = Истина;
		КонецЕсли;

// Текущая строка события обработана
// Убедимся в том, что событие обработано правильно
//-------------------------------------------------------------------------------------------------
		Доступно = ЗначениеЗаполнено(НовМаршрут.КодСобытия);
		Доступно = Доступно И ЗначениеЗаполнено(НовМаршрут.ИмяСобытия);

		Если (Доступно = Ложь)
			//<23.05.2018, +, Событие END не удаляем, если его свойтсво заполнено>
			И НЕ (НовМаршрут.КодСобытия = "END" И ЗначениеЗаполнено(НовМаршрут.СвойстваСобытия))
			//</23.05.2018>
		Тогда
			Маршрут.Удалить(НовМаршрут);
		КонецЕсли;
	КонецЦикла;

// Звонок и его маршрут сформированы
// Выполним запись звонка, его маршрута и обработанных событий в базу
//-------------------------------------------------------------------------------------------------
	Попытка
		НачатьТранзакцию();
		События.Записать(Истина);
		Маршрут.Записать(Истина);
		НовЗвонок.Записать(Истина);
		ЗафиксироватьТранзакцию();
		Возврат Истина;
	Исключение
	КонецПопытки;

	Возврат Ложь;
КонецФункции

Процедура ЗадачиОбратныйЗвонокЗакрыть(НовЗвонок) Экспорт

	// Убедимся том, что переданный звонок подлежит обработке
	//-------------------------------------------------------------------------------------------------
	Доступно = (НовЗвонок.Принят = Истина);
	Доступно = Доступно И ЗначениеЗаполнено(НовЗвонок.АбонентВнешний);
	
	Если (Доступно = Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	// Задача закрывается принятым звоноком в двух случаях:
	// - повторный входящий принятый
	// - исходящий от КЦ, далее переведенный КЦ на ОП  и длительность разговора ОП с клиентом более 5 сек.
	
	Доступно = Ложь;
	НЗ = РегистрыСведений.ЗвонкиСтатОбщая.СоздатьМенеджерЗаписи();
	НЗ.Сигнатура = НовЗвонок.Сигнатура;
	НЗ.Прочитать();
	Если НЗ.Выбран() Тогда
		
		// - повторный входящий принятый
		Если НовЗвонок.ЭтоВходящий Тогда
			Если НЗ.ОПРазговор >1  Тогда
			//Раскоментарил условие И НЗ.ОПРазговор >1 
			//Временно закоментарил, т.к.
			//1) Иногда фактический разговор больше 5 секунд, но астериск ошибочно сообщает, что менее 5-ти секунд
			//2) При переводе оператором КЦ исходящего звонка на челябинскую очередь время разговора ОП с клиентом 
			// на нижегородском сервере Астериск не фиксируется, т.е. ОП.Разровор = 0;
				Доступно = Истина;
			КонецЕсли;
			
		// - исходящий от КЦ, далее переведенный КЦ на ОП  и длительность разговора ОП с клиентом более 5 сек.	
		Иначе 
			
			//не всегда верно фиксируется длительность разговора с КЦ, поэтому ищем телефон инициатора в списке телефонов контакт-центра
			//КЦСписок = ОчередиАгенты.КонтактЦентрыТелефоныПолучить();
			//НайденнаяСтрока = КЦСписок.Найти(НовЗвонок.Инициатор, "Телефон");
			
			Если 
				//(НЗ.КЦРазговор>0 ИЛИ НайденнаяСтрока <> Неопределено)
				//Раскоментарил условие И НЗ.ОПРазговор >1 
				//Временно закоментарил, т.к.
				//1) Иногда фактический разговор больше 5 секунд, но астериск ошибочно сообщает, что менее 5-ти секунд
				//2) При переводе оператором КЦ исходящего звонка на челябинскую очередь время разговора ОП с клиентом 
				// на нижегородском сервере Астериск не фиксируется, т.е. ОП.Разровор = 0;
				//И 
				НЗ.ОПРазговор >1 
			
		Тогда
			Доступно = Истина;
		КонецЕсли;

		КонецЕсли;
						
	КонецЕсли;
		
	Если (Доступно = Ложь) Тогда
		Возврат;
	КонецЕсли;

	//Попытайся закрыть открытую задачу по интернет-заявки
	//------------------------------------------------------
	ОператорЗакрытияЗадачи = "";
	Если ЗначениеЗаполнено(НЗ.КЦАбонент) Тогда 
		ОператорЗакрытияЗадачи = НЗ.КЦАбонент;	
	Иначе //значит задачу закрыл сотрудник ОП, получив ее например по эл. почте 
		ОператорЗакрытияЗадачи = НовЗвонок.АбонентВнутренний.Код;	
	КонецЕсли;
	СигнатураЗакрытойЗадачиИнтернетЗаявки = РегистрыСведений.ЗадачиИнтернетЗаявки.ЗакройОткрытуюЗадачу2(СокрЛП(НовЗвонок.АбонентВнешний), НовЗвонок.Дата, Ложь, ОператорЗакрытияЗадачи);
	Если СигнатураЗакрытойЗадачиИнтернетЗаявки <>"" Тогда
		//Задача интернет-заявки закрылась, в звонке пропишем ее сигнатуру 
		//----------------------------------------------------------------
		НЗ.Основание = СигнатураЗакрытойЗадачиИнтернетЗаявки;
		Попытка
			НЗ.Записать();
		Исключение
			ЗаписьЖурналаРегистрации("Запись сигнатуры интернет-заявки в статистику  звонка", УровеньЖурналаРегистрации.Ошибка, Метаданные.РегистрыСведений.ЗвонкиСтатОбщая, НЗ.Сигнатура, ОписаниеОшибки());
		КонецПопытки;
		Возврат;
	КонецЕсли;
	
	// Найдем и закроем действующую заявку от абонента на обратный звонок
	//-------------------------------------------------------------------------------------------------
	ТекЗапись = РегистрыСведений.ЗадачиОбратныйЗвонок.СоздатьМенеджерЗаписи();
	ТекЗапись.Телефон = СокрЛП(НовЗвонок.АбонентВнешний);
	ТекЗапись.ДатаЗакрытия = Дата("00010101");
	ТекЗапись.Прочитать();
	Если ТекЗапись.Выбран() Тогда	
		//Если задача возникла раньше чем загрузили этот звонок в реестр из Астериска, то не нужно закрывать задачу,
		// т.е. звонок-инициатор задачи не должен совпадать со звонком закрытия>
		//-------------------------------------------------------------------------
		ЗвонокЗакрытия = СокрЛП(НовЗвонок.Сигнатура);
		Если ТекЗапись.ЗвонокИнициатор <> ЗвонокЗакрытия Тогда
			
			ТекЗапись.ЗвонокЗакрытия 	= ЗвонокЗакрытия ;
			ТекЗапись.Исполнитель 		= НовЗвонок.АбонентВнутренний;
			ТекЗапись.ДатаЗакрытия 		= НовЗвонок.Дата;
			ТекЗапись.Записать();
			
			//Если основанием задачи обратного звонка явяется задача интернет-заявки, тогда запиши
			//сигнатуру этой интернет-заявки в основание звонка
			//--------------------------------------------------
			Если Лев(ТекЗапись.Основание, 2)="iq" Тогда
				//Задача интернет-заявки закрылась, в звонке пропишем ее сигнатуру 
				//----------------------------------------------------------------
				НЗ.Основание = ТекЗапись.Основание;
				Попытка
					НЗ.Записать();
				Исключение
					ЗаписьЖурналаРегистрации("Запись сигнатуры интернет-заявки в статистику  звонка", УровеньЖурналаРегистрации.Ошибка, Метаданные.РегистрыСведений.ЗвонкиСтатОбщая, НЗ.Сигнатура, ОписаниеОшибки());
				КонецПопытки;	
			КонецЕсли;
			Возврат;
		КонецЕсли;		
	КонецЕсли;
	
	////Если оказались здесь, значит звонок не закрыл задач. 
	////Попытайся записать в статистику звонка сигнатуру закрытой вручную задачи интернет-заявки,
	////при условии, что ее сигнатура не еще фигурирует в основании в статистике какого-либо звонка
	////---------------------------------------------------------------------------------------------------------------------------------------
	//Доступно = Истина; 
	//Доступно = Доступно И НЗ.Основание = "";
	//Если Доступно Тогда
	//	Запрос = Новый Запрос();
	//	Запрос.Текст = 
	//	"ВЫБРАТЬ ПЕРВЫЕ 1
	//	|	ЗадачиИнтернетЗаявки.Сигнатура КАК Сигнатура
	//	|ИЗ
	//	|	РегистрСведений.ЗадачиИнтернетЗаявки КАК ЗадачиИнтернетЗаявки
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗвонкиСтатОбщая КАК ЗвонкиСтат
	//	|		ПО (ПОДСТРОКА(ЗвонкиСтат.Основание, 4, 36) = ЗадачиИнтернетЗаявки.Сигнатура)
	//	|ГДЕ
	//	|	НАЧАЛОПЕРИОДА(ЗадачиИнтернетЗаявки.ДатаПостановки, ДЕНЬ) = НАЧАЛОПЕРИОДА(&ДатаПостановки, ДЕНЬ)
	//	|	И ЗадачиИнтернетЗаявки.ДатаПостановки <= &ДатаПостановки
	//	|	И ЗадачиИнтернетЗаявки.ДатаЗакрытия <> ДАТАВРЕМЯ(1, 1, 1)
	//	|	И ЗадачиИнтернетЗаявки.ПричинаЗакрытия <> """"
	//	|	И ЗадачиИнтернетЗаявки.Телефон = &Телефон
	//	|	И ЗвонкиСтат.Основание ЕСТЬ NULL";
	//	Запрос.УстановитьПараметр("ДатаПостановки", НовЗвонок.Дата);
	//	Запрос.УстановитьПараметр("Телефон",		НовЗвонок.АбонентВнешний);
	//	РезультатЗапроса = ОбщегоНазначения.ВыполнитьЗапрос(Запрос);
	//	Если РезультатЗапроса.Пустой() = Ложь Тогда
	//		НЗ.Основание = "iq_"+РезультатЗапроса.Выгрузить()[0][0];
	//		Попытка
	//			НЗ.Записать();
	//		Исключение
	//			ЗаписьЖурналаРегистрации("Запись сигнатуры интернет-заявки в статистику  звонка", УровеньЖурналаРегистрации.Ошибка, Метаданные.РегистрыСведений.ЗвонкиСтатОбщая, НЗ.Сигнатура, ОписаниеОшибки());
	//		КонецПопытки;		
	//	КонецЕсли;
	//КонецЕсли;
	//
	////Если оказались здесь, значит звонок не признан звонком закрытия интернет-заявки, в его статистике нет основания
	////Попытайся записать в статистику звонка сигнатуру интернет-заявки из задачи обратного звонка,
	////при условии, что ее сигнатура не еще фигурирует в основании в статистике какого-либо звонка
	////---------------------------------------------------------------------------------------------
	//Доступно = Истина; 
	//Доступно = Доступно И НЗ.Основание = "";
	//Если Доступно Тогда
	//	Запрос = Новый Запрос();
	//	Запрос.Текст = 
	//	"ВЫБРАТЬ ПЕРВЫЕ 1
	//	|	Задачи.Основание КАК Сигнатура
	//	|ИЗ
	//	|	РегистрСведений.ЗадачиОбратныйЗвонок КАК Задачи
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗвонкиСтатОбщая КАК ЗвонкиСтат
	//	|		ПО (ЗвонкиСтат.Основание = Задачи.Основание)
	//	|ГДЕ
	//	|	НАЧАЛОПЕРИОДА(Задачи.ДатаПостановки, ДЕНЬ) = НАЧАЛОПЕРИОДА(&ДатаПостановки, ДЕНЬ)
	//	|	И Задачи.ДатаПостановки <= &ДатаПостановки
	//	|	И Задачи.ДатаЗакрытия <> ДАТАВРЕМЯ(1, 1, 1)
	//	|	И Задачи.ПричинаЗакрытия <> """"
	//	|	И ПОДСТРОКА(Задачи.Основание, 1, 2) = ""iq""
	//	|	И Задачи.Телефон = &Телефон
	//	|	И ЗвонкиСтат.Основание ЕСТЬ NULL";
	//	Запрос.УстановитьПараметр("ДатаПостановки", НовЗвонок.Дата);
	//	Запрос.УстановитьПараметр("Телефон",		НовЗвонок.АбонентВнешний);
	//	РезультатЗапроса = ОбщегоНазначения.ВыполнитьЗапрос(Запрос);
	//	Если РезультатЗапроса.Пустой() = Ложь Тогда
	//		НЗ.Основание = "iq_"+РезультатЗапроса.Выгрузить()[0][0];
	//		Попытка
	//			НЗ.Записать();
	//		Исключение
	//			ЗаписьЖурналаРегистрации("Запись сигнатуры интернет-заявки в статистику  звонка", УровеньЖурналаРегистрации.Ошибка, Метаданные.РегистрыСведений.ЗвонкиСтатОбщая, НЗ.Сигнатура, ОписаниеОшибки());
	//		КонецПопытки;		
	//	КонецЕсли;
	//КонецЕсли;

КонецПроцедуры

Процедура ЗадачиГАЗЗакрыть(НовЗвонок) Экспорт
	
	Доступно = Истина;
	Доступно = Доступно И (НовЗвонок.Принят = Истина);
	Доступно = Доступно И ЗначениеЗаполнено(НовЗвонок.АбонентВнешний);
	Если Доступно = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Доступно = Истина;
	НЗ = РегистрыСведений.ЗвонкиСтатОбщая.СоздатьМенеджерЗаписи();
	НЗ.Сигнатура = НовЗвонок.Сигнатура;
	НЗ.Прочитать();
	Доступно = Доступно И НЗ.Выбран();
	Доступно = Доступно И НЗ.ОПРазговор > 3;
	Если Доступно = Ложь Тогда
		Возврат;
	КонецЕсли;

	//Закрой задачу звонка, дата закрытия равна дате звонка
	//-----------------------------------------------------
	Успех = РегистрыСведений.ЗадачиГАЗЗаявки.ЗакройЗадачуЗвонкаОткройЗадачуПроверки(НовЗвонок.АбонентВнешний,  НовЗвонок.Дата,,,, НовЗвонок.Сигнатура);
		
КонецПроцедуры

Процедура ТелефоныНеответаОбработать(НовЗвонок)
	
	//С 11.03.2019 Агрегатор более не блокирует агентов целевых звонков, поэтому возврат
	//-----------------------------------------------------------------------------------
	Возврат;

// Получим список внутренних телефонов, по которым у звонка сформировано событие RINGNOANSWER
//-------------------------------------------------------------------------------------------------
	ТекстЗапроса = "
	|SELECT	DISTINCT Маршрут.Оператор AS Оператор
	|FROM	РегистрСведений.ЗвонкиМаршруты Маршрут
	|INNER	JOIN РегистрСведений.АгентыЦелевые Агенты ON (Агенты.Телефон = Маршрут.Оператор)
	|WHERE	(Маршрут.Сигнатура = &Сигнатура) И (Маршрут.КодСобытия = ""RINGNOANSWER"") И
	|		(Маршрут.Оператор ССЫЛКА Справочник.ТелВнутренние) И (#ФильтрИсключения)";

// Если звонок принят, то из просмотра также исключим агента принявшего звонок
//-------------------------------------------------------------------------------------------------
	Доступно = (НовЗвонок.Принят = Истина);
	Доступно = Доступно И ЗначениеЗаполнено(НовЗвонок.АбонентВнутренний);

	Если (Доступно = Истина) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"#ФильтрИсключения","Маршрут.Оператор <> &Оператор");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"#ФильтрИсключения","1 = 1");
	КонецЕсли;

// Выполним запрос
//-------------------------------------------------------------------------------------------------
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Оператор",НовЗвонок.АбонентВнутренний);
	Запрос.УстановитьПараметр("Сигнатура",СокрЛП(НовЗвонок.Сигнатура));
	Результат = Запрос.Выполнить().Выбрать();

// Сейчас мы получили внутренние телефоны, по которым сформировано событие пропущенного звонка
// Для каждого полученного телефона инкремент счетчика пропущенных звонков
//-------------------------------------------------------------------------------------------------
	Пока (Результат.Следующий()) Цикл
	

        ЭтоПраздник = РегистрыСведений.Праздники.ЭтоПраздник(НовЗвонок.Дата);
		Если ЭтоПраздник Тогда
			Возврат;
		КонецЕсли;
		
		ЭтоВыходной = ДеньНедели(НовЗвонок.Дата)>5;
		Если ЭтоВыходной Тогда
			Возврат
		КонецЕсли;
		
		Доступно = РегистрыСведений.АгентыЦелевые.СобытиеВРабочееВремяТелефона(Результат.Оператор, НовЗвонок.Дата);
		
		Если Не Доступно Тогда
			Возврат
		КонецЕсли;
		
// Выполним мягкое отключение агента от очереди телефонии (без блокировки)
//-------------------------------------------------------------------------------------------------		
		ОчередиАгенты.ЦелевойАгентДеактивировать(Результат.Оператор,Ложь);
	
	КонецЦикла;
КонецПроцедуры

Процедура НепринятыйЗвонокОбработать(НовЗвонок) Экспорт
	НепринятыйЗвонокОбработать_v2(НовЗвонок);	
КонецПроцедуры

Процедура ЦелевойЗвонокОбработать(НовЗвонок) Экспорт
	
	#Область ЗвонкиДоп_Принятый
	
	//Установи целевую точку
	//-----------------------
	ЦелеваяТочка = ПредопределенноеЗначение("Справочник.ТочкиЦелевые.ПустаяСсылка");
	ЦелевойАгент = РегистрыСведений.АгентыЦелевые.СоздатьМенеджерЗаписи();
	ЦелевойАгент.Телефон = НовЗвонок.АбонентВнутренний;
	ЦелевойАгент.Прочитать();
	Если (ЦелевойАгент.Выбран() = Истина) Тогда
		ЦелеваяТочка = ЦелевойАгент.ТочкаЦелевая;
	КонецЕсли;
	
	//Установи сотрудника
	//--------------------
	СотрудникОУ = ПредопределенноеЗначение("Справочник.ОУ_Сотрудники.ПустаяСсылка");	
	Если ЗначениеЗаполнено(НовЗвонок.АбонентВнутренний.Код) Тогда
		СотрудникОУ = Справочники.ОУ_Сотрудники.НайтиПоРеквизиту("ТелефонКор", НовЗвонок.АбонентВнутренний.Код);
	КонецЕсли;
	
	//Установи руководителя сотрудника
	//-----------------------------------
	РуководительОУ = ПредопределенноеЗначение("Справочник.ОУ_Сотрудники.ПустаяСсылка");
	Если ЗначениеЗаполнено(СотрудникОУ) Тогда
		РуководительОУ = СотрудникОУ.Руководитель;
	КонецЕсли;
	
	Доступно = ЗначениеЗаполнено(ЦелеваяТочка);
	Доступно = Доступно Или ЗначениеЗаполнено(СотрудникОУ);
	Если Доступно Тогда
		ЗвонкиДоп = РегистрыСведений.ЗвонкиДоп.СоздатьМенеджерЗаписи();
		ЗвонкиДоп.Сигнатура 		= СокрЛП(НовЗвонок.Сигнатура);
		ЗвонкиДоп.ЦелеваяТочка 		= ЦелеваяТочка;
		ЗвонкиДоп.СотрудникОУ		= СотрудникОУ;
		Попытка
			ЗвонкиДоп.Записать();
		Исключение
			ЗаписьЖурналаРегистрации("Записать ЗвонкиДоп", УровеньЖурналаРегистрации.Ошибка, "Сигнатура = "+ ЗвонкиДоп.Сигнатура, ОписаниеОшибки());
		КонецПопытки ;
	КонецЕсли;
	#КонецОбласти
	
	#Область ЗвонкиДоп_Принятый_очередью_Непринятый_агентом
	Доступно = НовЗвонок.Принят = Ложь;
	Если Доступно Тогда
		Стат = РегистрыСведений.ЗвонкиСтатОбщая.СоздатьМенеджерЗаписи();
		Стат.Сигнатура = НовЗвонок.Сигнатура;
		Стат.Прочитать();
		Если Стат.Выбран() Тогда
			Если Стат.КЦАбонент = НовЗвонок.АбонентВнутренний Тогда
				//Последний оператор является сотрудником КЦ
				Доступно = Истина;
			Иначе
				Доступно = Ложь;
			КонецЕсли;
		Иначе
			Доступно = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Доступно Тогда
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Маршруты.Сигнатура КАК Сигнатура,
		|	МИНИМУМ(Маршруты.НомерСобытия) КАК НомерСобытия
		|ПОМЕСТИТЬ ВТ01_ПервыйПеревод
		|ИЗ
		|	РегистрСведений.ЗвонкиМаршруты КАК Маршруты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Звонки КАК Звонки
		|		ПО Маршруты.Сигнатура = Звонки.Сигнатура
		|ГДЕ
		|	Маршруты.Сигнатура = &Сигнатура
		|	И Маршруты.КодСобытия = ""B-TRANSFER""
		|	И Звонки.Принят = ЛОЖЬ
		|
		|СГРУППИРОВАТЬ ПО
		|	Маршруты.Сигнатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ02.ТочкаЦелевая КАК ТочкаЦелевая
		|ИЗ
		|	РегистрСведений.ЗвонкиМаршруты КАК Маршруты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ01_ПервыйПеревод КАК ВТ01
		|		ПО Маршруты.Сигнатура = ВТ01.Сигнатура
		|			И Маршруты.НомерСобытия = ВТ01.НомерСобытия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АгентыЦелевые КАК ВТ02
		|		ПО (ВТ02.ТочкаЦелевая.Очередь.Код = Маршруты.Оператор.Код)";
		Запрос.УстановитьПараметр("Сигнатура", НовЗвонок.Сигнатура);
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			ЗвонкиДоп = РегистрыСведений.ЗвонкиДоп.СоздатьМенеджерЗаписи();
			ЗвонкиДоп.Сигнатура = СокрЛП(НовЗвонок.Сигнатура);
			ЗвонкиДоп.ЦелеваяТочка = РезультатЗапроса.Выгрузить()[0][0];
			Попытка
				ЗвонкиДоп.Записать();
			Исключение
				Данные = "Сигнатура = "+ ЗвонкиДоп.Сигнатура;
				Комментарий = ОписаниеОшибки();
				ЗаписьЖурналаРегистрации("Записать непринятые в ЗвонкиДоп", УровеньЖурналаРегистрации.Ошибка, Данные, Комментарий);
			КонецПопытки ;
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти

// Определим является ли переданный НовЗвонок состоявшимся звонком
//-------------------------------------------------------------------------------------------------
	Если (НовЗвонок.ЭтоВходящий = Истина) Тогда
		Доступно = (НовЗвонок.Принят = Истина);
		Доступно = Доступно И ЗначениеЗаполнено(НовЗвонок.АбонентВнешний);
		Доступно = Доступно И ЗначениеЗаполнено(НовЗвонок.АбонентВнутренний);
	Иначе
		Доступно = (НовЗвонок.Принят = Истина);
		Доступно = Доступно И ЗначениеЗаполнено(НовЗвонок.Инициатор);
		Доступно = Доступно И ЗначениеЗаполнено(НовЗвонок.АбонентВнешний);
		Доступно = Доступно И ЗначениеЗаполнено(НовЗвонок.АбонентВнутренний);
	КонецЕсли;

	Если (Доступно = Ложь) Тогда
		Возврат;
	КонецЕсли;

// Определим является ли внутренний абонент звонка целевым
//-------------------------------------------------------------------------------------------------
	ЦелевойАгент = РегистрыСведений.АгентыЦелевые.СоздатьМенеджерЗаписи();
	ЦелевойАгент.Телефон = НовЗвонок.АбонентВнутренний;
	ЦелевойАгент.Прочитать();

	Если (ЦелевойАгент.Выбран() = Ложь) Тогда
		Возврат;
	КонецЕсли;

//*************************************************************************************************
// РЕГИСТРАЦИЯ ЦЕЛЕВОГО ЗВОНКА
//*************************************************************************************************
	ТекЗапись = РегистрыСведений.ЗвонкиЦелевые.СоздатьМенеджерЗаписи();
	ТекЗапись.КодПроекта = ВРег(СокрЛП(ЦелевойАгент.ТочкаЦелевая.КодПроекта));
	ТекЗапись.ТочкаЦелевая = ЦелевойАгент.ТочкаЦелевая;
	ТекЗапись.Сигнатура = СокрЛП(НовЗвонок.Сигнатура);

// Если звонок исходящий и инициатор звонка - сам внутренний абонент, значит звонок собственный
//-------------------------------------------------------------------------------------------------
	ТекЗапись.Собственный = (НовЗвонок.ЭтоВходящий = Ложь);
	ТекЗапись.Собственный = ТекЗапись.Собственный И (НовЗвонок.Инициатор = НовЗвонок.АбонентВнутренний);

// Выполним запись звонка
//-------------------------------------------------------------------------------------------------
	Попытка
		ТекЗапись.Записать(Истина);
	Исключение
		СтрСобытия = Новый Структура;
		СтрСобытия.Вставить("СобытиеИмя","ЦелевойЗвонокОбработать");
		СтрСобытия.Вставить("СобытиеОбъект",Метаданные.ОбщиеМодули.Звонки);
		СтрСобытия.Вставить("СобытиеДанные","Сигнатура: " + СокрЛП(НовЗвонок.Сигнатура));
		СтрСобытия.Вставить("СобытиеКомментарий","Ошибка при записи звонка в регистр: " + СокрЛП(ОписаниеОшибки()));
		ОбщегоНазначения.ЗаписатьСобытие(СтрСобытия);
	КонецПопытки;

////*************************************************************************************************
//// ОТПРАВКА ВИЗИТНОЙ КАРТОЧКИ
////*************************************************************************************************
//	Доступно = (НовЗвонок.ЭтоВходящий = Истина);
//	Доступно = Доступно И СтрДлина(ЦелевойАгент.ВизитнаяКарточка)>3;

//// Проверим, не отправлялись ли визитные карточки внешнему абоненту за последние 3 дня
////-------------------------------------------------------------------------------------------------
//	Если (Доступно = Истина) Тогда
//		ТекстЗапроса = "
//		|SELECT	COUNT(*) AS Количество
//		|FROM	РегистрСведений.Сообщения
//		|WHERE	(НомерТелефона = &АбонентВнешний) И (ДатаПостановки > &ОпорнаяДата)";

//		Запрос = Новый Запрос;
//		Запрос.Текст = ТекстЗапроса;
//		Запрос.УстановитьПараметр("АбонентВнешний",СокрЛП(НовЗвонок.АбонентВнешний));
//		Запрос.УстановитьПараметр("ОпорнаяДата",НачалоДня(НовЗвонок.Дата - 259200));
//		ТЗТемп = Запрос.Выполнить().Выгрузить();

//// Если визитная карточка не отправлялась
////-------------------------------------------------------------------------------------------------
//		Если (ТЗТемп.Количество() = 0) ИЛИ (ТЗТемп.Получить(0).Количество = 0) Тогда
//			СтрПараметры = Новый Структура;
//			СтрПараметры.Вставить("Телефон",СокрЛП(НовЗвонок.АбонентВнешний));
//			СтрПараметры.Вставить("Текст",СокрЛП(ЦелевойАгент.ВизитнаяКарточка));
//			СтрПараметры.Вставить("Подпись",СокрЛП(ЦелевойАгент.ТочкаЦелевая.УчетнаяЗаписьСМС));
//			СтрПараметры.Вставить("Оператор",Телефония.ВладелецПолучить(НовЗвонок.АбонентВнутренний));
//			Коммуникатор.СообщениеОтправить(СтрПараметры);
//		КонецЕсли;
//	КонецЕсли;
КонецПроцедуры

Процедура СтатистикаСформировать(НовЗвонок,КЦСписок) Экспорт
	
	// Получим набор записей - маршрут звонка
	//-------------------------------------------------------------------------------------------------
	Маршрут = РегистрыСведений.ЗвонкиМаршруты.СоздатьНаборЗаписей();
	Маршрут.Отбор.Сигнатура.Установить(СокрЛП(НовЗвонок.Сигнатура));
	Маршрут.Прочитать();
	
	Если (Маршрут.Количество() = 0) Тогда
		Возврат;
	КонецЕсли;
	
	Основание = "";
	
	//<18.07.2017;+; Определение телефона оператора КЦ>
	ТелефонОператораКЦ = Справочники.ТелВнутренние.ПустаяСсылка();
	Для Каждого ТекСтрока Из Маршрут Цикл
		
		//Заполним поле Основание сигнатурой интернет-заявки или сигнатурой задачи лояльности
		//------------------------------------------------------------------------------------
		Если ТекСтрока.КодСобытия = "END" И ЗначениеЗаполнено(ТекСтрока.СвойстваСобытия) Тогда
			Основание = ТекСтрока.СвойстваСобытия;	
		КонецЕсли;
		
		Если (НЕ ЗначениеЗаполнено(ТекСтрока.Оператор)) Тогда
			Продолжить;
		КонецЕсли;
		
		// Для входящего фильтруй по событию "ANSWER"
		//-----------------------------------------------------------------
		Если НовЗвонок.ЭтоВходящий И ТекСтрока.КодСобытия <> "ANSWER" Тогда
			Продолжить;
		КонецЕсли;
		
		// Для исходящего фильтруй по событию "START" со свойством "ANSWERED"
		//--------------------------------------------------------------------
		Если НовЗвонок.ЭтоВходящий = Ложь И ТекСтрока.КодСобытия <> "START" И ТекСтрока.СвойстваСобытия<>"ANSWERED" Тогда
			Продолжить;
		КонецЕсли;
		
		// Телефон оператора в найденном событии соответствет телефону оператора КЦ? 
		//----------------------------------------------------------------------------------
		НайденнаяСтрока = КЦСписок.Найти(СокрЛП(ТекСтрока.Оператор.Наименование),"Телефон");
		Если (НайденнаяСтрока = Неопределено) Тогда
			Продолжить;
		КонецЕсли;
		
		ТелефонОператораКЦ = ТекСтрока.Оператор;
		Прервать;
	КонецЦикла;
	//</18.07.2017>
	
	// Проинициализируем переменные для сеанса обработки текущего звонка
	//-------------------------------------------------------------------------------------------------
	ТекСегмент = Неопределено;
	ТекДата = Неопределено;
	ТекРазговор = Ложь;
	
	// Создадим таблицу значений для накопления данных о сегментах звонка
	//-------------------------------------------------------------------------------------------------
	ТЗСегменты = Новый ТаблицаЗначений;
	ТЗСегменты.Колонки.Добавить("ЭтоКЦ");
	ТЗСегменты.Колонки.Добавить("Секунд");
	ТЗСегменты.Колонки.Добавить("Разговор");
	ТЗСегменты.Колонки.Добавить("Подразделение");
	ТЗСегменты.Очистить();
	
	// Выполним анализ событий звонка
	//-------------------------------------------------------------------------------------------------
	Для Каждого ТекСтрока Из Маршрут Цикл
		Если (НЕ ЗначениеЗаполнено(ТекСтрока.Оператор)) Тогда
			Продолжить;
		КонецЕсли;
				
		// Определим сегмент - ответственное подразделение
		//-------------------------------------------------------------------------------------------------
		НайденнаяСтрока = КЦСписок.Найти(СокрЛП(ТекСтрока.Оператор.Наименование),"Телефон");
		СтрСегмента = Неопределено;
		
		Если (НайденнаяСтрока <> Неопределено) Тогда
			СтрСегмента = Новый Структура;
			СтрСегмента.Вставить("ЭтоКЦ",Истина);
			СтрСегмента.Вставить("Ссылка",НайденнаяСтрока.КонтактЦентр.Подразделение);
		Иначе
			ВладСсылка = Телефония.ВладелецПолучить(ТекСтрока.Оператор);
			
			//26.02.2020_09-53, +, Если владелец не определен, тогда в качестве подразделения берем папку Ъ
			//----------------------------------------------------------------------------------------------
			Если ВладСсылка = Неопределено Тогда
				ВладСсылка = Справочники.Предприятие.НайтиПоКоду("000002497");
			КонецЕсли;
		
			Если (ЗначениеЗаполнено(ВладСсылка)) Тогда
				СтрСегмента = Новый Структура;
				СтрСегмента.Вставить("ЭтоКЦ",Ложь);
				СтрСегмента.Вставить("Ссылка",?(ВладСсылка.ЭтоГруппа,ВладСсылка,ВладСсылка.Родитель));
			КонецЕсли;
		КонецЕсли;
		
		// Сформируем данные о длительности и коде события
		//-------------------------------------------------------------------------------------------------
		СекундПрошло = ?(ЗначениеЗаполнено(ТекДата),ТекСтрока.Дата - ТекДата,0);
		ТекСобытие = "," + ВРег(СокрЛП(ТекСтрока.КодСобытия)) + ",";
		
		// START - дозвон до абонента (приемника)
		// Данное событие не регистрируется в статистике и служит для инициализации переменных
		//-------------------------------------------------------------------------------------------------
		Если (Найти(",START,",ТекСобытие) > 0) Тогда
			
			//<19.07.2017, =>, Неверно определяется время разговора с КЦ при исходящем от КЦ и непринятом ОП>
			//ТекРазговор = НовЗвонок.Принят;
			//=>
			ТекРазговор = СтрНайти(ТекСтрока.СвойстваСобытия, "ANSWERED")>0;
			//</19.07.2017>
			
			ТекСегмент = СтрСегмента;
			ТекДата = ТекСтрока.Дата;
			Продолжить;
		КонецЕсли;
		
		// Коды возникающие по окончании события
		//-------------------------------------------------------------------------------------------------
		Если (Найти(",BUSY,ENTERQUEUE,RINGNOANSWER,",ТекСобытие) > 0) Тогда
			
			//<Кошелев_31012017_12-27, +, Если текущий внутр.телефон это телефон КЦ, то ингорируй события USY,ENTERQUEUE,RINGNOANSWER>
			Доступно = ЗначениеЗаполнено(ТекСегмент);
			Доступно = Доступно И ТекСегмент.ЭтоКЦ;
			Если Доступно Тогда
				Продолжить;	
			КонецЕсли;
			//</Кошелев_31012017_12-27>
			
			Если (ЗначениеЗаполнено(СтрСегмента)) Тогда
				НовСтрока = ТЗСегменты.Добавить();
				НовСтрока.Подразделение = СтрСегмента.Ссылка;
				НовСтрока.ЭтоКЦ = СтрСегмента.ЭтоКЦ;
				НовСтрока.Секунд = СекундПрошло;
				НовСтрока.Разговор = Ложь;
			КонецЕсли;
			
			ТекСегмент = СтрСегмента;
			ТекДата = ТекСтрока.Дата;
			ТекРазговор = Ложь;
			Продолжить;
		КонецЕсли;
		
		// Коды возникающие непосредственно при наступлении события
		//-------------------------------------------------------------------------------------------------
		Если (ЗначениеЗаполнено(ТекСегмент)) Тогда
			НовСтрока = ТЗСегменты.Добавить();
			НовСтрока.Подразделение = ТекСегмент.Ссылка;
			НовСтрока.ЭтоКЦ = ТекСегмент.ЭтоКЦ;
			НовСтрока.Разговор = ТекРазговор;
			НовСтрока.Секунд = СекундПрошло;
		КонецЕсли;
		
		ТекРазговор = (Найти(",ANSWER,PICKUP,A-TRANSFER,",ТекСобытие) > 0);
		ТекСегмент = СтрСегмента;
		ТекДата = ТекСтрока.Дата;
	КонецЦикла;
	
	//*************************************************************************************************
	// Обработка событий звонка завершена
	// Сгруппируем полученную таблицу значений по подразделениям и режимам разговора
	//*************************************************************************************************
	ТЗСегменты.Свернуть("ЭтоКЦ,Разговор,Подразделение","Секунд");
	ТекЗапись = РегистрыСведений.ЗвонкиСтатОбщая.СоздатьМенеджерЗаписи();
	
	Для Каждого ТекСегмент Из ТЗСегменты Цикл
		Если (ТекСегмент.ЭтоКЦ = Истина) Тогда
			ТекЗапись.КЦСсылка = ?(ЗначениеЗаполнено(ТекЗапись.КЦСсылка),ТекЗапись.КЦСсылка,ТекСегмент.Подразделение);
			ИмяКолонки = ?(ТекСегмент.Разговор = Истина,"КЦРазговор","КЦОжидание");
			ТекЗапись[ИмяКолонки] = ТекСегмент.Секунд;
		Иначе
			ТекЗапись.ОПСсылка = ?(ЗначениеЗаполнено(ТекСегмент.Подразделение),ТекСегмент.Подразделение,ТекЗапись.ОПСсылка);
			ИмяКолонки = ?(ТекСегмент.Разговор = Истина,"ОПРазговор","ОПОжидание");
			
			//Если на последнем сегменте есть ожидание, но нет разговора, 
			//то разговор был зафиксирован от предыдущего сегмента, поэтому очистим разговор
			//------------------------------------------------------------------------------
			Если НовЗвонок.Принят = Ложь Тогда
				ТекЗапись.ОПРазговор = 0;	
			КонецЕсли;

			ТекЗапись[ИмяКолонки] = ТекСегмент.Секунд;
		КонецЕсли;
	КонецЦикла;
	
	// Статистику звонка необходимо сохранить либо если звонок является входящим, либо если он
	// исходящий и при этом инициатор звонка - контакт-центр, а оператор - сторонний абонент
	//-------------------------------------------------------------------------------------------------
	Доступно = (НовЗвонок.ЭтоВходящий = Ложь);
	Доступно = Доступно И ЗначениеЗаполнено(ТекЗапись.КЦСсылка);
	Доступно = Доступно И (НовЗвонок.Инициатор <> НовЗвонок.АбонентВнутренний);
	Доступно = Доступно ИЛИ (НовЗвонок.ЭтоВходящий = Истина);
	
	//<24.01.2016_15-02, //=>, временно закоментарено, т.к. из-за отстуствия статистики не закроются задачи
	//Если (Доступно = Ложь) Тогда
	//	Возврат;
	//КонецЕсли;
	//</24.01.2016_15-02>
		
	// Классифицируй непринятые звонки
	//-------------------------------------------------------------------------------------------------
	
	//Разговор длительностью не более 5 сек
	Доступно = НовЗвонок.ЭтоВходящий;
	Доступно = Доступно И НовЗвонок.Принят;
	Доступно = Доступно И ТекЗапись.ОПРазговор >0 И ТекЗапись.ОПРазговор <= 5;
	Если Доступно Тогда
		ТекЗапись.КодПричиныНепринят = 5;	
	КонецЕсли;
	
	ЕстьВнутреннийЗвонок = Не ЗначениеЗаполнено(НовЗвонок.Инициатор) И СтрДлина(НовЗвонок.АбонентВнешний)=4;
	
	//Внутренний непринятый звонок (между сотрудниками)
	Доступно = НовЗвонок.ЭтоВходящий;
	Доступно = Доступно И Не НовЗвонок.Принят;
	Доступно = Доступно И ЕстьВнутреннийЗвонок;
	Если Доступно Тогда
		ТекЗапись.КодПричиныНепринят = 6;
	КонецЕсли;
	
	//"Втрой в очереди". С 14.02.2017 15-00 это второй только в очереди КЦ, а не любой
	Доступно = НовЗвонок.ЭтоВходящий;
	Доступно = Доступно И Не НовЗвонок.Принят;
	Доступно = Доступно И Не ЕстьВнутреннийЗвонок;
	Доступно = Доступно И НовЗвонок.НомерВыходаОчередь>1; 
	
	//<14.02.2017_15-00; +; до текущего момента под кодом 2 считали вторые в любой очереди (в очереди КЦ и ОП)
	//теперь под кодом 2 считаем только только вторые в очереди КЦ>
	Доступно = Доступно И ТекЗапись.КЦРазговор = 0  И ТекЗапись.ОПРазговор = 0;
	//</14.02.2017_15-00>
	Если Доступно Тогда
		ТекЗапись.КодПричиныНепринят = 2;
	КонецЕсли;
	
	//Не принят на уровне КЦ
	Доступно = НовЗвонок.ЭтоВходящий;
	Доступно = Доступно И Не НовЗвонок.Принят;
	Доступно = Доступно И Не ЕстьВнутреннийЗвонок;
	Доступно = Доступно И НЕ НовЗвонок.НомерВыходаОчередь>1;
	Доступно = Доступно И ТекЗапись.КЦРазговор = 0;
	Если Доступно Тогда
		
		Маршрут = РегистрыСведений.ЗвонкиМаршруты.СоздатьНаборЗаписей();
		Маршрут.Отбор.Сигнатура.Установить(СокрЛП(НовЗвонок.Сигнатура));
		Маршрут.Прочитать();
		
		ПорядковыйНомерСобытияENTERQUEUE 	= 0;
		ПорядковыйНомерСобытияABANDON 		= 0;
		Для Каждого ТекСтрока Из Маршрут Цикл
			Если ТекСтрока.КодСобытия = "ENTERQUEUE" Тогда
				ПорядковыйНомерСобытияENTERQUEUE = ТекСтрока.НомерСобытия;
			КонецЕсли;
			Если ТекСтрока.КодСобытия = "ABANDON" Тогда
				ПорядковыйНомерСобытияABANDON = ТекСтрока.НомерСобытия;
			КонецЕсли;
		КонецЦикла;
		
		//Если ABANDON последовал сразу за ENTERQUEUE, т.е. не было обращение к агенту очереди
		Если  (ПорядковыйНомерСобытияABANDON - ПорядковыйНомерСобытияENTERQUEUE) = 1 Тогда
			
			//Не принят на уровне КЦ без оператора
			ТекЗапись.КодПричиныНепринят = 4;	
		Иначе
			
			//Не принят на уровне КЦ оператором
			ТекЗапись.КодПричиныНепринят = 1;	
		КонецЕсли;	
	КонецЕсли;
	
	//Не принят ОП	
	Доступно = НовЗвонок.ЭтоВходящий;
	Доступно = Доступно И Не НовЗвонок.Принят;
	Доступно = Доступно И Не ЕстьВнутреннийЗвонок;
	Доступно = Доступно И НЕ НовЗвонок.НомерВыходаОчередь>1;
	Доступно = Доступно И ТекЗапись.КЦРазговор > 0;
	Доступно = Доступно И ТекЗапись.ОПРазговор = 0;
	Если Доступно Тогда
		ТекЗапись.КодПричиныНепринят = 3;
	КонецЕсли;
	
	//Значение по умолчанию
	Если Не НовЗвонок.Принят И Не ЗначениеЗаполнено(ТекЗапись.КодПричиныНепринят)  Тогда
		ТекЗапись.КодПричиныНепринят = 3;
	КонецЕсли;
	
	// Найди элемент справочника предпрятия по номеру внутреннего телефона
	//-----------------------------------------------------------------------------------------------	
	Доступно = ЗначениеЗаполнено(НовЗвонок.АбонентВнутренний);
	ЭлПредприятия = Неопределено;
	Если Доступно Тогда
		ЭлПредприятия = Телефония.ВладелецПолучить(НовЗвонок.АбонентВнутренний);	
		Если ЭлПредприятия <> Неопределено Тогда
			ТекЗапись.Исполнитель = ЭлПредприятия;
			
			//<04.07.2017; +; Зафиксировать ФИО сотрудника для сохранения>
			//ТекЗапись.ИсполнительНаименование = ЭлПредприятия.Наименование;
			//</04.07.2017>
		КонецЕсли;	
	КонецЕсли;
	
	Доступно = НовЗвонок.ЭтоВходящий 		= Ложь;
	Доступно = ТипЗнч(НовЗвонок.Инициатор)	= Тип("СправочникСсылка.ТелВнутренние") И Доступно;
	Доступно = ЗначениеЗаполнено(НовЗвонок.Инициатор) И Доступно;
	Если Доступно Тогда
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбъектыПривязка.Владелец КАК Владелец
		|ИЗ
		|	РегистрСведений.ОбъектыПривязка КАК ОбъектыПривязка
		|ГДЕ
		|	ОбъектыПривязка.Объект = &ТелефонВнутренний";
		Запрос.УстановитьПараметр("ТелефонВнутренний", НовЗвонок.Инициатор);
		РезультатЗапроса = ОбщегоНазначения.ВыполнитьЗапрос(Запрос);
		Если Не РезультатЗапроса.Пустой() Тогда
			ТекЗапись.ИнициаторИсходящего = РезультатЗапроса.Выгрузить()[0][0];
		КонецЕсли;
	КонецЕсли;
	
	// Попытайся определить сотрудника
	//------------------------------------------------------------------------------------------------------	
	//Если Доступно Тогда
	//	ТекЗапись.Сотрудник = Справочники.Сотрудники.НайдиПоВнутреннемуТелефону(НовЗвонок.АбонентВнутренний.Код);
	//КонецЕсли;
	
	// Попытайся определить руководителя сотрудника
	//------------------------------------------------------------------------------------------------------	
	//Если ЗначениеЗаполнено (ТекЗапись.Сотрудник) Тогда	
	//	ТекЗапись.Руководитель 	= ТекЗапись.Сотрудник.Родитель;
	//КонецЕсли;
	
	// Попытайся определить контрагента
	//------------------------------------------------------------------------------------------------------
	ТекЗапись.Контрагент	= Справочники.Контрагенты.НайдиПоКонтактнымДанным(НовЗвонок.АбонентВнешний);		
	
	//Заполним поле Основание сигнатурой интернет-заявки или сигнатурой задачи лояльности
	//------------------------------------------------------------------------------------
	Если ТекСтрока.КодСобытия = "END" И ЗначениеЗаполнено(ТекСтрока.СвойстваСобытия) Тогда
		Основание = ТекСтрока.СвойстваСобытия;	
	КонецЕсли;

	//Заполним поле Основание сигнатурой интернет-заявки или сигнатурой задачи лояльности
	//------------------------------------------------------------------------------------
	Если ЗначениеЗаполнено(Основание) Тогда
		ТекЗапись.Основание = Основание;	
	КонецЕсли;
	
	//<05.09.2018, +, Заглушка: при каскадной схеме не считается время ожидания КЦ>
	Доступно = НовЗвонок.ЭтоВходящий;
	Доступно = Доступно И ТекЗапись.КЦРазговор > 0;
	Доступно = Доступно И ТекЗапись.КЦОжидание = 0;
	Если Доступно Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗвонкиМаршруты.Дата КАК Дата
		|ПОМЕСТИТЬ ВТ01_ПервыйENTERQUEUE
		|ИЗ
		|	РегистрСведений.ЗвонкиМаршруты КАК ЗвонкиМаршруты
		|ГДЕ
		|	ЗвонкиМаршруты.Сигнатура = &Сигнатура
		|	И ЗвонкиМаршруты.КодСобытия = ""ENTERQUEUE""
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗвонкиМаршруты.Дата КАК Дата
		|ПОМЕСТИТЬ ВТ02_ПервыйANSWER
		|ИЗ
		|	РегистрСведений.ЗвонкиМаршруты КАК ЗвонкиМаршруты
		|ГДЕ
		|	ЗвонкиМаршруты.Сигнатура = &Сигнатура
		|	И ЗвонкиМаршруты.КодСобытия = ""ANSWER""
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ01.Дата КАК ДатаENTERQUEUE,
		|	ВТ02.Дата КАК ДатаANSWER
		|ИЗ
		|	ВТ01_ПервыйENTERQUEUE КАК ВТ01,
		|	ВТ02_ПервыйANSWER КАК ВТ02";
		
		Запрос.УстановитьПараметр("Сигнатура",НовЗвонок.Сигнатура);
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ТекЗапись.КЦОжидание = Выборка.ДатаANSWER - Выборка.ДатаENTERQUEUE;
		
	КонецЕсли;
	//</05.09.2018>

	ТекЗапись.Разговор = ТекЗапись.КЦРазговор + ТекЗапись.ОПРазговор;
	ТекЗапись.Ожидание = ТекЗапись.КЦОжидание + ТекЗапись.ОПОжидание;
	ТекЗапись.Сигнатура = СокрЛП(НовЗвонок.Сигнатура);
		
	//Определение телефона оператора КЦ>
	//---------------------------------------------------
	ТекЗапись.КЦАбонент = ТелефонОператораКЦ;
		
	Попытка
		ТекЗапись.Записать();
	Исключение
		Данные = "Сигнатура = " + ТекЗапись.Сигнатура;
		Комментарий = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("СтатистикаСформировать",УровеньЖурналаРегистрации.Ошибка,Метаданные.ОбщиеМодули.Звонки, Данные, Комментарий);
	КонецПопытки;

КонецПроцедуры

//*************************************************************************************************
// Процедуры и функции
//*************************************************************************************************
Функция ЗаписьРазговораПолучить(Сигнатура) Экспорт

// Функция возвращает строку, в которой содержится полный путь к файлу с записью звонка с
// переданной Сигнатурой. Функция возвращает Неопределено если путь не удалось сформировать
//-------------------------------------------------------------------------------------------------
	Если (ЗначениеЗаполнено(Сигнатура)) Тогда
		ЗвонокОбъект = РегистрыСведений.Звонки.СоздатьМенеджерЗаписи();
		ЗвонокОбъект.Сигнатура = ВРег(СокрЛП(Сигнатура));
		ЗвонокОбъект.Прочитать();

		Доступно = ЗвонокОбъект.Выбран();
		Доступно = Доступно И ЗначениеЗаполнено(ЗвонокОбъект.ФайлЗаписи);

		Если (Доступно = Ложь) Тогда
			Возврат Неопределено;
		КонецЕсли;

// Если у сервера заполнен реквизит "КаталогХранилища", то выполним поиск файла сначала в хранилище
//-------------------------------------------------------------------------------------------------
		//Если (ЗначениеЗаполнено(ЗвонокОбъект.Сервер.КаталогХранилища)) Тогда
		//	ИмяФайлаЗаписи = "\\mainbc\FSRecord\" + СокрЛП(ЗвонокОбъект.Сервер.КаталогХранилища);
		//	ИмяФайлаЗаписи = ИмяФайлаЗаписи + "\" + Формат(ЗвонокОбъект.Дата,"ДФ=гггг");
		//	ИмяФайлаЗаписи = ИмяФайлаЗаписи + "-" + Формат(ЗвонокОбъект.Дата,"ДФ=ММ");
		//	ИмяФайлаЗаписи = ИмяФайлаЗаписи + "-" + Формат(ЗвонокОбъект.Дата,"ДФ=дд");
		//	ИмяФайлаЗаписи = ИмяФайлаЗаписи + "\" + СокрЛП(ЗвонокОбъект.ФайлЗаписи) + ".WAV";
		//	ФайлОбъект = Новый Файл(ВРег(СокрЛП(ИмяФайлаЗаписи)));

		//	Если (ФайлОбъект.Существует() = Истина) Тогда
		//		Возврат (СокрЛП(ИмяФайлаЗаписи));
		//	КонецЕсли;
		//КонецЕсли;

// Если у сервера заполнен реквизит "IPАдрес", то выполним поиск файла в хранилище сервера
//-------------------------------------------------------------------------------------------------
		Если (ЗначениеЗаполнено(ЗвонокОбъект.Сервер.IPАдрес)) Тогда
			ИмяФайлаЗаписи = "\\" + СокрЛП(ЗвонокОбъект.Сервер.IPАдрес) + "\CALL-RECORDS\";
			ИмяФайлаЗаписи = ИмяФайлаЗаписи + СокрЛП(ЗвонокОбъект.ФайлЗаписи) + ".WAV";
			ФайлОбъект = Новый Файл(ВРег(СокрЛП(ИмяФайлаЗаписи)));

			Если (ФайлОбъект.Существует() = Истина) Тогда
				Возврат (СокрЛП(ИмяФайлаЗаписи));
			КонецЕсли;
		КонецЕсли;
		
		 Если (ЗначениеЗаполнено(ЗвонокОбъект.Сервер.IPАдресХранилища)) Тогда
			ИмяФайлаЗаписи = "\\" + СокрЛП(ЗвонокОбъект.Сервер.IPАдресХранилища) + "\call-records\";
			ИмяФайлаЗаписи = ИмяФайлаЗаписи + "\" + Формат(ЗвонокОбъект.Дата,"ДФ=гггг");
			ИмяФайлаЗаписи = ИмяФайлаЗаписи + "-" + Формат(ЗвонокОбъект.Дата,"ДФ=ММ");
			ИмяФайлаЗаписи = ИмяФайлаЗаписи + "-" + Формат(ЗвонокОбъект.Дата,"ДФ=дд");
			ИмяФайлаЗаписи = ИмяФайлаЗаписи + "\" + СокрЛП(ЗвонокОбъект.ФайлЗаписи) + ".WAV";

			ФайлОбъект = Новый Файл(ВРег(СокрЛП(ИмяФайлаЗаписи)));

			Если (ФайлОбъект.Существует() = Истина) Тогда
				Возврат (СокрЛП(ИмяФайлаЗаписи));
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	Возврат Неопределено;
КонецФункции

//Уведомить менеджера ОУ о пропушенном звонке (вместо почтового сообщения)
//-------------------------------------------------------------------------
Функция УведомитьОПропущенном(linkedid, call_date, agent_num, abonent_num, comment = "") Экспорт
	
	//С 14.05.2020 10-08 веб-сервис CallMissedRegistration удален из ОУ и заменен очередью
	СтрОчередь		= "MatrixAgregator";
	СтрМетка 		= "Регистрация пропущенный звонок";
	СтрСообщение 	= "";
	
	// Сформируем XML-файл с
	//-------------------------------------------------------------------------------------------------
	//Тело сообщения (XML) 	– передается в элементе Документ:
	//ЗвонокИД (строка) 	- сигнатура звонка LinkedID (идентификатор) звонка 
	//Дата (дата и время) 	- дата и время пропущенного звонка
	//Оператор 				- внутренний номер телефона (телефон оператора)
	//Абонент 				- внешний номер телефона (телефон внешнего абонента)
	
	Приемник = Новый ЗаписьXML;
	Приемник.УстановитьСтроку("UTF-8");
	Приемник.ЗаписатьОбъявлениеXML();
	Приемник.ЗаписатьНачалоЭлемента("Документ");
	
	// Запись шапки документа
	//-------------------------------------------------------------------------------------------------
	Приемник.ЗаписатьАтрибут("ЗвонокИД",	linkedid);
	Приемник.ЗаписатьАтрибут("Дата",		СокрЛП(Формат(call_date,"ДФ=yyyyMMddHHmmss")));
	Приемник.ЗаписатьАтрибут("Оператор",	agent_num);
	Приемник.ЗаписатьАтрибут("Абонент",		abonent_num);
	Приемник.ЗаписатьАтрибут("Комментарий",	comment);
	Приемник.ЗаписатьКонецЭлемента();
	СтрСообщение = Приемник.Закрыть();
	
	Рез = ОУ_Взаимодействие.ОчередьСообщениеОтправить(СтрОчередь, СтрМетка, СтрСообщение);
	Если ЗначениеЗаполнено(Рез) Тогда
		ЗаписьЖурналаРегистрации("Ошибка добавления в очередь сообщений", УровеньЖурналаРегистрации.Ошибка, , СтрСообщение, Рез);
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции

Функция УведомлениеДляОУ(linkedid)
	//В какую программу отправлять уведомление. Если в очереди код проекта P:MTX - тогда в ОУ
	//----------------------------------------------------------------------------------------
	Рез = Ложь;
	
	ИмяОчереди = "";
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗвонкиМаршруты.Оператор.Наименование КАК ИмяОчереди
	|ИЗ
	|	РегистрСведений.ЗвонкиМаршруты КАК ЗвонкиМаршруты
	|ГДЕ
	|	ЗвонкиМаршруты.Сигнатура = &Сигнатура
	|	И ЗвонкиМаршруты.КодСобытия = ""B-TRANSFER""
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗвонкиМаршруты.Дата УБЫВ";
	Запрос.УстановитьПараметр("Сигнатура", linkedid);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Рез;
	КонецЕсли;
	
	ИмяОчереди = РезультатЗапроса.Выгрузить()[0][0];	
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОчередиЛогические.Ссылка КАК Ссылка
	|ИЗ
	|	ВнешнийИсточникДанных.AsteriskNnov.Таблица.ОчередиЛогические КАК ОчередиЛогические
	|ГДЕ
	|	ОчередиЛогические.Наименование = &Наименование
	|	И ОчередиЛогические.КодПроекта ПОДОБНО &КодПроекта";
	Запрос.УстановитьПараметр("Наименование", 	ИмяОчереди);
	Запрос.УстановитьПараметр("КодПроекта",		"%P:MTX%");
	РезультатЗапроса = Запрос.Выполнить();
	
	Рез = Не РезультатЗапроса.Пустой();
	Возврат Рез
КонецФункции

Процедура НепринятыйЗвонокОбработать_v2(НовЗвонок) Экспорт
	
	Перем ТелефоныКЦЛарина18;
	ТелефоныКЦЛарина18 = "1359, 5334, 5240, 5241, 5242, 5319, 1391, 1392";
		
	#Область Пропущенный_звонок_ЛуидорЭксперт
	// Луидор — Эксперт: звонки пришедшие в нерабочее время отправлять на почту Шляпникова Михаила 3045
	//-------------------------------------------------------------------------------------------------
	
	//Горелов А. А.: "Прошу перенастроить Выкупные звонки по следующему сценарию:
	//Пн-Пт с 8.00-20.00 Сб-Вс 8.00-18.00 переключаем на ТМЦ
	//Звонки пришедшие в нерабочее время отправлять на почту Шляпникова Михаила 3045 для перезвона"

	ТелефоныЭксперта = "88312758330, 84951343098, 88432038322, 83472256103, 83512209330, 88352355053, 88342223346, 84752427220";
	
	Доступно = Истина;
	Доступно = Доступно И Новзвонок.ЭтоВходящий;
	Доступно = Доступно И (СтрНайти(ТелефоныЭксперта, Новзвонок.Инициатор) <> 0);

	Если Доступно = Истина Тогда
		//значит это входящий пропущенный звонок Луидор-Эксперта
		//--------------------------------------------------------	
		Если Новзвонок.Принят Тогда
			Возврат;
		КонецЕсли;
		
		ДеньНедели = ДеньНедели(Новзвонок.Дата);
		Час = Час(Новзвонок.Дата);
		Если ДеньНедели >=1 И ДеньНедели <=5  И (Час <= 8 Или Час >= 20) Тогда
			Доступно = Истина 
		ИначеЕсли ДеньНедели >= 6 Или ДеньНедели <= 7 И (Час <= 8 Или Час >= 18) Тогда
			Доступно = Истина
		Иначе
			Доступно = Ложь;
		КонецЕсли;
		
		Если Доступно Тогда
			// значит звонок поступил в нерабочее время
			//-----------------------------------------
			
			От 				= "info@luidor.ru";
			Кому 			= "ShlyapnikovMM@luidor.ru";
			Копия 			= "koshelevss@luidor.ru";
			СкрытаяКопия	= "";
			Тема 			= "Перезвоните клиенту на номер: "+Новзвонок. АбонентВнешний;
			Содержание		= Тема;
			ЭлПочта.ПисьмоОтправить(От, Кому, Копия, СкрытаяКопия, Тема, Содержание,,Истина, 25);
		КонецЕсли;
	
		Возврат;
	КонецЕсли;	
	#КонецОбласти
	
	// Убедимся том, что переданный звонок подлежит обработке
	//-------------------------------------------------------------------------------------------------
	Доступно = (НовЗвонок.Принят = Ложь);
	
	КЦАбонент = "нечто";

	//Звонки длительностью менее 5-ти секунд считаем не принятыми, они создают задачу на перезвон
	//-------------------------------------------------------------------------------------------------
	ОченьКороткий = Ложь;
	ОснованиеЗвонка = "";
	НЗ = РегистрыСведений.ЗвонкиСтатОбщая.СоздатьМенеджерЗаписи();
	НЗ.Сигнатура = НовЗвонок.Сигнатура;
	НЗ.Прочитать();
	Если НЗ.Выбран() Тогда
		//Условие №1 -  обрыв при разговоре с ОП
		КЦАбонент = НЗ.КЦАбонент.Код;		
		Если НЗ.ОПРазговор >= 0 И НЗ.ОПРазговор <= 5 Тогда
			ОченьКороткий = Истина;
			Доступно = Доступно Или ОченьКороткий;
		КонецЕсли;	
		
		//Условие №2 - обрыв при разговоре с КЦ
		Если ОченьКороткий = Ложь И  НЗ.ОПРазговор = 0 И  НЗ.ОПОжидание = 0 И (НЗ.КЦОжидание+НЗ.КЦРазговор)<=5 Тогда
			ОченьКороткий = Истина;
			Доступно = Доступно Или ОченьКороткий;
		КонецЕсли;
		
		ОснованиеЗвонка = НЗ.Основание;
	КонецЕсли;
	
	// Если непринятый или очень короткий принятый  и не является звонком одного сотрудника другому
	//------------------------------------------------------------------------------------------------
	Доступно = Доступно И ЗначениеЗаполнено(НовЗвонок.АбонентВнешний);	
	Доступно = Доступно И СтрДлина(СокрЛП(НовЗвонок.АбонентВнешний))<> 4;	
	
	Если (Доступно = Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	// Если по абоненту есть действующая заявка, то новую создавать не будем
	//-------------------------------------------------------------------------------------------------
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|SELECT	COUNT(*) AS Количество
	|FROM	РегистрСведений.ЗадачиОбратныйЗвонок
	|WHERE	(Телефон = &АбонентВнешний) И (ДатаЗакрытия = ДАТАВРЕМЯ(1,1,1)
	|)";
	Запрос.УстановитьПараметр("Сигнатура",СокрЛП(НовЗвонок.Сигнатура));
	Запрос.УстановитьПараметр("АбонентВнешний",СокрЛП(НовЗвонок.АбонентВнешний));
	Результат = Запрос.Выполнить().Выбрать();
	
	Если (Результат.Следующий()) И (Результат.Количество > 0) Тогда
		Возврат;
	КонецЕсли;
	
	// Назначим обработчиком контакт-центр с сервера принявшего звонок
	//-------------------------------------------------------------------------------------------------
	Телефон 			= СокрЛП(НовЗвонок.АбонентВнешний);
	
	//Значение по умолчанию. Для входящих переопределяется в зависимости от канала (см. ниже)
	//--------------------------------------------------------------------------------------------
	ИспСсылка 			= НовЗвонок.Сервер.КонтактЦентр;
	Исполнитель 		= НовЗвонок.Сервер.КонтактЦентр;
	ИсполнительПлан 	= НовЗвонок.Сервер.КонтактЦентр;
	
	Комментарий 		= СокрЛП(НовЗвонок.Сигнатура);
	ДатаПостановки 		= НовЗвонок.Дата;
	ДатаАктуальности 	= (НовЗвонок.Дата + 600);
	ЗвонокИнициатор 	= НовЗвонок.Сигнатура;
		
	#Область ИсходящийНепринятыйОтКЦпоЗадачеИнтернетЗаявки
	//Исходящий от КЦ по задаче интернет-задачи (авто- и не автозвонок), абонент не взял трубку
	//Если задача интернет-заявки закрылась, то открой задачу обратного звонка на основании интернет-заявки
	//-----------------------------------------------------------------------------------------------------
	Доступно = 		НовЗвонок.ЭтоВходящий = Ложь
				И 	КЦАбонент <> ""
				И 	СтрНайти(ТелефоныКЦЛарина18, КЦАбонент)>0
				И 	НЗ.КЦРазговор >= 0
				И 	СтрНайти(ОснованиеЗвонка, "iq") > 0;
				
	Если Доступно Тогда		
		СигнатураИнтернетЗаявки = Прав(ОснованиеЗвонка, СтрДлина(ОснованиеЗвонка)-3);
		
		//Проверим, что задача закрыта (были случаи, когда из-за пропущенного события HangUP в консоли интернет-заявка не закрывалась)
		// и она закрыта не причиной ручного закрытия, т.е. это закрытая задача автозвонка (автозвонок вручную закрыть нельзя)
		//-------------------------------------------------------------------
		Запрос = Новый Запрос();
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Т.Телефон КАК ЛюбоеПоле
		|ИЗ
		|	РегистрСведений.ЗадачиИнтернетЗаявки КАК Т
		|ГДЕ
		|	Т.Сигнатура = &Сигнатура
		|	И Т.ДатаЗакрытия <> ДАТАВРЕМЯ(1, 1, 1)
		|	И Т.ПричинаЗакрытия = """"" ;
		Запрос.УстановитьПараметр("Сигнатура", СигнатураИнтернетЗаявки);
		ЗакрытаяНевручнуюЗадачаИнтернетЗаявки = Запрос.Выполнить();
		Если ЗакрытаяНевручнуюЗадачаИнтернетЗаявки.Пустой()= Ложь Тогда
			//Если оказались здесь, значит звонок исходящий от КЦ на основаниии интернет-заявки, 
			//задача интернет-заявки закрыта и закрыта не вручную.
			//-------------------------------------------------------------------------------------------------------------
			
			//Проверь, нет ли закрытой ручным заркытием задачи обратного звонка по этой интернет-заявке
			//------------------------------------------------------------------------------------------
			Запрос = Новый Запрос();
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Т.Телефон КАК ЛюбоеПоле
			|ИЗ
			|	РегистрСведений.ЗадачиОбратныйЗвонок КАК Т
			|ГДЕ
			|	Т.ДатаЗакрытия <> ДАТАВРЕМЯ(1, 1, 1)
			|	И Т.ПричинаЗакрытия <> """"
			|	И Т.Основание = &Основание" ;
			Запрос.УстановитьПараметр("Основание", ОснованиеЗвонка);
			ЗакрытаяВручнуюЗадачаОбратногоЗвонка = Запрос.Выполнить();
			Если ЗакрытаяВручнуюЗадачаОбратногоЗвонка.Пустой() = Истина Тогда
				//Если оказались здесь, значит звонок исходящий от КЦ на основаниии интернет-заявки,
				//задача интернет-заявки закрыта и закрыта не вручную.
				//Также нет закытой вручную задачи обратного звонка по этой заявке.
				//Создай задачу на перезвон
				//-------------------------------------------------------------------------------------------------------------
				
				//Сайт интернет-заявки получи
				//---------------------------
				Сайт = "";
				Запрос = Новый Запрос();
				Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Т.Инициатор КАК Инициатор ИЗ РегистрСведений.ИнтернетЗаявки КАК Т ГДЕ Т.Сигнатура = &Сигнатура";
				Запрос.УстановитьПараметр("Сигнатура", Прав(ОснованиеЗвонка, СтрДлина(ОснованиеЗвонка) - 3));  //Для получения сигнатуры интернет-заявки из основания убери префикс "iq_"

				РезультатЗапроса = Запрос.Выполнить();
				Если РезультатЗапроса.Пустой()=Ложь Тогда
					Сайт = РезультатЗапроса.Выгрузить()[0][0];
				КонецЕсли;
				
				//Создай задачу обратного звонка
				//------------------------------
				Тип = Перечисления.ТипЗадачи.НепринятыйИсходящий;
				РегистрыСведений.ЗадачиОбратныйЗвонок.Добавить(Телефон, Дата(1,1,1,0,0,0), Тип, Исполнитель, Комментарий, ДатаПостановки, ЗвонокИнициатор, ДатаАктуальности, Сайт, ИсполнительПлан, Неопределено, ОснованиеЗвонка);				
				
				//Если оператор ЕКЦ при обработке звонка по этой задачи интернет-заявки установил причину ручного закрытия в форме расширенной анкеты,
				//(это проверяется записью в РС.ЗадачиОбратныйЗвонокДляАвтозакрытия, в котором причина ручного закрытия - в комментарии)
				//тогда только что созданную задачу обратного звонка по интренет-заявке нужно закрыть этой причиной ручного закрытия
				//-------------------------------------------------------------------------------------------------------------------
				Запрос = Новый Запрос();
				Запрос.Текст =
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	Т.Комментарий КАК Комментарий
				|ИЗ
				|	РегистрСведений.ЗадачиОбратныйЗвонокДляАвтозакрытия КАК Т
				|ГДЕ
				|	Т.Инициатор = &Инициатор
				|	И Т.ДатаПостановки = ДАТАВРЕМЯ(1, 1, 1)";
				Запрос.УстановитьПараметр("Инициатор", НовЗвонок.Сигнатура);
				РезультатЗапроса = Запрос.Выполнить();
				Если Не РезультатЗапроса.Пустой() Тогда
					//Если оказались здесь, значит есть запись о том, что задачу обратного звонка нужно закрыть автоматически
					//-------------------------------------------------------------------------------------------------------
					РегистрыСведений.ЗадачиОбратныйЗвонок.УстановиЗначениеРеквизитаИЗакройЗадачу(Телефон, ТекущаяДата(), "ПричинаЗакрытия", РезультатЗапроса.Выгрузить()[0][0]); 
				КонецЕсли;
				
				//Если оператор ЕКЦ при обработке звонка по этой задачи интернет-заявки установил напоминание перезвонить в форме расширенной анкеты,
				//(это проверяется записью в РС.ЗадачиОбратныйЗвонокДляАвтозакрытия, в котором в дате постановки - напоминание перезвонить, 
				//а в комментарии =  "# напоминание перезвонить #")
				//-------------------------------------------------------
				Запрос = Новый Запрос();
				Запрос.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	Т.ДатаПостановки КАК ДатаПостановки
				|ИЗ
				|	РегистрСведений.ЗадачиОбратныйЗвонокДляАвтозакрытия КАК Т
				|ГДЕ
				|	Т.Инициатор = &Инициатор
				|	И Т.ДатаПостановки > ДАТАВРЕМЯ(1, 1, 1)";
				Запрос.УстановитьПараметр("Инициатор", НовЗвонок.Сигнатура);
				РезультатЗапроса = Запрос.Выполнить();
				Если Не РезультатЗапроса.Пустой() Тогда
					//Если оказались здесь, значит есть запись о том, что в задаче обратного звонка, созданную на основании задачи интернет-заявки, нужно назнить на определенное время перезвона
					//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
					ДатаПостановки =  РезультатЗапроса.Выгрузить()[0][0];
					ЗаписьЖурналаРегистрации("Задача обратный звонок по интернет-заявке", УровеньЖурналаРегистрации.Ошибка,, СтрШаблон("ДатаПостановки=%1", ДатаПостановки));
					Успех = РегистрыСведений.ЗадачиОбратныйЗвонок.УстановиЗначениеРеквизита(Телефон, "НапоминаниеПерезвонить", ДатаПостановки);
					Если Успех Тогда
						//Удали запись из РС.РС.ЗадачиОбратныйЗвонокДляАвтозакрытия, иначе задача не отобразится в консоли ЕКЦ
						//-----------------------------------------------------------------------------------------------
						Зап = РегистрыСведений.ЗадачиОбратныйЗвонокДляАвтозакрытия.СоздатьМенеджерЗаписи();
						Зап.Инициатор=НовЗвонок.Сигнатура;
						Зап.Прочитать();
						Зап.Удалить();
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти

	///Если разговор с КЦ состоялся и далее был перевод с уведомлением с КЦ на ОП, тогда задачу не создаем
	//----------------------------------------------------------------------------------------------------
	Если НЗ.КЦРазговор > 0 Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВЫБОР
		|		КОГДА ЗвонкиМаршруты.КодСобытия = ""A-TRANSFER""
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПервыйПереводБылСУведомлением
		|ИЗ
		|	РегистрСведений.ЗвонкиМаршруты КАК ЗвонкиМаршруты
		|ГДЕ
		|	ЗвонкиМаршруты.Сигнатура = &Сигнатура
		|	И (ЗвонкиМаршруты.КодСобытия = ""A-TRANSFER""
		|			ИЛИ ЗвонкиМаршруты.КодСобытия = ""B-TRANSFER"")
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗвонкиМаршруты.Дата";
		Запрос.УстановитьПараметр("Сигнатура", НовЗвонок.Сигнатура);
		Рез = Запрос.Выполнить();
		Если Рез.Пустой() Тогда
			Возврат
		КонецЕсли;
		
		Если Рез.Выгрузить()[0][0] = Истина Тогда
			Возврат
		КонецЕсли;
	КонецЕсли;
		
	Если НовЗвонок.ЭтоВходящий Тогда
		
		// Если канал звонка определен и сервер канала совпадает с сервером звонка, то переназначим
		// обработчика по-умолчанию: возьмем его из настроек самого канала
		//-------------------------------------------------------------------------------------------------
		Доступно = ЗначениеЗаполнено(НовЗвонок.Инициатор);
		Доступно = Доступно И (ТипЗнч(НовЗвонок.Инициатор) = Тип("СправочникСсылка.ТелВнешние"));
		Доступно = Доступно И (НовЗвонок.Инициатор.Сервер = НовЗвонок.Сервер);
		
		//Если для канала определен другой контакт-центр
		//--------------------------------------------------------------------------
		ИспСсылка 		= ?(Доступно,НовЗвонок.Инициатор.КонтактЦентр,ИспСсылка); 
		Исполнитель 		= ИспСсылка;
		ИсполнительПлан 	= ИспСсылка;

		//<Кошелев_30052016_12-15; Если звонок с одного КЦ переключен на следующий КЦ и он не принят последним, то у последнего, а не первого КЦ возникает задача>
		Доступно = ЗначениеЗаполнено(НовЗвонок.Инициатор);
		Доступно = Доступно И (ТипЗнч(НовЗвонок.Инициатор) = Тип("СправочникСсылка.ТелВнешние"));
		Доступно = Доступно И ЗначениеЗаполнено(НовЗвонок.АбонентВнутренний);
		Доступно = Доступно И Не (НовЗвонок.Инициатор.ВсегдаИспользоватьЭтотКЦ);
		
		Если Доступно Тогда
			Запрос = Новый Запрос();
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОбъектыПривязка.Владелец КАК Подразделение
			|ПОМЕСТИТЬ ВТ
			|ИЗ
			|	РегистрСведений.ОбъектыПривязка КАК ОбъектыПривязка
			|ГДЕ
			|	ОбъектыПривязка.Объект = &АбонентВнутренний
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	КонтактЦентры.Ссылка
			|ИЗ
			|	Справочник.КонтактЦентры КАК КонтактЦентры
			|ГДЕ
			|	КонтактЦентры.Подразделение В
			|			(ВЫБРАТЬ
			|				ВТ.Подразделение
			|			ИЗ
			|				ВТ)";
			Запрос.УстановитьПараметр("АбонентВнутренний", НовЗвонок.АбонентВнутренний);
			РезультатЗапроса = Запрос.Выполнить();
			Если Не РезультатЗапроса.Пустой() Тогда
				ИспСсылка = РезультатЗапроса.Выгрузить()[0][0];
			КонецЕсли;
		КонецЕсли;
		//</Кошелев_30052016_12-15>
		
		// Создадим задачу по обработке непринятого звонка
		//-------------------------------------------------------------------------------------------------	
		Тип 				= Перечисления.ТипЗадачи.Непринятый;
		РегистрыСведений.ЗадачиОбратныйЗвонок.Добавить(Телефон, Дата(1,1,1,0,0,0), Тип, Исполнитель, Комментарий, ДатаПостановки, ЗвонокИнициатор, ДатаАктуальности, "", ИсполнительПлан);	
		
		//<Для звонка, отбитого по событие NIGNT отправлять на эл.почту>
		Доступно = Ложь;
		Запрос = Новый Запрос();
		Запрос.Текст  =  
		"ВЫБРАТЬ
		|	ЗвонкиМаршруты.Сигнатура КАК Сигнатура
		|ИЗ
		|	РегистрСведений.ЗвонкиМаршруты КАК ЗвонкиМаршруты
		|ГДЕ
		|	ЗвонкиМаршруты.Сигнатура = &Сигнатура
		|	И ЗвонкиМаршруты.КодСобытия = ""NIGHT""";
		Запрос.УстановитьПараметр("Сигнатура", НовЗвонок.Сигнатура);
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Доступно = Истина;		
		КонецЕсли;	
		
		Доступно = Доступно И ТипЗнч(НовЗвонок.Инициатор) = Тип("СправочникСсылка.ТелВнешние");
		Доступно = Доступно И ЗначениеЗаполнено(НовЗвонок.Инициатор.Почта);
		Если Доступно Тогда	
			От	 			= "info@luidor.ru";
			Кому 			= НовЗвонок.Инициатор.Почта;
			Копия 			= "koshelevss@luidor.ru";
			СкрытаяКопия	= "";
			Тема 			= "Перезвоните клиенту на номер: "+Новзвонок. АбонентВнешний;
			Содержание		= Тема;
			ЭлПочта.ПисьмоОтправить(От, Кому, Копия, СкрытаяКопия, Тема, Содержание,,Истина, 25);	
		КонецЕсли;
		//</Для звонка, отбитого по событие NIGNT отправлять на эл.почту>
		
	КонецЕсли;	
			
	//Исходящий от КЦ, не обязательно по интернет-заявке, абонент взял трубку и разговор с КЦ состоялся
	Доступно = Истина;
	Доступно = Доступно И НовЗвонок.ЭтоВходящий = Ложь;
	Доступно = Доступно И НЗ.КЦРазговор >0;
	Доступно = Доступно И КЦАбонент <> "";
	Доступно = Доступно И СтрНайти(ТелефоныКЦЛарина18, КЦАбонент)>0;
	Если Доступно Тогда
		// Задачи по непринятым исходящим могут возникать, если разговор с КЦ состоялся и этот разговор был со следующих номеров
		//----------------------------------------------------------------------------------------------------------------------
		//Проверим, если открытые интернет-заявки. Были случаи, когда из-за пропущенного события HangUP в консоли интернет-заявка не закрывалась и параллельно
		//открывалась задача на обратный звонок 
		//-----------------------------------------------------
		Запрос = Новый Запрос();
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ
		|	РегистрСведений.ЗадачиИнтернетЗаявки КАК ЗадачиИнтернетЗаявки
		|ГДЕ
		|	ЗадачиИнтернетЗаявки.Телефон = &Телефон
		|	И ЗадачиИнтернетЗаявки.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)";
		Запрос.УстановитьПараметр("Телефон", НовЗвонок.АбонентВнешний);
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			//Если оказались здесь значит КЦ выполнил исходящий, нет открытой интернет-заявки
			//-------------------------------------------------------------------------------
			Тип = Перечисления.ТипЗадачи.НепринятыйИсходящий;
			РегистрыСведений.ЗадачиОбратныйЗвонок.Добавить(Телефон, Дата(1,1,1,0,0,0), Тип, Исполнитель, Комментарий, ДатаПостановки, ЗвонокИнициатор, ДатаАктуальности, "", ИсполнительПлан, Неопределено, ОснованиеЗвонка);
		КонецЕсли;
	КонецЕсли;

	//Если звонок прошел через КЦ и сорвался на уровне ОП, т.е. известен внутр.телефон ОП, тогда попытайся закрыть задачу автоматически
	//----------------------------------------------------------------------------------------------------------------------------------
	Доступно = Истина;
	Доступно = КЦАбонент <> "";
	Доступно = Доступно И СтрНайти(ТелефоныКЦЛарина18, КЦАбонент) > 0;
	Доступно = Доступно И ЗначениеЗаполнено(НЗ.ОПСсылка);
	Доступно = Доступно И ЗначениеЗаполнено(НовЗвонок.АбонентВнутренний);
	Доступно = Доступно И СтрНайти(ТелефоныКЦЛарина18, НовЗвонок.АбонентВнутренний.Код) = 0;  
	Если Доступно Тогда
		// Если оказались здесь, значит звонок вошел в очередь ОП  и в этой очереди был выбран хотя бы один активный агент -  оператор ОП
		//--------------------------------------------------------------------------------------------------------------------------------	
		Если УведомлениеДляОУ(НовЗвонок.Сигнатура) Тогда
			//Уведомление отправить в ОУ
			//--------------------------
			Рез = УведомитьОПропущенном(НовЗвонок.Сигнатура, НовЗвонок.Дата, НовЗвонок.АбонентВнутренний.Код, Телефон);
			РегистрыСведений.ЗадачиОбратныйЗвонок.ЗакрытьАвтоматически(Телефон, НовЗвонок.АбонентВнутренний.Код, НовЗвонок.Сигнатура);
		Иначе
			//Уведомление отправляется пользователю не ОУ (Ждановский, Тюнинг, Владимир)
			//---------------------------------------------------------------------------
			ЗадачиСервер.ЗакрытьАвтоматическиИсходящимПочтовымСообщением(Телефон, НовЗвонок.АбонентВнутренний.Код, НовЗвонок.Сигнатура);
		КонецЕсли;
	КонецЕсли;
	
	Доступно = Истина;
	Доступно = КЦАбонент <> "";
	Доступно = Доступно И СтрНайти(ТелефоныКЦЛарина18, КЦАбонент) > 0;
	Доступно = Доступно И ЗначениеЗаполнено(НЗ.ОПСсылка);
	Доступно = Доступно И ЗначениеЗаполнено(НовЗвонок.АбонентВнутренний);
	Доступно = Доступно И СтрНайти(ТелефоныКЦЛарина18, НовЗвонок.АбонентВнутренний.Код) <> 0; 
	Если Доступно Тогда
		//Если оказались здесь, значит ОП определено, т.е. определена очередь ОП, но звонок сорвался на очереди ОП до определения первого оператора ОП, тогда в АбонентВнутренний содержится
		//последний определевшийся внутренний номер - это номер оператора КЦ, напр.звонок 1#1589176431.1999#000000001
		//Нужно определить любого активного оператора ОП из очереди ОП, создать ему задачу на обратный звонок
		//Возможна ситуация, когда в очереди нет ни одного активного агента, поэтому сначала создаем задачу по сигнатуре,
		//затем пытаемся сразу выполнить ее. Если же попытка выполнения не удалась (например не найдено активных агентов),
		//тогда есть регламентное задание "ЗадачиОбратныйЗвонокДляАвтозакрытияВыполнить"
		//------------------------------------------------------------------------------------------------------
		
		Если УведомлениеДляОУ(НовЗвонок.Сигнатура) Тогда
			//Уведомление для ОУ. Создание задачи на обратный звонок
			//-----------------------------------
			РегистрыСведений.ЗадачиОбратныйЗвонокДляАвтозакрытия.Создать(НовЗвонок.Сигнатура, ТекущаяДата());
			//Попытка сразу исполнить эту задачу. Попытка будет успешна, если будет найден любой активный агент очереди ОП
			//--------------------------------------------------------------------------------------------------------------
			ЗадачиСервер.ЗадачиОбратныйЗвонокДляАвтозакрытияВыполнитьАсинхронно(НовЗвонок.Сигнатура);
		Иначе
			//Уведомление не для ОУ
			//---------------------
			ЗадачиСервер.ЗакрытьАвтоматическиИсходящимПочтовымСообщением(Телефон, НовЗвонок.АбонентВнутренний.Код, НовЗвонок.Сигнатура);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
