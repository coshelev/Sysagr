//*************************************************************************************************
// Регистрация события в журнале базы данных
//*************************************************************************************************

Процедура ЗаписатьСобытие(СтрПараметры,ОтправитьSMS = Ложь) Экспорт

// Процедура создает запись в системном журнале регистрации
// В качестве входного параметра передается структура со следующими полями:
// - СобытиеИмя (обязательный Строка)
// - СобытиеДанные (необязательный Строка)
// - СобытиеОбъект (необязательный ОбъектМетаданных)
// - СобытиеКомментарий (необязательный Строка)
//-------------------------------------------------------------------------------------------------
	Если (ТипЗнч(СтрПараметры) <> Тип("Структура")) Тогда
		Возврат;
	КонецЕсли;

// Проинициализируем переменные
//-------------------------------------------------------------------------------------------------
	СобытиеУровень = УровеньЖурналаРегистрации.Ошибка;
	РежимТранзакции = РежимТранзакцииЗаписиЖурналаРегистрации.Независимая;
	СобытиеДанные = ?(СтрПараметры.Свойство("СобытиеДанные"),СтрПараметры.СобытиеДанные,"");
	СобытиеИмя = ?(СтрПараметры.Свойство("СобытиеИмя"),СтрПараметры.СобытиеИмя,"Нет имени события");
	СобытиеОбъект = ?(СтрПараметры.Свойство("СобытиеОбъект"),СтрПараметры.СобытиеОбъект,Неопределено);
	СобытиеКомментарий = ?(СтрПараметры.Свойство("СобытиеКомментарий"),СтрПараметры.СобытиеКомментарий,"");

// Выполним запись события
//-------------------------------------------------------------------------------------------------
	Если (СобытиеОбъект = Неопределено) Тогда
		ЗаписьЖурналаРегистрации(СобытиеИмя,СобытиеУровень,,СобытиеДанные,СобытиеКомментарий,РежимТранзакции);
	Иначе
		ЗаписьЖурналаРегистрации(СобытиеИмя,СобытиеУровень,СобытиеОбъект,СобытиеДанные,СобытиеКомментарий,РежимТранзакции);
	КонецЕсли;
КонецПроцедуры


//*************************************************************************************************
// Обработка удаления объектов
//*************************************************************************************************

Процедура ОбъектПередУдалением(Источник,Отказ) Экспорт

// Исключения на время внедрения
//-------------------------------------------------------------------------------------------------
	Доступно = (ТипЗнч(Источник.Ссылка) = Тип("СправочникСсылка.КонтактЦентры"));

	Если (Доступно = Истина) Тогда
		Возврат;
	КонецЕсли;

// Процедура вызывается как подписка на событие удаления объекта базы данных
// Задача процедуры - убедиться в том, что удаление объекта не нарушит ссылочную целостность базы
//-------------------------------------------------------------------------------------------------
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(Источник.Ссылка);
	Зависимости = НайтиПоСсылкам(МассивСсылок);
	Сообщение = Новый СообщениеПользователю;

// Если ссылки на удаляемый объект найдены в других объектах базы данных, то запретим удаление
//-------------------------------------------------------------------------------------------------
	Для Каждого ТекСтрока Из Зависимости Цикл
		Если (ТекСтрока.Данные <> Источник.Ссылка) Тогда
			Сообщение.Текст = "Невозможно удалить [" + СокрЛП(Источник) + "], т.к. на него есть ";
			Сообщение.Текст = Сообщение.Текст + "ссылка в объекте [" + СокрЛП(ТекСтрока.Данные) + "]";
			Сообщение.Сообщить();
			Отказ = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

//-------------------------------------------------------------------------------------------------

Функция ОбъектЗависимостиЗаменить(ЗаменяемыйСсылка,ЗаменяющийСсылка) Экспорт

// Функция выполняет поиск объектов в базе данных, содержащих ссылки на Заменяемый элемент
// В случае обнаружения таких ссылок функция выполняет замену ссылки на Заменяющий элемент
// В случае успешной замены всех найденных ссылок функция возвращает Истину
//-------------------------------------------------------------------------------------------------
	Доступно = ЗначениеЗаполнено(ЗаменяемыйСсылка);
	Доступно = Доступно И ЗначениеЗаполнено(ЗаменяющийСсылка);

	Если (Доступно = Ложь) Тогда
		Возврат Истина;
	КонецЕсли;

// Найдем в базе все ссылки на удаляемый объект
//-------------------------------------------------------------------------------------------------
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(ЗаменяемыйСсылка);
	Зависимости = НайтиПоСсылкам(МассивСсылок);
	Сообщение = Новый СообщениеПользователю;
	Отказ = Ложь;

// В ТЗ "Зависимости" сейчас находятся объекты, в которых обнаружены ссылки на Заменяемый элемент
// Последовательно в каждом объекте выполним замену найденных ссылок на Заменяющий элемент
//-------------------------------------------------------------------------------------------------
	Попытка
		НачатьТранзакцию();
	Исключение
		Сообщение.Текст = "При попытке инициализации транзакции произошла ошибка";
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецПопытки;

// Последовательно обработаем все полученные зависимости
//-------------------------------------------------------------------------------------------------
	Для Каждого ТекСтрока Из Зависимости Цикл
		СтрПараметры = Новый Структура;
		СтрПараметры.Вставить("Зависимость",ТекСтрока);
		СтрПараметры.Вставить("Заменяемый",ЗаменяемыйСсылка);
		СтрПараметры.Вставить("Заменяющий",ЗаменяющийСсылка);

		Если (Конвертация.ЭтоДокумент(ТекСтрока.Данные)) Тогда
			Отказ = ?(ОбъектЗависимостиЗаменитьДокумент(СтрПараметры),Отказ,Истина);
		ИначеЕсли (Конвертация.ЭтоСправочник(ТекСтрока.Данные)) Тогда
			Отказ = ?(ОбъектЗависимостиЗаменитьСправочник(СтрПараметры),Отказ,Истина);
		ИначеЕсли (Найти(ТекСтрока.Данные,"РегистрСведенийКлючЗаписи") > 0) Тогда
			Отказ = ?(ОбъектЗависимостиЗаменитьРегистр(СтрПараметры),Отказ,Истина);
		Иначе
			Сообщение.Текст = "При обработке зависимостей обнаружен объект, для которого не существует алгоритма замены";
			Сообщение.Текст = Сообщение.Текст + Символы.ПС + СокрЛП(ТекСтрока.Данные);
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЦикла;

// Если все замены выполнены без ошибок
//-------------------------------------------------------------------------------------------------
	Если (Отказ = Ложь) Тогда
		ЗафиксироватьТранзакцию();
		Возврат Истина;
	КонецЕсли;

// Если в процессе замены происходили ошибки
//-------------------------------------------------------------------------------------------------
	ОтменитьТранзакцию();
	Возврат Ложь;
КонецФункции

Функция ОбъектЗависимостиЗаменитьДокумент(СтрПараметры)

// Перенесем переданные параметры в переменные
// Получим объект для работы
//-------------------------------------------------------------------------------------------------
	ТекСтрока = СтрПараметры.Зависимость;
	ЗаменяемыйСсылка = СтрПараметры.Заменяемый;
	ЗаменяющийСсылка = СтрПараметры.Заменяющий;
	РабочийОбъект = ТекСтрока.Данные.ПолучитьОбъект();

// Просканируем основные реквизиты объекта в поисках ссылки на удаляемый элемент
//-------------------------------------------------------------------------------------------------
	Для Каждого ТекРеквизит Из ТекСтрока.Метаданные.Реквизиты Цикл
		Если (РабочийОбъект[ТекРеквизит.Имя] = ЗаменяемыйСсылка) Тогда
			РабочийОбъект[ТекРеквизит.Имя] = ЗаменяющийСсылка;
		КонецЕсли;
	КонецЦикла;

// Просканируем стандартные реквизиты объекта в поисках ссылки на удаляемый элемент
//-------------------------------------------------------------------------------------------------
	Для Каждого ТекРеквизит Из ТекСтрока.Метаданные.СтандартныеРеквизиты Цикл
		Если (РабочийОбъект[ТекРеквизит.Имя] = ЗаменяемыйСсылка) Тогда
			РабочийОбъект[ТекРеквизит.Имя] = ЗаменяющийСсылка;
		КонецЕсли;
	КонецЦикла;

// Получим все табличные части объекта
//-------------------------------------------------------------------------------------------------
	Для Каждого ТекТабчасть Из ТекСтрока.Метаданные.ТабличныеЧасти Цикл
		Для Каждого ТекСтрока Из РабочийОбъект[ТекТабчасть.Имя] Цикл
			Для Каждого ТекРеквизит Из ТекТабчасть.Реквизиты Цикл
				Если (ТекСтрока[ТекРеквизит.Имя] = ЗаменяемыйСсылка) Тогда
					ТекСтрока[ТекРеквизит.Имя] = ЗаменяющийСсылка;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

// Запишем модифицированный объект
//-------------------------------------------------------------------------------------------------
	Попытка
		РабочийОбъект.Записать();
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "При записи объекта [" + СокрЛП(РабочийОбъект) + "] произошла ошибка:";
		Сообщение.Текст = Сообщение.Текст + Символы.ПС + СокрЛП(ОписаниеОшибки());
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецПопытки;

	Возврат Истина;
КонецФункции

Функция ОбъектЗависимостиЗаменитьСправочник(СтрПараметры)

// Перенесем переданные параметры в переменные
// Получим объект для работы
//-------------------------------------------------------------------------------------------------
	ТекСтрока = СтрПараметры.Зависимость;
	ЗаменяемыйСсылка = СтрПараметры.Заменяемый;
	ЗаменяющийСсылка = СтрПараметры.Заменяющий;
	РабочийОбъект = ТекСтрока.Данные.ПолучитьОбъект();

// Просканируем основные реквизиты объекта в поисках ссылки на удаляемый элемент
//-------------------------------------------------------------------------------------------------
	Для Каждого ТекРеквизит Из ТекСтрока.Метаданные.Реквизиты Цикл
		Если (РабочийОбъект[ТекРеквизит.Имя] = ЗаменяемыйСсылка) Тогда
			РабочийОбъект[ТекРеквизит.Имя] = ЗаменяющийСсылка;
		КонецЕсли;
	КонецЦикла;

// Просканируем стандартные реквизиты объекта в поисках ссылки на удаляемый элемент
//-------------------------------------------------------------------------------------------------
	Для Каждого ТекРеквизит Из ТекСтрока.Метаданные.СтандартныеРеквизиты Цикл
		Если (РабочийОбъект[ТекРеквизит.Имя] = ЗаменяемыйСсылка) Тогда
			РабочийОбъект[ТекРеквизит.Имя] = ЗаменяющийСсылка;
		КонецЕсли;
	КонецЦикла;

// Получим все табличные части объекта
//-------------------------------------------------------------------------------------------------
	Для Каждого ТекТабчасть Из ТекСтрока.Метаданные.ТабличныеЧасти Цикл
		Для Каждого ТекСтрока Из РабочийОбъект[ТекТабчасть.Имя] Цикл
			Для Каждого ТекРеквизит Из ТекТабчасть.Реквизиты Цикл
				Если (ТекСтрока[ТекРеквизит.Имя] = ЗаменяемыйСсылка) Тогда
					ТекСтрока[ТекРеквизит.Имя] = ЗаменяющийСсылка;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

// Запишем модифицированный объект
//-------------------------------------------------------------------------------------------------
	Попытка
		РабочийОбъект.Записать();
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "При записи объекта [" + СокрЛП(РабочийОбъект) + "] произошла ошибка:";
		Сообщение.Текст = Сообщение.Текст + Символы.ПС + СокрЛП(ОписаниеОшибки());
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецПопытки;

	Возврат Истина;
КонецФункции

Функция ОбъектЗависимостиЗаменитьРегистр(СтрПараметры)

// Перенесем переданные параметры в переменные
//-------------------------------------------------------------------------------------------------
	ТекСтрока = СтрПараметры.Зависимость;
	ЗаменяемыйСсылка = СтрПараметры.Заменяемый;
	ЗаменяющийСсылка = СтрПараметры.Заменяющий;

// Получим менеджер записи регистра сведений для работы
//-------------------------------------------------------------------------------------------------
	РабочийОбъект = РегистрыСведений[ТекСтрока.Метаданные.Имя].СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(РабочийОбъект,ТекСтрока.Данные);
	РабочийОбъект.Прочитать();

	Если (РабочийОбъект.Выбран() = Ложь) Тогда
		Возврат Истина;
	КонецЕсли;

// Выполним поиск и замену значения
//-------------------------------------------------------------------------------------------------
	Для Каждого ТекРеквизит Из ТекСтрока.Метаданные.Измерения Цикл
		Если (РабочийОбъект[ТекРеквизит.Имя] = ЗаменяемыйСсылка) Тогда
			РабочийОбъект[ТекРеквизит.Имя] = ЗаменяющийСсылка;
		КонецЕсли;
	КонецЦикла;

	Для Каждого ТекРеквизит Из ТекСтрока.Метаданные.Ресурсы Цикл
		Если (РабочийОбъект[ТекРеквизит.Имя] = ЗаменяемыйСсылка) Тогда
			РабочийОбъект[ТекРеквизит.Имя] = ЗаменяющийСсылка;
		КонецЕсли;
	КонецЦикла;

	Для Каждого ТекРеквизит Из ТекСтрока.Метаданные.Реквизиты Цикл
		Если (РабочийОбъект[ТекРеквизит.Имя] = ЗаменяемыйСсылка) Тогда
			РабочийОбъект[ТекРеквизит.Имя] = ЗаменяющийСсылка;
		КонецЕсли;
	КонецЦикла;

// Запишем модифицированный объект
//-------------------------------------------------------------------------------------------------
	Попытка
		РабочийОбъект.Записать();
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "При записи объекта [" + СокрЛП(РабочийОбъект) + "] произошла ошибка:";
		Сообщение.Текст = Сообщение.Текст + Символы.ПС + СокрЛП(ОписаниеОшибки());
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецПопытки;

	Возврат Истина;
КонецФункции


//*************************************************************************************************
// ГРАФИКИ РАБОТЫ
//*************************************************************************************************

Функция РежимРаботыНаДатуПолучить(Дата,Объект) Экспорт

// Функция возвращает режим работы переданного объекта на переданную дату в виде структуры
// - Режим (перечисление) - режим работы объекта на заданную дату
// - НачВремя (время) - время начала работы объекта
// - КонВремя (время) - время окончания работы объекта
// - Локально (булево) - если "Истина", то разрешены только локальные вызовы
//-------------------------------------------------------------------------------------------------
	Ответ = Новый Структура;
	Ответ.Вставить("Локально",Ложь);
	Ответ.Вставить("НачВремя",Дата("00010101"));
	Ответ.Вставить("КонВремя",Дата("00010101"));
	Ответ.Вставить("Режим",Перечисления.РежимРаботыОбъекта.Рабочий);

// Проверим правильность переданных параметров
//-------------------------------------------------------------------------------------------------
	Доступно = ЗначениеЗаполнено(Дата);
	Доступно = Доступно И ЗначениеЗаполнено(Объект);

	Если (Доступно = Ложь) Тогда
		Возврат (Ответ);
	КонецЕсли;

// Найдем переданный объект в регистре сведений "ПредприятиеОтклонения"
// Если запись найдена, значит режим на этот день задан вручную и он имеет приоритет
//-------------------------------------------------------------------------------------------------
	ТекЗапись = РегистрыСведений.ГрафикиОтклонения.СоздатьМенеджерЗаписи();
	ТекЗапись.Период = НачалоДня(Дата);
	ТекЗапись.Объект = Объект;
	ТекЗапись.Прочитать();

	Если (ТекЗапись.Выбран()) Тогда
		Ответ.Режим = ТекЗапись.Режим;
		Ответ.НачВремя = ТекЗапись.НачВремя;
		Ответ.КонВремя = ТекЗапись.КонВремя;
		Ответ.Локально = ТекЗапись.Локально;
		Возврат (Ответ);
	КонецЕсли;

// Запись не найдена
// Объект работает в графике по-умолчанию
//-------------------------------------------------------------------------------------------------
	Доступно = (ТипЗнч(Объект) = Тип("СправочникСсылка.ТелСерверы"));
	Доступно = Доступно ИЛИ (ТипЗнч(Объект) = Тип("СправочникСсылка.ТочкиЦелевые"));

	Если (Доступно = Истина) Тогда
		Если (ДеньНедели(Дата) = 6) Тогда
			Ответ.Режим = Объект.ГрафикРаботы.СубРежим;
			Ответ.НачВремя = Объект.ГрафикРаботы.СубНач;
			Ответ.КонВремя = Объект.ГрафикРаботы.СубКон;
			Ответ.Локально = Объект.ГрафикРаботы.СубЛокально;
		ИначеЕсли (ДеньНедели(Дата) = 7) Тогда
			Ответ.Режим = Объект.ГрафикРаботы.ВскРежим;
			Ответ.НачВремя = Объект.ГрафикРаботы.ВскНач;
			Ответ.КонВремя = Объект.ГрафикРаботы.ВскКон;
			Ответ.Локально = Объект.ГрафикРаботы.ВскЛокально;
		Иначе
			Ответ.Режим = Объект.ГрафикРаботы.БудРежим;
			Ответ.НачВремя = Объект.ГрафикРаботы.БудНач;
			Ответ.КонВремя = Объект.ГрафикРаботы.БудКон;
			Ответ.Локально = Объект.ГрафикРаботы.БудЛокально;
		КонецЕсли;
	КонецЕсли;

	Возврат (Ответ);
КонецФункции

Процедура РежимРаботыНаДатуУстановить(Дата,Объект,СтрПараметры = Неопределено) Экспорт

// Процедура устанавливает для переданного объекта новый режим работы на заданную дату
// Если параметр "СтрПараметры" не передан, то процедура устанавливает режим по-умолчанию на дату
//-------------------------------------------------------------------------------------------------
	Доступно = ЗначениеЗаполнено(Дата);
	Доступно = Доступно И ЗначениеЗаполнено(Объект);

// Для начала удалим все записи по переданному объекту на заданную дату
//-------------------------------------------------------------------------------------------------
	Если (Доступно = Истина) Тогда
		НаборЗаписей = РегистрыСведений.ГрафикиОтклонения.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(НачалоДня(Дата));
		НаборЗаписей.Отбор.Объект.Установить(Объект);
		НаборЗаписей.Записать();

// Если требуется установить новый режим (не по-умолчанию)
//-------------------------------------------------------------------------------------------------
		Если (СтрПараметры <> Неопределено) Тогда
			НовЗапись = РегистрыСведений.ГрафикиОтклонения.СоздатьМенеджерЗаписи();
			НовЗапись.НачВремя = СтрПараметры.НачВремя;
			НовЗапись.КонВремя = СтрПараметры.КонВремя;
			НовЗапись.Локально = СтрПараметры.Локально;
			НовЗапись.Режим = СтрПараметры.Режим;
			НовЗапись.Период = НачалоДня(Дата);
			НовЗапись.Объект = Объект;
			НовЗапись.Записать(Истина);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#Область Загрузка_сделок
Функция ЗагрузитьСделкиРегламент() Экспорт
	ТекДата = ТекущаяДата();
	Начало = ДобавитьМесяц(ТекДата, -1);
	Окончание = ТекДата;	
	ЗагрузитьСделки(Начало, Окончание);
КонецФункции

Функция ЗагрузитьСделки(Начало, Окончание) Экспорт
	ЗначениеПоУмолчанию = Ложь;
	
	ИсточникДанных = Справочники.ИБ_ИсточникиДанных.НайтиПоКоду("000000002");
	Если ИсточникДанных = Неопределено Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;	
	
	ПараметрыСоединения = ИсточникДанных.ПараметрыСоединения;
	БИ = ПолучитьПодключениеБД(ПараметрыСоединения);	
				
	БИ_Запрос = БИ.NewObject("Запрос");
	БИ_Запрос.Текст = 	
	"ВЫБРАТЬ
	|	Целевые.Код КАК Сигнатура,
	|	Целевые.Основание.Ссылка КАК СделкаСсылка,
	|	Целевые.Основание.Дата КАК Дата,
	|	Целевые.Основание.Номер КАК Номер,
	|	Целевые.Основание КАК Основание,
	|	ПРЕДСТАВЛЕНИЕ(Целевые.Основание) КАК Наименование
	|ИЗ
	|	Справочник.Звонки КАК Целевые
	|ГДЕ
	|	Целевые.Дата МЕЖДУ &Начало И &Окончание
	|	И ВЫБОР
	|			КОГДА Целевые.Состояние = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.ОбщийИсполнен)
	|					И Целевые.Основание ССЫЛКА Документ.СделкаРеализации
	|					И Целевые.Дата <= Целевые.Основание.Дата
	|					И Целевые.Комментарий = ""Первичное обращение по сделке""
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ";	
	БИ_Запрос.УстановитьПараметр("Начало",				Начало);
	БИ_Запрос.УстановитьПараметр("Окончание", 			Окончание);		
	БИ_РезультатЗапроса = БИ_Запрос.Выполнить();	
	БИ_Выборка = БИ_Запрос.Выполнить().Выбрать();
	
	Пока БИ_Выборка.Следующий() Цикл
		РегистрыСведений.ЗвонкиСделки.Добавить(БИ_Выборка.Сигнатура, БИ_Выборка.Дата, БИ_Выборка.Номер, БИ.xmlСтрока(БИ_Выборка.СделкаСсылка), БИ_Выборка.Наименование); 
	КонецЦикла;
	Возврат  Истина;	
КонецФункции
#КонецОбласти

Функция ВерсионированиеСправочников_РеквизитТабличнойЧасти(Об, ИмяТабличнойЧасти, ИмяРеквизита) Экспорт
	//Параметры:
	//	ИмяТабличнойЧасти (строка) 	- имя табличной части, реквизит которой необходимо версионировать
	// 	Имя Реквизита (строка)	- имя реквизита указанной выше табличной части, значение которого нужно версионировать
	ЗначениеПоУмолчанию = Ложь;
	ТекДата				= ТекущаяДата();
	
	Если Об.ЭтоНовый() Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	//Определи какие записи были удалены или изменены
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблЧастьИзСсылки.КодСтроки КАК КодСтроки,
	               |	ТаблЧастьИзСсылки.Значение КАК Значение
	               |ПОМЕСТИТЬ ВТ01_Старое
	               |ИЗ
	               |	Справочник.Контрагенты.КонтактнаяИнформация КАК ТаблЧастьИзСсылки
	               |ГДЕ
	               |	ТаблЧастьИзСсылки.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблЧастьОбъекта.КодСтроки КАК КодСтроки,
	               |	ТаблЧастьОбъекта.Значение КАК Значение
	               |ПОМЕСТИТЬ ВТ02_Новое
	               |ИЗ
	               |	&ТаблЧастьОбъекта КАК ТаблЧастьОбъекта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ01_Старое.КодСтроки КАК КодСтроки,
	               |	ВТ01_Старое.Значение КАК Значение,
	               |	ВЫБОР
	               |		КОГДА ВТ01_Старое.КодСтроки <> ЕСТЬNULL(ВТ02_Новое.КодСтроки, ИСТИНА)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК Удалено,
	               |	ВЫБОР
	               |		КОГДА ВТ01_Старое.КодСтроки = ЕСТЬNULL(ВТ02_Новое.КодСтроки, ИСТИНА)
	               |				И ВТ01_Старое.Значение <> ЕСТЬNULL(ВТ02_Новое.Значение, ИСТИНА)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК Изменено
	               |ИЗ
	               |	ВТ01_Старое КАК ВТ01_Старое,
	               |	ВТ02_Новое КАК ВТ02_Новое";
	 Запрос.УстановитьПараметр("Ссылка", Об.Ссылка);
	 Запрос.УстановитьПараметр("ТаблЧастьОбъекта", Об[ИмяТабличнойЧасти]);
	 
	 РезультатЗапроса = Запрос.Выполнить();
	 Если РезультатЗапроса.Пустой() Тогда
		 Возврат ЗначениеПоУмолчанию; 
	 КонецЕсли;
	 
	 //Если оказались здесь, значит были либо удалены, либо изменены записи в табличной части
	 //Сохраним версии изменненых строк в истории
	 ТаблЧастьИзСсылки = РезультатЗапроса.Выгрузить();
	 Для Каждого СтрокаТЗ Из ТаблЧастьИзСсылки Цикл
		Если СтрокаТЗ.Удалено Или СтрокаТЗ.Изменено Тогда
			НоваяСтрока = Об.ИсторияРеквизитов.Добавить();
			НоваяСтрока.Период			= ТекДата;
			НоваяСтрока.КодСтроки		= СтрокаТЗ.КодСтроки;
			НоваяСтрока.ИмяРеквизита	= "Значение";
			НоваяСтрока.Значение 		= СтрокаТЗ.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина
	
КонецФункции

Функция ВерсионированиеСправочников_РеквизитыШапки(Об) Экспорт
		
	ЗначениеПоУмолчанию = Ложь;
	ТекДата				= ТекущаяДата();
	
	Если Об.ЭтоНовый() Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
		
	//Сформируй массив из имен всех версионируемых реквизитов, которые будут версионироваться, при условии,
	// что новое значение отличается от предыдущего
	//---------------------------------------------------
	ИменаВерсионируемыхРеквизитов = Новый Массив();	
	ИменаВерсионируемыхРеквизитов.Добавить("Наименование");

	
	//Обработка реквизитов шапки
	//---------------------------------------------------------------
	Для Каждого Метаданное Из Об.Метаданные().Реквизиты Цикл		
		ИмяРеквизита = Метаданное.Имя;
		ИменаВерсионируемыхРеквизитов.Добавить(Метаданное.Имя);

		Если Об[ИмяРеквизита] = Об.Ссылка[ИмяРеквизита] Тогда
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	//Сохрани версии реквизито шапки, причем только тех реквизитов, значения которые перезапишутся при сохранении
	//-----------------------------------------------------------------------------------------------------------		
	Для Каждого ИмяРеквизита Из ИменаВерсионируемыхРеквизитов Цикл
	
		Если Об[ИмяРеквизита] = Об.Ссылка[ИмяРеквизита] Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = Об.ИсторияРеквизитов.Добавить();
		НоваяСтрока.Период= ТекДата;
		НоваяСтрока.ИмяРеквизита = ИмяРеквизита;
		НоваяСтрока.Значение = Строка(Об.Ссылка[ИмяРеквизита]);
	КонецЦикла;	
	
	Возврат Истина
КонецФункции

//*************************************************************************************************************
//COM-соединение
//*************************************************************************************************************

Функция ПолучитьПодключениеБД(ПараметрыСоединения) Экспорт
	
	ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ = Неопределено;
	
	Доступно = ТипЗнч(ПараметрыСоединения) = Тип("Строка");
	Доступно = Доступно И ЗначениеЗаполнено(ПараметрыСоединения);
	
	Если Не Доступно Тогда
		Возврат ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ
	КонецЕсли;
	
	Данные = ПараметрыСоединения;
	
	V83COMConnector= Новый COMОбъект("V83.COMConnector");
	Попытка
		Возврат V83COMConnector.Connect(ПараметрыСоединения);
	Исключение
		Комментарий = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("ПолучитьПодключениеБД()", УровеньЖурналаРегистрации.Ошибка, , Данные, Комментарий);
	КонецПопытки;	
 КонецФункции
  
Функция РазорватьПодключениеБД(КомСоединитель) Экспорт
	 Попытка
		 КомСоединитель.Terminate(Ложь);
     Исключение
     КонецПопытки;
КонецФункции

#Область Описание_типов
//****************************************************************************************************************************
// Описание типо данных
//****************************************************************************************************************************

Функция ТипСтрока() Экспорт
	МасСтрока = Новый Массив();
	МасСтрока.Добавить(Тип("Строка"));
	ТипСтрока = Новый ОписаниеТипов(МасСтрока);
	Возврат ТипСтрока;
КонецФункции

Функция ТипСтрокаФиксированнойДлины(ЧислоСимволов) Экспорт
	// Возвращает описание типа строка с определенным количеством симвовлов
	
	КС = Новый КвалификаторыСтроки(ЧислоСимволов);
	
	МасСтрока = Новый Массив();
	МасСтрока.Добавить(Тип("Строка"));
	ТипСтрока = Новый ОписаниеТипов(МасСтрока, , , , КС);
	Возврат ТипСтрока;
КонецФункции

Функция ТипДата() Экспорт
	МасДата	= Новый Массив();
	МасДата.Добавить(Тип("Дата"));
	ТипДата	= Новый	ОписаниеТипов(МасДата);	
	Возврат ТипДата;
КонецФункции

Функция ТипБулево() Экспорт
	МасБулево	= Новый Массив();
	МасБулево.Добавить(Тип("Булево"));
	ТипБулево	= Новый	ОписаниеТипов(МасБулево);
	Возврат ТипБулево;
КонецФункции

Функция ТипЧисло()Экспорт
	МасЧисло = Новый Массив();
	МасЧисло.Добавить(Тип("Число"));
	ТипЧисло = Новый ОписаниеТипов(МасЧисло);
	Возврат ТипЧисло;
КонецФункции

Функция ТипЦелоеЧисло()Экспорт
	МасЧисло = Новый Массив();
	МасЧисло.Добавить(Тип("Число"));
	ПараметрыЧисла = Новый КвалификаторыЧисла(10,0);
	ТипЧисло = Новый ОписаниеТипов(МасЧисло, , , ПараметрыЧисла);
	Возврат ТипЧисло;
КонецФункции
#КонецОбласти


//****************************************************************************************************************************
// Преобразование форматов
//****************************************************************************************************************************
Функция ТабличныйДокумент1C_в_HTML(ТаблДок) Экспорт
	Содержание = "";
	
	ИмяФайла = КаталогВременныхФайлов()+xmlСтрока(Новый УникальныйИдентификатор)+".html";
	ТаблДок.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.HTML);	
	Файл = Новый Файл(ИмяФайла);
	ТекстДок = Новый ТекстовыйДокумент();
	ТекстДок.Прочитать(ИмяФайла);
	Содержание =  ТекстДок.ПолучитьТекст();	
	УдалитьФайлы(ИмяФайла);
	
	Возврат Содержание;
КонецФункции

#Область Прочее
//****************************************************************************************************************************
// Прочее
//****************************************************************************************************************************
	
Функция СоздайОбъектИзОбщегоМакета(ИмяМакета) Экспорт
	Возврат ПолучитьОбщийМакет(ИмяМакета);
КонецФункции

Функция ВыполнитьЗапрос(Запрос, Инициатор = "") Экспорт
	
	ЗамерПроизводительности = Константы.ЗамерПроизводительности.Получить();
	
	Если ЗамерПроизводительности Тогда
		Начало = ТекущаяДата();
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если ЗамерПроизводительности Тогда	
		Окончание = ТекущаяДата();
		Длительность = Окончание - Начало;
		ЗаписьЖурналаРегистрации("ЗапросВыполнить", УровеньЖурналаРегистрации.Информация, , СтрШаблон("Текст = %1", Лев(Запрос.Текст, 200)), СтрШаблон("Длительность = %1", Длительность));
	КонецЕсли;
	
	Возврат РезультатЗапроса
		
КонецФункции  

Функция ЗапросВыполнить(Текст, Парам, ЗамерПроизводительности = Ложь) Экспорт
		
	Доступно = 		ТипЗнч(Текст) = Тип("Строка")
				И 	ТипЗнч(Парам) = Тип("Структура")
				И 	ЗначениеЗаполнено(Текст);
	Если Не Доступно Тогда
		Запрос = Новый Запрос("Выбрать 1 где Ложь");  
		Возврат Запрос.Выполнить();				
	КонецЕсли;	
	
	Начало = ?(ЗамерПроизводительности, ТекущаяДата(), '00010101');
	
	Запрос = Новый Запрос(Текст);
	Для Каждого i Из Парам Цикл
		Запрос.УстановитьПараметр(i.Ключ, i.Значение);	
	КонецЦикла; 
	Рез = Запрос.Выполнить();
	
	Окончание = ?(ЗамерПроизводительности, ТекущаяДата(), '00010101');
	Если ЗамерПроизводительности Тогда
		Окончание = ТекущаяДата();
		Длительность = Окончание - Начало;
		ЗаписьЖурналаРегистрации("ЗапросВыполнить", УровеньЖурналаРегистрации.Информация, , СтрШаблон("Текст = %1", Лев(Текст, 200)), СтрШаблон("Длительность = %1", Длительность));
	КонецЕсли;
 
	Возврат Рез;
КонецФункции
	
Процедура СотрудникиОУ_Загрузка_3ч50м() Экспорт
	СотрудникиОУ_Загрузить();
КонецПроцедуры

Функция СотрудникиОУ_Загрузить(ТекстДок=Неопределено) Экспорт
		
	ЗначениеПоУмолчанию = Ложь;
	ОписаниеТипаСтрока = ОбщегоНазначения.ТипСтрока();

	// Прочитай сотрудников из ОУ
	//---------------------------
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	                 |	ИБ_ИсточникиДанных.ПараметрыСоединения КАК ПараметрыСоединения
	                 |ИЗ
	                 |	Справочник.ИБ_ИсточникиДанных КАК ИБ_ИсточникиДанных
	                 |ГДЕ
	                 |	ИБ_ИсточникиДанных.Префикс = ""ОУ""";
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		  Возврат ЗначениеПоУмолчанию;
	КонецЕсли;	  
	
	ПарамСоед = Рез.Выгрузить()[0][0];
	БИ = ОбщегоНазначения.ПолучитьПодключениеБД(ПарамСоед);
	Если БИ = Неопределено Тогда
		 Возврат ЗначениеПоУмолчанию;
	 КонецЕсли;
	 
	 БИ_Запрос =  БИ.NewObject("Запрос");	
	 БИ_Запрос.Текст = 
	 "ВЫБРАТЬ
	|Сотрудники.Ссылка КАК Ссылка,
	|Сотрудники.Код КАК Код,
	|Сотрудники.Наименование КАК Наименование,	
	|Сотрудники.Фамилия КАК Фамилия,
	|Сотрудники.Имя КАК Имя,
	|Сотрудники.Отчество КАК Отчество,
	|Сотрудники.ТелефонКор КАК ТелефонКор
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ Сотрудники.ТелефонКор<>&ПустаяСтрока"; 
	 БИ_Запрос.УстановитьПараметр("ПустаяСтрока", "");
	 
	 БИ_Рез = БИ_Запрос.Выполнить();
	 Если БИ_Рез.Пустой() Тогда
		 Возврат ЗначениеПоУмолчанию;
	 КонецЕсли;
	 БИ_Выборка = БИ_Рез.Выбрать();
	 
	 тзСотрудникиОУ = Новый ТаблицаЗначений();
	 тзСотрудникиОУ.Колонки.Добавить("ГУИД",			ОписаниеТипаСтрока); 
	 тзСотрудникиОУ.Колонки.Добавить("Код",				ОписаниеТипаСтрока); 
	 тзСотрудникиОУ.Колонки.Добавить("Наименование",	ОписаниеТипаСтрока);
	 тзСотрудникиОУ.Колонки.Добавить("Фамилия",			ОписаниеТипаСтрока);
	 тзСотрудникиОУ.Колонки.Добавить("Имя",				ОписаниеТипаСтрока);
	 тзСотрудникиОУ.Колонки.Добавить("Отчество",		ОписаниеТипаСтрока);
	 тзСотрудникиОУ.Колонки.Добавить("ТелефонКор",		ОписаниеТипаСтрока);
	 
	 Пока БИ_Выборка.Следующий() Цикл
	 
	 	БИ_ГУИД = БИ.xmlСтрока(БИ_Выборка.Ссылка);
				
		Новая = тзСотрудникиОУ.Добавить();
		Новая.ГУИД 			= БИ_ГУИД;	
		Новая.Код			= БИ_Выборка.Код;
		Новая.Наименование 	= БИ_Выборка.Наименование;
		Новая.Фамилия 		= БИ_Выборка.Фамилия;
		Новая.Имя 			= БИ_Выборка.Имя;
		Новая.Отчество 		= БИ_Выборка.Отчество;
		Новая.ТелефонКор	= БИ_Выборка.ТелефонКор;	 
		
	КонецЦикла;
	ОбщегоНазначения.РазорватьПодключениеБД(БИ);	
	
	ТипКлюча = Справочники.ИБ_ТипыДанных.НайтиПоКоду("000000003");
	  	 
	 // Прочитай уже существующие в базе Агрегатора ГУИДы сотрудников ОУ
	 //-----------------------------------------------------------------
	 тзГУИДЫ = Новый ТаблицаЗначений();
	 тзГУИДЫ.Колонки.Добавить("ГУИД", ОписаниеТипаСтрока);
	 Запрос = Новый Запрос();
	 Запрос.Текст = 
	 "ВЫБРАТЬ
	 |	СотрудникиКлючиВИсточникахДанных.ЗначениеКлюча КАК СотрудникГУИД
	 |ИЗ
	 |	Справочник.Сотрудники.КлючиВИсточникахДанных КАК СотрудникиКлючиВИсточникахДанных
	 |ГДЕ
	 |	СотрудникиКлючиВИсточникахДанных.ТипКлюча = &ТипКлюча";
	 Запрос.УстановитьПараметр("ТипКлюча", ТипКлюча);
	 РезультатЗапроса = ОбщегоНазначения.ВыполнитьЗапрос(Запрос);
	 Выборка = РезультатЗапроса.Выбрать();
	 Пока Выборка.Следующий() Цикл
		 Новая = тзГУИДЫ.Добавить();
		 Новая.ГУИД = Выборка.СотрудникГУИД; 
	 КонецЦикла;
	 
	 
	 ТекДата = ТекущаяДата();
	 МассивЗаписанных = Новый Массив();
	 
	 Для Каждого СотрудникОУ Из тзСотрудникиОУ Цикл
		
		Найденная = тзГУИДы.Найти(СотрудникОУ.ГУИД);
		Если Найденная <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Нов = Справочники.Сотрудники.СоздатьЭлемент();
		Нов.Наименование	= СотрудникОУ.Наименование;
		Нов.ФИО 			= СотрудникОУ.Фамилия + " " + СотрудникОУ.Имя + " " +СотрудникОУ.Отчество;
		
		НовСтрока = Нов.КлючиВИсточникахДанных.Добавить();
		НовСтрока.Период 				= ТекДата;
		НовСтрока.ТипКлюча				= ТипКлюча;
		НовСтрока.ЗначениеКлюча			= СотрудникОУ.ГУИД;
		НовСтрока.ПредставлениеКлюча 	= СотрудникОУ.Наименование;
		НовСтрока.ДопПредставлениеКлюча	= СотрудникОУ.Код;
		
		Попытка
			Нов.Записать();
			МассивЗаписанных.Добавить(Нов.ФИО + ", ВнутрТел = "+Нов.ВнутреннийТелефон_Удалить +", Ссылка = "+НовСтрока.ЗначениеКлюча+"");
			
			//Отладка;
			//Прервать;
		Исключение
			Данные =  Нов.ФИО;
			ОбслуживаниеСервер.ЗарегистрироватьСобытие("СотрудникОУ_Запись", УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Сотрудники, Данные);
		КонецПопытки
	КонецЦикла;
	
	Если МассивЗаписанных.Количество()= 0 Тогда
		Возврат ЗначениеПоУмолчанию
	КонецЕсли;

	Если ТекстДок = Неопределено Тогда
		ТекстДок = Новый ТекстовыйДокумент();
	КонецЕсли;
	ТекстДок.ДобавитьСтроку("Добавлены новые сотрудники из ОУ:");
	Для Каждого Эл Из  МассивЗаписанных Цикл
		ТекстДок.ДобавитьСтроку(" "+Эл+";"+Символы.ПС);       
	КонецЦикла;
	Содержание =  ТекстДок.ПолучитьТекст();	
	
	СписокПолучателей = Новый СписокЗначений();
	СписокПолучателей.Добавить("GubarIN@luidor.ru");
	СписокПолучателей.Добавить("BelyantsevaJN@luidor.ru");
	СписокПолучателей.Добавить("KoshelevSS@luidor.ru");
		
	Для Каждого Получатель Из СписокПолучателей Цикл
			АдресЭлПочты   = Получатель.Значение;
			
			От							= "info@luidor.ru";
			ОтображаемоеИмяОтправителя 	= "Агрегатор. Добавлены сотрудники из ОУ";
			Кому						= АдресЭлПочты;
			Копия						= ""; 
			СкрытаяКопия				= "";
			
			//Тема
			//---------------------------------------------------------------------------------------------
			ДатаОтчета		= Формат(НачалоДня(НачалоДня(ТекущаяДата())-1),"ДЛФ=DD");
			Тема			= "Добавлены сотрудники из ОУ за "+ДатаОтчета;
			
			Если СтрНайти(АдресЭлПочты,"@luidor")>0 Тогда
				ПортSMTP = 25; // отправка письма внутри домена, таких писем может быть много, отправляем без авторизации
			Иначе
				ПортSMTP = 587; //отправка не внутри домена, поэтому возможна отправка только при авторизации на почтовом сервере
			КонецЕсли;
			ЭлПочта.ПисьмоОтправить(От, Кому, Копия, СкрытаяКопия, Тема, Содержание, ОтображаемоеИмяОтправителя, Истина, ПортSMTP);
			
	КонецЦикла;

КонецФункции

Функция ТЗ_в_xml(ТЗ) Экспорт
	// Сериализует таблицу значений или табличную часть в xml
	
	Рез = "";
	
	Мас = Новый Массив();
	
	Для Стр = 0 По ТЗ.Количество()-1 Цикл
		
		Структ = Новый Структура();
		Для Кол = 0 По ТЗ.Колонки.Количество()-1 Цикл
			Структ.Вставить(ТЗ.Колонки[Кол].Имя, ТЗ[Стр][Кол]);
		КонецЦикла;
		
		Мас.Добавить(Структ);
	КонецЦикла;
	
	ЗапXML = Новый ЗаписьXML();
	ЗапXML.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗапXML, Мас, НазначениеТипаXML.Явное);
	Рез = ЗапXML.Закрыть();

	
	ТЗ = Новый ТаблицаЗначений();
	xml_в_ТЗ(Рез, ТЗ);	
	
	Возврат Рез; 
КонецФункции

Функция xml_в_ТЗ(xmlСтрока, ТЗ) Экспорт
	// Дериализует xml в Таблицу значений
	
	Доступно = ТипЗнч(xmlСтрока) = Тип("Строка");
	Доступно = ТипЗнч(ТЗ) 		 = Тип("ТаблицаЗначений") И Доступно;
	
	Если Не Доступно Тогда
		Возврат ТЗ
	КонецЕсли;
	
	ТЗ.Колонки.Очистить();
	
	ЧтXML = Новый ЧтениеXML();
	ЧтXML.УстановитьСтроку(xmlСтрока);
	Мас = СериализаторXDTO.ПрочитатьXML(ЧтXML);

	Если Мас.Количество()=0 Тогда
		Возврат ТЗ
	КонецЕсли;
	
	//Создай  колонки
	//----------------
	Структ = Мас[0];
	Для Каждого КлючЗнач Из Структ Цикл
		НоваяКолонка = ТЗ.Колонки.Добавить(КлючЗнач.Ключ);	
	КонецЦикла;
	
	//Заполни ТЗ. Каждый элемент массива - это структура
	//---------------------------------------------------
	Для Каждого Структ Из Мас Цикл
		НоваяСтрока = ТЗ.Добавить();
		
		Для Каждого КлючЗнач Из Структ Цикл
			НоваяСтрока[КлючЗнач.Ключ] = КлючЗнач.Значение	
		КонецЦикла;

	КонецЦикла;
	
	Возврат ТЗ;	
КонецФункции

Функция ТаблицаЗначений_2_json(Табл) Экспорт
	
	//Преобразует таблицу значений в json, т.е. в массив объектов, где каждый объект - запись таблицы значений
	//Первая строка таблицы содержит заголовки, т.о. данные начинаются со второй строки
	//Параметры:
	//	Табл - ТаблицаЗначений;
	
	Рез = "[]";
	
	Зап = Новый ЗаписьJSON();
	Зап.УстановитьСтроку();
	
	Зап.ЗаписатьНачалоМассива();
	
	//Запиши первую запись - заголовки таблицы
	//----------------------------------------
	Зап.ЗаписатьНачалоОбъекта();	
	Сч = 0;
	Для Каждого Колонка Из Табл.Колонки Цикл
		Зап.ЗаписатьИмяСвойства("col_"+Строка(Сч));
		Зап.ЗаписатьЗначение(Колонка.Имя);
		Сч = Сч + 1;
	КонецЦикла;
	Зап.ЗаписатьКонецОбъекта();
	
	//Запиши данные
	//-------------
	Для Каждого Стр Из Табл Цикл
		Зап.ЗаписатьНачалоОбъекта();
		Сч = 0;
		Для Каждого Колонка Из Табл.Колонки Цикл
			Зап.ЗаписатьИмяСвойства("col_"+Строка(Сч));
			Попытка
				Зап.ЗаписатьЗначение(Строка(Стр.Получить(Сч)));
			Исключение
				Зап.ЗаписатьЗначение("");
			КонецПопытки;
			Сч = Сч + 1;
		КонецЦикла;
		Зап.ЗаписатьКонецОбъекта();
	КонецЦикла;
	
	Зап.ЗаписатьКонецМассива();
	
	Рез = Зап.Закрыть();

	Возврат Рез;
КонецФункции

Функция GUID_2_ref(GUID) Экспорт
	//Преобразует ГУИД В ref для формирования навигационной ссылки	
	//Пример:
		// GUID 		= 000a68b6-1fb5-11e9-8106-00155d03d40f
		// ref 	= 810600155d03d40f11e91fb5000a68b6. 
		// Эта ref используется в навигационной ссылке e1cib/data/Документ.НЭРеализация?ref=810600155d03d40f11e91fb5000a68b6
	Перем ref;
	ref= "";

	Доступно = Истина;
	Доступно = Доступно И ТипЗнч(GUID) = Тип("Строка");
	Доступно = Доступно И СтрДлина(GUID) = 36;
	
	Если Доступно = Ложь Тогда
		Возврат ref;
	КонецЕсли;
	
	Первый = Строка(Сред(GUID, 1, 	8));
	Второй = Строка(Сред(GUID, 10, 4));
	Третий = Строка(Сред(GUID, 15, 4));
	Четвет = Строка(Сред(GUID, 20, 4));
	Пятый  = Строка(Сред(GUID, 25, 12));
	
	ref=СтрШаблон("%1%2%3%4%5", Четвет,Пятый,Третий,Второй,Первый);
	
	Возврат ref;
	
КонецФункции

#КонецОбласти

#Область Система_взаимодейтсвия
Функция ОтправитьСообщение(КлючОбсуждения) Экспорт
	//УстановитьПривилегированныйРежим(Истина);
	Обс = Неопределено;
	Обс 	= СистемаВзаимодействия.ПолучитьОбсуждение(КлючОбсуждения);
	Если Обс = Неопределено Тогда
		Комментарий = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("ОбщегоНазначения.ОтправитьСообщение", УровеньЖурналаРегистрации.Ошибка,, "КлючОбсуждения = "+КлючОбсуждения, "Обсуждение по ключу не определено. "+Комментарий);
		Возврат "";
	КонецЕсли;
	Попытка
		Сообщ 	= СистемаВзаимодействия.СоздатьСообщение(Обс.Идентификатор);
		Парам 	= Новый Структура();
		Сообщ.Данные = Парам;
		Сообщ.Текст = "Привет";
		Сообщ.Записать();
	Исключение
		Комментарий = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("ОбщегоНазначения.ОтправитьСообщение", УровеньЖурналаРегистрации.Ошибка,, "КлючОбсуждения = "+КлючОбсуждения, "Обсуждение по ключу не определено. "+Комментарий);
	КонецПопытки;
	//УстановитьПривилегированныйРежим(Ложь);
КонецФункции
#КонецОбласти