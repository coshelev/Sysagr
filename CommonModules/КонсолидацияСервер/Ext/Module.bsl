
Функция  ПолучиТаблицуИдентификаторовПоРеквизиту(ТипДанных, ИмяРеквизита, ЗначениеРеквизита) Экспорт
	// Возвращает таблицу значений, состоящую из ГУИДа, Кода и Наименования из базы источника по 
	//переданным исходному типу данных, имени реквизита поиска ("Наименование" или "Код") и значению реквизита поиска
	
	Результат = Новый ТаблицаЗначений();
	ЗначениеПоУмолчанию = Результат;
	
	Доступно = ТипЗнч(ТипДанных) = Тип("СправочникСсылка.ИБ_ТипыДанных");
	Доступно = Доступно И ЗначениеЗаполнено(ТипДанных);
	Доступно = Доступно И ТипЗнч(ИмяРеквизита) = Тип("Строка");
	Доступно = Доступно И ЗначениеЗаполнено(ИмяРеквизита);
	Доступно = Доступно И ТипЗнч(ЗначениеРеквизита) = Тип("Строка");
	Доступно = Доступно И ЗначениеЗаполнено(ЗначениеРеквизита);
	
	ИмяСобытия = "ПолучиТаблицуИдентификаторовПоРеквизиту";
	Данные = "ТипДанных = "+ТипДанных+"; ИмяРеквизита = "+ИмяРеквизита+"; ЗначениеРеквизита = "+ЗначениеРеквизита;
	
	Если Не Доступно Тогда
		Комментарий = "Ошибка в типе или заполнении аргументов";
		Сообщить(Комментарий);
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, Данные, Комментарий);
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	
	//Сформируй структуру таблицы значений
	//-------------------------------------
	ОписТипаСтрока = Новый ОписаниеТипов("Строка");
	Результат.Колонки.Добавить("Идентификатор", 	ОписТипаСтрока);
	Результат.Колонки.Добавить("Код", 				ОписТипаСтрока);
	Результат.Колонки.Добавить("Наименование",	 	ОписТипаСтрока);
	Результат.Колонки.Добавить("ТипДанныхXML",	 	ОписТипаСтрока);

	ТипЗначения1С = ВРЕГ(СокрЛП(ТипДанных.ТипДанных1С));
	Доступно = ЗначениеЗаполнено(ТипЗначения1С);
	Если Не Доступно Тогда
		Комментарий = "Ошибка: не заполнен тип данных 1С";
		Сообщить(Комментарий);
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, Данные, Комментарий);
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	//Обработка перечисления
	//------------------------
	ПозицияВхождения = СтрНайти(ТипЗначения1С, ВРЕГ("Перечисление"));
	Если ПозицияВхождения >= 1 Тогда
		ИмяПеречисления = Прав(ТипДанных.ТипДанных1С, СтрДлина(ТипДанных.ТипДанных1С)-СтрДлина("Перечисление."));

		ТекстЗапроса ="ВЫБРАТЬ
		              |	Пер.Ссылка КАК Ссылка,
		              |	ПРЕДСТАВЛЕНИЕ(Пер.Ссылка) КАК Представление,
		              |	Пер.Порядок КАК Порядок
		              |ИЗ
		              |	Перечисление.СостояниеЭлементаПредприятия КАК Пер";
					  
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 	"Перечисление.СостояниеЭлементаПредприятия", ТипДанных.ТипДанных1С);
		
		БИ = ОбщегоНазначения.ПолучитьПодключениеБД(ТипДанных.ИсточникДанных.ПараметрыСоединения);
		БИ_Запрос =  БИ.NewObject("Запрос");	
		БИ_Запрос.Текст = ТекстЗапроса;
		БИ_Запрос.УстановитьПараметр("Представление", "%"+ЗначениеРеквизита+"%");
		Попытка
			БИ_РезультатЗапроса = БИ_Запрос.Выполнить();
		Исключение
			Данные = Данные+"; ТекстЗапроса="+ТекстЗапроса;
			Комментарий = "Ошибка выполнения запроса в базе-источнике:"+ОписаниеОшибки();
			Сообщить("Ошибка.|Данные = "+Данные+"|Комментарий = "+Комментарий);
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, Данные, Комментарий);
			Возврат ЗначениеПоУмолчанию;
		КонецПопытки;

		 Если БИ_РезультатЗапроса = Неопределено Тогда
			Возврат ЗначениеПоУмолчанию;
		КонецЕсли;
	
		БИ_Выборка = БИ_РезультатЗапроса.Выбрать();
		Пока БИ_Выборка.Следующий() Цикл
			Если СтрНайти(ВРЕГ(БИ_Выборка.Представление), ВРЕГ(ЗначениеРеквизита))=0 Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = Результат.Добавить();
		
			ТипДанныхXML = БИ.СериализаторXDTO.XMLТипЗнч(БИ_Выборка.Ссылка);	
			Если ТипДанныхXML <> Неопределено Тогда
				НоваяСтрока.ТипДанныхXML	= ТипДанныхXML.URIПространстваИмен+":"+ТипДанныхXML.ИмяТипа;
			КонецЕсли;

			НоваяСтрока.Идентификатор	=	БИ.XMLСтрока(БИ_Выборка.Ссылка);
			НоваяСтрока.Код				=	БИ_Выборка.Порядок;
			НоваяСтрока.Наименование	=	БИ_Выборка.Представление;
		КонецЦикла;
	
		Возврат Результат
	КонецЕсли;

	//Обработка справочника
	//---------------------
	//Текст запроса по умолчанию. По умолчанию поиск по коду в справочнике Контрагенты
	ТекстЗапроса =  "ВЫБРАТЬ
	                |	Спр.Ссылка КАК Ссылка,
	                |	Спр.Код КАК Код,
	                |	Спр.Наименование КАК Наименование
	                |ИЗ
	                |	Справочник.Контрагенты КАК Спр
	                |ГДЕ Спр.Код = &ЗначениеРеквизита";
					
	Если ВРЕГ(СокрЛП(ИмяРеквизита))<> "КОД" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ГДЕ Спр.Код", "ГДЕ Спр."+СокрЛП(ИмяРеквизита));	
	КонецЕсли;  
	
	Если ТипЗначения1С<> ВРЕГ("Справочник.Контрагенты") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Справочник.Контрагенты", ТипЗначения1С);	
	КонецЕсли;
		
	БИ = ОбщегоНазначения.ПолучитьПодключениеБД(ТипДанных.ИсточникДанных.ПараметрыСоединения);
	БИ_Запрос =  БИ.NewObject("Запрос");	
	БИ_Запрос.Текст = ТекстЗапроса;
	БИ_Запрос.УстановитьПараметр("ЗначениеРеквизита", ЗначениеРеквизита);
	
	Попытка
		БИ_РезультатЗапроса = БИ_Запрос.Выполнить();
	Исключение
		Данные = Данные+"; ТекстЗапроса="+ТекстЗапроса;
		Комментарий = "Ошибка выполнения запроса в базе-источнике:"+ОписаниеОшибки();
		Сообщить("Ошибка.|Данные = "+Данные+"|Комментарий = "+Комментарий);
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, Данные, Комментарий);
		Возврат ЗначениеПоУмолчанию;
	КонецПопытки;
		
	Если БИ_РезультатЗапроса = Неопределено Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	БИ_Выборка = БИ_РезультатЗапроса.Выбрать();
	Пока БИ_Выборка.Следующий() Цикл
		НоваяСтрока = Результат.Добавить();
		
		ТипДанныхXML = БИ.СериализаторXDTO.XMLТипЗнч(БИ_Выборка.Ссылка);	
		Если ТипДанныхXML <> Неопределено Тогда
			НоваяСтрока.ТипДанныхXML	= ТипДанныхXML.URIПространстваИмен+":"+ТипДанныхXML.ИмяТипа;
		КонецЕсли;

		НоваяСтрока.Идентификатор	=	БИ.XMLСтрока(БИ_Выборка.Ссылка);
		НоваяСтрока.Код				=	БИ_Выборка.Код;
		НоваяСтрока.Наименование	=	БИ_Выборка.Наименование;
	КонецЦикла;
	
	Возврат Результат
КонецФункции

Функция  Реквизит_в_Идентификатор(Объект, ИмяТаблЧасти, НомерСтроки, НомерКлюча, ТипДанных, ИмяРеквизита, ЗначениеРеквизита) Экспорт
	// Заполняет табличную часть объекта Сотрудник (а в будущем и Контрагенты) ГУИДами записей из баз источников по переданным
	//переданным исходному типу данных, имени реквзита поиска ("Наименование" или "Код") и значению реквизита поиска
	
	ЗначениеПоУмолчанию = "";
	
	тз = КонсолидацияСервер.ПолучиТаблицуИдентификаторовПоРеквизиту(ТипДанных, ИмяРеквизита, ЗначениеРеквизита);
	
	Если тз.Количество()=0 Тогда
		Возврат "Данные не найдены. Проверьте журнал регистрации"
	КонецЕсли;
	
	ИмяРеквТипКлюча					=	"ТипКлюча"+НомерКлюча;		
	ИмяРеквЗначениеКлюча			=	"ЗначениеКлюча"+НомерКлюча;
	ИмяРеквПредставлениеКлюча		=	"ПредставлениеКлюча"+НомерКлюча;
	ИмяРеквДопПредставлениеКлюча	=	"ДопПредставлениеКлюча"+НомерКлюча;	
	
	
	ТекДата = ТекущаяДата();
	
	//Заполни данных для строки, для которой вызвана функция
	ТекСтрока = Объект[ИмяТаблЧасти].Получить(НомерСтроки-1);
	ТекСтрока["Период"] 							= ТекДата;
	ТекСтрока[ИмяРеквЗначениеКлюча] 				= тз[0].Идентификатор;
	ТекСтрока[ИмяРеквПредставлениеКлюча]			= тз[0].Наименование;
	ТекСтрока[ИмяРеквДопПредставлениеКлюча]			= тз[0].Код;
	

	//Если таблица значений содержит более одной строки
	//----------------------------------------------------------------------------------------
	Если тз.Количество()>1 Тогда
		Сообщить("Критериям поиска отвечает более одного объекта источника данных");
	//добавь новые строки в табличную часть
	//Для ТекСтрока=2 По тз.Количество() Цикл
		//НоваяСтрока = ЭтотОбъект.КлючиОбъектовВИсточникахДанных.Добавить();
		//ТекСтрока["Период"]							= ТекДата;
		//НоваяСтрока[ИмяРеквТипКлюча] 				= ТипДанных;
		//НоваяСтрока[ИмяРеквЗначениеКлюча]			= тз[ТекСтрока].Идентификатор;
		//НоваяСтрока[ИмяРеквПредставлениеКлюча]		= тз[ТекСтрока].Наименование;
		//НоваяСтрока[ИмяРеквДопПредставлениеКлюча]	= тз[ТекСтрока].Код;
	//КонецЦикла;
	КонецЕсли;
	
КонецФункции

//******************************************************************************************************************************************
//* Работа с контрагентами
//******************************************************************************************************************************************
Функция ДобавьОбновиКонтрагентовИзПродаж(ИБ_ТипДанных = Неопределено) Экспорт

	ЗначениеПоУмолчанию = Ложь;
	
	МассивКлючей = КлючиКонтрагентовИзПродаж(ИБ_ТипДанных);
	Если МассивКлючей.Количество()=0 Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	ДобавьОбновиКонтрагентаПоВнешнемуКлючу_ФильтрИННКПП(МассивКлючей, ИБ_ТипДанных);

КонецФункции

Функция КлючиКонтрагентовИзПродаж(ИБ_ТипДанных = Неопределено) Экспорт
	// Получаем массив ГУИДов контрагентов из регистра продаж, которые отстуствуют в справочнике контрагенты, заданного типа
	// По умолчанию тип ИБ_ТипДанных = ОУСТО.Справочники.Контрагенты
	
	МассивКлючей = Новый Массив();

	ЗначениеПоУмолчанию = МассивКлючей;
	
	//Значение по умолчанию для типа
	//-----------------------------------------------------------------------------
	Если ИБ_ТипДанных = Неопределено Тогда
		ИБ_ТипДанных = Справочники.ИБ_ТипыДанных.НайтиПоКоду("000000009");
	КонецЕсли;
	
	ПрефиксИБ = ИБ_ТипДанных.ИсточникДанных.Префикс;
	Если Не ЗначениеЗаполнено(ПрефиксИБ) Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
		
	//Выбери из РС.Продажи записи из ОУ СТО, в которых заполнен ГУИД контрагента
	// при условии, что это значение ключа не встречается в справочнике Контрагентов
	//-------------------------------------------------------------------------------
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Продажи.Заказчик КАК ЗначениеКлюча
	|ИЗ
	|	РегистрСведений.Продажи КАК Продажи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КлючиВИсточникахДанных КАК Контрагенты
	|		ПО Продажи.Заказчик = Контрагенты.ЗначениеКлюча
	|ГДЕ
	|	Продажи.Сигнатура ПОДОБНО &Сигнатура
	|	ИЛИ Продажи.Сигнатура ПОДОБНО ""SK%"" 
	|	И Контрагенты.ЗначениеКлюча ЕСТЬ NULL";
	
	Если ИБ_ТипДанных = Справочники.ИБ_ТипыДанных.НайтиПоКоду("000000009") Тогда
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИЛИ Продажи.Сигнатура ПОДОБНО ""SK%""", "");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Сигнатура", ПрефиксИБ+"%");
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	ТЗ = РезультатЗапроса.Выгрузить();
	МассивКлючей =  ТЗ.ВыгрузитьКолонку(0);
	
	Возврат МассивКлючей;
КонецФункции

Функция ДобавьОбновиКонтрагентаПоВнешнемуКлючу_ФильтрИННКПП(МассивКлючей, ИБ_ТипДанных = Неопределено)
	// Добавляет или обновляет существующего контрагента.
	// Поиск контрагента осуществляется по ИНН и КПП
	// В контрагента добавляется внешний ключ, тип ключа определяется аргументом ИБ_ТипДанных
	// По умолчанию ИБ_ТипДанных ОУСТО.Справочник.Контрагенты
	
	ЗначениеПоУмолчанию = "";
	
	Доступно = ТипЗнч(МассивКлючей) = Тип("Массив");
	Доступно = Доступно И МассивКлючей.Количество()>0;
	
	Если Не Доступно Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Если ИБ_ТипДанных = Неопределено Тогда
		
		ПараметрыПодключения = "Srvr=""MainAppL""; Ref=""asc_oper"";";
		ТипКлюча = Справочники.ИБ_ТипыДанных.НайтиПоКоду("000000008");
	Иначе
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИБ_ТипыДанных.ИсточникДанных.ПараметрыСоединения КАК ПараметрыСоединения
		|ИЗ
		|	Справочник.ИБ_ТипыДанных КАК ИБ_ТипыДанных
		|ГДЕ
		|	ИБ_ТипыДанных.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", ИБ_ТипДанных);
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Возврат ЗначениеПоУмолчанию
		КонецЕсли;	
		ПараметрыПодключения = РезультатЗапроса.Выгрузить()[0][0];
		ТипКлюча = ИБ_ТипДанных;
	КонецЕсли;
	
	ОУСТО = ОбщегоНазначения.ПолучитьПодключениеБД(ПараметрыПодключения);
	
	Если ОУСТО = Неопределено Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;

	ТЗ = Новый ТаблицаЗначений();
	
	МасСтрока = Новый Массив();
	МасСтрока.Добавить(Тип("Строка"));
	ТипСтрока 	= Новый ОписаниеТипов(МасСтрока);
	
	//Значение ключа в продажах
	//---------------------------------------------------
	ТЗ.Колонки.Добавить("ЗначениеКлюча",	ТипСтрока);
	
	//Характеристики эталонной базы
	//---------------------------------------------------
	ТЗ.Колонки.Добавить("ИНН",				ТипСтрока);
	ТЗ.Колонки.Добавить("КПП", 				ТипСтрока);
	ТЗ.Колонки.Добавить("Код", 				ТипСтрока);
	ТЗ.Колонки.Добавить("Наименование",		ТипСтрока);
		
	// Добавть строку в таблицу для каждого значения ключа при условии что в базе-источнике
	// эта ссылка найдена и у контрагента заполнен ИНН. Заполни ИНН, КПП, Код, Наименование
	//------------------------------------------------------------------------------------------------
	Для Каждого Выб Из МассивКлючей Цикл
		
		Если Выб = "" Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрДлина(СокрЛП(Выб))<>36 Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка 
			ОУСТО_УИД				= ОУСТО.NewObject("УникальныйИдентификатор", Выб); 
		Исключение
		    Данные = "Ключ = "+Выб;
			Комментарий = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("ДобавьОбновиКонтрагентаПоВнешнемуКлючу_ФильтрИННКПП", УровеньЖурналаРегистрации.Ошибка, Данные, Комментарий);
			Продолжить;
		КонецПопытки;

		ОУСТО_КонрагентСсылка	= ОУСТО.Справочники.Контрагенты.ПолучитьСсылку(ОУСТО_УИД); 
		
		// Не добавляй строку,  если ссылка не найдена в базе источнике
		//--------------------------------------------------------------------------------
		Если ОУСТО_КонрагентСсылка = ОУСТО.Справочники.Контрагенты.ПустаяСсылка() Тогда
			Продолжить;
		КонецЕсли;
		
		ИНН = ОУСТО_КонрагентСсылка.ИНН;
		
		// Не добавляй строку, если найденный контрагент не имеет ИНН
		//---------------------------------------------------------------------------------
		Если Не ЗначениеЗаполнено(ИНН) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрТЗ = ТЗ.Добавить();
		СтрТЗ.ЗначениеКлюча	= Выб;
		СтрТЗ.ИНН 			= ИНН;
		СтрТЗ.КПП 			= ОУСТО_КонрагентСсылка.КПП;
		СтрТЗ.Код			= ОУСТО_КонрагентСсылка.Код;
		СтрТЗ.Наименование	= ОУСТО_КонрагентСсылка.Наименование;
		
	КонецЦикла;
	ОбщегоНазначения.РазорватьПодключениеБД(ОУСТО);
			
	ТекДата= ТекущаяДата();
	//Запиши элементы справочника
	//----------------------------------------------------------
	Для Каждого СтрТЗ Из ТЗ Цикл
	
		//Поиищи контрагентна по ИНН и КПП
		//Если найден, добавь запись в табличную часть
		//Если не найден ,создай нового.
		//-------------------------------------------------------
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ 
		|	Контрагенты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ИНН = &ИНН
		|	И Контрагенты.КПП = &КПП";
		
		Запрос.УстановитьПараметр("ИНН", СтрТЗ.ИНН);
		Запрос.УстановитьПараметр("КПП", СтрТЗ.КПП);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
		Иначе
			КонтрагентСсылка = РезультатЗапроса.Выгрузить()[0][0];
			Контрагент = КонтрагентСсылка.ПолучитьОбъект();
		КонецЕсли;
				
		Контрагент.ИНН= СтрТЗ.ИНН;
		Контрагент.КПП= СтрТЗ.КПП;
		Контрагент.Наименование = СтрТЗ.Наименование;
		
		//Запись для ОУСТО
		//-----------------------------0------------------------------------
		НоваяСтр 			= Контрагент.КлючиВИсточникахДанных.Добавить();
		НоваяСтр.Период		= ТекДата;
		НоваяСтр.ТипКлюча 	= ТипКлюча;
		НоваяСтр.ЗначениеКлюча			= СтрТЗ.ЗначениеКлюча;	
		НоваяСтр.ПредставлениеКлюча 	= СтрТЗ.Наименование;
		НоваяСтр.ДопПредставлениеКлюча 	= СтрТЗ.Код;
		
		Попытка
			Контрагент.	Записать();
		Исключение
			Данные = "ИНН = "+Контрагент.ИНН+"; КПП = "+Контрагент.КПП;
			Комментарий = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("", УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Контрагенты, Данные, Комментарий);
		Продолжить;
		КонецПопытки;
	КонецЦикла;
КонецФункции

#Область Синхронизация_сотрудников_ОУ

Функция ЗагрузиСотрудниковОУАсинхронно(ИсточникДанных, ГУИД, Код, Наименование, ПолноеНаименование,ТелВнутрНомер="", АдресЭлПочты="", РуководительГУИД="", ЦелеваяТочкаГУИД = "") Экспорт

	ПараметрыФЗ = Новый Массив();
	ПараметрыФЗ.Добавить(ИсточникДанных);
	ПараметрыФЗ.Добавить(ГУИД);
	ПараметрыФЗ.Добавить(Код);
	ПараметрыФЗ.Добавить(Наименование);
	ПараметрыФЗ.Добавить(ПолноеНаименование);
	ПараметрыФЗ.Добавить(ТелВнутрНомер);
	ПараметрыФЗ.Добавить(АдресЭлПочты);	
	ПараметрыФЗ.Добавить(РуководительГУИД);	
	ПараметрыФЗ.Добавить(ЦелеваяТочкаГУИД);
		
	ИдентификаторФонЗадания = "";
	ФоновыеЗадания.Выполнить("КонсолидацияСервер.ЗагрузиСотрудниковОУ", ПараметрыФЗ, ИдентификаторФонЗадания, "ВебСервис.UpdateEmployee"); 
	
	//ЗагрузиСотрудниковОУ(ИсточникДанных, ГУИД, Код, Наименование, ПолноеНаименование,ТелВнутрНомер, АдресЭлПочты, РуководительГУИД, ЦелеваяТочкаГУИД) 
КонецФункции


Функция ЗагрузиСотрудниковОУ(ИсточникДанных, ГУИД, Код, Наименование, ПолноеНаименование,ТелВнутрНомер="", АдресЭлПочты="", РуководительГУИД="", ЦелеваяТочкаГУИД = "") Экспорт
	//Параметры:
	//ИсточникДанных (строка) 	- условное обозначение базы-источника(путь к базе-источнику в формате поключения по com-соединению);
	//ГУИД 						- ссылка в базе источнике
	//Код 						- код в базе источнике
	//Наименование 				- название в базе источнике
	//ТелВнутрНомер				- номер внутреннего телефона абонента
	//РуководительГУИД			- ГУИД руководителя
	//--------------------------------------------------------------------
	//Загружает или обновляет данные сотрудника из баз-источников
	
	Данные = "ИсточникДанных = "+ИсточникДанных+"; ГУИД = "+ГУИД+"; Код = "+Код+"; Наименование = "+Наименование+"ПолноеНаименование = "+ПолноеНаименование+
	"; ТелВнутрНомер = "+ ТелВнутрНомер+"; АдресЭлПочты = "+АдресЭлПочты+"; РуководительГУИД = "+РуководительГУИД+"; ЦелеваяТочкаГУИД ="+ЦелеваяТочкаГУИД;
	
	//ЗаписьЖурналаРегистрации("test", УровеньЖурналаРегистрации.Ошибка,, Данные);   

	ЗначениеПоУмолчанию = Ложь;
	
	ТипСтрока = Тип("Строка");
	Доступно = ТипЗнч(ИсточникДанных) 				= ТипСтрока;
	Доступно = Доступно И ТипЗнч(ГУИД) 				= ТипСтрока;
	Доступно = Доступно И ТипЗнч(Код) 				= ТипСтрока;
	Доступно = Доступно И ТипЗнч(Наименование) 		= ТипСтрока;
	Доступно = Доступно И ТипЗнч(ПолноеНаименование)= ТипСтрока;
	Доступно = Доступно И ТипЗнч(ТелВнутрНомер)		= ТипСтрока; 
	Доступно = Доступно И ТипЗнч(АдресЭлПочты)		= ТипСтрока; 
	Доступно = Доступно И ТипЗнч(РуководительГУИД)	= ТипСтрока; 
	Доступно = Доступно И ТипЗнч(ЦелеваяТочкаГУИД)	= ТипСтрока; 
	Доступно = Доступно И ЗначениеЗаполнено(ИсточникДанных);
	Доступно = Доступно И ЗначениеЗаполнено(ГУИД);
	Доступно = Доступно И ЗначениеЗаполнено(Код);
	Доступно = Доступно И ЗначениеЗаполнено(Наименование);
	
	Если Не Доступно Тогда
		Комментарий = "Ошибка в типе или заполнении аргументов";
		ЗаписьЖурналаРегистрации("ЗагрузиСотрудниковОУ", УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Сотрудники, Данные, Комментарий);
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	ТекДата = ЗначенияСервера.ТекущаяДатаСервер();   
	
	Чт = Новый ЧтениеJSON();
	Чт.УстановитьСтроку(ЦелеваяТочкаГУИД);	
	обХ = ФабрикаXDTO.ПрочитатьJSON(Чт);
	
	Ссылка = Справочники.ОУ_Сотрудники.НайтиПоРеквизиту("ГУИД", ГУИД);
	Если Ссылка = Справочники.ОУ_Сотрудники.ПустаяСсылка() Тогда
		Об = Справочники.ОУ_Сотрудники.СоздатьЭлемент();
	Иначе
		Об = Ссылка.ПолучитьОбъект();
	КонецЕсли;
	
	Об.ГУИД					= ГУИД;
	Об.Код					= Код;
	Об.Наименование 		= Наименование;
	Об.НаименованиеПолное	= ПолноеНаименование;
	Об.ЭлектроннаяПочта		= АдресЭлПочты;
	Об.ТелефонКор			= ТелВнутрНомер;
	Об.НавСсылка			= обХ.НавСсылка;
	
	Об.ТочкаОформления		= обХ.ТочкаОформления;
	Об.ВидДеятельности		= обХ.ВидДеятельности;
	Об.Снилс				= обХ.Снилс;
	
	Об.Комментарий			= "РуководительГУИД="+РуководительГУИД;
	
	//Заполни руководителя (у справочника иерархия элементов)
	//------------------------------------------------------------------
	Если ЗначениеЗаполнено(РуководительГУИД) Тогда
		РукСсылка = Справочники.ОУ_Сотрудники.НайтиПоРеквизиту("ГУИД", РуководительГУИД);
		Если РукСсылка <> Справочники.ОУ_Сотрудники.ПустаяСсылка() Тогда
			Об.Родитель 	= РукСсылка;
			Об.Руководитель = РукСсылка;
		КонецЕсли;
	КонецЕсли;
		
	//Сохрани историю изменения реквизитов
	//-------------------------------------
	Если Не Об.ЭтоНовый() Тогда
		ИсторическиеРеквизиты = Новый Массив();
		ИсторическиеРеквизиты.Добавить("Наименование");
		ИсторическиеРеквизиты.Добавить("НаименованиеПолное");
		ИсторическиеРеквизиты.Добавить("ТочкаОформления");
		ИсторическиеРеквизиты.Добавить("ВидДеятельности");
		ИсторическиеРеквизиты.Добавить("ТелефонКор");
		ИсторическиеРеквизиты.Добавить("ЭлектроннаяПочта");
		ИсторическиеРеквизиты.Добавить("Руководитель");

		Для Каждого Рекв Из ИсторическиеРеквизиты Цикл
			
							
			Отбор = Новый Структура();
			Отбор.Вставить("ИмяРеквизита",  Рекв);
			Отбор.Вставить("Окончание",		'00010101');
			Найденные = Об.ИсторияРеквизитов.НайтиСтроки(Отбор);
			
			//Закрой период действия старого значения
			//----------------------------------------
			Если Найденные.Количество()>0 Тогда
				
				//Если значение не изменилось
				//----------------------------
				Если Найденные[0].Значение = Об[Рекв] Тогда
					Продолжить;
				КонецЕсли;
				
				Найденные[0].Окончание = Текдата-1;
			КонецЕсли;
			
			//Открой период действия нового значения
			//---------------------------------------
			Новая = Об.ИсторияРеквизитов.Добавить();
			Новая.Начало 		= ТекДата;
			Новая.ИмяРеквизита 	= Рекв;
			Новая.Значение 		= Об[Рекв];
			
		КонецЦикла;
		
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Об.ТочкаОформления) Тогда
		Об.ТочкаОформления = "не заполнено";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Об.ВидДеятельности) Тогда
		Об.ВидДеятельности = "не заполнено";
	КонецЕсли;
	
	#Область Случай_ТелефонКор_пришел_пустой
	ТелефонКорПередЗаписью = "";
	Если Не ЗначениеЗаполнено(Об.ТелефонКор) Тогда
		ТелефонКорПередЗаписью  = Об.Ссылка.ТелефонКор;	
	КонецЕсли;
	#КонецОбласти
	
	Попытка
		Об.Записать();
	Исключение
		Комментарий = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("ЗагрузиСотрудниковОУ", УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.ОУ_Сотрудники, Данные, Комментарий);
		Возврат  ЗначениеПоУмолчанию 
	КонецПопытки;
	
	//Найди этот внутр. телефон в справочнике Предприятия и сохрани ссылку на Сотрудника ОУ
	//---------------------------------------------------
	Если ЗначениеЗаполнено(Об.ТелефонКор) Тогда
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбъектыПривязка.Владелец КАК Владелец
		|ИЗ
		|	РегистрСведений.ОбъектыПривязка КАК ОбъектыПривязка
		|ГДЕ
		|	ОбъектыПривязка.Объект.Код = &ТелефонКор";
		Запрос.УстановитьПараметр("ТелефонКор", Об.ТелефонКор);
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Возврат Истина;
		КонецЕсли;
		Владелец = РезультатЗапроса.Выгрузить()[0][0];
		Если Владелец.СотрудникОУ <> Об.Ссылка Тогда
			Предп = Владелец.ПолучитьОбъект();
			Предп.СотрудникОУ =  Об.Ссылка;
			Предп.ДополнительныеСвойства.Вставить("ЗагрузиСотрудниковОУ", Истина);
			Попытка
				Предп.Записать();
			Исключение
				Комментарий = ОписаниеОшибки();
				ЗаписьЖурналаРегистрации("ЗагрузиСотрудниковОУ", УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Предприятие, Данные, Комментарий);
			КонецПопытки;
		КонецЕсли;	
	КонецЕсли;
	
	#Область Случай_ТелефонКор_пришел_пустой
	//Случай, когда в Предприятии СотрудникОУ был заполнен ранее, а теперь этого сотрудника отвязали от телефона
	// Тогда очисти ссылку на Сотрудника ОУ
	//-----------------------------------------------------------------------------------------------------------
	Доступно = Не ЗначениеЗаполнено(Об.ТелефонКор);
	Если Доступно Тогда
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбъектыПривязка.Владелец КАК Владелец
		|ИЗ
		|	РегистрСведений.ОбъектыПривязка КАК ОбъектыПривязка
		|ГДЕ
		|	ОбъектыПривязка.Объект.Код = &ТелефонКор";
		Запрос.УстановитьПараметр("ТелефонКор", ТелефонКорПередЗаписью);
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Возврат Истина;
		КонецЕсли;
		
	    Владелец = РезультатЗапроса.Выгрузить()[0][0];
		Если Владелец.СотрудникОУ = Об.Ссылка Тогда
			Предп = Владелец.ПолучитьОбъект();
			Предп.СотрудникОУ =  ПредопределенноеЗначение("Справочник.ОУ_Сотрудники.ПустаяСсылка");
			Предп.ДополнительныеСвойства.Вставить("ЗагрузиСотрудниковОУ", Истина);
			Попытка
				Предп.Записать();
			Исключение
				Комментарий = ОписаниеОшибки();
				ЗаписьЖурналаРегистрации("ЗагрузиСотрудниковОУ", УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Предприятие, Данные, Комментарий);
			КонецПопытки;
		КонецЕсли;	

	КонецЕсли;
	#КонецОбласти
	
	Возврат Истина;

КонецФункции

#КонецОбласти


