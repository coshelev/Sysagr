
//*************************************************************************************************
// Управление конвергенцией
//*************************************************************************************************

Функция КонвергенцияВключить(ТелВнутренний,ТелМобильный) Экспорт
	Возврат ("");
КонецФункции

Функция КонвергенцияОтключить(ТелВнутренний) Экспорт

	Возврат ("");
КонецФункции

Функция КонвергенцияПолучить(ТелСсылка) Экспорт

// Функция возвращает ссылку на конвергентную пару для переданного телефона
// Если конвергентная пара не найдена, то возвращается Неопределено
//-------------------------------------------------------------------------------------------------
	Возврат Неопределено;
КонецФункции

//-------------------------------------------------------------------------------------------------

Функция ПеренаправлениеВключить(СтрПараметры)

// Включим перенаправление вызовов для переданного внутреннего телефона в мобильный контекст
// Найдем в таблице "ТелАбоненты" запись для переданного телефона
//-------------------------------------------------------------------------------------------------
	Попытка
		Сервер = СокрЛП(СтрПараметры.Сервер);
		Телефон = СокрЛП(СтрПараметры.Телефон);
		Услуга = ВРег(СокрЛП(СтрПараметры.Услуга));
		СпрСсылка = ВнешниеИсточникиДанных[Сервер].Таблицы.ТелАбоненты.НайтиПоПолю("abonent_num",Телефон);

// Если ссылка найдена, то получим из нее объект. Иначе - создадим новый объект
//-------------------------------------------------------------------------------------------------
		Если (ЗначениеЗаполнено(СпрСсылка)) Тогда
			СпрОбъект = СпрСсылка.ПолучитьОбъект();
		Иначе
			СпрОбъект = ВнешниеИсточникиДанных[Сервер].Таблицы.ТелАбоненты.СоздатьОбъект();
			СпрОбъект.abonent_num = ВРег(СокрЛП(Телефон));
			СпрОбъект.abonent_type = "";
			СпрОбъект.additions = "";
			СпрОбъект.custom = "";
		КонецЕсли;

// Удалим из реквизита "abonent_type" все мобильные услуги
// Добавим в реквизит "abonent_type" требуемую услугу FMC и запишем объект
//-------------------------------------------------------------------------------------------------
		ТекущиеУслуги = ВРег(СокрЛП(СпрОбъект.abonent_type));
		Выборка = Справочники.ТелСостояния.Выбрать();

		Пока (Выборка.Следующий()) Цикл
			Доступно = ЗначениеЗаполнено(Выборка.СерверныйКод);
			Доступно = Доступно И (Выборка.Предопределенный = Ложь);

			Если (Доступно = Истина) Тогда
				УдаляемыйСимвол = ВРег(СокрЛП(Выборка.СерверныйКод));
				ТекущиеУслуги = СокрЛП(СтрЗаменить(ТекущиеУслуги,УдаляемыйСимвол,""));
			КонецЕсли;
		КонецЦикла;

		СпрОбъект.abonent_type = ВРег(СокрЛП(ТекущиеУслуги) + Услуга);
		СпрОбъект.Записать();
	Исключение
		Ответ = "Включение FMC: Ошибка при корректировке ABONENTS на сервере """;
		Ответ = Ответ + Сервер + """" + Символы.ПС + СокрЛП(ОписаниеОшибки());
		Возврат (Ответ);
	КонецПопытки;

	Возврат ("");
КонецФункции

Функция ПеренаправлениеОтключить(СтрПараметры)

// Отключим перенаправление вызовов для переданного внутреннего телефона в мобильный контекст
// Найдем в таблице "ТелАбоненты" запись для переданного телефона
//-------------------------------------------------------------------------------------------------
	Попытка
		Сервер = СокрЛП(СтрПараметры.Сервер);
		Телефон = СокрЛП(СтрПараметры.Телефон);
		СпрСсылка = ВнешниеИсточникиДанных[Сервер].Таблицы.ТелАбоненты.НайтиПоПолю("abonent_num",Телефон);

		Если (НЕ ЗначениеЗаполнено(СпрСсылка)) Тогда
			Возврат ("");
		КонецЕсли;

// Удалим из реквизита "abonent_type" все мобильные услуги
//-------------------------------------------------------------------------------------------------
		СпрОбъект = СпрСсылка.ПолучитьОбъект();
		ТекущиеУслуги = ВРег(СокрЛП(СпрОбъект.abonent_type));
		Выборка = Справочники.ТелСостояния.Выбрать();

		Пока (Выборка.Следующий()) Цикл
			Доступно = ЗначениеЗаполнено(Выборка.СерверныйКод);
			Доступно = Доступно И (Выборка.Предопределенный = Ложь);

			Если (Доступно = Истина) Тогда
				УдаляемыйСимвол = ВРег(СокрЛП(Выборка.СерверныйКод));
				ТекущиеУслуги = СокрЛП(СтрЗаменить(ТекущиеУслуги,УдаляемыйСимвол,""));
			КонецЕсли;
		КонецЦикла;

// Если после удаления мобильных услуг переменная "ТекущиеУслуги" стала пустой, значит переданный
// телефон являлся виртуальным и его необходимо полностью удалить из таблицы "ТелАбоненты"
//-------------------------------------------------------------------------------------------------
		Если (ЗначениеЗаполнено(ТекущиеУслуги)) Тогда
			СпрОбъект.abonent_type = ВРег(СокрЛП(ТекущиеУслуги));
			СпрОбъект.Записать();
		Иначе
			СпрОбъект.Удалить();
		КонецЕсли;
	Исключение
		Ответ = "Отключение FMC: Ошибка при корректировке ABONENTS на сервере """;
		Ответ = Ответ + Сервер + """" + Символы.ПС + СокрЛП(ОписаниеОшибки());
		Возврат (Ответ);
	КонецПопытки;

	Возврат ("");
КонецФункции

//-------------------------------------------------------------------------------------------------

Процедура КонвергенцияРегистрДобавить(ТелВнутренний,ТелМобильный)
КонецПроцедуры

Процедура КонвергенцияРегистрУдалить(ТелефонСсылка) Экспорт
КонецПроцедуры


//*************************************************************************************************
// Управление привязкой телефонов к элементам справочника "Предприятие"
//*************************************************************************************************

Функция ВладелецПолучить(ТелСсылка) Экспорт

// Функция возвращает ссылку на элемент справочника "Предприятие", к которому привязан переданный
// Телефон. Если телефон не имеет владельца, то возвращается Неопределенность
//-------------------------------------------------------------------------------------------------
	Если (ЗначениеЗаполнено(ТелСсылка)) Тогда
		ТекстЗапроса = "
		|SELECT	TOP 1 Владелец AS Ссылка
		|FROM	РегистрСведений.ОбъектыПривязка
		|WHERE	(Объект = &ТелСсылка)";

		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ТелСсылка",ТелСсылка);
		Результат = Запрос.Выполнить().Выбрать();

		Если (Результат.Следующий()) Тогда
			Возврат (Результат.Ссылка);
		КонецЕсли;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

Процедура ВладелецОчистить(ТелСсылка,Рекурсия = Ложь) Экспорт

// Процедура удаляет всех владельцев у переданного телефона
//-------------------------------------------------------------------------------------------------
	Если (НЕ ЗначениеЗаполнено(ТелСсылка)) Тогда
		Возврат;
	КонецЕсли;

// Получим список текущих владельцев для переданного телефона
//-------------------------------------------------------------------------------------------------
	ТекстЗапроса = "
	|SELECT	DISTINCT Владелец AS Ссылка
	|FROM	РегистрСведений.ОбъектыПривязка
	|WHERE	(Объект = &ТелСсылка)";

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ТелСсылка",ТелСсылка);
	УдаляемыеВладельцы = Запрос.Выполнить().Выбрать();

// Удалим Владельцев для переданного телефона
//-------------------------------------------------------------------------------------------------
	НаборЗаписей = РегистрыСведений.ОбъектыПривязка.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ТелСсылка);
	НаборЗаписей.Записать();

// Для каждого удаляемого владельца переформируем телефонный справочник
//-------------------------------------------------------------------------------------------------
	Пока (УдаляемыеВладельцы.Следующий()) Цикл
		ТелСправочникСформировать(УдаляемыеВладельцы.Ссылка);
	КонецЦикла;

// Если процедура вызвана нерекурсивно
// Проверим телефон на наличие конвергенции. Если пара найдена, то удалим владельцев и у нее
//-------------------------------------------------------------------------------------------------
	Если (Рекурсия = Ложь) Тогда
		КонвСсылка = КонвергенцияПолучить(ТелСсылка);
		ВладелецОчистить(КонвСсылка,Истина);

// Если переданный телефон является внешним, то проверим на наличие у него подчиненных телефонов.
// Если подчиненные телефоны найдены, то очистим владельцев и у них тоже
//-------------------------------------------------------------------------------------------------
		Если (ТипЗнч(ТелСсылка) = Тип("СправочникСсылка.ТелВнешние")) Тогда
			Выборка = Справочники.ТелВнешние.Выбрать(ТелСсылка);

			Пока (Выборка.Следующий()) Цикл
				ВладелецОчистить(Выборка.Ссылка,Истина);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ВладелецНазначить(ТелСсылка,ВладСсылка,Рекурсия = Ложь) Экспорт

// Процедура привязывает переданный телефон к переданному владельцу
//-------------------------------------------------------------------------------------------------
	Доступно = ЗначениеЗаполнено(ТелСсылка);
	Доступно = Доступно И ЗначениеЗаполнено(ВладСсылка);

	Если (Доступно = Ложь) Тогда
		Возврат;
	КонецЕсли;

// Очистим текущего владельца для переданного телефона
//-------------------------------------------------------------------------------------------------
	Если (Рекурсия = Ложь) Тогда
		ВладелецОчистить(ТелСсылка);
	КонецЕсли;

// Назначим для телефона нового владельца
//-------------------------------------------------------------------------------------------------
	НовЗапись = РегистрыСведений.ОбъектыПривязка.СоздатьМенеджерЗаписи();
	НовЗапись.Владелец = ВладСсылка;
	НовЗапись.Объект = ТелСсылка;
	НовЗапись.Записать(Истина);

// Обновим телефонный справочник
//-------------------------------------------------------------------------------------------------
	ТелСправочникСформировать(ВладСсылка);

// Если процедура вызвана нерекурсивно
// Проверим телефон на наличие конвергенции. Если пара найдена, то назначим владельца и для нее
//-------------------------------------------------------------------------------------------------
	Если (Рекурсия = Ложь) Тогда
		КонвСсылка = КонвергенцияПолучить(ТелСсылка);
		ВладелецНазначить(КонвСсылка,ВладСсылка,Истина);

// Если переданный телефон является внешним, то проверим на наличие у него подчиненных телефонов.
// Если подчиненные телефоны найдены, то назначим владельцев и для них тоже
//-------------------------------------------------------------------------------------------------
		Если (ТипЗнч(ТелСсылка) = Тип("СправочникСсылка.ТелВнешние")) Тогда
			Выборка = Справочники.ТелВнешние.Выбрать(ТелСсылка);

			Пока (Выборка.Следующий()) Цикл
				ВладелецНазначить(Выборка.Ссылка,ВладСсылка,Истина);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ВладелецУстановитьКомпенсацию(ВладСсылка,НоваяСумма = 0) Экспорт
КонецПроцедуры

//-------------------------------------------------------------------------------------------------

Функция ТелефоныВладельцаПолучить(ВладСсылка) Экспорт

// Функция возвращает таблицу значений, содержащую все телефоны привязанные к переданному владельцу
// Если у владельца телефоны не найдены, то функция возвращает пустую таблицу значений
//-------------------------------------------------------------------------------------------------
	Ответ = Новый ТаблицаЗначений;
	Ответ.Колонки.Добавить("Тип");
	Ответ.Колонки.Добавить("Пара");
	Ответ.Колонки.Добавить("Телефон");
	Ответ.Колонки.Добавить("Порядок");
	Ответ.Колонки.Добавить("Комментарий");

	Если (НЕ ЗначениеЗаполнено(ВладСсылка)) Тогда
		Возврат (Ответ);
	КонецЕсли;

// Получим список телефонов для переданного владельца
// Из списка исключим несамостоятельные (включенные в серию) внешние телефоны
//-------------------------------------------------------------------------------------------------
	СтрПараметры = Новый Структура("Владелец",ВладСсылка);
	Выборка = РегистрыСведений.ОбъектыПривязка.Выбрать(СтрПараметры);

	Пока (Выборка.Следующий()) Цикл
		Пропустить = (ТипЗнч(Выборка.Объект) = Тип("СправочникСсылка.ТелВнешние"));
		Пропустить = Пропустить И ЗначениеЗаполнено(Выборка.Объект.Родитель);

		Если (Пропустить = Истина) Тогда
			Продолжить;
		КонецЕсли;

// Перенесем текущий телефон в ответную таблицу значений
//-------------------------------------------------------------------------------------------------
		НовСтрока = Ответ.Добавить();
		НовСтрока.Порядок = 999;
		НовСтрока.Тип = "Внутренний";
		НовСтрока.Телефон = Выборка.Объект;
		НовСтрока.Пара = КонвергенцияПолучить(Выборка.Объект);

// Сформируем информацию о типе телефона
//-------------------------------------------------------------------------------------------------
		Если (ТипЗнч(Выборка.Объект) = Тип("СправочникСсылка.ТелОчереди")) Тогда
			НовСтрока.Тип = "Очередь";
		ИначеЕсли (ТипЗнч(Выборка.Объект) = Тип("СправочникСсылка.ТелВнешние")) Тогда
			НовСтрока.Тип = "Внешний";
		ИначеЕсли (ТипЗнч(Выборка.Объект) = Тип("СправочникСсылка.ТелМобильные")) Тогда
			НовСтрока.Тип = "Мобильный";
		КонецЕсли;

// Сформируем значение для реквизита упорядочивания и реквизит "Комментарий"
//-------------------------------------------------------------------------------------------------
		Если (НовСтрока.Тип = "Внешний") Тогда
			НовСтрока.Порядок = ?(ВладСсылка.ЭтоГруппа,20,50);
			НовСтрока.Комментарий = СокрЛП(НовСтрока.Телефон.Назначение);

		ИначеЕсли (НовСтрока.Тип = "Очередь") Тогда
			НовСтрока.Порядок = ?(ВладСсылка.ЭтоГруппа,10,40);
			НовСтрока.Комментарий = СокрЛП(НовСтрока.Телефон.Код) + " - " + СокрЛП(НовСтрока.Телефон.Назначение);

		ИначеЕсли (НовСтрока.Тип = "Мобильный") Тогда
			НовСтрока.Порядок = ?(ВладСсылка.ЭтоГруппа,45,35);
			НовСтрока.Комментарий = СокрЛП(НовСтрока.Телефон.Провайдер);

		ИначеЕсли (НовСтрока.Тип = "Внутренний") Тогда
			НовСтрока.Порядок = ?(ВладСсылка.ЭтоГруппа,35,15);
			НовСтрока.Комментарий = СокрЛП(НовСтрока.Телефон.Состояние);
		КонецЕсли;

// Если у телефона есть конвергентная пара, то добавим сведения о конвергенции
//-------------------------------------------------------------------------------------------------
		Если (ЗначениеЗаполнено(НовСтрока.Пара)) Тогда
			НовСтрока.Комментарий = НовСтрока.Комментарий + " переадресация на " + СокрЛП(НовСтрока.Пара.Код);
			НовСтрока.Порядок = НовСтрока.Порядок - 5;
		КонецЕсли;
	КонецЦикла;

	Ответ.Сортировать("Порядок Возр");
	Возврат (Ответ);
КонецФункции

Процедура ТелСправочникСформировать(ВладСсылка)

// Процедура формирует список телефонов привязанных к переданному владельцу
// Все найденные телефоны перечисляются через запятую в реквизитах регистра "ТелСправочник"
//-------------------------------------------------------------------------------------------------
	Если (НЕ ЗначениеЗаполнено(ВладСсылка)) Тогда
		Возврат;
	КонецЕсли;

// Получим список телефонов привязанных к владельцу
// Если список оказался пустым, то удалим запись о владельце из телефонного справочника
//-------------------------------------------------------------------------------------------------
	ТЗТемп = ТелефоныВладельцаПолучить(ВладСсылка);

	Если (ТЗТемп.Количество() = 0) Тогда
		НаборЗаписей = РегистрыСведений.ТелСправочник.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Владелец.Установить(ВладСсылка);
		НаборЗаписей.Записать();
		Возврат;
	КонецЕсли;

// Создадим запись регистра
//-------------------------------------------------------------------------------------------------
	НовЗапись = РегистрыСведений.ТелСправочник.СоздатьМенеджерЗаписи();
	НовЗапись.Владелец = ВладСсылка;

// Сформируем реквизиты регистра
//-------------------------------------------------------------------------------------------------
	Для Каждого ТекСтрока Из ТЗТемп Цикл
		НовЗапись.Телефоны = НовЗапись.Телефоны + " " + СокрЛП(ТекСтрока.Телефон.Код);

		Если (ТекСтрока.Тип = "Внутренний") Тогда
			НовЗапись.ТелВнутренние = НовЗапись.ТелВнутренние + " " + СокрЛП(ТекСтрока.Телефон.Код);
		ИначеЕсли (ТекСтрока.Тип = "Мобильный") Тогда
			НовЗапись.ТелМобильные = НовЗапись.ТелМобильные + " " + СокрЛП(ТекСтрока.Телефон.Код);
		ИначеЕсли (ТекСтрока.Тип = "Внешний") Тогда
			НовЗапись.ТелВнешние = НовЗапись.ТелВнешние + " " + СокрЛП(ТекСтрока.Телефон.Код);
		КонецЕсли;
	КонецЦикла;

// Скорректируем полученные строки и выполним запись
//-------------------------------------------------------------------------------------------------
	НовЗапись.Телефоны = СтрЗаменить(СокрЛП(НовЗапись.Телефоны)," ",",");
	НовЗапись.ТелВнешние = СтрЗаменить(СокрЛП(НовЗапись.ТелВнешние)," ",",");
	НовЗапись.ТелМобильные = СтрЗаменить(СокрЛП(НовЗапись.ТелМобильные)," ",",");
	НовЗапись.ТелВнутренние = СтрЗаменить(СокрЛП(НовЗапись.ТелВнутренние)," ",",");
	НовЗапись.Записать(Истина);
КонецПроцедуры


//*************************************************************************************************
// Служебные процедуры и функции
//*************************************************************************************************

Функция ТелАбонентЗаписать(СтрПараметры) Экспорт

// Процедура выполняет запись опций переданных во входной структуре в таблицу ABONENTS.
// Запись выполняется для телефона номер которого (или ссылка на который) передан в структуре
// В случае успешной записи функция возвращает пустую строку. Иначе - строку с описанием ошибки
//-------------------------------------------------------------------------------------------------
// Реквизиты структуры:
// - Телефон (строка или ссылка) - внутренний телефон по которому необходимо обновить данные
// - ИсхКанал (строка) - номер внешнего телефона, через который осуществляются исходящие звонки
// - ИсхЗапрет (булево) - Истина если исходящие звонки запрещены, Ложь - разрешены
// - ИсхЗапись (булево) - Истина если включена запись исходящих звонков, Ложь - не включена
//-------------------------------------------------------------------------------------------------
	ТелВнутренний = ?(СтрПараметры.Свойство("Телефон"),СтрПараметры.Телефон,"");
	СтрСостояние = ТелВнутреннийСостояниеПолучить(ТелВнутренний);

	Если (СтрСостояние = Неопределено) Тогда
		Возврат ("ТелАбонентЗаписать: Не удалось получить текущее состояние переданного телефона");
	ИначеЕсли (НЕ ЗначениеЗаполнено(СтрСостояние.АбонСсылка)) Тогда
		Возврат ("ТелАбонентЗаписать: Для переданного телефона не найдена запись в таблице Abonents");
	КонецЕсли;

// Получим объект записи таблицы Abonents
//-------------------------------------------------------------------------------------------------
	АбонОбъект = СтрСостояние.АбонСсылка.ПолучитьОбъект();
	ЕстьИзменения = Ложь;

// Корректировка канала исходящих звонков
//-------------------------------------------------------------------------------------------------
	Если (СтрПараметры.Свойство("ИсхКанал")) Тогда
		Если (ВРег(СокрЛП(СтрПараметры.ИсхКанал)) <> ВРег(СокрЛП(СтрСостояние.ИсхКанал))) Тогда
			
			ЕстьИзменения = Истина;
		КонецЕсли;
	КонецЕсли;

	
// Корректировка запрета исходящих звонков
//-------------------------------------------------------------------------------------------------
	Если (СтрПараметры.Свойство("ИсхЗапрет")) Тогда
		Если (СтрПараметры.ИсхЗапрет <> СтрСостояние.ИсхЗапрет) Тогда
			АбонОбъект.additions = СтрЗаменить(ВРег(АбонОбъект.additions),"Z","");
			АбонОбъект.additions = СокрЛП(АбонОбъект.additions) + ?(СтрПараметры.ИсхЗапрет,"Z","");
			ЕстьИзменения = Истина;
		КонецЕсли;
	КонецЕсли;

// Корректировка признака записи исходящих звонков
//-------------------------------------------------------------------------------------------------
	Если (СтрПараметры.Свойство("ИсхЗапись")) Тогда
		Если (СтрПараметры.ИсхЗапись <> СтрСостояние.ИсхЗапись) Тогда
			АбонОбъект.additions = СтрЗаменить(ВРег(АбонОбъект.additions),"R","");
			АбонОбъект.additions = СокрЛП(АбонОбъект.additions) + ?(СтрПараметры.ИсхЗапись,"R","");
			ЕстьИзменения = Истина;
		КонецЕсли;
	КонецЕсли;

// Если АбонОбъект изменен, то выполним его запись
//-------------------------------------------------------------------------------------------------
	Если (ЕстьИзменения = Истина) Тогда
		Попытка
			АбонОбъект.Записать();
		Исключение
			Ответ = "ТелАбонентЗаписать: Ошибка при корректировке ABONENTS";
			Ответ = Ответ + Символы.ПС + СокрЛП(ОписаниеОшибки());
			Возврат (Ответ);
		КонецПопытки;
	КонецЕсли;

	Возврат ("");
КонецФункции

Функция ТелВнутреннийСостояниеПолучить(ТелВнутренний) Экспорт

// Функция возвращает структуру с информацией о состоянии переданного телефона
// Если при определении состояния произошла ошибка, то функция возвращает Неопределенность
//-------------------------------------------------------------------------------------------------
// ТелВнутренний (строка или ссылка) - телефон по которому запрашивается статус
//-------------------------------------------------------------------------------------------------
// Возвращаемая структура:
// - СипСсылка (ссылка) - ссылка на таблицу "ТелОбъекты"
// - АбонСсылка (ссылка) - ссылка на таблицу "ТелАбоненты"
// - Представление (строка) - строковое представление состояния телефона
// - ПараФмс (ТелМобильные.Ссылка) - мобильный телефон, который является конвергентной парой
// - ТипТерминала (строка) - тип терминала (S-SIP, A-аналоговый, V-виртуальный,"" - отсутствует)
// - ИсхКанал (строка) - номер внешнего телефона, через который осуществляются исходящие звонки

// - Провайдер - код провайдера, использующий этот номер внешнего телефона

// - ИсхЗапрет (булево) - Истина если исходящие звонки запрещены, Ложь - разрешены
// - ИсхЗапись (булево) - Истина если включена запись исходящих звонков, Ложь - не включена
//-------------------------------------------------------------------------------------------------
	ВнутрСсылка = Конвертация.ТелВнутреннийПолучитьСсылку(ТелВнутренний);
	ВнутрНомер = ?(ЗначениеЗаполнено(ВнутрСсылка),СокрЛП(ВнутрСсылка.Код),"");

	Если (НЕ ЗначениеЗаполнено(ВнутрСсылка)) Тогда
		Возврат Неопределено;
	КонецЕсли;

// Создадим структуру ответа
//-------------------------------------------------------------------------------------------------
	Ответ = Новый Структура;
	Ответ.Вставить("ИсхЗапрет",Ложь);
	Ответ.Вставить("ИсхЗапись",Ложь);
	Ответ.Вставить("ТипТерминала","");
	Ответ.Вставить("Представление","");
	Ответ.Вставить("ИсхКанал",Неопределено);
	
	//<22.06.2017; +; Провайдер>
	Ответ.Вставить("Провайдер", "");
	//</22.06.2017>
	
	Ответ.Вставить("СипСсылка",Неопределено);
	Ответ.Вставить("АбонСсылка",Неопределено);
	Ответ.Вставить("ПараФмс",КонвергенцияПолучить(ВнутрСсылка));

// Выясним существует ли для переданного телефона стационарный SIP-Аппарат
// Аппарат существует если номер найден в SIP-Objects и заполнен реквизит "IpAddr"
//-------------------------------------------------------------------------------------------------
	Если (ЗначениеЗаполнено(ВнутрСсылка.Сервер.ИсточникДанных)) Тогда
		ДомСервер = СокрЛП(ВнутрСсылка.Сервер.ИсточникДанных);
		
		Попытка
			Ответ.СипСсылка = ВнешниеИсточникиДанных[ДомСервер].Таблицы.ТелОбъекты.НайтиПоПолю("Name",ВнутрНомер);
		Исключение
			Данные = "ТелВнутренний = "+ТелВнутренний;
			Комментарий = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("ТелВнутреннийСостояниеПолучить", УровеньЖурналаРегистрации.Ошибка, Метаданные.ОбщиеМодули.Телефония, Данные, Комментарий);
			Возврат Неопределено;	
		КонецПопытки;

		Если (ЗначениеЗаполнено(Ответ.СипСсылка)) Тогда
			Ответ.Представление = ?(ЗначениеЗаполнено(Ответ.СипСсылка.IpAddr),"Стационарный SIP","SIP без IP-Адреса");
			Ответ.ТипТерминала = "S";
		КонецЕсли;

// Дополним структуру ответа данными из Abonents
//-------------------------------------------------------------------------------------------------
		Ответ.АбонСсылка = ВнешниеИсточникиДанных[ДомСервер].Таблицы.ТелАбоненты.НайтиПоПолю("abonent_num",ВнутрНомер);
		
		ТекущиеОпции = ВРег(СокрЛП(Ответ.АбонСсылка.additions));
		Ответ.ИсхЗапрет = (СтрНайти(ТекущиеОпции,"Z") > 0);
		Ответ.ИсхЗапись = (СтрНайти(ТекущиеОпции,"R") > 0);
	КонецЕсли;

// Если стационарный SIP-аппарат не обнаружен, значит аппарата либо нет, либо он аналоговый
//-------------------------------------------------------------------------------------------------
	Если (НЕ ЗначениеЗаполнено(Ответ.ТипТерминала)) Тогда
		Если (ВнутрСсылка.Состояние = Справочники.ТелСостояния.Аналоговый) Тогда
			Ответ.Представление = "Аналоговый";
			Ответ.ТипТерминала = "A";
		КонецЕсли;
	КонецЕсли;

// Дополним строковое представление состояния телефона
//-------------------------------------------------------------------------------------------------
	Если (ЗначениеЗаполнено(Ответ.ПараФмс)) Тогда
		Если (ЗначениеЗаполнено(Ответ.ТипТерминала)) Тогда
			Ответ.Представление = Ответ.Представление + " + " + СокрЛП(Ответ.ПараФМС.ТипФМС);
		Иначе
			Ответ.Представление = "Виртуальный " + СокрЛП(Ответ.ПараФМС.ТипФМС);
			Ответ.ТипТерминала = "V";
		КонецЕсли;

	ИначеЕсли (НЕ ЗначениеЗаполнено(Ответ.ТипТерминала)) Тогда
		Ответ.Представление = "Не подключен";
		Ответ.ТипТерминала = "";
	КонецЕсли;

	Возврат (Ответ);
КонецФункции

Процедура ТелВнутреннийСостояниеОбновить(ТелВнутренний) Экспорт

// Процедура обновляет в регистре сведений "ТелСостояния" запись о состоянии переданного телефона
//-------------------------------------------------------------------------------------------------
	ВнутрСсылка = Конвертация.ТелВнутреннийПолучитьСсылку(ТелВнутренний);

	Если (ЗначениеЗаполнено(ВнутрСсылка)) Тогда
		ТекЗапись = РегистрыСведений.ТелСостояния.СоздатьМенеджерЗаписи();
		ТекЗапись.ДатаПроверки = ТекущаяДата();
		ТекЗапись.Телефон = ВнутрСсылка;

// Получим сведения о текущем состоянии телефона
//-------------------------------------------------------------------------------------------------
		СтрСостояния = ТелВнутреннийСостояниеПолучить(ВнутрСсылка);

		Если (СтрСостояния <> Неопределено) Тогда
			ТекЗапись.ИсхКанал = СтрСостояния.ИсхКанал;
			ТекЗапись.ИсхЗапрет = СтрСостояния.ИсхЗапрет;
			ТекЗапись.ИсхЗапись = СтрСостояния.ИсхЗапись;
			ТекЗапись.ТелМобильный = СтрСостояния.ПараФмс;
			ТекЗапись.Состояние = СокрЛП(СтрСостояния.Представление);
			ТекЗапись.Абонент = ЗначениеЗаполнено(СтрСостояния.АбонСсылка);
			ТекЗапись.ТипТерминала = ВРег(СокрЛП(СтрСостояния.ТипТерминала));
		КонецЕсли;

// Запишем данные в регистр
//-------------------------------------------------------------------------------------------------
		Попытка
			ТекЗапись.Записать(Истина);
		Исключение
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

//*************************************************************************************************
// Прочие
//*************************************************************************************************

Функция ПолучиСерверТелефонииВнутрТелефона(НомерВнутрТелефона) Экспорт
	//Возвращает сервер телефонии для внутреннего телефона
	
	ЗначениеПоУмолчанию = "";
	
	Доступно = ТипЗнч(НомерВнутрТелефона) = Тип("Строка");
	Доступно = Доступно И СтрДлина(НомерВнутрТелефона) = 4;
	
	Если Не Доступно Тогда
		Возврат ЗначениеПоУмолчанию
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТелВнутренние.Сервер.Код
	               |ИЗ
	               |	Справочник.ТелВнутренние КАК ТелВнутренние
	               |ГДЕ
	               |	ТелВнутренние.Код = &Код";
	Запрос.УстановитьПараметр("Код", НомерВнутрТелефона);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить()[0][0];
КонецФункции

//*************************************************************************************************
// Отправка СМС через web-сервис Pyhton
//*************************************************************************************************
Функция СМС_Отправить(Телефон, Текст, Оператор, Подпись) Экспорт

// Функция выполняет отправку короткого сообщения (SMS) через web-service Python
// В качестве параметра принимает структуру со следующими реквизитами:
//-------------------------------------------------------------------------------------------------
// Телефон	- номер телефона, на который необходимо отправить сообщение (10 символов)
// Текст 	- текст сообщения (длина не более 1000 символов)
// Оператор - строка с информацией об операторе (наименование отправителя)
// Подпись  - строка с зарегистрированной у СМС-агрегатора подписью
//-------------------------------------------------------------------------------------------------
// В случае успеха возвращает пустую строку. Во всех остальных случаях - строку с описанием ошибки
//-------------------------------------------------------------------------------------------------

// Проверка валидности параметра "Телефон"
//-------------------------------------------------------------------------------------------------
	Доступно = Истина;
	Доступно = Доступно И Конвертация.ТелефонЭтоМобильный(Телефон);
	
	Если (Доступно = Ложь) Тогда
		Возврат ("Отправка SMS: телефон получателя имеет неверный формат (10 цифр)");
	КонецЕсли;

// Проверка валидности параметра "Текст"
//-------------------------------------------------------------------------------------------------
	Доступно = Истина;
	Доступно = Доступно И (ТипЗнч(Текст) = Тип("Строка"));
	Доступно = Доступно И ЗначениеЗаполнено(Текст);
	Доступно = Доступно И (СтрДлина(СокрЛП(Текст)) <= 1000);

	Если (Доступно = Ложь) Тогда
		Возврат ("Отправка SMS: текст сообщения не передан, либо превышает длину в 1000 символов");
	КонецЕсли;
	
// Проверка валидности параметра "Оператор"
//-------------------------------------------------------------------------------------------------	
	Доступно = Истина;
	Доступно = Доступно И ТипЗнч(Оператор) = Тип("Строка");
	Доступно = Доступно И ЗначениеЗаполнено(Оператор);
	
	Если Доступно = Ложь Тогда
		Возврат ("Отправка SMS: не указан отправитель");
	КонецЕсли;
	
// Проверка валидности параметра "Подпись" (Naming)
//-------------------------------------------------------------------------------------------------	
	Доступно = Истина;
	Доступно = Доступно И ТипЗнч(Подпись) = Тип("Строка");
	Доступно = Доступно И ЗначениеЗаполнено(Подпись);
	
	Если Доступно = Ложь Тогда
		Возврат ("Отправка SMS: не удалось получить критерий [Naming]");
	КонецЕсли;


// Инициализация переменных
//-------------------------------------------------------------------------------------------------
	СтрТелефон = СокрЛП(Телефон);
	СтрОператор = СокрЛП(Оператор);
	СтрПодпись = СокрЛП(Подпись);
	
// Замена перевода строки на пробел в сообщении
//-------------------------------------------------------------------------------------------------
	СтрТекст = СтрЗаменить(Текст, Символы.ПС, " ");
	СтрТекст = СтрЗаменить(СтрТекст, Символы.ВК, " ");
	СтрТекст = СокрЛП(СтрТекст);
	
// Убедимся в правильности заполнения данных о подписи (Naming)
//-------------------------------------------------------------------------------------------------
	Доступно = (ТипЗнч(СтрПодпись) = Тип("Строка"));
	Доступно = Доступно И ЗначениеЗаполнено(СтрПодпись);

	Если (Доступно = Ложь) Тогда
		Возврат ("Отправка SMS: не удалось получить критерий [Naming]");
	КонецЕсли;

// Инициируем отправку сообщения
//-------------------------------------------------------------------------------------------------
	Попытка
		ПространствоИмен 	= "http://tempuri.org/";
		ВебСервис 			= WSСсылки.PbxService.СоздатьWSПрокси(ПространствоИмен,"asterisk_ws","asterisk_ws");
		Результат 			= ВебСервис.send_message(СтрТелефон,СтрТекст,СтрОператор,СтрПодпись);
		Ответ 				= ?(ТипЗнч(Результат) = Тип("Строка"),Результат,Ответ);
	Исключение
	КонецПопытки;

	Возврат (СокрЛП(Ответ));
КонецФункции

Функция Asterisk_login() Экспорт
	//Возвращает логин Asterisk (строка)  
	
	Парам = Новый Структура("Asterisk_login");
	РегистрыСведений.УчетнаяПолитика.Получи(Парам);	
	Если Не ЗначениеЗаполнено(Парам.Asterisk_login) Тогда
		ЗаписьЖурналаРегистрации("Asterisk_login", УровеньЖурналаРегистрации.Ошибка,,, "Не найден параметр Asterisk_login в учетной политике");
		Возврат "ошибка"; 
	КонецЕсли;
	Возврат Парам.Asterisk_login;	
КонецФункции

Функция Asterisk_password() Экспорт   
	//Возвращает пароль Asterisk (строка)  
	
	Парам = Новый Структура("Asterisk_password");
	РегистрыСведений.УчетнаяПолитика.Получи(Парам);	
	Если Не ЗначениеЗаполнено(Парам.Asterisk_password) Тогда
		ЗаписьЖурналаРегистрации("Asterisk_password", УровеньЖурналаРегистрации.Ошибка,,, "Не найден параметр Asterisk_login в учетной политике");
		Возврат "ошибка"; 
	КонецЕсли; 
	Возврат Парам.Asterisk_password;	
КонецФункции     

Функция Asterisk_login_password() Экспорт
	//Возвращает структуру, содержащую логин и пароль (структура)
	
	Парам = Новый Структура("Asterisk_login, Asterisk_password");
	РегистрыСведений.УчетнаяПолитика.Получи(Парам);
	
	Доступно = ЗначениеЗаполнено(Парам.Asterisk_login) И ЗначениеЗаполнено(Парам.Asterisk_password);    
	Если Не Доступно Тогда
		ЗаписьЖурналаРегистрации("Asterisk_login_password(", УровеньЖурналаРегистрации.Ошибка,,, "Не найдены параметры в учетной политике");
	КонецЕсли; 
	Возврат Парам;		
КонецФункции