//*************************************************************************************************
// Функции для работы со звонками
//*************************************************************************************************

Функция CallRecFileGetName(Signature)

// Signature (строка) - сигнатура звонка
//-------------------------------------------------------------------------------------------------
// Возвращает строку, содержащую полный путь к файлу с записью звонка. Возвращает пустую строку,
// если не удалось получить путь к файлу с записью звонка
//-------------------------------------------------------------------------------------------------
	Доступно = (ТипЗнч(Signature) = Тип("Строка"));
	Доступно = Доступно И ЗначениеЗаполнено(Signature);
	Ответ = Звонки.ЗаписьРазговораПолучить(Signature);

	Возврат (Ответ);
КонецФункции


//*************************************************************************************************
// Функции для работы с коммуникатором
//*************************************************************************************************

Функция SendMessage(Text,Signature,PhoneNum,OperatorInfo)
	Возврат ("The service is not available since 11.12.2019");
КонецФункции

//*************************************************************************************************
// Функции для работы с сервисом "Целевые агенты"
//*************************************************************************************************

Функция LeadAgentAdd(PhoneNum,LeadPoint,VisText)
	// PhoneNum (строка) - номер внутреннего телефона целевого агента
	// LeadPoint (строка) - имя очереди
	// VisText (строка) - текст визитной карточки

	Данные = "PhoneNum = "+PhoneNum+";LeadPoint = "+ LeadPoint+"; VisText = "+VisText;
	ЗаписьЖурналаРегистрации("LeadAgentAdd:Start", УровеньЖурналаРегистрации.Ошибка, Метаданные.WebСервисы.ОбщегоНазначения, Данные);	
	
	Доступно = ЗначениеЗаполнено(VisText);
	Доступно = Доступно И ЗначениеЗаполнено(PhoneNum);
	Доступно = Доступно И ЗначениеЗаполнено(LeadPoint);

	Если (Доступно = Ложь) Тогда
		ЗаписьЖурналаРегистрации("Агрегатор.LeadAgentAdd: Ошибка передачи параметров", УровеньЖурналаРегистрации.Ошибка, Метаданные.WebСервисы.ОбщегоНазначения, Данные);
		Возврат ("Агрегатор.LeadAgentAdd: Ошибка передачи параметров");
	КонецЕсли;

// Убедимся в том, что переданный Телефон является внутренним
//-------------------------------------------------------------------------------------------------
	ТелСсылка = Конвертация.ТелВнутреннийПолучитьСсылку(PhoneNum);

	Если (НЕ ЗначениеЗаполнено(ТелСсылка)) Тогда
		ЗаписьЖурналаРегистрации("Агрегатор.LeadAgentAdd: Телефон с переданным номером не является внутренним телефоном", УровеньЖурналаРегистрации.Ошибка, Метаданные.WebСервисы.ОбщегоНазначения, Данные);
		Возврат ("Агрегатор.LeadAgentAdd: Телефон с переданным номером не является внутренним телефоном");
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТочкиЦелевые.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ТочкиЦелевые КАК ТочкиЦелевые
	|ГДЕ
	|	ТочкиЦелевые.Очередь.Наименование = &Наименование";
	Запрос.УстановитьПараметр("Наименование", LeadPoint);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ЗаписьЖурналаРегистрации("Агрегатор.LeadAgentAdd: Не найдена очередь", УровеньЖурналаРегистрации.Ошибка,Метаданные.WebСервисы.ОбщегоНазначения, Данные);
		Возврат ("Агрегатор.LeadAgentAdd: Очередь не найдена");	
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ТочкаЦелевая = Выборка.Ссылка;
	
	Зап = РегистрыСведений.АгентыЦелевые.СоздатьМенеджерЗаписи();
	Зап.Телефон 		= ТелСсылка;
	Зап.ТочкаЦелевая 	= ТочкаЦелевая;
	Попытка
		Зап.Записать();
	Исключение
		Комментарий = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("Агрегатор.LeadAgentAdd: ошибка записи в регистр", УровеньЖурналаРегистрации.Ошибка, Метаданные.РегистрыСведений.АгентыЦелевые, Данные, Комментарий);
	КонецПопытки;
	
	Возврат ("");
	

//// PhoneNum (строка) - номер внутреннего телефона целевого агента
//// LeadPoint (строка) - код целевой точки (элемента справочника "ТочкиЦелевые")
//// VisText (строка) - текст визитной карточки
////-------------------------------------------------------------------------------------------------
//// Функция выполняет подключение агента с переданным внутренним телефоном к сервису "Целевые агенты"
//// В случае успешного добавления функция возвращает пустую строку. Иначе - строку с текстом ошибки
////-------------------------------------------------------------------------------------------------
//	Доступно = ЗначениеЗаполнено(VisText);
//	Доступно = Доступно И ЗначениеЗаполнено(PhoneNum);
//	Доступно = Доступно И ЗначениеЗаполнено(LeadPoint);

//	Если (Доступно = Ложь) Тогда
//		Возврат ("Агрегатор.LeadAgentAdd: Ошибка передачи параметров");
//	КонецЕсли;

//// Убедимся в том, что переданный Телефон является внутренним
////-------------------------------------------------------------------------------------------------
//	ТелСсылка = Конвертация.ТелВнутреннийПолучитьСсылку(PhoneNum);

//	Если (НЕ ЗначениеЗаполнено(ТелСсылка)) Тогда
//		Возврат ("Агрегатор.LeadAgentAdd: Телефон с переданным номером не является внутренним телефоном");
//	КонецЕсли;

//// Убедимся в том, что заявленная целевая точка существует
////-------------------------------------------------------------------------------------------------
//	ТочкаСсылка = Справочники.ТочкиЦелевые.НайтиПоКоду(ВРег(СокрЛП(LeadPoint)));
//	Доступно = ЗначениеЗаполнено(ТочкаСсылка) И (ТочкаСсылка.ЭтоГруппа = Ложь);

//	Если (Доступно = Ложь) Тогда
//		Ответ = "Агрегатор.LeadAgentAdd: Целевая точка с кодом [" + СокрЛП(LeadPoint);
//		Ответ = Ответ + "] не найдена или выбрана группа, а не линейный элемент";
//		Возврат (Ответ);
//	КонецЕсли;

//// Преварительно отключим переданного агента ото всех целевых подсистем
////-------------------------------------------------------------------------------------------------
//	Результат = LeadAgentDelete(PhoneNum);

//	Если (ЗначениеЗаполнено(Результат)) Тогда
//		Возврат (Результат);
//	КонецЕсли;

//// Добавим агента в системную очередь целевой точки
////-------------------------------------------------------------------------------------------------
//	
//	Результат = ОчередиАгенты.АгентДобавитьЧерезВэбСервис(ТочкаСсылка.Очередь,ТелСсылка,Ложь);

//	Если (ЗначениеЗаполнено(Результат)) Тогда
//		Возврат ("Агрегатор.LeadAgentAdd: " + СокрЛП(Результат));
//	КонецЕсли;

//// Выполним регистрацию телефона в качестве целевого агента
////-------------------------------------------------------------------------------------------------
//	НовЗапись = РегистрыСведений.АгентыЦелевые.СоздатьМенеджерЗаписи();
//	НовЗапись.ВизитнаяКарточка = СокрЛП(VisText);
//	НовЗапись.ТочкаЦелевая = ТочкаСсылка;
//	НовЗапись.Телефон = ТелСсылка;
//	НовЗапись.Записать();

//	Возврат ("");
КонецФункции

Функция LeadAgentDelete(PhoneNum)
	
	Данные = PhoneNum;
	ЗаписьЖурналаРегистрации("LeadAgentDelete: Start", УровеньЖурналаРегистрации.Ошибка, УровеньЖурналаРегистрации.Ошибка,Метаданные.WebСервисы.ОбщегоНазначения, Данные);	
	
	ТелСсылка = Конвертация.ТелВнутреннийПолучитьСсылку(PhoneNum);
	Если (НЕ ЗначениеЗаполнено(ТелСсылка)) Тогда
		ЗаписьЖурналаРегистрации("Агрегатор.LeadAgentAdd: Телефон с переданным номером не является внутренним телефоном", УровеньЖурналаРегистрации.Ошибка, Метаданные.WebСервисы.ОбщегоНазначения, Данные);
		Возврат ("LeadAgentDelete: Телефон с переданным номером не является внутренним телефоном");
	КонецЕсли;

	Зап = РегистрыСведений.АгентыЦелевые.СоздатьМенеджерЗаписи();
	Зап.Телефон = ТелСсылка;
	Зап.Прочитать();
	Если Зап.Выбран() = Ложь Тогда
		ЗаписьЖурналаРегистрации("LeadAgentDelete: Не выбран", УровеньЖурналаРегистрации.Ошибка, УровеньЖурналаРегистрации.Ошибка,Метаданные.WebСервисы.ОбщегоНазначения, Данные);	
		Возврат ("");
	КонецЕсли;
	Попытка
		Зап.Удалить();	
	Исключение
		Комментарий = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("Агрегатор.LeadAgentDelete: ошибка записи в регистр", УровеньЖурналаРегистрации.Ошибка, Метаданные.РегистрыСведений.АгентыЦелевые, Данные, Комментарий);
	КонецПопытки;
		
	Возврат ("");
КонецФункции

Функция LeadAgentTest(PhoneNum)

// PhoneNum (строка) - номер внутреннего телефона проверяемого агента, либо набор внутренних
// телефонов разделенных символом ","
//-------------------------------------------------------------------------------------------------
// Функция выполняет проверку на наличие агента с переданным телефоном в сервисе "Целевые агенты"
// Если регистрация присутствует - возвращает последовательность с информацией о состоянии агента
// Если во входном параметре передан набор телефонов, то функция возвращает набор строк в описанном
// формате. Строки разделены символом "ПС" (перевод строки).
// Во всех остальных случаях возвращает пустую строку
//-------------------------------------------------------------------------------------------------
// - номер телефона агента
// - данные об активности (A или D)
// - наименование целевой точки агента
// - сведения о текущей блокировке
//-------------------------------------------------------------------------------------------------
// 2323#D#Автосалон "Ларина"#Блокировка до 99.99.9999 г. 99:99:99 по причине: Описание причины
//-------------------------------------------------------------------------------------------------
	Доступно = (ТипЗнч(PhoneNum) = Тип("Строка"));
	Доступно = Доступно И ЗначениеЗаполнено(PhoneNum);
	Ответ = "";

	Если (Доступно = Ложь) Тогда
		Возврат (Ответ);
	КонецЕсли;

// Нормализация переданного параметра
//-------------------------------------------------------------------------------------------------
	СписокТелефонов = ВРег(СокрЛП(PhoneNum));
	КоличествоПозиций = СтрЧислоВхождений(СписокТелефонов,",") + 1;

// Цикл по всем номерам телефонов переданным в параметре PhoneNum
//-------------------------------------------------------------------------------------------------
	Для ТекПозиция = 1 По КоличествоПозиций Цикл
		ТелНомер = Конвертация.СловоПолучить(СписокТелефонов,ТекПозиция,",");
		ТелСсылка = Конвертация.ТелВнутреннийПолучитьСсылку(ТелНомер);

		Если (НЕ ЗначениеЗаполнено(ТелСсылка)) Тогда
			Продолжить;
		КонецЕсли;

// Получим запись о регистрации агента
//-------------------------------------------------------------------------------------------------
		ЦелевойАгент = РегистрыСведений.АгентыЦелевые.СоздатьМенеджерЗаписи();
		ЦелевойАгент.Телефон = ТелСсылка;
		ЦелевойАгент.Прочитать();

		Если (ЦелевойАгент.Выбран() = Ложь) Тогда
			Продолжить;
		КонецЕсли;

// Сформируем сведения об активности агента
//-------------------------------------------------------------------------------------------------
		ОчередьСсылка = ЦелевойАгент.ТочкаЦелевая.Очередь;
		
		//<Кошелев_06.06.2016, +, Исключим внутр. тел. номера, которые не привязаны к очередям>
		СостояниеАгентаВОчереди = ОчередиАгенты.АгентПаузаПолучить(ОчередьСсылка,ТелСсылка);
		Если СостояниеАгентаВОчереди = Неопределено Тогда //Внутренний номер телефона не найден в поле Asteris<СерверТелефонии>.Агенты.membername
			 Продолжить;
		 КонецЕсли; //</Кошелев_06.06.2016>
		 
		Ответ = Ответ + ?(ЗначениеЗаполнено(Ответ),Символы.ПС,"") + СокрЛП(ТелНомер) + "#";
		Ответ = Ответ + ?(СостояниеАгентаВОчереди,"D","A");
		Ответ = Ответ + "#" + СокрЛП(ЦелевойАгент.ТочкаЦелевая);

// Добавим сведения о наличии действующей блокировки
//-------------------------------------------------------------------------------------------------
		Блокировка = ЗначениеЗаполнено(ЦелевойАгент.КонБлокировки);
		Блокировка = Блокировка И (ЦелевойАгент.КонБлокировки >= ТекущаяДата());

		Если (Блокировка = Истина) Тогда
			Ответ = Ответ + "#Блокировка до " + СокрЛП(Формат(ЦелевойАгент.КонБлокировки,"ДЛФ=DDT")) + " ";
			Ответ = Ответ + "(Мск) по причине: " + СокрЛП(ЦелевойАгент.ТекстБлокировки);
		КонецЕсли;
	КонецЦикла;

	Возврат (Ответ);
КонецФункции

Функция AgentPauseSet(PhoneNum)

// PhoneNum (строка) - номер внутреннего телефона агента
//-------------------------------------------------------------------------------------------------
// Функция включает для целевого агента режим "Paused" в целевой очереди
// В случае успеха возвращает пустую строку. Иначе - строку с описанием ошибки
//-------------------------------------------------------------------------------------------------
	Ответ = ОчередиАгенты.ЦелевойАгентДеактивировать(PhoneNum,Истина);
	Возврат (Ответ);
КонецФункции

Функция AgentPauseReset(PhoneNum)

// PhoneNum (строка) - номер внутреннего телефона агента
//-------------------------------------------------------------------------------------------------
// Функция отключает для целевого агента режим "Paused" в целевой очереди
// В случае успеха возвращает пустую строку. Иначе - строку с описанием ошибки
//-------------------------------------------------------------------------------------------------
	Ответ = ОчередиАгенты.ЦелевойАгентАктивировать(PhoneNum);
	Возврат (Ответ);
КонецФункции

Функция AgentBlockSet(PhoneNum,EndDate,Comment)

// Comment (строка) - описание причины блокировки
// EndDate (строка ГГГГММДДЧЧММСС) - дата и время окончания действия блокировки
// PhoneNum (строка) - номер внутреннего телефона агента
//-------------------------------------------------------------------------------------------------
// Функция создает заявку на блокировку агента и пытается сразу его деактивировать
// Возвращает пустую строку в случае успеха. Возвращает строку с описанием ошибки в случае неудачи
//-------------------------------------------------------------------------------------------------
	Если СокрЛП(Константы.Отладка.Получить())="AgentBlockSet" Тогда
		Данные = "PhoneNum = "+PhoneNum+",EndDate = "+EndDate+",Comment = "+Comment;
		ЗаписьЖурналаРегистрации("AgentBlockSet", УровеньЖурналаРегистрации.Ошибка, Метаданные.WebСервисы.ОбщегоНазначения, Данные);
	КонецЕсли;

	Ответ = "";

// Выполним создание заявки на блокировку
//-------------------------------------------------------------------------------------------------
	Попытка
		СтрПараметры = Новый Структура;
		СтрПараметры.Вставить("КонПериода",Дата(EndDate));
		СтрПараметры.Вставить("Комментарий",СокрЛП(Comment));
		СтрПараметры.Вставить("Телефон",ВРег(СокрЛП(PhoneNum)));
		Ответ = ОчередиАгенты.ЦелевойАгентЗаблокировать(СтрПараметры);
	Исключение
		Ответ = "Агрегатор.AgentBlockSet: ошибка при вызове функции блокировки";
	КонецПопытки;

	Возврат (Ответ);
КонецФункции

Функция QueueAgentsGet(QueueID)

// QueueID (строка) - телефонный номер или серверное имя системной очереди
//-------------------------------------------------------------------------------------------------
// Функция возвращает многострочную строку со списком агентов переданной очереди
// Строки разделяются символом "ПС". Разделитель полей в строке - символ "Таб".
// Если агентом очереди является другая очередь, то в выборку она не попадает
//-------------------------------------------------------------------------------------------------
// Структура строки:
// - номер телефона агента
// - текущий владелец телефона
// - признак активности агента (P - Paused или A - Active)
//-------------------------------------------------------------------------------------------------
	ОчередьСсылка = Конвертация.ТелОчередьПолучитьСсылку(QueueID);
	Доступно = ЗначениеЗаполнено(ОчередьСсылка) И ЗначениеЗаполнено(ОчередьСсылка.Сервер.ИсточникДанных);
	Ответ = "";

	Если (Доступно = Ложь) Тогда
		Возврат (Ответ);
	КонецЕсли;
 
// Получим список Агентов переданной Очереди
//-------------------------------------------------------------------------------------------------
	ТекстЗапроса = "
	|SELECT	MemberName AS Агент,ISNULL(Paused,0) AS Пауза
	|FROM	ВнешнийИсточникДанных." + СокрЛП(ОчередьСсылка.Сервер.ИсточникДанных) + ".Таблица.Агенты
	|WHERE	(queue_name = &Очередь)
	|ORDER	BY MemberName";

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Очередь",ВРег(СокрЛП(ОчередьСсылка.Наименование)));
	Попытка
		Результат = Запрос.Выполнить().Выбрать();
	Исключение
		Возврат (Ответ);
	КонецПопытки;

	Пока (Результат.Следующий()) Цикл
		АгентСсылка = Конвертация.ТелПолучитьСсылку(Результат.Агент);

		Если (ТипЗнч(АгентСсылка) = Тип("СправочникСсылка.ТелВнутренние")) Тогда
			ВладелецСсылка = Телефония.ВладелецПолучить(АгентСсылка);
			ВладелецИмя = ?(ЗначениеЗаполнено(ВладелецСсылка),ВладелецСсылка.Наименование,"");
			СтрАктивность = ?(Результат.Пауза = 0,"A","P");

			Ответ = Ответ + ?(ЗначениеЗаполнено(Ответ),Символы.ПС,"");
			Ответ = Ответ + ВРег(СокрЛП(Результат.Агент)) + Символы.Таб;
			Ответ = Ответ + СокрЛП(ВладелецИмя) + Символы.Таб;
			Ответ = Ответ + СокрЛП(СтрАктивность);
		КонецЕсли;
	КонецЦикла;

	Возврат (СокрЛП(Ответ));
КонецФункции

Функция UpdateEmployee(DataSourse, UID, Code,  Name, FullName, PhoneNum,  Email, BossUID, PosUID)
	
	Выполнено = Ложь;
	Ош = "";
	//Выполнено = Справочники.Сотрудники.ЗагрузитьИзОУ(DataSourse, UID, Code,  Name, FullName, PhoneNum, Email, BossUID, PosUID);
	
	//Выполнено = КонсолидацияСервер.ЗагрузиСотрудниковОУ(DataSourse, UID, Code,  Name, FullName, PhoneNum, Email, BossUID, PosUID);
	//Если Не Выполнено Тогда
	//	Ош = "error";
	//Иначе
	//	Ош = "";
	//КонецЕсли;
	//ЗаписьЖурналаРегистрации("UpdateEmployee", УровеньЖурналаРегистрации.Ошибка);
	
	Выполнено = КонсолидацияСервер.ЗагрузиСотрудниковОУАсинхронно(DataSourse, UID, Code,  Name, FullName, PhoneNum, Email, BossUID, PosUID);

	Возврат Ош;	
КонецФункции

Функция SetStatusForCall(Signature, Status, Activity, Point, SaleDeal, Employee)
	// Вставить содержимое обработчика.
КонецФункции

Функция TargerTraficReport(Start, End)
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Звонки.Сигнатура КАК Сигнатура,
	|	Звонки.ЭтоВходящий КАК Входящий,
	|	Звонки.Принят КАК Принят,
	|	ЕСТЬNULL(ЗвонкиДоп.ЦелеваяТочка.Наименование, ""<целевая точка не указана>"") КАК ЦелеваяТочка,
	|	ЕСТЬNULL(ЗвонкиДоп.ЦелеваяТочка.НаправлениеДеятельности, """") КАК НаправлениеДеятельности,
	|	ЕСТЬNULL(ЗвонкиДоп.СотрудникОУ.ГУИД, ""<ГУИД сотрудника не указан>"") КАК Сотрудник
	|ИЗ
	|	РегистрСведений.Звонки КАК Звонки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗвонкиДоп КАК ЗвонкиДоп
	|		ПО Звонки.Сигнатура = ЗвонкиДоп.Сигнатура
	|ГДЕ
	|	Звонки.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ВЫБОР
	|			КОГДА Звонки.ЭтоВходящий
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ВЫБОР
	|					КОГДА Звонки.Инициатор В (&ТелефоныКонтактЦентра)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		КОНЕЦ";
	Запрос.УстановитьПараметр("ДатаНачала",  		НачалоДня(Start));
	Запрос.УстановитьПараметр("ДатаОкончания",		КонецДня(End));	
	ТелефоныКонтактЦентра = Новый Массив();
	ТелефоныКонтактЦентра = СтрРазделить("1359;1391;1392;5240;5241;5242;5319;5334", ";");	
	Запрос.УстановитьПараметр("ТелефоныКонтактЦентра",	ТелефоныКонтактЦентра);

	Зап = Новый ЗаписьJSON();
	Зап.УстановитьСтроку();
	Зап.ЗаписатьНачалоМассива();
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Зап.ЗаписатьНачалоОбъекта();
		
		Зап.ЗаписатьИмяСвойства("call");
		Зап.ЗаписатьЗначение(Выборка.Сигнатура);
		
		Зап.ЗаписатьИмяСвойства("targetPoint");
		Зап.ЗаписатьЗначение(Выборка.ЦелеваяТочка);
		
		Зап.ЗаписатьИмяСвойства("employee");
		Зап.ЗаписатьЗначение(Выборка.Сотрудник);

		Зап.ЗаписатьИмяСвойства("Activity");
		Зап.ЗаписатьЗначение(Выборка.НаправлениеДеятельности);
		
		Зап.ЗаписатьИмяСвойства("incoming");
		Зап.ЗаписатьЗначение(Выборка.Входящий);

		Зап.ЗаписатьИмяСвойства("received");
		Зап.ЗаписатьЗначение(Выборка.Принят);
	
		Зап.ЗаписатьКонецОбъекта();
	КонецЦикла;
		
	Зап.ЗаписатьКонецМассива();
	Результат = Зап.Закрыть();
	Возврат Результат 
	
КонецФункции

Функция InternetRequestReport(Start, End)
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИнтернетЗаявки.Сигнатура КАК ИнтернетЗаявка,
	|	ИнтернетЗаявки.Дата КАК Дата,
	|	ИнтернетЗаявки.Инициатор КАК Инициатор,
	|	ИнтернетЗаявки.АбонентВнешний КАК АбонентВнешний,
	|	ЕСТЬNULL(Свойства1.Значение.Наименование, """") КАК form_type,
	|	ЕСТЬNULL(Свойства2.Значение.Наименование, """") КАК Комментарий,
	|	ЕСТЬNULL(Свойства3.Значение.Наименование, """") КАК name,
	|	ЕСТЬNULL(Свойства4.Значение.Наименование, """") КАК email,
	|	ЕСТЬNULL(Свойства5.Значение.Наименование, """") КАК referrer_source,
	|	ЕСТЬNULL(ЗвонкиСтатОбщая.Сигнатура, """") КАК Звонок
	|ИЗ
	|	РегистрСведений.ИнтернетЗаявки КАК ИнтернетЗаявки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИнтернетЗаявкиСвойства КАК Свойства1
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИдентификаторыСтрокИнтернетЗаявок КАК Идентификаторы1
	|			ПО Свойства1.Свойство = Идентификаторы1.Ссылка
	|				И (Идентификаторы1.МодифицированнаяСтрока = ""form_type"")
	|		ПО ИнтернетЗаявки.Сигнатура = Свойства1.Сигнатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИнтернетЗаявкиСвойства КАК Свойства2
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИдентификаторыСтрокИнтернетЗаявок КАК Идентификаторы2
	|			ПО Свойства2.Свойство = Идентификаторы2.Ссылка
	|				И (Идентификаторы2.МодифицированнаяСтрока = ""text"")
	|		ПО ИнтернетЗаявки.Сигнатура = Свойства2.Сигнатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИнтернетЗаявкиСвойства КАК Свойства3
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИдентификаторыСтрокИнтернетЗаявок КАК Идентификаторы3
	|			ПО Свойства3.Свойство = Идентификаторы3.Ссылка
	|				И (Идентификаторы3.МодифицированнаяСтрока = ""name"")
	|		ПО ИнтернетЗаявки.Сигнатура = Свойства3.Сигнатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИнтернетЗаявкиСвойства КАК Свойства4
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИдентификаторыСтрокИнтернетЗаявок КАК Идентификаторы4
	|			ПО Свойства4.Свойство = Идентификаторы4.Ссылка
	|				И (Идентификаторы4.МодифицированнаяСтрока = ""email"")
	|		ПО ИнтернетЗаявки.Сигнатура = Свойства4.Сигнатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИнтернетЗаявкиСвойства КАК Свойства5
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИдентификаторыСтрокИнтернетЗаявок КАК Идентификаторы5
	|			ПО Свойства5.Свойство = Идентификаторы5.Ссылка
	|				И (Идентификаторы5.МодифицированнаяСтрока = ""referrer_source"")
	|		ПО ИнтернетЗаявки.Сигнатура = Свойства5.Сигнатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗвонкиСтатОбщая КАК ЗвонкиСтатОбщая
	|		ПО (""iq_"" + ИнтернетЗаявки.Сигнатура = ЗвонкиСтатОбщая.Основание)
	|ГДЕ
	|	ИнтернетЗаявки.Дата МЕЖДУ &ДатаНачала И &ДатаКонца";
	Запрос.УстановитьПараметр("ДатаНачала",  	НачалоДня(Start));
	Запрос.УстановитьПараметр("ДатаКонца",		КонецДня(End));
		
	Зап = Новый ЗаписьJSON();
	Зап.УстановитьСтроку();
	Зап.ЗаписатьНачалоМассива();
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Зап.ЗаписатьНачалоОбъекта();	
		Зап.ЗаписатьИмяСвойства("internetRequest");	Зап.ЗаписатьЗначение(Выборка.ИнтернетЗаявка);
		Зап.ЗаписатьИмяСвойства("date");			Зап.ЗаписатьЗначение(Строка(Выборка.Дата));
		Зап.ЗаписатьИмяСвойства("site");			Зап.ЗаписатьЗначение(Выборка.Инициатор);
		Зап.ЗаписатьИмяСвойства("phone");			Зап.ЗаписатьЗначение(Выборка.АбонентВнешний);
		Зап.ЗаписатьИмяСвойства("form_type");		Зап.ЗаписатьЗначение(Выборка.form_type);
		Зап.ЗаписатьИмяСвойства("comment");			Зап.ЗаписатьЗначение(Выборка.Комментарий);
		Зап.ЗаписатьИмяСвойства("name");			Зап.ЗаписатьЗначение(Выборка.name);
		Зап.ЗаписатьИмяСвойства("email");			Зап.ЗаписатьЗначение(Выборка.email);
		Зап.ЗаписатьИмяСвойства("referrer_source");	Зап.ЗаписатьЗначение(Выборка.referrer_source);	
		Зап.ЗаписатьИмяСвойства("call");			Зап.ЗаписатьЗначение(Выборка.Звонок);
		Зап.ЗаписатьИмяСвойства("region");			Зап.ЗаписатьЗначение(Строка(Конвертация.РегионПолучитьПоНомеруТелефона(Выборка.АбонентВнешний)));
		Зап.ЗаписатьКонецОбъекта();
	КонецЦикла;
	
	Зап.ЗаписатьКонецМассива();
	Результат = Зап.Закрыть();
	Возврат Результат 
КонецФункции

Функция GAZRequestReport(Start, End)
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГАЗЗаявки.Сигнатура КАК ИнтернетЗаявка,
	|	ГАЗЗаявки.Начало КАК Дата,
	|	ГАЗЗаявки.АбонентВнешний КАК АбонентВнешний,
	|	ЕСТЬNULL(ЗвонкиСтатОбщая.Сигнатура, """") КАК Звонок
	|ИЗ
	|	РегистрСведений.ГАЗЗаявки КАК ГАЗЗаявки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗвонкиСтатОбщая КАК ЗвонкиСтатОбщая
	|		ПО ГАЗЗаявки.Сигнатура = ЗвонкиСтатОбщая.Основание";
	Запрос.УстановитьПараметр("ДатаНачала",  	НачалоДня(Start));
	Запрос.УстановитьПараметр("ДатаКонца",		КонецДня(End));
	
	
	Зап = Новый ЗаписьJSON();
	Зап.УстановитьСтроку();
	Зап.ЗаписатьНачалоМассива();
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Зап.ЗаписатьНачалоОбъекта();	
		Зап.ЗаписатьИмяСвойства("internetRequest");	Зап.ЗаписатьЗначение(Выборка.ИнтернетЗаявка);
		Зап.ЗаписатьИмяСвойства("date");			Зап.ЗаписатьЗначение(Строка(Выборка.Дата));
		Зап.ЗаписатьИмяСвойства("phone");			Зап.ЗаписатьЗначение(Выборка.АбонентВнешний);			
		Зап.ЗаписатьИмяСвойства("call");			Зап.ЗаписатьЗначение(Выборка.Звонок);
		Зап.ЗаписатьИмяСвойства("region");			Зап.ЗаписатьЗначение(Строка(Конвертация.РегионПолучитьПоНомеруТелефона(Выборка.АбонентВнешний)));
		Зап.ЗаписатьКонецОбъекта();
	КонецЦикла;
	
	Зап.ЗаписатьКонецМассива();
	Результат = Зап.Закрыть();
	Возврат Результат 
КонецФункции

Функция InternetRequestReportExt(Start, End)
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИнтернетЗаявки.Сигнатура КАК ИнтернетЗаявка,
	|	ИнтернетЗаявки.Дата КАК Дата,
	|	ИнтернетЗаявки.Инициатор КАК Инициатор,
	|	ИнтернетЗаявки.АбонентВнешний КАК АбонентВнешний,
	|	ЕСТЬNULL(Свойства1.Значение.Наименование, """") КАК form_type,
	|	ЕСТЬNULL(Свойства2.Значение.Наименование, """") КАК Комментарий,
	|	ЕСТЬNULL(Свойства3.Значение.Наименование, """") КАК name,
	|	ЕСТЬNULL(Свойства4.Значение.Наименование, """") КАК email,
	|	ЕСТЬNULL(Свойства5.Значение.Наименование, """") КАК referrer_source,
	|	ЕСТЬNULL(ЗвонкиСтатОбщая.Сигнатура, """") КАК Звонок
	|ИЗ
	|	РегистрСведений.ИнтернетЗаявки КАК ИнтернетЗаявки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИнтернетЗаявкиСвойства КАК Свойства1
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИдентификаторыСтрокИнтернетЗаявок КАК Идентификаторы1
	|			ПО Свойства1.Свойство = Идентификаторы1.Ссылка
	|				И (Идентификаторы1.МодифицированнаяСтрока = ""form_type"")
	|		ПО ИнтернетЗаявки.Сигнатура = Свойства1.Сигнатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИнтернетЗаявкиСвойства КАК Свойства2
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИдентификаторыСтрокИнтернетЗаявок КАК Идентификаторы2
	|			ПО Свойства2.Свойство = Идентификаторы2.Ссылка
	|				И (Идентификаторы2.МодифицированнаяСтрока = ""text"")
	|		ПО ИнтернетЗаявки.Сигнатура = Свойства2.Сигнатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИнтернетЗаявкиСвойства КАК Свойства3
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИдентификаторыСтрокИнтернетЗаявок КАК Идентификаторы3
	|			ПО Свойства3.Свойство = Идентификаторы3.Ссылка
	|				И (Идентификаторы3.МодифицированнаяСтрока = ""name"")
	|		ПО ИнтернетЗаявки.Сигнатура = Свойства3.Сигнатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИнтернетЗаявкиСвойства КАК Свойства4
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИдентификаторыСтрокИнтернетЗаявок КАК Идентификаторы4
	|			ПО Свойства4.Свойство = Идентификаторы4.Ссылка
	|				И (Идентификаторы4.МодифицированнаяСтрока = ""email"")
	|		ПО ИнтернетЗаявки.Сигнатура = Свойства4.Сигнатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИнтернетЗаявкиСвойства КАК Свойства5
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИдентификаторыСтрокИнтернетЗаявок КАК Идентификаторы5
	|			ПО Свойства5.Свойство = Идентификаторы5.Ссылка
	|				И (Идентификаторы5.МодифицированнаяСтрока = ""referrer_source"")
	|		ПО ИнтернетЗаявки.Сигнатура = Свойства5.Сигнатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗвонкиСтатОбщая КАК ЗвонкиСтатОбщая
	|		ПО (""iq_"" + ИнтернетЗаявки.Сигнатура = ЗвонкиСтатОбщая.Основание)
	|ГДЕ
	|	ИнтернетЗаявки.Дата МЕЖДУ &ДатаНачала И &ДатаКонца";
	Запрос.УстановитьПараметр("ДатаНачала",  	НачалоДня(Start));
	Запрос.УстановитьПараметр("ДатаКонца",		КонецДня(End));
	
	
	Зап = Новый ЗаписьJSON();
	Зап.УстановитьСтроку();
	Зап.ЗаписатьНачалоМассива();
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Зап.ЗаписатьНачалоОбъекта();
		
		Зап.ЗаписатьИмяСвойства("internetRequest");
		Зап.ЗаписатьЗначение(Выборка.ИнтернетЗаявка);
		
		Зап.ЗаписатьИмяСвойства("date");
		Зап.ЗаписатьЗначение(Строка(Выборка.Дата));
		
		Зап.ЗаписатьИмяСвойства("site");
		Зап.ЗаписатьЗначение(Выборка.Инициатор);

		Зап.ЗаписатьИмяСвойства("phone");
		Зап.ЗаписатьЗначение(Выборка.АбонентВнешний);
		
		Зап.ЗаписатьИмяСвойства("form_type");
		Зап.ЗаписатьЗначение(Выборка.form_type);

		Зап.ЗаписатьИмяСвойства("comment");
		Зап.ЗаписатьЗначение(Выборка.Комментарий);
		
		Зап.ЗаписатьИмяСвойства("name");
		Зап.ЗаписатьЗначение(Выборка.name);

		Зап.ЗаписатьИмяСвойства("email");
		Зап.ЗаписатьЗначение(Выборка.email);

		Зап.ЗаписатьИмяСвойства("referrer_source");
		Зап.ЗаписатьЗначение(Выборка.referrer_source);
		
		Зап.ЗаписатьИмяСвойства("call");
		Зап.ЗаписатьЗначение(Выборка.Звонок);
		
		Зап.ЗаписатьИмяСвойства("region");
		Зап.ЗаписатьЗначение(Строка(Конвертация.РегионПолучитьПоНомеруТелефона(Выборка.АбонентВнешний)));

		Зап.ЗаписатьКонецОбъекта();
	КонецЦикла;
	
	
	Зап.ЗаписатьКонецМассива();
	Результат = Зап.Закрыть();
	Возврат Результат 

КонецФункции

Функция PhoneMovement(Phone, Personal, Employee, Snils, Division, Org, Position)
	Попытка
		Данные = "Phone = "+Phone+"; Personal = "+Personal+"; Employee = "+Employee+"; Snils = "  +Snils+"; Division = "+Division+"; Org = " + Org + "; Position = "+ Position;
		Комментарий = "Движение телефона в сервис-деск";
		ЗаписьЖурналаРегистрации("PhoneMovement", УровеньЖурналаРегистрации.Ошибка, Метаданные.WebСервисы.ОбщегоНазначения.Операции.PhoneMovement, Данные, Комментарий);
		
		//Создай задачу
		Задача = Справочники.ЗадачиВнутреннихТелефонов.СоздатьЭлемент();
		Задача.Код 				= Phone;
		Задача.Наименование 	= Phone;
		Задача.Персональный 	= Personal;
		Задача.Сотрудник		= Employee;
		Задача.Снилс			= Snils;
		Задача.Подразделение	= Division;
		Задача.Организация		= Org;
		Задача.Должность		= Position;
		
		Задача.ДатаПостановки	= ТекущаяДата();
		Задача.Комментарий  	= "Привязка телефона. " + Данные;
		
		Попытка
			Задача.Записать();
		Исключение  
			ЗаписьЖурналаРегистрации("PhoneMovement", УровеньЖурналаРегистрации.Ошибка, Метаданные.WebСервисы.ОбщегоНазначения.Операции.PhoneMovement, Данные, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Возврат "";
		КонецПопытки;
		
		//Создай внутренний телефон
		Тел = Справочники.ТелВнутренние.НайтиПоКоду(Phone);
		Если Тел = Справочники.ТелВнутренние.ПустаяСсылка() Тогда
			Тел.Код 			= Phone;
			Тел.Наименование	= Phone;
			Тел.Сервер			= Справочники.ТелСерверы.НайтиПоКоду("000000001");
			Тел.Состояние		= Справочники.ТелСостояния.НайтиПоКоду("000000002");
			Тел.Записать();
		КонецЕсли;
		
		Возврат "";
	Исключение
		Возврат "";
	КонецПопытки;
КонецФункции

Функция PhoneFree(Phone)
	Попытка
		Данные = "Phone = "+Phone;
		Комментарий = Комментарий = "Движение телефона в сервис-деск";
		ЗаписьЖурналаРегистрации("PhoneMovement", УровеньЖурналаРегистрации.Ошибка, Метаданные.WebСервисы.ОбщегоНазначения.Операции.PhoneMovement, Данные, Комментарий);

		//Создай задачу
		Задача = Справочники.ЗадачиВнутреннихТелефонов.СоздатьЭлемент();
		Задача.Код 				= Phone;
		Задача.ДатаПостановки	= ТекущаяДата();
		Задача.Комментарий  	= "Отвязка телефона. "+Данные;
		
		Задача.Записать();

	Исключение
	КонецПопытки
КонецФункции

Функция LastSalesLoyalityQuestionnaire(Buyer)	
	//Возвращает анкету по последней задачи лояльности продаж, закрытой не  вручную
	//Продажи всех авто, в отличие от ремонтов, оформляются только в ОУ
	//Входные параметры:
	//	Buyer (строка) - ГУИД покупателя из ОУ
	
	Результат = "empty";
	
	Зап = Новый ЗаписьJSON();
	Зап.УстановитьСтроку();
	Зап.ЗаписатьНачалоМассива();

	Доступно = Истина;
	Доступно = Доступно И ТипЗнч(Buyer) = Тип("Строка");
	Доступно = Доступно И СтрДлина(Buyer) = 36;
	Если Не Доступно Тогда
		Зап.ЗаписатьКонецМассива();
		Результат = Зап.Закрыть();
		Возврат Результат 
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Продажи.Сигнатура КАК Сигнатура
	|ПОМЕСТИТЬ ВТ01_Продажи
	|ИЗ
	|	РегистрСведений.Продажи КАК Продажи
	|ГДЕ
	|	Продажи.Заказчик = &Buyer
	|	И Продажи.Документ = ""Реализация""
	|	И Продажи.Дата >= &Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Анкеты.СигнатураЗадачQ КАК СигнатураЗадачQ
	|ИЗ
	|	РегистрСведений.АнкетыРасширенные.СрезПоследних(
	|			,
	|			СигнатураЗадачQ В
	|				(ВЫБРАТЬ
	|					ВТ01.Сигнатура
	|				ИЗ
	|					ВТ01_Продажи КАК ВТ01)) КАК Анкеты";
	Запрос.УстановитьПараметр("Buyer", 	Buyer);
	Запрос.УстановитьПараметр("Период",	'20190101');
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Зап.ЗаписатьКонецМассива();
		Результат = Зап.Закрыть();
		Возврат Результат 
	КонецЕсли;
	
	СигнатураЗадачи = РезультатЗапроса.Выгрузить()[0][0];
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Анкеты.Период КАК Период,
	|	Анкеты.Телефон КАК Телефон,
	|	Анкеты.Вопрос.Наименование КАК Вопрос,
	|	Анкеты.Номер КАК ОтветНомер,
	|	Анкеты.Ответ.Наименование КАК Ответ,
	|	ВЫРАЗИТЬ(Анкеты.ОтветКомментарий.Наименование КАК СТРОКА(1024)) КАК ОтветКомментарий,
	|	Анкеты.СигнатураЗадачQ КАК СигнатураЗадачи
	|ИЗ
	|	РегистрСведений.АнкетыРасширенные.СрезПоследних(, СигнатураЗадачQ = &СигнатураЗадачи) КАК Анкеты";
	Запрос.УстановитьПараметр("СигнатураЗадачи", СигнатураЗадачи);
		
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Зап.ЗаписатьКонецМассива();
		Результат = Зап.Закрыть();
		Возврат Результат; 
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Зап.ЗаписатьНачалоОбъекта();
		Зап.ЗаписатьИмяСвойства("period"); 				Зап.ЗаписатьЗначение(Строка(Выборка.Период));
		Зап.ЗаписатьИмяСвойства("phone"); 				Зап.ЗаписатьЗначение(Выборка.Телефон);
		Зап.ЗаписатьИмяСвойства("question");			Зап.ЗаписатьЗначение(Выборка.Вопрос);	
		Зап.ЗаписатьИмяСвойства("answerNumber");		Зап.ЗаписатьЗначение(Выборка.ОтветНомер);
		Зап.ЗаписатьИмяСвойства("answer");				Зап.ЗаписатьЗначение(Выборка.Ответ);
		Зап.ЗаписатьИмяСвойства("answerComment");		Зап.ЗаписатьЗначение(СокрЛП(Выборка.ОтветКомментарий));
		Зап.ЗаписатьИмяСвойства("taskId");				Зап.ЗаписатьЗначение(Выборка.СигнатураЗадачи);
		Зап.ЗаписатьКонецОбъекта();
	КонецЦикла;
	
	Зап.ЗаписатьКонецМассива();
	Результат = Зап.Закрыть();
	Возврат Результат 

КонецФункции

Функция LoyalityQuestionnaire(DocId)
	//Возвращает анкету лояльности в виде массива структур
	
	Результат = "empty";
	
	Зап = Новый ЗаписьJSON();
	Зап.УстановитьСтроку();
	Зап.ЗаписатьНачалоМассива();
	
	Доступно = Истина;
	Доступно = Доступно И ТипЗнч(DocId)	 = Тип("Строка");
	Доступно = Доступно И СтрДлина(DocId)= 36;
	
	СигнатураЗадачи = "";
	
	//Случай 1: ищи задачу по машинозаезду
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Продажи.Сигнатура КАК Сигнатура
	|ИЗ
	|	РегистрСведений.Продажи КАК Продажи
	|ГДЕ
	|	Продажи.Машинозаезд = &DocId";
	Запрос.УстановитьПараметр("DocId", DocId);
	РезультатЗапроса = ОбщегоНазначения.ВыполнитьЗапрос(Запрос);
	Если Не РезультатЗапроса.Пустой() Тогда
		СигнатураЗадачи = РезультатЗапроса.Выгрузить()[0][0];
	КонецЕсли;
	
	//Случай 2: ищи задачу по НЭРеализация
	Если СигнатураЗадачи = "" Тогда
			Запрос = Новый Запрос();
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Анкета.СигнатураЗадачQ КАК СигнатураЗадачи
			|ИЗ
			|	РегистрСведений.АнкетыРасширенные.СрезПоследних(, СигнатураЗадачQ = &СигнатураЗадачи) КАК Анкета";
			Запрос.УстановитьПараметр("СигнатураЗадачи", "OU#"+DocId);
			РезультатЗапроса = Запрос.Выполнить();
			Если Не РезультатЗапроса.Пустой() Тогда
				СигнатураЗадачи = РезультатЗапроса.Выгрузить()[0][0];	
			КонецЕсли;
	КонецЕсли;
	
	//Задача не найдена, возврат
	Если СигнатураЗадачи = "" Тогда
		Зап.ЗаписатьКонецМассива();
		Результат = Зап.Закрыть();
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Анкеты.Период КАК Период,
	|	Анкеты.Телефон КАК Телефон,
	|	Анкеты.Вопрос.Наименование КАК Вопрос,
	|	Анкеты.Номер КАК ОтветНомер,
	|	Анкеты.Ответ.Наименование КАК Ответ,
	|	ВЫРАЗИТЬ(Анкеты.ОтветКомментарий.Наименование КАК СТРОКА(1024)) КАК ОтветКомментарий,
	|	Анкеты.СигнатураЗадачQ КАК СигнатураЗадачи
	|ИЗ
	|	РегистрСведений.АнкетыРасширенные.СрезПоследних(, СигнатураЗадачQ = &СигнатураЗадачи) КАК Анкеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Продажи КАК Продажи
	|		ПО Анкеты.СигнатураЗадачQ = Продажи.Сигнатура";
	Запрос.УстановитьПараметр("СигнатураЗадачи", 	СигнатураЗадачи);
	Запрос.УстановитьПараметр("Период", '20190701');
		
	РезультатЗапроса = ОбщегоНазначения.ВыполнитьЗапрос(Запрос);
	Если РезультатЗапроса.Пустой() Тогда
		Зап.ЗаписатьКонецМассива();
		Результат = Зап.Закрыть();
		Возврат Результат; 
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Зап.ЗаписатьНачалоОбъекта();
		Зап.ЗаписатьИмяСвойства("period"); 				Зап.ЗаписатьЗначение(Строка(Выборка.Период));
		Зап.ЗаписатьИмяСвойства("phone"); 				Зап.ЗаписатьЗначение(Выборка.Телефон);
		Зап.ЗаписатьИмяСвойства("question");			Зап.ЗаписатьЗначение(Выборка.Вопрос);	
		Зап.ЗаписатьИмяСвойства("answerNumber");		Зап.ЗаписатьЗначение(Выборка.ОтветНомер);
		Зап.ЗаписатьИмяСвойства("answer");				Зап.ЗаписатьЗначение(Выборка.Ответ);
		Зап.ЗаписатьИмяСвойства("answerComment");		Зап.ЗаписатьЗначение(СокрЛП(Выборка.ОтветКомментарий));
		Зап.ЗаписатьИмяСвойства("taskId");				Зап.ЗаписатьЗначение(Выборка.СигнатураЗадачи);
		Зап.ЗаписатьКонецОбъекта();
	КонецЦикла;
	
	Зап.ЗаписатьКонецМассива();
	Результат = Зап.Закрыть();
	Возврат Результат 
КонецФункции

Функция LastRepairLoyalityQuestionnaire(Buyer)
	//Возвращает анкету лояльности в виде массива структур
	
	Результат = "empty";
	
	Зап = Новый ЗаписьJSON();
	Зап.УстановитьСтроку();
	Зап.ЗаписатьНачалоМассива();
	
	Доступно = Истина;
	Доступно = Доступно И ТипЗнч(Buyer)	 = Тип("Строка");
	Доступно = Доступно И СтрДлина(Buyer)= 36;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КонтрагентыКлючи.ЗначениеКлюча КАК Контрагент
	|ИЗ
	|	Справочник.Контрагенты.КлючиВИсточникахДанных КАК КонтрагентыКлючи
	|ГДЕ
	|	КонтрагентыКлючи.Ссылка В
	|			(ВЫБРАТЬ
	|				КонтрагентыКлючиВИсточникахДанных.Ссылка КАК Ссылка
	|			ИЗ
	|				Справочник.Контрагенты.КлючиВИсточникахДанных КАК КонтрагентыКлючиВИсточникахДанных
	|			ГДЕ
	|				КонтрагентыКлючиВИсточникахДанных.ЗначениеКлюча = &ЗначениеКлюча)";
	Запрос.УстановитьПараметр("ЗначениеКлюча", Buyer);
	РезультатЗапроса = ОбщегоНазначения.ВыполнитьЗапрос(Запрос);
	Если РезультатЗапроса.Пустой() Тогда
		Зап.ЗаписатьКонецМассива();
		Результат = Зап.Закрыть();
		Возврат Результат;
	КонецЕсли;
	
	Покупатели = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку(0);
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Продажи.Сигнатура КАК Сигнатура
	|ПОМЕСТИТЬ ВТ01_Продажи
	|ИЗ
	|	РегистрСведений.Продажи КАК Продажи
	|ГДЕ
	|	Продажи.Заказчик В(&Покупатели)
	|	И Продажи.Документ <> ""Реализация""
	|	И Продажи.Дата >= &Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Анкеты.СигнатураЗадачQ КАК СигнатураЗадачQ
	|ИЗ
	|	РегистрСведений.АнкетыРасширенные.СрезПоследних(
	|			,
	|			СигнатураЗадачQ В
	|				(ВЫБРАТЬ
	|					ВТ01.Сигнатура
	|				ИЗ
	|					ВТ01_Продажи КАК ВТ01)) КАК Анкеты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Анкеты.Период УБЫВ";
	Запрос.УстановитьПараметр("Покупатели", 	Покупатели);
	Запрос.УстановитьПараметр("Период",			'20190701');
	
	РезультатЗапроса = ОбщегоНазначения.ВыполнитьЗапрос(Запрос);
	Если РезультатЗапроса.Пустой() Тогда
		Зап.ЗаписатьКонецМассива();
		Результат = Зап.Закрыть();
		Возврат Результат 
	КонецЕсли;
	
	СигнатураЗадачи = РезультатЗапроса.Выгрузить()[0][0];
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Анкеты.Период КАК Период,
	|	Анкеты.Телефон КАК Телефон,
	|	Анкеты.Вопрос.Наименование КАК Вопрос,
	|	Анкеты.Номер КАК ОтветНомер,
	|	Анкеты.Ответ.Наименование КАК Ответ,
	|	ВЫРАЗИТЬ(Анкеты.ОтветКомментарий.Наименование КАК СТРОКА(1024)) КАК ОтветКомментарий,
	|	Анкеты.СигнатураЗадачQ КАК СигнатураЗадачи,
	|	Продажи.Машинозаезд КАК Машинозаезд,
	|	Продажи.Номер КАК Номер
	|ИЗ
	|	РегистрСведений.АнкетыРасширенные.СрезПоследних(, СигнатураЗадачQ = &СигнатураЗадачи) КАК Анкеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Продажи КАК Продажи
	|		ПО Анкеты.СигнатураЗадачQ = Продажи.Сигнатура";
	Запрос.УстановитьПараметр("СигнатураЗадачи", СигнатураЗадачи);
		
	РезультатЗапроса = ОбщегоНазначения.ВыполнитьЗапрос(Запрос);
	Если РезультатЗапроса.Пустой() Тогда
		Зап.ЗаписатьКонецМассива();
		Результат = Зап.Закрыть();
		Возврат Результат; 
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Зап.ЗаписатьНачалоОбъекта();
		Зап.ЗаписатьИмяСвойства("period"); 				Зап.ЗаписатьЗначение(Строка(Выборка.Период));
		Зап.ЗаписатьИмяСвойства("phone"); 				Зап.ЗаписатьЗначение(Выборка.Телефон);
		Зап.ЗаписатьИмяСвойства("question");			Зап.ЗаписатьЗначение(Выборка.Вопрос);	
		Зап.ЗаписатьИмяСвойства("answerNumber");		Зап.ЗаписатьЗначение(Выборка.ОтветНомер);
		Зап.ЗаписатьИмяСвойства("answer");				Зап.ЗаписатьЗначение(Выборка.Ответ);
		Зап.ЗаписатьИмяСвойства("answerComment");		Зап.ЗаписатьЗначение(СокрЛП(Выборка.ОтветКомментарий));
		Зап.ЗаписатьИмяСвойства("taskId");				Зап.ЗаписатьЗначение(Выборка.СигнатураЗадачи);
		
		Зап.ЗаписатьИмяСвойства("docId");	
		Если ЗначениеЗаполнено(Выборка.Машинозаезд) Тогда
			Зап.ЗаписатьЗначение(Выборка.Машинозаезд);
		Иначе
			Зап.ЗаписатьЗначение("");
		КонецЕсли;
		
		Зап.ЗаписатьИмяСвойства("docNumber");	
		Если ЗначениеЗаполнено(Выборка.Машинозаезд) Тогда
			Зап.ЗаписатьЗначение("");
		Иначе
			Зап.ЗаписатьЗначение(Выборка.Номер);
		КонецЕсли;		
		Зап.ЗаписатьКонецОбъекта();
	КонецЦикла;
	
	Зап.ЗаписатьКонецМассива();
	Результат = Зап.Закрыть();
	Возврат Результат 

КонецФункции

Функция CallsByLoyalityTask(taskId)
	//Возвращает звонки по последней задачи лояльности продаж, закрытой не  вручную
	//Входные параметры:
	//	taskId (строка) - сигнатура задачи
	
	Результат = "empty";
	
	Зап = Новый ЗаписьJSON();
	Зап.УстановитьСтроку();
	Зап.ЗаписатьНачалоМассива();

	Доступно = Истина;
	Доступно = Доступно И ТипЗнч(taskId) = Тип("Строка");
	Доступно = Доступно И СтрДлина(taskId)=39;
	Если Не Доступно Тогда
		Зап.ЗаписатьКонецМассива();
		Результат = Зап.Закрыть();
		Возврат Результат;
	КонецЕсли;
	
	Основание = ?(Лев(taskId,2)="OU", "pr_", "zn_")+ taskId;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗвонкиСтатОбщая.Сигнатура КАК Сигнатура,
	|	Звонки.Дата КАК Период
	|ИЗ
	|	РегистрСведений.ЗвонкиСтатОбщая КАК ЗвонкиСтатОбщая
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Звонки КАК Звонки
	|		ПО ЗвонкиСтатОбщая.Сигнатура = Звонки.Сигнатура
	|ГДЕ
	|	ЗвонкиСтатОбщая.Основание = &Основание";
	Запрос.УстановитьПараметр("Основание", Основание);
	РезультатЗапроса = ОбщегоНазначения.ВыполнитьЗапрос(Запрос);
	Если РезультатЗапроса.Пустой() Тогда
		Зап.ЗаписатьКонецМассива();
		Результат = Зап.Закрыть();
		Возврат Результат;
	КонецЕсли;
	
	Зап = Новый ЗаписьJSON();
	Зап.УстановитьСтроку();
	Зап.ЗаписатьНачалоМассива();

	Выборка = РезультатЗапроса.Выбрать();	
	Пока Выборка.Следующий() Цикл
		Зап.ЗаписатьНачалоОбъекта();
		Зап.ЗаписатьИмяСвойства("call"); 	Зап.ЗаписатьЗначение(Выборка.Сигнатура);
		Зап.ЗаписатьИмяСвойства("period"); 	Зап.ЗаписатьЗначение(Строка(Выборка.Период));
		Зап.ЗаписатьКонецОбъекта();
	КонецЦикла;
	
	Зап.ЗаписатьКонецМассива();
	Результат = Зап.Закрыть();
	Возврат Результат;
КонецФункции

Функция LoyalityDetailReport(Start, End, PeriodType, ReportType)
	//Возвращает массив структур
	//Параметры:
	//	Start 		(дата)  - дата начала отчета;
	//	End	  		(дата)  - дата окончания отчета;
	//	PeriodType 	(число) - тип периода отчета. 0 - период дат анкет 
	
	Перем Результат;
	Результат = "empty";
	
	Зап = Новый ЗаписьJSON();
	Зап.УстановитьСтроку();
	Зап.ЗаписатьНачалоМассива();

	Доступно = Истина;
	Доступно = Доступно И ТипЗнч(Start) 	 = Тип("Дата");
	Доступно = Доступно И ТипЗнч(End)		 = Тип("Дата");
	Доступно = Доступно И ТипЗнч(PeriodType) = Тип("Число");
	Доступно = Доступно И ЗначениеЗаполнено(End);
	Доступно = Доступно И End > Start;
	Если Не Доступно Тогда
		Зап.ЗаписатьКонецМассива();
		Результат = Зап.Закрыть();
		Возврат Результат 
	КонецЕсли;
	
	РезультатЗапроса = ОбработкаОтчетов.ЗапросЛояльностиДетальный(Start, End, PeriodType);
	Если РезультатЗапроса.Пустой() Тогда
		Зап.ЗаписатьКонецМассива();
		Результат = Зап.Закрыть();
		Возврат Результат 
	КонецЕсли;

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Зап.ЗаписатьНачалоОбъекта();
		Зап.ЗаписатьИмяСвойства("buyer");				Зап.ЗаписатьЗначение(Выборка.Покупатель);	
		Зап.ЗаписатьИмяСвойства("taskId");				Зап.ЗаписатьЗначение(Выборка.СигнатураЗадачи);
		Зап.ЗаписатьИмяСвойства("question");			Зап.ЗаписатьЗначение(Выборка.Вопрос);	
		Зап.ЗаписатьИмяСвойства("answerNumber");		Зап.ЗаписатьЗначение(Выборка.ОтветНомер);
		Зап.ЗаписатьИмяСвойства("answer");				Зап.ЗаписатьЗначение(Выборка.Ответ);
		Зап.ЗаписатьИмяСвойства("answerComment");		Зап.ЗаписатьЗначение(СокрЛП(Выборка.ОтветКомментарий));
		Зап.ЗаписатьКонецОбъекта();
	КонецЦикла;
	
	Зап.ЗаписатьКонецМассива();
	Результат = Зап.Закрыть();
	Возврат Результат 
КонецФункции

Функция OpenedSeviceDocAdd(Doc, Place, Vehicle, ClientPhone, OperatorPhone)
	//Добавляет открытый машинозаезд для прямого звонка
	//Входящие параметры:
	//  Doc 		(строка) - ГУИД машинозаезда
	//	Place		(строка) - точка оформления машинозаезда
	// 	Vehicle 	(строка) - автомобиль
	//  Client 		(строка) - телефон клиента
	//	Operator    (строка) - телефон оператора
	
	
	Доступно = Истина;
	Доступно = Доступно И ТипЗнч(Doc)			= Тип("Строка");
	Доступно = Доступно И ТипЗнч(Place)			= Тип("Строка");
	Доступно = Доступно И ТипЗнч(Vehicle)		= Тип("Строка");
	Доступно = Доступно И ТипЗнч(ClientPhone)	= Тип("Строка");
	Доступно = Доступно И ТипЗнч(OperatorPhone)	= Тип("Строка");
	
	Если Не Доступно Тогда
		Возврат "error";
	КонецЕсли;

	Зап = РегистрыСведений.ЗвонкиОжидаемые.СоздатьМенеджерЗаписи();
	Зап.Документ = Doc;
	Зап.Прочитать();
	Если Зап.Выбран() Тогда
		Возврат "";
	КонецЕсли;
	
	Зап.Документ 		= Doc;
	Зап.ТочкаОформления = Place;
	Зап.Автомобиль		= Vehicle;
	Зап.КлиентТелефон	= ClientPhone;
	Зап.ОператорТелефон	= OperatorPhone;
	Зап.ТипДокумента	= 0;
	Попытка
		Зап.Записать();
		ЗаписьЖурналаРегистрации("OpenedSeviceDocAdd", УровеньЖурналаРегистрации.Ошибка, Метаданные.WebСервисы.ОбщегоНазначения.Операции.OpenedSeviceDocAdd, СтрШаблон( "Doc = %1; Place = %2; Vehicle = %3; ClientPhone = %4, OperatorPhone = %5", Doc, Place, Vehicle, ClientPhone, OperatorPhone), ОписаниеОшибки());
	Исключение
		Возврат "error";
	КонецПопытки;
	Возврат "";
КонецФункции

Функция OpenedServiceDocDelete(Doc)
	//Помечает на удаление машинозаезд, ожидающий входящего звонка клиента
	//Входящие параметры:
	//	Doc (строка) - ГУИД машинозаезда
	
	Доступно = Истина;
	Доступно = Доступно И ТипЗнч(Doc)	= Тип("Строка");
	
	Если Не Доступно Тогда
		Возврат "error";
	КонецЕсли;
	
	Зап = РегистрыСведений.ЗвонкиОжидаемые.СоздатьМенеджерЗаписи();
	Зап.Документ = Doc;
	Зап.Прочитать();
	Если Не Зап.Выбран() Тогда
		Возврат "";
	КонецЕсли;
	
	Зап.Документ = Doc;
	Попытка
		Зап.Удалить();
		ЗаписьЖурналаРегистрации("OpenedSeviceDocDelete", УровеньЖурналаРегистрации.Ошибка, Метаданные.WebСервисы.ОбщегоНазначения.Операции.OpenedServiceDocDelete, СтрШаблон("Doc = %1",  Doc), ОписаниеОшибки());
	Исключение
		Возврат "error";
	КонецПопытки;
	Возврат "";
КонецФункции

Функция JivositeEvent(event)
	
	ЗаписьЖурналаРегистрации("JivositeEvent", УровеньЖурналаРегистрации.Ошибка,, "event = "+event);
	Возврат ВэбСервисы.JivositeEvent(event);
КонецФункции

Функция CallsByCause(CauseId)
	//Возвращает звонки по последней задачи лояльности продаж, закрытой не  вручную
	//Входные параметры:
	//	taskId (строка) - сигнатура задачи
	
	Результат = "[]";
	
	Зап = Новый ЗаписьJSON();
	Зап.УстановитьСтроку();
	Зап.ЗаписатьНачалоМассива();

	Доступно = Истина;
	Доступно = Доступно И ТипЗнч(CauseId) = Тип("Строка");
	Доступно = Доступно И СтрДлина(CauseId)>0;
	Если Не Доступно Тогда
		Зап.ЗаписатьКонецМассива();
		Результат = Зап.Закрыть();
		Возврат Результат;
	КонецЕсли;
	
	Основание = Сред(CauseId, 4, 36);
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗвонкиСтатОбщая.Сигнатура КАК Сигнатура,
	|	Звонки.Дата КАК Период,
	|	Звонки.ЭтоВходящий КАК ЭтоВходящий,
	|	Звонки.АбонентВнешний КАК АбонентВнешний,
	|	Звонки.АбонентВнутренний.Код КАК АбонентВнутренний
	|ИЗ
	|	РегистрСведений.ЗвонкиСтатОбщая КАК ЗвонкиСтатОбщая
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Звонки КАК Звонки
	|		ПО ЗвонкиСтатОбщая.Сигнатура = Звонки.Сигнатура
	|ГДЕ
	|	ЗвонкиСтатОбщая.Основание = &Основание";
	Запрос.УстановитьПараметр("Основание", Основание);
	РезультатЗапроса = ОбщегоНазначения.ВыполнитьЗапрос(Запрос);
	Если РезультатЗапроса.Пустой() Тогда
		Зап.ЗаписатьКонецМассива();
		Результат = Зап.Закрыть();
		Возврат Результат;
	КонецЕсли;
	
	Зап = Новый ЗаписьJSON();
	Зап.УстановитьСтроку();
	Зап.ЗаписатьНачалоМассива();

	Выборка = РезультатЗапроса.Выбрать();	
	Пока Выборка.Следующий() Цикл
		Зап.ЗаписатьНачалоОбъекта();
		Зап.ЗаписатьИмяСвойства("call"); 		Зап.ЗаписатьЗначение(Выборка.Сигнатура);
		Зап.ЗаписатьИмяСвойства("period"); 		Зап.ЗаписатьЗначение(Строка(Выборка.Период));
		Зап.ЗаписатьИмяСвойства("in");	 		Зап.ЗаписатьЗначение(Выборка.ЭтоВходящй);
		Зап.ЗаписатьИмяСвойства("client");		Зап.ЗаписатьЗначение(Выборка.АбонентВнешний);
		Зап.ЗаписатьИмяСвойства("operator");	Зап.ЗаписатьЗначение(Выборка.АбонентВнешний);
		Зап.ЗаписатьКонецОбъекта();
	КонецЦикла;
	
	Зап.ЗаписатьКонецМассива();
	Результат = Зап.Закрыть();
	Возврат Результат;

КонецФункции

Функция TMC1Report(Start, End)
	//Возвращает массив, он либо пустой, либо содержит одну строку - объект, содержащий таблицу значений
	//Параметры:
	//	Start 		(дата)  - дата начала отчета;
	//	End	  		(дата)  - дата окончания отчета;
	
	Перем Результат;
	Результат = "empty";
	
	Зап = Новый ЗаписьJSON();
	Зап.УстановитьСтроку();
	Зап.ЗаписатьНачалоМассива();

	Доступно = Истина;
	Доступно = Доступно И ТипЗнч(Start) 	 = Тип("Дата");
	Доступно = Доступно И ТипЗнч(End)		 = Тип("Дата");
	Доступно = Доступно И ЗначениеЗаполнено(End);
	Доступно = Доступно И End > Start;
	Если Не Доступно Тогда
		Зап.ЗаписатьКонецМассива();
		Результат = Зап.Закрыть();
		Возврат Результат 
	КонецЕсли;
	
	РезультатЗапроса = ОбработкаОтчетов.ТМЦ1Отчет(Start, End);
	Если РезультатЗапроса.Пустой() Тогда
		Зап.ЗаписатьКонецМассива();
		Результат = Зап.Закрыть();
		Возврат Результат 
	КонецЕсли;
	
	ТЗ = РезультатЗапроса.Выгрузить();
	Зап.ЗаписатьНачалоОбъекта();
	Зап.ЗаписатьИмяСвойства("table");Зап.ЗаписатьЗначение(ЗначениеВСтрокуВнутр(ТЗ));	
	Зап.ЗаписатьКонецОбъекта();
	
	Зап.ЗаписатьКонецМассива();
	Результат = Зап.Закрыть();
	Возврат Результат 
КонецФункции

Функция LeadGenic(prop)
	ЗаписьЖурналаРегистрации("LeadGenic", УровеньЖурналаРегистрации.Ошибка,, СтрШаблон("prop = %1", prop));
	Возврат ВэбСервисы.LeadGenic(prop);
КонецФункции

Функция Anketa(linkedId)
	ЗаписьЖурналаРегистрации("Anketa", УровеньЖурналаРегистрации.Ошибка,, СтрШаблон("linkedId = %1", linkedId));
	Возврат ВэбСервисы.Anketa(linkedId);
 КонецФункции

 Функция CallbackWebForm(linkedId)
	ЗаписьЖурналаРегистрации("CallbackWebForm", УровеньЖурналаРегистрации.Ошибка,, СтрШаблон("linkedId = %1", linkedId));
	Возврат ВэбСервисы.CallbackWebForm(linkedId);
 КонецФункции



