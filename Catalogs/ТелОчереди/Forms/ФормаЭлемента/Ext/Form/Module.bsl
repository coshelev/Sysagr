&НаСервере
Процедура ПриСозданииНаСервере(Отказ,СтандартнаяОбработка)
		
// Заполним список выбора для элемента "Сервер"
//-------------------------------------------------------------------------------------------------
	Выборка = Справочники.ТелСерверы.Выбрать();
	Элементы.Сервер.СписокВыбора.Очистить();

	Пока (Выборка.Следующий()) Цикл
		Если (ЗначениеЗаполнено(Выборка.ИсточникДанных)) Тогда
			Элементы.Сервер.СписокВыбора.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;

// Сформируем информацию о целевой точке, в которую входит Очередь
//-------------------------------------------------------------------------------------------------
	ЭтаФорма.ТочкаЦелевая = Справочники.ТочкиЦелевые.НайтиПоРеквизиту("Очередь",Объект.Ссылка);
	Элементы.НадписьТочкаЦелевая.Видимость = Ложь;

	Если (ЗначениеЗаполнено(ЭтаФорма.ТочкаЦелевая)) Тогда
		Элементы.НадписьТочкаЦелевая.Заголовок = "Целевая точка: " + СокрЛП(ЭтаФорма.ТочкаЦелевая);
		Элементы.НадписьТочкаЦелевая.Видимость = Истина;
	КонецЕсли;

// Сформируем информацию о владельце
//-------------------------------------------------------------------------------------------------
	ВладСсылка = Телефония.ВладелецПолучить(Объект.Ссылка);
	Элементы.НадписьВладелец.Видимость = Ложь;

	Если (ЗначениеЗаполнено(ВладСсылка)) Тогда
		Темп = СокрЛП(ВладСсылка.ТочкаРазмещения);
		Темп = Темп + ", " + СокрЛП(ВладСсылка.Наименование);
		Элементы.НадписьВладелец.Заголовок = СокрЛП(Темп);
		Элементы.НадписьВладелец.Видимость = Истина;
	КонецЕсли;

	//Если ВнешниеИсточникиДанных.AsteriskNnov.ПолучитьСостояние()=СостояниеВнешнегоИсточникаДанных.Подключен Тогда
		СерверПриИзмененииНаСервере();
		АгентыСформироватьНаСервере();
		ДанныеСервераСформировать();
		РежимСформировать();
	//КонецЕсли;
	
	//Покажи сроки обработки звонка в ОУ
	//--------------------------------------
	Зап = ВнешниеИсточникиДанных.AsteriskNnov.Таблицы.ОчередиЛогические.НайтиПоПолю("Телефон", Объект.Код); 
	Если ЗначениеЗаполнено(Зап) Тогда
		ЛогическаяОчередь_СрокОбработки = Зап.СрокОбработки;	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновлениеОтображения();
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеОтображения(Элемент = Неопределено)

// Доступность поля "Наименование"
//-------------------------------------------------------------------------------------------------
	Доступно = ЗначениеЗаполнено(Объект.Сервер);
	Элементы.Наименование.ТолькоПросмотр = (НЕ Доступно);

// Доступность элементов группы "ГруппаАгенты"
//-------------------------------------------------------------------------------------------------
	Доступно = ЗначениеЗаполнено(Объект.Ссылка);
	Элементы.ГруппаАгенты.ТолькоПросмотр = (НЕ Доступно);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись",Объект.Ссылка,ЭтаФорма);
	ПриСозданииНаСервере(Ложь,Истина);
	ПриОткрытии(Ложь);
КонецПроцедуры

//-------------------------------------------------------------------------------------------------

&НаКлиенте
Процедура СерверПриИзменении(Элемент)
	СерверПриИзмененииНаСервере();
	ОбновлениеОтображения();
КонецПроцедуры

&НаСервере
Процедура СерверПриИзмененииНаСервере()

// Заполним список выбора для элемента "Наименование"
// Поместим в него системные очереди выбранного Сервера (только те, которых нет в справочнике)
//-------------------------------------------------------------------------------------------------
	Доступно = ЗначениеЗаполнено(Объект.Сервер);
	Доступно = Доступно И ЗначениеЗаполнено(Объект.Сервер.ИсточникДанных);
	Элементы.Наименование.СписокВыбора.Очистить();

	Если (Доступно = Истина) Тогда
		ТекстЗапроса = "
		|SELECT	DISTINCT Name
		|FROM	ВнешнийИсточникДанных." + СокрЛП(Объект.Сервер.ИсточникДанных) + ".Таблица.Очереди
		|ORDER	BY Name";

		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Попытка 
			Результат = Запрос.Выполнить().Выбрать();
		Исключение
			Комментарий = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("СерверПриИзмененииНаСервере", УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.ТелОчереди, , Комментарий);
			Возврат;
		КонецПопытки;

		Пока (Результат.Следующий()) Цикл
			ИмяОчереди = ВРег(СокрЛП(Результат.Name));
			СпрСсылка = Справочники.ТелОчереди.НайтиПоНаименованию(ИмяОчереди);

			Если (НЕ ЗначениеЗаполнено(СпрСсылка)) Тогда
				Элементы.Наименование.СписокВыбора.Добавить(ИмяОчереди);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДанныеСервераСформировать()

// Инициализация элементов
//-------------------------------------------------------------------------------------------------
	Элементы.НадписьОчереди.Заголовок = "Отсутствует в очередях";
	Элементы.НадписьОчереди.ЦветТекста = Новый Цвет(255,0,0);
	Элементы.НадписьОчереди.Гиперссылка = Ложь;

// Получим список системных очередей, в которых зарегистрирован данный телефон в качестве агента
//-------------------------------------------------------------------------------------------------
	МассивОчередей = ОчередиАгенты.ОчередиПолучитьПоАгенту(Объект.Наименование);

	Если (ТипЗнч(МассивОчередей) = Тип("Массив")) Тогда
		Темп = "Агент очередей (" + СокрЛП(МассивОчередей.Количество()) + ")";
		Элементы.НадписьОчереди.ЦветТекста = Новый Цвет(0,128,0);
		Элементы.НадписьОчереди.Заголовок = СокрЛП(Темп);
		Элементы.НадписьОчереди.Гиперссылка = Истина;
	КонецЕсли;
КонецПроцедуры

//-------------------------------------------------------------------------------------------------

&НаСервере
Процедура РежимСформировать()

// Сформируем информацию о текущем режиме работы очереди
//-------------------------------------------------------------------------------------------------
	Доступно = ЗначениеЗаполнено(Объект.Сервер);
	Доступно = Доступно И ЗначениеЗаполнено(Объект.Наименование);
	Элементы.НадписьРежим.Видимость = Ложь;
	Элементы.РежимРаботы.Видимость = Ложь;

	Если (Доступно = Ложь) Тогда
		Возврат;
	КонецЕсли;

// Получим ссылку на объект очереди на сервере телефонии
//-------------------------------------------------------------------------------------------------
	СпрСсылка = ОчередиАгенты.ОчередьПолучить(Объект.Наименование);
	Элементы.НадписьРежим.Видимость = Истина;

	Если (НЕ ЗначениеЗаполнено(СпрСсылка)) Тогда
		Элементы.НадписьРежим.Заголовок = "Не удалось получить очередь на сервере Asterisk";
		Элементы.НадписьРежим.ЦветТекста = Новый Цвет(255,0,0);
		Возврат;
	КонецЕсли;

// Объект очереди получен
//-------------------------------------------------------------------------------------------------
	ЭтаФорма.РежимРаботы = ?(СпрСсылка.TimeOut >= 25,Ложь,Истина);
	Темп = "Текущий режим работы - " + ?(ЭтаФорма.РежимРаботы,"локальные вызовы","конвергентный");
	Темп = Темп + ", таймаут: " + СокрЛП(Строка(СпрСсылка.TimeOut)) + " сек.";
	Элементы.НадписьРежим.ЦветТекста = Новый Цвет(0,128,0);
	Элементы.НадписьРежим.Заголовок = СокрЛП(Темп);
	Элементы.РежимРаботы.Видимость = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РежимРаботыПриИзменении(Элемент)

// Подтверждение пользователя
//-------------------------------------------------------------------------------------------------
	ТекстСообщения = "Вы действительно желаете изменить режим работы очереди и установить режим [";
	ТекстСообщения = ТекстСообщения + ?(ЭтаФорма.РежимРаботы,"Локальный","Конвергентный") + "] ?";

	Если (Вопрос(ТекстСообщения,РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да) Тогда
		Результат = ОчередиАгенты.ОчередьУстановитьРежим(Объект.Ссылка,ЭтаФорма.РежимРаботы);
		АгентыСформировать();
		РежимСформировать();

		Если (ЗначениеЗаполнено(Результат)) Тогда
			Предупреждение(Результат);
		Иначе
			ТекстСообщения = "Переключение режимов выполнено успешно, однако сведения о новом режиме
			|могут отображаться некорректно сразу после переключения. Это связано с задержкой
			|обновления кешированных данных. Закройте форму и откройте ее через 5-10 секунд";
			Сообщить(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//-------------------------------------------------------------------------------------------------

&НаКлиенте
Процедура ПаузаПереключить(Команда)

// Проверим заполненность необходимых параметров
//-------------------------------------------------------------------------------------------------
	ТекДанные = Элементы.Агенты.ТекущиеДанные;
	Доступно = ЗначениеЗаполнено(ТекДанные <> Неопределено);
	Доступно = Доступно И ЗначениеЗаполнено(ТекДанные.Ссылка);

// Получим с сервера текущее состояние агента
//-------------------------------------------------------------------------------------------------
	Если (Доступно = Истина) Тогда
		НовСостояние = (НЕ ТекДанные.Пауза);
		
		//<Кошелев_09022017_11-09; =>; Агент может входить в несколько очередей>
		//Результат = ОчередиАгенты.АгентПаузаИзменить(Объект.Ссылка,ТекДанные.Ссылка,НовСостояние);
		//=>
		Если НовСостояние = Истина Тогда // пауза
			Результат = ОчередиАгенты.АгентДеактивироватьВоВсехОчередях(ТекДанные.Ссылка);	
		Иначе
			Результат = ОчередиАгенты.АгентАктивироватьВоВсехОчередях(ТекДанные.Ссылка);
		КонецЕсли;
		//<Кошелев_09022017_11-09>

		Если (ЗначениеЗаполнено(Результат)) Тогда
			Предупреждение(Результат);
		КонецЕсли;

// Обновим информацию о состоянии агента
//-------------------------------------------------------------------------------------------------
		ТекСостояние = ОчередиАгенты.АгентПаузаПолучить(Объект.Ссылка,ТекДанные.Ссылка);
		ТекДанные.Пауза = ?(ТекСостояние = Неопределено,ТекДанные.Пауза,ТекСостояние);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НадписьОчередиНажатие(Элемент)

// Получим список системных очередей, в которых зарегистрирован данный телефон в качестве агента
//-------------------------------------------------------------------------------------------------
	МассивОчередей = ОчередиАгенты.ОчередиПолучитьПоАгенту(Объект.Код);

	Если (ТипЗнч(МассивОчередей) = Тип("Массив")) Тогда
		Форма = ПолучитьФорму("Справочник.ТелОчереди.ФормаСписка",,,Истина,ВариантОткрытияОкна.ОтдельноеОкно);

		ЭлементОтбора = Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.РежимОтображения	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Ссылка");
		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбора.ПравоеЗначение	= МассивОчередей;
		ЭлементОтбора.Использование		= Истина;
		Форма.Открыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НадписьВладелецНажатие(Элемент)
	Попытка
		ВладСсылка = Телефония.ВладелецПолучить(Объект.Ссылка);
		ОткрытьЗначение(ВладСсылка);
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура НадписьТочкаЦелеваяНажатие(Элемент)
	Попытка
		ОткрытьЗначение(ЭтаФорма.ТочкаЦелевая);
	Исключение
	КонецПопытки;
КонецПроцедуры

//-------------------------------------------------------------------------------------------------

//<Кошелев_10022017_15-16; +; если у телефона задана основная очередь, тогда скопируй из нее режим Пауза в новую>
&НаСервереБезКонтекста
Функция ЕстьАгентВПаузе(ТелВнутренний)
	// Функция возвращает состояние паузы для телефона, если он состоит в какой-либо очереди
	//если не состоит ни в одной очереди 
	ЗначениеПоУмолчанию = Ложь;
	МассивОчередей = ОчередиАгенты.ОчередиПолучитьПоАгенту(ТелВнутренний);
	Если МассивОчередей = Неопределено Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	Если МассивОчередей.Количество() = 0 Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	ЛюбаяОчередь = МассивОчередей[0];
	Результат = ОчередиАгенты.АгентПаузаПолучить(ЛюбаяОчередь, ТелВнутренний); //Если Истина, тогда пауза установлена 
	Возврат Результат;
КонецФункции //</Кошелев_10022017_15-16>

&НаКлиенте
Процедура АгентыДобавитьТелефон(Команда)

// Откроем форму для выбора внутреннего телефона
//-------------------------------------------------------------------------------------------------
	АгентСсылка = ОткрытьФормуМодально("Справочник.ТелВнутренние.ФормаВыбора");

	Если (АгентСсылка <> Неопределено) Тогда
		//<Кошелев_10022017_15-16; =>; если у телефона задана основная очередь, тогда скопируй из нее режим Пауза в новую>
		//Результат = ОчередиАгенты.АгентДобавить(Объект.Ссылка,АгентСсылка,Ложь);
		//=>
		Активность 	= Не ЕстьАгентВПаузе(АгентСсылка);
		Результат 	= ОчередиАгенты.АгентДобавить(Объект.Ссылка,АгентСсылка,Активность, РежимРаботы);
		//</Кошелев_10022017_15-16>
		АгентыСформировать();

		Если (ЗначениеЗаполнено(Результат)) Тогда
			Предупреждение(Результат);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АгентыДобавитьОчередь(Команда)

// Откроем форму для выбора системной очереди
// Покажем в списке выбора только очереди, у которых сервер совпадает с сервером текущего объекта
//-------------------------------------------------------------------------------------------------
	Форма = ПолучитьФорму("Справочник.ТелОчереди.ФормаВыбора");

	ЭлементОтбора = Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.РежимОтображения	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Сервер");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Объект.Сервер;
	ЭлементОтбора.Использование		= Истина;
	АгентСсылка = Форма.ОткрытьМодально();

	Если (АгентСсылка <> Неопределено) Тогда
		Результат = ОчередиАгенты.АгентДобавить(Объект.Ссылка,АгентСсылка,Истина);
		АгентыСформировать();

		Если (ЗначениеЗаполнено(Результат)) Тогда
			Предупреждение(Результат);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АгентыПередУдалением(Элемент,Отказ)

// Проверим заполненность необходимых параметров
//-------------------------------------------------------------------------------------------------
	Доступно = ЗначениеЗаполнено(Элемент.ТекущиеДанные <> Неопределено);
	Доступно = Доступно И ЗначениеЗаполнено(Элемент.ТекущиеДанные.Ссылка);
	Отказ = Истина;

// Удалим текущего выбранного Агента
//-------------------------------------------------------------------------------------------------
	Если (Доступно = Истина) Тогда
		ТекстСообщения = "Вы действительно желаете удалить из очереди агента """;
		ТекстСообщения = ТекстСообщения + СокрЛП(Элемент.ТекущиеДанные.Ссылка) + """ ?";

		Если (Вопрос(ТекстСообщения,РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да) Тогда
			Результат = ОчередиАгенты.АгентУдалить(Объект.Ссылка,Элемент.ТекущиеДанные.Ссылка);
			Отказ = ?(ЗначениеЗаполнено(Результат),Отказ,Ложь);

			Если (ЗначениеЗаполнено(Результат)) Тогда
				Предупреждение(Результат);
				АгентыСформировать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АгентыСформировать(Элемент = Неопределено)
	АгентыСформироватьНаСервере();
	ОбновлениеОтображения();
КонецПроцедуры

&НаСервере
Процедура АгентыСформироватьНаСервере()

// Проверим заполненность реквизитов
//-------------------------------------------------------------------------------------------------
	Доступно = ЗначениеЗаполнено(Объект.Сервер);
	Доступно = Доступно И ЗначениеЗаполнено(Объект.Наименование);
	ЭтаФорма.Агенты.Очистить();

	Если (Доступно = Ложь) Тогда
		Возврат;
	КонецЕсли;

// Получим список Агентов текущей выбранной Очереди
//-------------------------------------------------------------------------------------------------
	ТекстЗапроса = "
	|SELECT	MemberName AS Агент,ISNULL(Paused,0) AS Пауза,Interface AS Интерфейс, state_interface as state_interface
	|FROM	ВнешнийИсточникДанных." + СокрЛП(Объект.Сервер.ИсточникДанных) + ".Таблица.Агенты
	|WHERE	(queue_name = &Очередь)
	|ORDER	BY MemberName";

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Очередь",ВРег(СокрЛП(Объект.Наименование)));
	Попытка 
		Результат = Запрос.Выполнить().Выбрать();
	Исключение
		Комментарий = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("АгентыСформироватьНаСервере", УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.ТелОчереди,,Комментарий);
		Возврат;
	КонецПопытки;

	Пока (Результат.Следующий()) Цикл
		АгентСсылка = Конвертация.ТелПолучитьСсылку(Результат.Агент);
		ВладелецСсылка = Телефония.ВладелецПолучить(АгентСсылка);

		НовСтрока = ЭтаФорма.Агенты.Добавить();
		НовСтрока.Пауза = ?(Результат.Пауза = 0,Ложь,Истина);
		НовСтрока.Интерфейс = СокрЛП(Результат.Интерфейс);
		НовСтрока.Владелец = ВладелецСсылка;
		НовСтрока.Ссылка = АгентСсылка;
		НовСтрока.ЭтоТелефон = ?(ТипЗнч(АгентСсылка) = Тип("СправочникСсылка.ТелВнутренние"),1,0);
		НовСтрока.state_interface = СокрЛП(Результат.state_interface);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ttl_procПриИзменении_НаСервере()
	Результат = "ошибка";
	Зап = ВнешниеИсточникиДанных.AsteriskNnov.Таблицы.ОчередиЛогические.НайтиПоПолю("Телефон", Объект.Код); 
	Если Не ЗначениеЗаполнено(Зап) Тогда
		Возврат Результат;
	КонецЕсли;
	ЗапОб = Зап.ПолучитьОбъект();
	ЗапОб.СрокОбработки = ЛогическаяОчередь_СрокОбработки;
	Попытка
		ЗапОб.Записать();
		Возврат "";
	Исключение
		Данные = "ЛогическаяОчередь_СрокОбработки = "+ЛогическаяОчередь_СрокОбработки+"; Очередь =" + Объект.Ссылка;
		Комментарий = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("Запись ОчередьЛогическая.СрокОбработки", УровеньЖурналаРегистрации.Ошибка, Метаданные.ВнешниеИсточникиДанных.AsteriskNnov.Таблицы.ОчередиЛогические, Данные, Комментарий);
		Возврат "ошибка";
	КонецПопытки;
КонецФункции

&НаКлиенте
Процедура ttl_procПриИзменении(Элемент)
	 Рез = ttl_procПриИзменении_НаСервере();
	 Если Рез = "ошибка" Тогда
		 ПоказатьПредупреждение(, "Ошибка", 3);
	 КонецЕсли;
КонецПроцедуры


