&НаСервере
Перем ДанныеРасшифровки;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Отображение признака целевой очереди ОУ
	//----------------------------------------
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОчередиЛогические.Наименование КАК Наименование
	|ИЗ
	|	ВнешнийИсточникДанных.AsteriskNnov.Таблица.ОчередиЛогические КАК ОчередиЛогические
	|ГДЕ
	|	ОчередиЛогические.КодПроекта ПОДОБНО &КодПроекта";
	Запрос.УстановитьПараметр("КодПроекта", "P:MTX%");
	РезультатЗапроса = Запрос.Выполнить();
	тз = РезультатЗапроса.Выгрузить();
	мас = тз.ВыгрузитьКолонку(0);
	Сп = Новый СписокЗначений();
	Сп.ЗагрузитьЗначения(мас);
	Список.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Целевые", Сп);
		
	//Отбор по переданному списку очередей
	//---------------------------------------
	Если ЗначениеЗаполнено(Параметры.СписокОчередей) Тогда
		ЭлОтбора = Список.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));	
		ЭлОтбора.ЛевоеЗначение 	=	Новый ПолеКомпоновкиДанных("Ссылка");
		ЭлОтбора.ВидСравнения	=	ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлОтбора.ПравоеЗначение =	ЭтаФорма.Параметры.СписокОчередей;
		ЭлОтбора.Использование 	= 	Истина;
	КонецЕсли;
	
	СформироватьОтчет();	
			
КонецПроцедуры

&НаСервере
Процедура СформироватьОтчет()
	СКД = ПолучитьОбщийМакет("Справочник_ТелОчереди_Список");	
	Настройки = СКД.НастройкиПоУмолчанию;

	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, Настройки, ДанныеРасшифровки);
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных();
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,  ,ДанныеРасшифровки);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент();
	ПроцессорВывода.УстановитьДокумент(ЭтаФорма.Результат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Зап = Новый ЗаписьXML();
    Зап.УстановитьСтроку();
    СериализаторXDTO .ЗаписатьXML(Зап, ДанныеРасшифровки);
  	СтрокаXML = Зап.Закрыть();    
	СериализованныеДанныеРасшифровки = СтрокаXML;
	
КонецПроцедуры

#Область Расшифровка

&НаСервере
Процедура ПриЗакрытииФормыТелОчереди() Экспорт
	СформироватьОтчет();	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	СтандартнаяОбработка = Ложь;
		
	рез = РезультатОбработкаРасшифровкиНаСервере(Расшифровка);
	
	Если Не ЗначениеЗаполнено(Рез) Тогда
		Возврат
	КонецЕсли;
	
	Доступно = ТипЗнч(рез) = Тип("СправочникСсылка.ТелОчереди");
	Доступно = Доступно И рез <> ПредопределенноеЗначение("Справочник.ТелОчереди.ПустаяСсылка");
	Если Доступно Тогда
		Парам = Новый Структура();
		Парам.Вставить("Ключ", рез);
		ПриЗакрытииФормыТелОчереди = Новый ОписаниеОповещения("ПриЗакрытииФормыТелОчереди", ЭтаФорма);
		ОткрытьФорму("Справочник.ТелОчереди.Форма.ФормаЭлемента", Парам, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
	//Если ТипЗнч(Рез) = Тип("СправочникСсылка.ОУ_Сотрудники") Тогда
	//	Парам = Новый Структура();
	//	Парам.Вставить("Ключ", Рез);
	//	ОткрытьФорму("Справочник.ОУ_Сотрудники.Форма.ФормаЭлемента", Парам, ЭтаФорма);
	//	Возврат;
	//КонецЕсли;
	//
	//
	//
	//Если ТипЗнч(Рез)<>Тип("Строка") Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Если СтрНайти(Рез, "e1c://server/MainAppL/asc_oper#" ) Тогда
	//	ПерейтиПоНавигационнойСсылке(Рез);
	//	Возврат
	//КонецЕсли;
	//
	//Если СтрНайти(Рез, "#", , 2) >1 Тогда
	//	//Парам = Новый Структура();
	//	//Парам.Вставить("Сигнатура", рез);
	//	//Если Лев(Рез,1) = "0" Тогда
	//	//	ИмяОткрываемойФормы = "РегистрСведений.Звонки.Форма.ФормаВходящегоЧтение";
	//	//Иначе
	//	//	ИмяОткрываемойФормы = "РегистрСведений.Звонки.Форма.ФормаИсходящегоЧтение";
	//	//КонецЕсли;
	//	//ОткрытьФорму(ИмяОткрываемойФормы, Парам);
	//	
	//	Отбор = Новый Структура();
	//	Отбор.Вставить("Сигнатура", Рез);
	//	Найденные = ЭтаФорма.Отчет.РеестрЦелевыхТек.НайтиСтроки(Отбор);
	//	Если Найденные.Количество()=1 Тогда
	//			АбсСсылка = "https://mainiis/asc_oper/#"+Найденные[0].НавСсылка;
	//			ПерейтиПоНавигационнойСсылке(АбсСсылка);	
	//	КонецЕсли;
	//    Возврат;
	//КонецЕсли;
	

КонецПроцедуры


&НаСервере
Функция РезультатОбработкаРасшифровкиНаСервере(Расшифровка)
	
	
	Чт = Новый ЧтениеXML();
	Чт.УстановитьСтроку(СериализованныеДанныеРасшифровки);
	Чт.Прочитать();
	РасшифровкаОтчета = СериализаторXDTO.ПрочитатьXML(Чт, Тип("ДанныеРасшифровкиКомпоновкиДанных"));
	//Сообщить(ТипЗнч(ДанныеРасшифровки));
	//ЭлРасш = ДанныеРасшифровки.Элементы;
	//Сообщить("ЭлРасш = " +ЭлРасш);
	
	
	//РасшифровкаОтчета = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	ЭлементыРасшифровки = РасшифровкаОтчета.Элементы;
	РасшифровкаЯчейки =  ЭлементыРасшифровки.Получить(Расшифровка);
	ЗначенияПолейРасш = РасшифровкаЯчейки.ПолучитьПоля();
	ЗначениеПоляРасш = ЗначенияПолейРасш.Получить(0);
	Возврат ЗначениеПоляРасш.Значение;

	
	//РасшифровкаОтчета = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	//ЭлементыРасшифровки = РасшифровкаОтчета.Элементы;
	//РасшифровкаЯчейки =  ЭлементыРасшифровки.Получить(Расшифровка);
	//ЗначенияПолейРасш = РасшифровкаЯчейки.ПолучитьПоля();
	//ЗначениеПоляРасш = ЗначенияПолейРасш.Получить(0);
	//Возврат ЗначениеПоляРасш.Значение;

	Возврат "";
КонецФункции
#КонецОбласти

