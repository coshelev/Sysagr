#Область Команды_телефонии_через_RestAPI

&НаКлиенте
Функция Позвонить2(Команда)
	// Выполняет звонок на телефонный номер абонента задачи

// Если не выбрана строка динамического списка, значит не знаем телефон, на который нужно звонить
//-------------------------------------------------------------------------------------------------
	Если (Элементы[ЭтаФорма.ИмяАктивногоДинамичСписка].ТекущиеДанные = Неопределено) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеЗадачи = Элементы[ЭтаФорма.ИмяАктивногоДинамичСписка].ТекущиеДанные;
		
	Если 	
		//ЭтаФорма.ИмяАктивногоДинамичСписка = "ЗадачиСписокЗвонки" 
		//Или ЭтаФорма.ИмяАктивногоДинамичСписка = "ЗадачиСписокПочта"
		//Или ЭтаФорма.ИмяАктивногоДинамичСписка = "ЗадачиСписокЛояльностьПродаж" 
		//Или 
		ЭтаФорма.ИмяАктивногоДинамичСписка = "ЗадачиСписокЛояльностьРемонта"
	Тогда
		//SYSAGR = "";
		SYSAGR    = "zn_"+ДанныеЗадачи.СигнатураПродажи;
		//Результат = КонтактЦентр.КомандаOriginate(ДанныеЗадачи.Телефон, SYSAGR);  // через внешнюю компоненту
		//Результат = _КомандаOriginate(ДанныеЗадачи.Телефон, SYSAGR);              
		Результат = КонтактЦентр._КомандаOriginate(ДанныеЗадачи.Телефон, SYSAGR);  
		
		Если (Результат = Ложь) Тогда			
			ПоказатьПредупреждение(,"При вызове абонента произошла ошибка",3);
		Иначе	
			ПоказатьПредупреждение(,"Выполняется вызов",3);
		КонецЕсли;
		
		Если ЭтаФорма.ИмяАктивногоДинамичСписка = "ЗадачиСписокЗвонки" Или ЭтаФорма.ИмяАктивногоДинамичСписка = "ЗадачиСписокПочта" Тогда
			ЗадачаПерезвонитьНаСервере(ДанныеЗадачи.Телефон,Результат);
		ИначеЕсли ЭтаФорма.ИмяАктивногоДинамичСписка = "ЗадачиСписокЛояльностьПродаж" Или ЭтаФорма.ИмяАктивногоДинамичСписка = "ЗадачиСписокЛояльностьРемонта" Тогда
			 ЗадачаЛояльностьПерезвонитьНаСервере(Элементы[ЭтаФорма.ИмяАктивногоДинамичСписка].ТекущиеДанные.СигнатураПродажи,Результат)	
		 КонецЕсли;
		 Элементы[ЭтаФорма.ИмяАктивногоДинамичСписка].Обновить();
		 Возврат Неопределено;
	КонецЕсли;

КонецФункции
#КонецОбласти

&НаСервере
Процедура ЗадачаПерезвонитьНаСервере(ТелНомер,Результат)
	
		// Получим объект задачи
		//-------------------------------------------------------------------------------------------------
		ТекЗапись = РегистрыСведений.ЗадачиОбратныйЗвонок.СоздатьМенеджерЗаписи();
		ТекЗапись.ДатаЗакрытия = Дата("00010101");
		ТекЗапись.Телефон = СокрЛП(ТелНомер);
		ТекЗапись.Прочитать();
		
		// Если задача получена, то в зависимости от результата сформируем комментарий и дату актуальности
		//-------------------------------------------------------------------------------------------------
		Если (ТекЗапись.Выбран()) Тогда
			ТекДата = ТекущаяДата();
			
			Темп = СокрЛП(ТекЗапись.Комментарий);
			Темп = Темп + ?(ЗначениеЗаполнено(Темп),Символы.ПС,"");
			Темп = Темп + СокрЛП(Формат(ТекДата,"ДЛФ=DDT")) + ", ";
			Темп = Темп + ?(Результат,"Выполнен звонок абоненту","Ошибка при наборе номера абонента");
			
			Если Не ЗначениеЗаполнено(ТекЗапись.ДатаПервогоПерезвона) Тогда 
				ТекЗапись.ДатаПервогоПерезвона = ТекДата;
			КонецЕсли;
			
			ТекЗапись.ДатаАктуальности = ?(Результат,ТекДата + 300,ТекЗапись.ДатаАктуальности);
			ТекЗапись.Комментарий = СокрЛП(Темп);
			ТекЗапись.Записать();
		КонецЕсли;
		
КонецПроцедуры
	
&НаСервере
Процедура ЗадачаЛояльностьПерезвонитьНаСервере(СигнатураПродажи, Результат)
	
		// Получим объект задачи
		//-------------------------------------------------------------------------------------------------
		ТекЗапись = РегистрыСведений.ЗадачиЗвонокЛояльности.СоздатьМенеджерЗаписи();
		ТекЗапись.ДатаЗакрытия = Дата("00010101");
		ТекЗапись.СигнатураПродажи = СигнатураПродажи;
		ТекЗапись.Прочитать();
		
		// Если задача получена, то в зависимости от результата сформируем комментарий и дату актуальности
		//-------------------------------------------------------------------------------------------------
		Если (ТекЗапись.Выбран()) Тогда
			Темп = СокрЛП(ТекЗапись.Комментарий);
			Темп = Темп + ?(ЗначениеЗаполнено(Темп),Символы.ПС,"");
			Темп = Темп + СокрЛП(Формат(ТекущаяДата(),"ДЛФ=DDT")) + ", ";
			Темп = Темп + ?(Результат,"Выполнен звонок абоненту","Ошибка при наборе номера абонента");
			
			ТекЗапись.ДатаАктуальности = ?(Результат,ТекущаяДата() + 300,ТекЗапись.ДатаАктуальности);
			ТекЗапись.Комментарий = СокрЛП(Темп);
			ТекЗапись.Записать();
		КонецЕсли;
		
	КонецПроцедуры
	
&НаСервереБезКонтекста
Функция  ЗадачаВебСервисЗаблокироватьНаСервере(ТелНомер)
	
		ЗначениеПоУмолчанию = Ложь;
	
		ТекЗапись = РегистрыСведений.ЗадачиИнтернетЗаявки.СоздатьМенеджерЗаписи();
		ТекЗапись.ДатаЗакрытия = Дата("00010101");
		ТекЗапись.Телефон = ТелНомер;
		ТекЗапись.Прочитать();
		
		Если Не ТекЗапись.Выбран() Тогда
			//Возврат "Запись не выбрана"
			Возврат ЗначениеПоУмолчанию;
		КонецЕсли;
		
		// Если задача заблокирована для исполнения другим пользователем, выходим
		Если ТекЗапись.Заблокирована И ТекЗапись.Исполнитель <> ПараметрыСеанса.ККЦТелефон.Код Тогда
			//Возврат "Заблокирована другим оператором:"+ТекЗапись.Исполнитель;
			Возврат ЗначениеПоУмолчанию;
		КонецЕсли;
		
		// Если задача уже заблокирована текущим пользвателем, тогда функция успешно выполнена
		Если ТекЗапись.Заблокирована И ТекЗапись.Исполнитель = ПараметрыСеанса.ККЦТелефон.Код Тогда
			Возврат Истина;
		КонецЕсли;
		
		//Если оказались здесь, значит запись не заблокирована, блокируем
		ТекЗапись.Заблокирована = Истина;
		ТекЗапись.Исполнитель = ПараметрыСеанса.ККЦТелефон.Код;
			
		Попытка
			ТекЗапись.Записать();
		Исключение
			Данные = "ТелНомер  = "+ТелНомер+"; Исполнитель = "+ТекЗапись.Исполнитель; 
			Комментарий = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("ЗадачаВебСервисЗаблокироватьНаСервере", УровеньЖурналаРегистрации.Ошибка, Метаданные.РегистрыСведений.ЗадачиИнтернетЗаявки, Данные, Комментарий);
			//Возврат "Ошибка записи"
			Возврат ЗначениеПоУмолчанию;		
		КонецПопытки;
		
		Возврат Истина;
КонецФункции	
	
&НаСервереБезКонтекста
Процедура  ЗадачаВебСервисПерезвонитьНаСервере(ТелНомер,Результат)	
	
	//02.08.2017, =>, Не нужно автоматически закрывать задачу, т.к. могли не дозвониться или было занято
	//РегистрыСведений.ЗадачиИнтернетЗаявки.ЗакройОткрытуюЗадачу(ТелНомер, ТекущаяДата(), ПараметрыСеанса.ККЦТелефон.Код);		
	//=>
	
	// Получим объект задачи
	//----------------------------------------------------------------------------------------------
	ТекЗапись = РегистрыСведений.ЗадачиИнтернетЗаявки.СоздатьМенеджерЗаписи();
	ТекЗапись.ДатаЗакрытия = Дата("00010101");
	ТекЗапись.Телефон = СокрЛП(ТелНомер);
	ТекЗапись.Прочитать();
		
	// Если задача получена, то в зависимости от результата сформируем комментарий и дату актуальности
	//-------------------------------------------------------------------------------------------------
	Если (ТекЗапись.Выбран()) Тогда
			ТекДата = ТекущаяДата();
			
			Темп = СокрЛП(ТекЗапись.Комментарий);
			Темп = Темп + ?(ЗначениеЗаполнено(Темп),Символы.ПС,"");
			Темп = Темп + СокрЛП(Формат(ТекДата,"ДЛФ=DDT")) + ", ";
			Темп = Темп + "Звонок абоненту";
			
			Если Не ЗначениеЗаполнено(ТекЗапись.ДатаПервогоПерезвона) Тогда 
				ТекЗапись.ДатаПервогоПерезвона = ТекДата;
			КонецЕсли;
			
			//ТекЗапись.ДатаАктуальности = ?(Результат,ТекДата + 300,ТекЗапись.ДатаАктуальности);  // нет такого реквизита
			ТекЗапись.Комментарий = СокрЛП(Темп);
			ТекЗапись.Записать();
	КонецЕсли;
			
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)	
	Об = РеквизитФормыВЗначение("Объект");
	Об.ЗагрузиСоответствиеТочекПродажПодразделениям();
	ЗначениеВРеквизитФормы(Об, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//Результат = КонтактЦентр.КомпонентаИнициализировать();

	//Если (ЗначениеЗаполнено(Результат)) Тогда
	//	Предупреждение(Результат);
	//	Отказ = Истина;
	//	Возврат;
	//КонецЕсли;
	
	ЭтаФорма.Элементы.Позвонить2.Доступность = Ложь;
	
	КЦ = ПолучитьКонтактЦентрТекущегоПользователя();
	Если КЦ = КонтактЦентрПустаяСсылка() Тогда
		Отказ = Истина;
		Возврат
	Иначе
		ЭтаФорма.КЦ = КЦ;
	КонецЕсли;
		
	ЭтаФорма.ИмяАктивногоДинамичСписка = "ЗадачиСписокЛояльностьРемонта";	
	 
	 //<Звонки> 
	 ЭтаФорма.ЗадачиСписокЗвонки.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы.Очистить();

	 //<Отбор по контакт-центру>
	ЭлОтбора1 = ЭтаФорма.ЗадачиСписокЗвонки.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлОтбора1.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("Исполнитель");
	ЭлОтбора1.ПравоеЗначение=ЭтаФорма.КЦ;
	ЭлОтбора1.ВидСравнения=ВидСравненияКомпоновкиДанных.Равно;
	ЭлОтбора1.Использование=Истина;	
	//</Отбор по контакт-центру>
	
	//<Отбор по типу - перенесен в запрос>
	//ЭлОтбора1 = ЭтаФорма.ЗадачиСписокЗвонки.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлОтбора1.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("Тип");
	//ЭлОтбора1.ПравоеЗначение= ПредопределенноеЗначение("Перечисление.ТипЗадачи.Непринятый");
	//ЭлОтбора1.ВидСравнения=ВидСравненияКомпоновкиДанных.Равно;
	//ЭлОтбора1.Использование=Истина;	
	//</Отбор по типу>
	
	//<Отбор по не выполненным задачам>
	ЭлОтбора1 = ЭтаФорма.ЗадачиСписокЗвонки.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлОтбора1.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("Выполнена");
	ЭлОтбора1.ПравоеЗначение=ЛОЖЬ;
	ЭлОтбора1.ВидСравнения=ВидСравненияКомпоновкиДанных.Равно;
	ЭлОтбора1.Использование=Истина;	
	//</Отбор по невыполненным задачам>
	
	//<Отбор по каналу 88312222222>
	ЭлОтбора1 = ЭтаФорма.ЗадачиСписокЗвонки.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлОтбора1.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("Канал");
	ЭлОтбора1.ПравоеЗначение="88312222222";
	ЭлОтбора1.ВидСравнения=ВидСравненияКомпоновкиДанных.НеСодержит;
	ЭлОтбора1.Использование=Истина;	
	//</Отбор по каналу 88312222222>
	//</Звонки>
	
	 //<Почта>
	 ЭтаФорма.ЗадачиСписокПочта.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы.Очистить();

	 //<Отбор по контакт-центру>
	ЭлОтбора1 = ЭтаФорма.ЗадачиСписокПочта.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлОтбора1.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("Исполнитель");
	ЭлОтбора1.ПравоеЗначение=ЭтаФорма.КЦ;
	ЭлОтбора1.ВидСравнения=ВидСравненияКомпоновкиДанных.Равно;
	ЭлОтбора1.Использование=Истина;	
	//</Отбор по контакт-центру>
	
	//<Отбор по не выполненным задачам>
	ЭлОтбора1 = ЭтаФорма.ЗадачиСписокПочта.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлОтбора1.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("Выполнена");
	ЭлОтбора1.ПравоеЗначение=ЛОЖЬ;
	ЭлОтбора1.ВидСравнения=ВидСравненияКомпоновкиДанных.Равно;
	ЭлОтбора1.Использование=Истина;	
	//</Отбор по невыполненным задачам>
	//</Почта>
	
	 //<Лояльность продаж>
	 ЭтаФорма.ЗадачиСписокЛояльностьПродаж.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы.Очистить();

	 //<Отбор по контакт-центру>
	ЭлОтбора1 = ЭтаФорма.ЗадачиСписокЛояльностьПродаж.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлОтбора1.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("Исполнитель");
	ЭлОтбора1.ПравоеЗначение=ЭтаФорма.КЦ;
	ЭлОтбора1.ВидСравнения=ВидСравненияКомпоновкиДанных.Равно;
	ЭлОтбора1.Использование=Истина;	
	//</Отбор по контакт-центру>
	
	 //<Отбор по типу>
	ЭлОтбора1 = ЭтаФорма.ЗадачиСписокЛояльностьПродаж.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлОтбора1.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("Тип");
	
	СписокОтбора = Новый СписокЗначений();
	СписокОтбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипЗадачи.ЛояльностьПродажАвто"));
	ЭлОтбора1.ПравоеЗначение=СписокОтбора;
	ЭлОтбора1.ВидСравнения=ВидСравненияКомпоновкиДанных.ВСписке;       
	ЭлОтбора1.Использование=Истина;	
	//</Отбор по типу>

	 //<Отбор по не выполненным задачам>
	ЭлОтбора1 = ЭтаФорма.ЗадачиСписокЛояльностьПродаж.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлОтбора1.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("Выполнена");
	ЭлОтбора1.ПравоеЗначение=ЛОЖЬ;
	ЭлОтбора1.ВидСравнения=ВидСравненияКомпоновкиДанных.Равно;
	ЭлОтбора1.Использование=Истина;	
	//</Отбор по невыполненным задачам>
	//</Лояльность продаж>
	
	 //<Лояльность ремонтов>
	 ЭтаФорма.ЗадачиСписокЛояльностьРемонта.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы.Очистить();

	 //<Отбор по контакт-центру>
	ЭлОтбора1 = ЭтаФорма.ЗадачиСписокЛояльностьРемонта.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлОтбора1.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("Исполнитель");
	ЭлОтбора1.ПравоеЗначение=ЭтаФорма.КЦ;
	ЭлОтбора1.ВидСравнения=ВидСравненияКомпоновкиДанных.Равно;
	ЭлОтбора1.Использование=Истина;	
	//</Отбор по контакт-центру>
	
	 //<Отбор по типу>
	ЭлОтбора1 = ЭтаФорма.ЗадачиСписокЛояльностьРемонта.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлОтбора1.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("Тип");	
	СписокОтбора = Новый СписокЗначений();
	СписокОтбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипЗадачи.ЛояльностьРемонтаАвто"));
	ЭлОтбора1.ПравоеЗначение=СписокОтбора;
	ЭлОтбора1.ВидСравнения=ВидСравненияКомпоновкиДанных.ВСписке;       
	ЭлОтбора1.Использование=Истина;	
	//</Отбор по типу>

	 //<Отбор по не выполненным задачам>
	ЭлОтбора1 = ЭтаФорма.ЗадачиСписокЛояльностьРемонта.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлОтбора1.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("Выполнена");
	ЭлОтбора1.ПравоеЗначение=ЛОЖЬ;
	ЭлОтбора1.ВидСравнения=ВидСравненияКомпоновкиДанных.Равно;
	ЭлОтбора1.Использование=Истина;	
	//</Отбор по невыполненным задачам>
	
	 //<Отбор по закрытым заказ-нарядам>
	ЭлОтбора1 = ЭтаФорма.ЗадачиСписокЛояльностьРемонта.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлОтбора1.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("ДатаЗакрытияЗаказНаряда");
	ЭлОтбора1.ПравоеЗначение='00010101';
	ЭлОтбора1.ВидСравнения=ВидСравненияКомпоновкиДанных.Больше;
	ЭлОтбора1.Использование=Истина;	
	
	ЭлОтбора1 = ЭтаФорма.ЗадачиСписокЛояльностьРемонта.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлОтбора1.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("ДатаЗакрытияЗаказНаряда");
	ЭлОтбора1.ПравоеЗначение=НачалоДня(ТекущаяДата()) - 2*24*60*60;  // два дня назад
	ЭлОтбора1.ВидСравнения=ВидСравненияКомпоновкиДанных.Меньше;
	ЭлОтбора1.Использование=Истина;	
	//</Отбор по невыполненным задачам>
	
	//</Лояльность ремонтов>
	
	//<ВэбСервис>
	//<Отбор по не выполненным задачам>
	ЭлОтбора1 = ЭтаФорма.ЗадачиСписокВебСервис.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлОтбора1.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("Выполнена");
	ЭлОтбора1.ПравоеЗначение=ЛОЖЬ;
	ЭлОтбора1.ВидСравнения=ВидСравненияКомпоновкиДанных.Равно;
	ЭлОтбора1.Использование=Истина;	
	//</Отбор по невыполненным задачам>
	//</ВэбСервис>


	//ВыбратьТелефон();
	ОбновитьФорму();
		
	//02.11.2016
	ЭтаФорма.МоиНастройки_ИспользоватьАвтоподбор = Истина;
	
	//13.12.2016
	МоиНастройки_ОповещатьОбОшибкахОтправкиПочты = Истина;

	//09.02.2017
	МоиНастройки_ПричинаРучногоЗакрытияРегистрирующаяСпаммера="Спам";
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФорму()	
	ВыбранТелефон = ЗначениеЗаполнено(ЭтаФорма.ТелВнутр);
	ЭтаФорма.Элементы.КонсольТелефонВыбрать.Доступность = Не ВыбранТелефон;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	КонтактЦентр.КомпонентаОтключить();
КонецПроцедуры

&НаКлиенте
Процедура ПанельСтраницПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ЭтаФорма.ЗадачаИстория.Очистить();
		
	//Очистить кэш вопросов - ответов
	//-------------------------------------
	ЭтаФорма.ТаблицаВопросОтвет.Очистить();
	
	ЭтаФорма.ТаблицаВведенныхОтветов.Очистить();
	
	Если ТекущаяСтраница.Имя = "Звонки" Тогда
		ЭтаФорма.ИмяАктивногоДинамичСписка = "ЗадачиСписокЗвонки";	
		ТекТаблицаФормы = ЭтаФорма.Элементы.ЗадачиСписокЗвонки;	
		ЗадачиСписокЗвонкиПриАктивизацииСтроки(ТекТаблицаФормы);
	
	ИначеЕсли ТекущаяСтраница.Имя = "Почта" Тогда
		ЭтаФорма.ИмяАктивногоДинамичСписка = "ЗадачиСписокПочта";	
		ТекТаблицаФормы = ЭтаФорма.Элементы.ЗадачиСписокПочта;	
		ЗадачиСписокПочтаПриАктивизацииСтроки(ТекТаблицаФормы);
		
	ИначеЕсли ТекущаяСтраница.Имя = "ЛояльностьПродаж" Тогда
		ЭтаФорма.ИмяАктивногоДинамичСписка = "ЗадачиСписокЛояльностьПродаж";
		ТекТаблицаФормы = ЭтаФорма.Элементы.ЗадачиСписокЛояльностьПродаж;	
		ЗадачиСписокЛояльностьПродажПриАктивизацииСтроки(ТекТаблицаФормы);
		
	ИначеЕсли ТекущаяСтраница.Имя = "ЛояльностьРемонта" Тогда
		ЭтаФорма.ИмяАктивногоДинамичСписка = "ЗадачиСписокЛояльностьРемонта";
		ТекТаблицаФормы = ЭтаФорма.Элементы.ЗадачиСписокЛояльностьРемонта;	
		ЗадачиСписокЛояльностьРемонтаПриАктивизацииСтроки(ТекТаблицаФормы);
		
	ИначеЕсли ТекущаяСтраница.Имя = "ВебСервис" Тогда
		ЭтаФорма.ИмяАктивногоДинамичСписка = "ЗадачиСписокВебСервис";
		ТекТаблицаФормы = ЭтаФорма.Элементы.ЗадачиСписокВебСервис;	
		ВэбСервисПриАктивизацииСтроки(ТекТаблицаФормы)
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКонтактЦентрТекущегоПользователя()
	
	КЦ = Справочники.КонтактЦентры.ПустаяСсылка();	
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	КонтактЦентрыПользователи.Ссылка
	               |ИЗ
	               |	Справочник.КонтактЦентры.Пользователи КАК КонтактЦентрыПользователи
	               |ГДЕ
	               |	КонтактЦентрыПользователи.Пользователь = &Пользователь
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	КонтактЦентрыПользователи.Ссылка.Наименование";

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Пользователь",ПараметрыСеанса.ТекущийПользователь);
	
	РезультатЗапроса = ОбщегоНазначения.ВыполнитьЗапрос(Запрос);
	Если РезультатЗапроса.Пустой() Тогда
		Возврат КЦ
	КонецЕсли;
		
	тз = РезультатЗапроса.Выгрузить();
	//Если тз.Количество()>1 Тогда
	//	Сообщить("Вы зарегистрированы как сотрудник нескольких КЦ. Это недопустимо");  
	//	Возврат КЦ
	//КонецЕсли;
	
	Возврат тз[0][0];
	
КонецФункции

&НаСервереБезКонтекста
Функция ТелВнутреннийПустаяСсылка()
	Возврат Справочники.ТелВнутренние.ПустаяСсылка()
КонецФункции

&НаСервереБезКонтекста 
Функция КонтактЦентрПустаяСсылка()
	Возврат Справочники.КонтактЦентры.ПустаяСсылка()
КонецФункции

&НаКлиенте
Процедура ЗадачиСписокЗвонкиПриАктивизацииСтроки(Элемент)
	
	//Очистить кэш вопросов - ответов
	ЭтаФорма.ТаблицаВопросОтвет.Очистить();
	
	ИмяТекСтраницы = ЭтаФорма.Элементы.ПанельСтраниц.ТекущаяСтраница.Имя;
	ИмяЭлемента = "ЗадачиСписок"+ИмяТекСтраницы;
	
	Если (Элементы[ИмяЭлемента].ТекущиеДанные = Неопределено) Тогда
		Возврат
	КонецЕсли;
	
	// Загрузим на форму данные выбранной задачи (комментарий) и историю звонков
	ЗадачиСписокЗвонкиВыборНаСервере(Элементы[ИмяЭлемента].ТекущиеДанные.Телефон);
	
	// Загрузим на форму данные анкеты
	ЗаполниТаблицуВопросовТребующихВводОтветов(ИмяЭлемента, Элементы[ИмяЭлемента].ТекущиеДанные.Телефон);	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиСписокПочтаПриАктивизацииСтроки(Элемент)
	
	//Очистить кэш вопросов - ответов
	ЭтаФорма.ТаблицаВопросОтвет.Очистить();
	
	ИмяТекСтраницы = ЭтаФорма.Элементы.ПанельСтраниц.ТекущаяСтраница.Имя;
	ИмяЭлемента = "ЗадачиСписок"+ИмяТекСтраницы;
	
	Если (Элементы[ИмяЭлемента].ТекущиеДанные = Неопределено) Тогда
		Возврат
	КонецЕсли;
	
	// Загрузим на форму данные выбранной задачи (комментарий) и историю звонков
	ЗадачиСписокЗвонкиВыборНаСервере(Элементы[ИмяЭлемента].ТекущиеДанные.Телефон);
	
	// Загрузим на форму данные анкеты
	ЗаполниТаблицуВопросовТребующихВводОтветов(ИмяЭлемента, Элементы[ИмяЭлемента].ТекущиеДанные.Телефон);	
	
КонецПроцедуры

&НаКлиенте
Процедура ВэбСервисПриАктивизацииСтроки(Элемент)
	
	//Очистить кэш вопросов - ответов
	//---------------------------------------------------
	ЭтаФорма.ТаблицаВопросОтвет.Очистить();
	
	ИмяТекСтраницы = ЭтаФорма.Элементы.ПанельСтраниц.ТекущаяСтраница.Имя;
	ИмяЭлемента = "ЗадачиСписок"+ИмяТекСтраницы;
	Если (Элементы[ИмяЭлемента].ТекущиеДанные = Неопределено) Тогда
		Возврат
	КонецЕсли;
	
	ТелНомер = Элементы[ИмяЭлемента].ТекущиеДанные.Телефон;
	
	//Покажи историю общения
	//------------------------------
	ПокажиИсториюОбщения(ТелНомер);
	
	//Покажи комментарий в отдельном поле
	//------------------------------------------------------------------------------------------------------
	//ЭтаФорма.ЗадачаКомментарий = Элементы[ИмяЭлемента].ТекущиеДанные.Комментарий; 
	
	// Загрузим на форму данные анкеты
	//------------------------------------------------------------------------------------------------------
	ЗаполниТаблицуВопросовТребующихВводОтветов(ИмяЭлемента, Элементы[ИмяЭлемента].ТекущиеДанные.Телефон);	
КонецПроцедуры

&НаСервере
Процедура ЗадачиСписокВебСервисВыборНаСервере(ТелНомер)
	
	// Предварительно очистим элементы относящиеся к визуализации выбранной задачи
	//------------------------------------------------------------------------------
	ПокажиИсториюОбщения(ТелНомер);
	
	// Покажи комментарий
	//-----------------------------------------------------------------------------
	ПоказатьКомментарий = Ложь;
	Если ПоказатьКомментарий Тогда
		ЭтаФорма.ЗадачаКомментарий = "";
		ТекЗапись = РегистрыСведений.ЗадачиИнтернетЗаявки.СоздатьМенеджерЗаписи();
		ТекЗапись.ДатаЗакрытия = Дата("00010101");
		ТекЗапись.Телефон = СокрЛП(ТелНомер);
		ТекЗапись.Прочитать();
		Если (ТекЗапись.Выбран()) Тогда
			ЭтаФорма.ЗадачаКомментарий = СокрЛП(ТекЗапись.Комментарий);	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗадачиСписокЗвонкиВыборНаСервере(ТелНомер)
	
	// Предварительно очистим элементы относящиеся к визуализации выбранной задачи
	ПокажиИсториюОбщения(ТелНомер);
	
	// Покажи комментарий
	//----------------------------------------------------------------------------
	ПоказатьКомментарий = Ложь;
	Если ПоказатьКомментарий Тогда
		ЭтаФорма.ЗадачаКомментарий = "";
		
		Запрос = Новый Запрос();
		Запрос.Текст  =
		"ВЫБРАТЬ
		|	ЗадачиОбратныйЗвонок.Комментарий КАК Комментарий
		|ИЗ
		|	РегистрСведений.ЗадачиОбратныйЗвонок КАК ЗадачиОбратныйЗвонок
		|ГДЕ
		|	ЗадачиОбратныйЗвонок.Телефон = &Телефон
		|	И ЗадачиОбратныйЗвонок.ДатаЗакрытия = ДАТАВРЕМЯ(1,1,1)";
		
		Запрос.УстановитьПараметр("Телефон", СокрЛП(ТелНомер));
		РезультатЗапроса = ОбщегоНазначения.ВыполнитьЗапрос(Запрос);
		Если РезультатЗапроса.Пустой() Тогда
			Возврат
		КонецЕсли;
		ЭтаФорма.ЗадачаКомментарий = РезультатЗапроса.Выгрузить()[0][0];	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаОтменить(Команда)
	// Пометим задачу как принудительно закрытую
	
	//Общая часть - одинаковая для всех закладок
	//------------------------------------------	
	ИмяЭлемента = ЭтаФорма.ИмяАктивногоДинамичСписка;

	
	Если Элементы[ИмяЭлемента].ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Если Элементы[ИмяЭлемента].ТекущиеДанные.ДатаЗакрытия <> Дата("00010101") Тогда
		Возврат
	КонецЕсли;
	
	СписокОтветов =  ПолучиСписокОтветовПричинРучогоЗакрытияЗадачи();
	
	Если СписокОтветов.Количество()=0 Тогда
		ПоказатьПредупреждение(,"Не задан список причин ручного закрытия задач",3);
		Возврат
	КонецЕсли;
	
	ДопПарамОбработчикаОповещения = Новый Структура("Телефон, ИмяЭлемента", Элементы[ИмяЭлемента].ТекущиеДанные.Телефон, ИмяЭлемента); 
	
	
	
	//Особая часть - уникальная для каждой закладки
	//---------------------------------------------
	//<09.02.2017_14-26;+; >
	Если ИмяЭлемента = "ЗадачиСписокПочта" Тогда
		ДопПарамОбработчикаОповещения.Вставить("АдресОтправителя", Элементы[ИмяЭлемента].ТекущиеДанные.АдресОтправителя);
		
		//<02.05.2017, +,Пометка на удаление почтовых сообщений>
		ДопПарамОбработчикаОповещения.Вставить("Сигнатура", Элементы[ИмяЭлемента].ТекущиеДанные.Сигнатура);
		//</02.05.2017>
		
	КонецЕсли;
	//</09.02.2017_14-26>
	
	
	//Общая часть - одинаковая для всех закладок
	//-----------------------------------------------------------------------------------------------------------
	Оп = Новый ОписаниеОповещения("ОбработкаОповещения1", ЭтотОбъект, ДопПарамОбработчикаОповещения);
	ПоказатьВыборИзМеню(Оп, СписокОтветов, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения1(ВыбЗначОтвет, ДопПараметры) Экспорт
	
	//Общая часть - одинаковая для всех закладок
	//------------------------------------------		
	
	Если ВыбЗначОтвет = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ДатаЗакрытия = ТекущаяДата();

	// Запиши анкету
	Успех = ЗаписатьВыбранныйОтвет_НаСервере(ДатаЗакрытия, ДопПараметры.Телефон);
	Если Не Успех Тогда	
		ПоказатьПредупреждение(, "Ошибка записи анкеты", 3);
	КонецЕсли;

	// Закрой задачу звонка или почты
	//-------------------------------------------------------------------------------------------------------------
	Доступно =  ДопПараметры.ИмяЭлемента = "ЗадачиСписокПочта";
	Доступно = Доступно ИЛИ ДопПараметры.ИмяЭлемента = "ЗадачиСписокЗвонки";
	Если Доступно Тогда
		Успех = УстановиПричинуЗакрытияЗадачи(ДопПараметры.Телефон, ДатаЗакрытия, ВыбЗначОтвет.Значение);
		Если Не Успех Тогда	
			ПоказатьПредупреждение(, "Ошибка закрытия задачи", 3);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Закрой задачу интернет-заявки
	//-------------------------------------------------------------------------------------------------------------
	Доступно = ДопПараметры.ИмяЭлемента = "ЗадачиСписокВебСервис";
	Если Доступно Тогда
		Успех = УстановиПричинуЗакрытияЗадачиАвтозвонка(ДопПараметры.Телефон, ДатаЗакрытия, ВыбЗначОтвет.Значение);
		Если Не Успех Тогда	
			ПоказатьПредупреждение(, "Ошибка закрытия задачи", 3);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	//Особая часть - уникальная для каждой закладки
	//----------------------------------------------

	//<09.02.2017_14-26>
	//Если работа в закладке Почта и выбрана причина ручного закрытия Спам, тогда добавь адрес отправителя в список спаммеров
	Доступно = ДопПараметры.ИмяЭлемента = "ЗадачиСписокПочта";
	Доступно = Доступно И ВыбЗначОтвет.Значение = ЭтаФорма.МоиНастройки_ПричинаРучногоЗакрытияРегистрирующаяСпаммера;
	Доступно = Доступно И ДопПараметры.Свойство("АдресОтправителя");
	Доступно = Доступно И ЗначениеЗаполнено(ДопПараметры.АдресОтправителя);
	Если Доступно Тогда
		Спаммера_Добавить_НаСервере(ДопПараметры.АдресОтправителя);
	КонецЕсли;
	//</09.02.2017_14-26>
	
	//<02.05.2017, +, Пометка на удаление почтовых сообщений>
	Доступно = Доступно И ЗначениеЗаполнено(ДопПараметры.Сигнатура);
	Если Доступно Тогда
		// Предусмотреть не фоновое выполнение для отладки
		ВыполнитьВФоне = Истина;
		Если ВыполнитьВФоне Тогда
			//Сформируй идентификатор фонового задания и сохрани его в списке всех идентификаторов фоновых заданий
			//----------------------------------------------------------------------------------------------------
			ИдФонЗадания = Новый УникальныйИдентификатор();
			ЭтаФорма.СписокИдФоновыхЗаданийОтправкиПисем.Добавить(ИдФонЗадания);

			//Выполни фоновое задание
			ПараметрыФЗ = Новый Массив();
			ПараметрыФЗ.Добавить(ДопПараметры.Сигнатура);
			ФоновыеЗадания_Выполнить("ЭлПочта.УдалитьСообщение" , ПараметрыФЗ, ИдФонЗадания, "Пометь на удаление почтовое сообщение"); 
		Иначе
			ЭлПочта.УдалитьСообщение(ДопПараметры.Сигнатура);
		КонецЕсли;

	КонецЕсли;
	//</02.05.2017>
	
		
	//Общая часть - одинаковая для всех закладок
	//-------------------------------------------			
	// Обнови динамический список (убери закрытую задачу)
	Элементы[ДопПараметры.ИмяЭлемента].Обновить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ФоновыеЗадания_Выполнить(ИмяМетода, Параметры, Ключ, Наименование)
		ФоновыеЗадания.Выполнить(ИмяМетода, Параметры, Ключ, Наименование); 	
КонецФункции //</02.05.2017>

&НаСервереБезКонтекста
Функция Спаммера_Добавить_НаСервере(АдресОтправителя)
	РегистрыСведений.ПисьмаСпаммеры.Добавить(АдресОтправителя);	
КонецФункции

&НаСервереБезКонтекста
Функция УстановиПричинуЗакрытияЗадачи(Телефон, Дата, ВыбЗнач)
	Возврат РегистрыСведений.ЗадачиОбратныйЗвонок.УстановиЗначениеРеквизитаИЗакройЗадачу(Телефон, ТекущаяДата(), "ПричинаЗакрытия",ВыбЗнач, ПараметрыСеанса.ТекущийПользователь); 
КонецФункции

&НаСервереБезКонтекста
Функция УстановиПричинуЗакрытияЗадачиАвтозвонка(Телефон, Дата, ВыбЗнач)
	Возврат РегистрыСведений.ЗадачиИнтернетЗаявки.УстановиЗначениеРеквизитаИЗакройЗадачу(Телефон, ТекущаяДата(), "ПричинаЗакрытия",ВыбЗнач, ПараметрыСеанса.ТекущийПользователь); 
КонецФункции

&НаСервереБезКонтекста
Функция ПолучиСписокОтветовПричинРучогоЗакрытияЗадачи()
	
	СписЗнач = Новый СписокЗначений();
	
	ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ = списзнач;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	АнкетыВариантыОтветов.Ответ
	               |ИЗ
	               |	Справочник.Анкеты.ВариантыОтветов КАК АнкетыВариантыОтветов
	               |ГДЕ
	               |	АнкетыВариантыОтветов.Ссылка.Родитель.Наименование ПОДОБНО &РодительНаименование
	               |	И АнкетыВариантыОтветов.Ссылка.Наименование ПОДОБНО &Наименование";
	Запрос.УстановитьПараметр("РодительНаименование", "%ПРОЧЕЕ%");
	Запрос.УстановитьПараметр("Наименование", "%ПРИЧИНЫ РУЧНОГО ЗАКРЫТИЯ ЗАДАЧ%");
	
	РезультатЗапроса = ОбщегоНазначения.ВыполнитьЗапрос(Запрос);
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СписЗнач.Добавить(Выборка.Ответ, Выборка.Ответ);
	КонецЦикла;
	
	Возврат СписЗнач
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучиСписокОтветовПричинРучогоЗакрытияЗадачиЛояльности()
	
	СписЗнач = Новый СписокЗначений();
	
	ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ = списзнач;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	АнкетыВариантыОтветов.Ответ
	               |ИЗ
	               |	Справочник.Анкеты.ВариантыОтветов КАК АнкетыВариантыОтветов
	               |ГДЕ
	               |	АнкетыВариантыОтветов.Ссылка.Родитель.Наименование = &РодительНаименование
	               |	И АнкетыВариантыОтветов.Ссылка.Наименование = &Наименование";
	Запрос.УстановитьПараметр("РодительНаименование", "ПРОЧЕЕ");
	Запрос.УстановитьПараметр("Наименование", "ЗАДАЧИ ЛОЯЛЬНОСТИ: ПРИЧИНА РУЧНОГО ЗАКРЫТИЯ");
	
	РезультатЗапроса = ОбщегоНазначения.ВыполнитьЗапрос(Запрос);
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СписЗнач.Добавить(Выборка.Ответ, Выборка.Ответ);
	КонецЦикла;
	
	Возврат СписЗнач
	
КонецФункции

&НаСервере
Процедура ПисьмоЗагрузить(Сигнатура,  Дата, Регион, Инициатор, АбонентВнешний, ДатаОтправки) Экспорт
	РегистрыСведений.Письма.Загрузить(Сигнатура,  Дата, Регион, Инициатор, АбонентВнешний, ДатаОтправки);
КонецПроцедуры

//#Область Анкета
&НаСервере
Процедура ЗаполниТаблицуВопросовТребующихВводОтветов(ИмяАктивногоДинамическогоСписка,Телефон);
	//Используется для звонков и почты
		
	Если Не ЗначениеЗаполнено(Телефон) Тогда
		Возврат
	КонецЕсли;
	
	Если ЭтаФорма.ТаблицаВведенныхОтветов.Количество()>0 Тогда
		ЭтаФорма.ТаблицаВведенныхОтветов.Очистить();
	КонецЕсли;
	
	Если ЭтаФорма.ТаблицаВопросОтвет.Количество()>0 Тогда
		ЭтаФорма.ТаблицаВопросОтвет.Очистить();
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	Анкеты.Ссылка КАК Вопрос,
	|	Анкеты.Наименование КАК ВопросСтрокой,
	|	Анкеты.Порядок КАК Порядок,
	|	ЕСТЬNULL(ИдентификаторыВопросов.Ссылка, ЗНАЧЕНИЕ(Справочник.ИдентификаторыСтрок.ПустаяСсылка)) КАК ИдВопроса,
	|	Анкеты.ДопускаемоеЧислоОтветов КАК ДопускаемоеЧислоОтветов,
	|	ВЫБОР
	|		КОГДА Анкеты.ПериодНеПоказыватьПредыдущийОтвет = 0
	|			ТОГДА 9999999999
	|		ИНАЧЕ Анкеты.ПериодНеПоказыватьПредыдущийОтвет
	|	КОНЕЦ КАК ПериодНеПоказыватьПредыдущийОтвет
	|ПОМЕСТИТЬ ВТ00_ТекущиеВопросыАнкеты
	|ИЗ
	|	Справочник.Анкеты КАК Анкеты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИдентификаторыСтрок КАК ИдентификаторыВопросов
	|		ПО (ИдентификаторыВопросов.МодифицированнаяСтрока = Анкеты.МодифицированнаяСтрока)
	|ГДЕ
	|	Анкеты.ПометкаУдаления = ЛОЖЬ
	|	И Анкеты.ЭтоГруппа = ЛОЖЬ
	|	И Анкеты.Родитель.Наименование ПОДОБНО &НаименованиеГруппы
	|	И Анкеты.НеПоказыватьПредыдущийОтвет = ЛОЖЬ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Вопрос,
	|	ИдВопроса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВариантыОтветов.Ссылка КАК Вопрос
	|ПОМЕСТИТЬ ВТ01_ВопросыСВыборомОтвета
	|ИЗ
	|	Справочник.Анкеты.ВариантыОтветов КАК ВариантыОтветов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ00_ТекущиеВопросыАнкеты КАК Анкеты
	|		ПО ВариантыОтветов.Ссылка = Анкеты.Вопрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсторияВопроса.Ссылка КАК Вопрос,
	|	МАКСИМУМ(ИсторияВопроса.Период) КАК ДатаСозданияИлиПоследнегоИзмененияВопроса
	|ПОМЕСТИТЬ ВТ02_ВопросыВозможноТребущиеОбновленияОтвета
	|ИЗ
	|	Справочник.Анкеты.ИсторияВопроса КАК ИсторияВопроса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ00_ТекущиеВопросыАнкеты КАК Анкеты
	|		ПО ИсторияВопроса.Ссылка = Анкеты.Вопрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсторияВопроса.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ00.Вопрос КАК Вопрос,
	|	МАКСИМУМ(РегГод.Период) КАК ДатаПоследнегоОтвета
	|ПОМЕСТИТЬ ВТ03_РегистрЗаГод
	|ИЗ
	|	РегистрСведений.АнкетыРасширенные КАК РегГод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ00_ТекущиеВопросыАнкеты КАК ВТ00
	|		ПО РегГод.Вопрос = ВТ00.ИдВопроса
	|ГДЕ
	|	РегГод.Телефон = &Телефон
	|	И РегГод.Период МЕЖДУ ДОБАВИТЬКДАТЕ(&ТекущаяДата, ГОД, -1) И &ТекущаяДата
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ00.Вопрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ00.Вопрос КАК Вопрос,
	|	ВТ00.ВопросСтрокой КАК ВопросСтрокой,
	|	ВТ00.ИдВопроса КАК ИдВопроса,
	|	ВТ00.Порядок КАК Порядок,
	|	ВЫБОР
	|		КОГДА ВТ00.Вопрос = ЕСТЬNULL(ВТ01.Вопрос, ЗНАЧЕНИЕ(Справочник.Анкеты.ПустаяСсылка))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВопросТребуетВыбораОтвета,
	|	ВТ00.ДопускаемоеЧислоОтветов КАК ДопускаемоеЧислоОтветов,
	|	ВТ00.ПериодНеПоказыватьПредыдущийОтвет КАК ПериодНеПоказыватьПредыдущийОтвет,
	|	ЕСТЬNULL(ВТ02.ДатаСозданияИлиПоследнегоИзмененияВопроса, &ТекущаяДата) КАК ДатаСозданияИлиПоследнегоИзмененияВопроса,
	|	ЕСТЬNULL(ВТ03.ДатаПоследнегоОтвета, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПоследнегоОтвета,
	|	РАЗНОСТЬДАТ(ЕСТЬNULL(ВТ03.ДатаПоследнегоОтвета, ДАТАВРЕМЯ(1, 1, 1)), ЕСТЬNULL(ВТ02.ДатаСозданияИлиПоследнегоИзмененияВопроса, &ТекущаяДата), МЕСЯЦ) КАК ПериодМеждуПоследнимОтветомИВопросом,
	|	РегСрез.Ответ КАК ОтветСтрокой
	|ИЗ
	|	ВТ00_ТекущиеВопросыАнкеты КАК ВТ00
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ01_ВопросыСВыборомОтвета КАК ВТ01
	|		ПО (ВТ01.Вопрос = ВТ00.Вопрос)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ02_ВопросыВозможноТребущиеОбновленияОтвета КАК ВТ02
	|		ПО (ВТ02.Вопрос = ВТ00.Вопрос)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ03_РегистрЗаГод КАК ВТ03
	|		ПО (ВТ03.Вопрос = ВТ00.Вопрос)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АнкетыРасширенные.СрезПоследних КАК РегСрез
	|		ПО (РегСрез.Телефон = &Телефон)
	|			И (РегСрез.Вопрос = ВТ00.ИдВопроса)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ00.Порядок";
	
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());	
	Запрос.УстановитьПараметр("Телефон", Телефон);
	
	Если ИмяАктивногоДинамическогоСписка = "ЗадачиСписокЗвонки"	Тогда
		Запрос.УстановитьПараметр("НаименованиеГруппы", "%АНКЕТА%");
		//НормативныйПериодОбновленияОтветаНаВопросВМесяцах = 3;	
		//НеПоказыватьОтветыНаВопросыТребующиеОбновленияОтвета = ЛОЖЬ;
	ИначеЕсли ИмяАктивногоДинамическогоСписка = "ЗадачиСписокПочта" Тогда
		Запрос.УстановитьПараметр("НаименованиеГруппы", "%АНКЕТА%");
		//НормативныйПериодОбновленияОтветаНаВопросВМесяцах = 3;	
		//НеПоказыватьОтветыНаВопросыТребующиеОбновленияОтвета = ЛОЖЬ;
	ИначеЕсли ИмяАктивногоДинамическогоСписка = "ЗадачиСписокЛояльностьПродаж" Тогда
		Запрос.УстановитьПараметр("НаименованиеГруппы", "%ЛОЯЛЬНОСТЬ_ПРОДАЖ%");
		//НормативныйПериодОбновленияОтветаНаВопросВМесяцах = 0;	
		//НеПоказыватьОтветыНаВопросыТребующиеОбновленияОтвета = ЛОЖЬ;
	ИначеЕсли ИмяАктивногоДинамическогоСписка = "ЗадачиСписокЛояльностьРемонта" Тогда
		 Запрос.УстановитьПараметр("НаименованиеГруппы", "%ЛОЯЛЬНОСТЬ_РЕМОНТА%");
		 //НормативныйПериодОбновленияОтветаНаВопросВМесяцах = 0;	
		 //НеПоказыватьОтветыНаВопросыТребующиеОбновленияОтвета = ЛОЖЬ;
	ИначеЕсли ИмяАктивногоДинамическогоСписка = "ЗадачиСписокВебСервис" Тогда
		Запрос.УстановитьПараметр("НаименованиеГруппы", "%АНКЕТА%");
		//НормативныйПериодОбновленияОтветаНаВопросВМесяцах = 3;	
		//НеПоказыватьОтветыНаВопросыТребующиеОбновленияОтвета = ЛОЖЬ;
	КонецЕсли;

	РезультатЗапроса = ОбщегоНазначения.ВыполнитьЗапрос(Запрос);
	Если РезультатЗапроса.Пустой() Тогда
		Возврат
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НормативныйПериодОбновленияОтветаНаВопрос 	=	Выборка.ПериодНеПоказыватьПредыдущийОтвет;
		МодульПериодаМеждуПоследнимОтветомИВопросом = Выборка.ПериодМеждуПоследнимОтветомИВопросом;
		
		Если МодульПериодаМеждуПоследнимОтветомИВопросом < 0 Тогда
			  МодульПериодаМеждуПоследнимОтветомИВопросом = (-1)*МодульПериодаМеждуПоследнимОтветомИВопросом;
		КонецЕсли;
		
		//Заполни таблицу ТаблицаВведенныхОтветов
		НоваяСтрока = ЭтаФорма.ТаблицаВведенныхОтветов.Добавить();
		НоваяСтрока.ВопросАнкеты 				= Выборка.Вопрос;
		НоваяСтрока.ВопросСтрокой 				= Выборка.ВопросСтрокой;
		НоваяСтрока.ВопросТребуетВыбораОтвета	= Выборка.ВопросТребуетВыбораОтвета;
		
		Если МодульПериодаМеждуПоследнимОтветомИВопросом > НормативныйПериодОбновленияОтветаНаВопрос Тогда 
			НоваяСтрока.ВопросТребуетОбновитьОтвет = Истина;
		Иначе
			 НоваяСтрока.ОтветСтрокой  = Выборка.ОтветСтрокой;	
			 
			//Форматирование текста ответа: ответ серым цветом (=1)если есть ранее полученный ответ, иначе черным (=2)
			//--------------------------------------------------------------------------------------------------------
			Доступно = ЗначениеЗаполнено(Выборка.ОтветСтрокой);
			НоваяСтрока.ФорматТекстаОтвета = ?(Доступно, 1, 2);			 
		КонецЕсли;
		
		//Заполни кэш вопросов-ответов
		НовСтрока = ЭтаФорма.ТаблицаВопросОтвет.Добавить();
		НовСтрока.Вопрос = Выборка.Вопрос;
		НовСтрока.Ответ="";
		НовСтрока.ВопросАнкетыТребовалОбновитьОтвет = НоваяСтрока.ВопросТребуетОбновитьОтвет;
		НовСтрока.ПорядковыйНомерВопроса = Выборка.Порядок;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ЗадачаЛояльностиПродажОтменить(Команда)
	// Пометим задачу как принудительно закрытую
	
	ИмяЭлемента = ЭтаФорма.ИмяАктивногоДинамичСписка;
	
	Если Элементы[ИмяЭлемента].ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Если Элементы[ИмяЭлемента].ТекущиеДанные.ДатаЗакрытия <> Дата("00010101") Тогда
		Возврат
	КонецЕсли;
	
	СписокОтветов =  ПолучиСписокОтветовПричинРучогоЗакрытияЗадачиЛояльности();
	
	Если СписокОтветов.Количество()=0 Тогда
		ПоказатьПредупреждение(,"Не задан список причин ручного закрытия задач",3);
		Возврат
	КонецЕсли;
	
	ДопПарамОбработчикаОповещения = Новый Структура("Контрагент, СигнатураПродажи, Телефон, ИмяЭлемента", Элементы[ИмяЭлемента].ТекущиеДанные.Контрагент, Элементы[ИмяЭлемента].ТекущиеДанные.СигнатураПродажи, Элементы[ИмяЭлемента].ТекущиеДанные.Телефон, ИмяЭлемента); 
	Оп = Новый ОписаниеОповещения("ОбработкаОповещения2", ЭтотОбъект, ДопПарамОбработчикаОповещения);
	ПоказатьВыборИзМеню(Оп, СписокОтветов, Команда);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения2(ВыбЗначОтвет, ДопПараметры) Экспорт
	
	Если ВыбЗначОтвет = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДатаЗакрытия = ТекущаяДата();

	// Запиши анкету
	Успех = ЗаписатьВыбранныйОтвет_НаСервере(ДатаЗакрытия, ДопПараметры.Телефон);
	Если Не Успех Тогда	
		ПоказатьПредупреждение(, "Ошибка записи анкеты", 3);
	КонецЕсли;
		
	// Закрой задачу
	Успех = УстановиПричинуЗакрытияЗадачиЛояльности(ДопПараметры.СигнатураПродажи, ДатаЗакрытия, ВыбЗначОтвет.Значение);
	Если Не Успех Тогда	
		ПоказатьПредупреждение(, "Ошибка закрытия задачи", 3);
	КонецЕсли;
	
	Если Успех Тогда
		ЗакройСпакетированныеЗадачи(ДопПараметры.СигнатураПродажи, ДатаЗакрытия)
	КонецЕсли;

	// Обнови динамический список (убери закрытую задачу)
	Элементы[ДопПараметры.ИмяЭлемента].Обновить();
	
КонецПроцедуры

&НаСервере
Функция УстановиПричинуЗакрытияЗадачиЛояльности(СигнатураПродажи, Дата, ВыбЗнач)
	Возврат РегистрыСведений.ЗадачиЗвонокЛояльности.УстановиЗначениеРеквизитаИЗакройЗадачу(СигнатураПродажи, ТекущаяДата(), "ПричинаЗакрытия",ВыбЗнач, ПараметрыСеанса.ТекущийПользователь); 
КонецФункции

&НаКлиенте
Процедура ЛояльностьПродажПоказатьДокумент(Команда)
	
	Сигнатура = СокрЛП(ЭтаФорма.Элементы.ЗадачиСписокЛояльностьПродаж.ТекущиеДанные.СигнатураПродажи);
	Если Не ЗначениеЗаполнено(Сигнатура) Тогда
		Возврат
	КонецЕсли;	
	
	Парам = Новый Структура();
	Парам.Вставить("СигнатураПродажи", Сигнатура);
	Фрм = ОткрытьФорму("Обработка.КонсольИсходящихЗвонков.Форма.ФормаНTML", Парам);
КонецПроцедуры

&НаКлиенте
Процедура ЛояльностьРемонтаПоказатьДокумент(Команда)
	Сигнатура = СокрЛП(ЭтаФорма.Элементы.ЗадачиСписокЛояльностьРемонта.ТекущиеДанные.СигнатураПродажи);
	Если Не ЗначениеЗаполнено(Сигнатура) Тогда
		Возврат
	КонецЕсли;	
	
	Парам = Новый Структура();
	Парам.Вставить("СигнатураПродажи", Сигнатура);
	Фрм = ОткрытьФорму("Обработка.КонсольИсходящихЗвонков.Форма.ФормаНTML", Парам);

КонецПроцедуры

&НаКлиенте 
Функция ПолучитьПодключениеБД_НаКлиенте(ПараметрыСоединения)
	//Возвращает com-соединение

	ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ = Неопределено;

	Доступно =  ТипЗнч(ПараметрыСоединения) = Тип("Строка");
	Доступно = Доступно И ЗначениеЗаполнено(ПараметрыСоединения);
	
	Если Не Доступно Тогда
		Возврат ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ
	КонецЕсли;
	
	V82COMConnector= Новый COMОбъект("V83.COMConnector");
	 Попытка
		 Возврат V82COMConnector.Connect(ПараметрыСоединения);
	 Исключение
		ПоказатьПредупреждение(, "Ошибка подключения к базе-источнику", 3);
		Возврат Неопределено;
	 КонецПопытки;
 КонецФункции

 //<Изменение номера телефона>
 &НаКлиенте
Процедура ИсправьТелНомер(Команда)
	
	ТекДанные = ЭтаФорма.Элементы[ЭтаФорма.ИмяАктивногоДинамичСписка].ТекущиеДанные;
	
	Доступно = ТекДанные <> Неопределено;
	
	Если Не Доступно Тогда
		Возврат
	КонецЕсли;
	
	ДопПараметры = Новый Структура("ИмяАктивногоДинамичСписка", ЭтаФорма.ИмяАктивногоДинамичСписка);
	Оп = Новый ОписаниеОповещения("ОбработчикОповещения_ИсправьТелНомер", ЭтотОбъект, ДопПараметры);
	ВыбЗнач = ТекДанные.Телефон;
	ПоказатьВводЗначения(Оп, ВыбЗнач, "Новый номер", Тип("Строка"));
	
КонецПроцедуры
 
 &НаКлиенте
 Процедура ОбработчикОповещения_ИсправьТелНомер(ВыбЗнач, ДопПараметры) Экспорт
	 //Выполянет замену номера телефона абонента в активном динамическом списке
	 //ВыбЗнач = новый тел. номер
	 //ДопПараметры - структура, содержащая имя активного динамического списка
	 
	Доступно = ТипЗнч(ВыбЗнач) = Тип("Строка");
	Доступно = Доступно И ЗначениеЗаполнено(ВыбЗнач);
	Доступно = Доступно И ТипЗнч(ДопПараметры) = Тип("Структура");
	Доступно = Доступно И ДопПараметры <> Неопределено;
		
	ИмяАктивногоСписка =  "";
	ДопПараметры.Свойство("ИмяАктивногоДинамичСписка", ИмяАктивногоСписка);
	
	Доступно = Доступно И ИмяАктивногоСписка <> Неопределено;
	Доступно = Доступно И ЗначениеЗаполнено(ИмяАктивногоСписка);
	
	Если Не Доступно Тогда
		Возврат
	КонецЕсли;
	
	ВыбЗнач = СокрЛП(ВыбЗнач); // удалим пробелы, ошибочно введенные пользователем
	
	СтароеЗначениеРеквизита = ЭтаФорма.Элементы[ИмяАктивногоДинамичСписка].ТекущиеДанные.Телефон;

	Если ИмяАктивногоСписка = "ЗадачиСписокЗвонки" Или ИмяАктивногоСписка = "ЗадачиСписокПочта" Тогда
		Успех = ИсправьТелНомерНаСервере(СтароеЗначениеРеквизита, ВыбЗнач);	
		Если Успех Тогда
			ЭтаФорма.Элементы[ИмяАктивногоСписка].Обновить();
			ЗаполниТаблицуВопросовТребующихВводОтветов(ИмяАктивногоСписка, ВыбЗнач);	
		Иначе
			ПоказатьПредупреждение(, "Не удалось изменить номер", 3);
		КонецЕсли;
	ИначеЕсли ИмяАктивногоСписка = "ЗадачиСписокЛояльностьПродаж" Или ИмяАктивногоСписка = "ЗадачиСписокЛояльностьРемонта" Тогда
		Контрагент 			= ЭтаФорма.Элементы[ИмяАктивногоСписка].ТекущиеДанные.Контрагент;
		СигнатураПродажи 	= ЭтаФорма.Элементы[ИмяАктивногоСписка].ТекущиеДанные.СигнатураПродажи;

		Успех = ИзмениЗначениеРеквизитаЗадачиЛояльности(СигнатураПродажи, "Телефон", СтароеЗначениеРеквизита, ВыбЗнач);	
		Если Успех Тогда
			ЭтаФорма.Элементы[ИмяАктивногоСписка].Обновить();
			ЗаполниТаблицуВопросовТребующихВводОтветов(ИмяАктивногоСписка, ВыбЗнач);
		Иначе
			ПоказатьПредупреждение(, "Не удалось изменить номер", 3);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИсправьТелНомерНаСервере(СтароеЗначение, ВыбЗнач)
	Возврат РегистрыСведений.ЗадачиОбратныйЗвонок.УстановиЗначениеИзмерения(СтароеЗначение, ВыбЗнач);
КонецФункции
 //</Изменение номера телефона>

&НаСервере
Функция ИзмениЗначениеРеквизитаЗадачиЛояльности(СигнатураПродажи, ИмяРеквизита, СтароеЗначениеРеквизита, ВыбЗнач)
	Возврат РегистрыСведений.ЗадачиЗвонокЛояльности.УстановиЗначениеРеквизита(СигнатураПродажи, ИмяРеквизита, СтароеЗначениеРеквизита, ВыбЗнач);	
КонецФункции

&НаСервере
Функция ИзмениЗначениеРеквизитаЗадачиОбратныйЗвонок(Телефон, ИмяРеквизита, ЗначениеРеквизита)	
	Возврат РегистрыСведений.ЗадачиОбратныйЗвонок.УстановиЗначениеРеквизита(Телефон, ИмяРеквизита, ЗначениеРеквизита);
КонецФункции

&НаСервере
Функция ИзмениЗначениеРеквизитаЗадачиИнтернетЗаявки(Телефон, ИмяРеквизита, ЗначениеРеквизита)	
	Возврат РегистрыСведений.ЗадачиИнтернетЗаявки.УстановиЗначениеРеквизита(Телефон, ИмяРеквизита, ЗначениеРеквизита);
КонецФункции

&НаКлиенте
Процедура ЗадачиСписокЛояльностьПродажПриАктивизацииСтроки(Элемент)
	
	//Очистить кэш вопросов - ответов
	ЭтаФорма.ТаблицаВопросОтвет.Очистить();
	
	ИмяТекСтраницы = ЭтаФорма.Элементы.ПанельСтраниц.ТекущаяСтраница.Имя;
	ИмяЭлемента = "ЗадачиСписок"+ИмяТекСтраницы;
	
	Если (Элементы[ИмяЭлемента].ТекущиеДанные = Неопределено) Тогда
		Возврат
	КонецЕсли;
	
	ЭтаФорма.ЗадачаКомментарий = "";
	
	// Покажи историю общения
	ПокажиИсториюОбщения(Элементы[ИмяЭлемента].ТекущиеДанные.Телефон);
	
	// Загрузим на форму данные анкеты
	ЗаполниТаблицуВопросовТребующихВводОтветов(ИмяЭлемента, Элементы[ИмяЭлемента].ТекущиеДанные.Телефон);	

КонецПроцедуры
	
&НаСервере
Процедура ПокажиИсториюОбщения(ТелНомер)
	
	ЭтаФорма.ЗадачаИстория.Очистить();
					   
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 10
		               |	ИСТИНА КАК ЭтоЗвонок,
		               |	Рег.Дата КАК Дата,
		               |	Рег.ЭтоВходящий,
		               |	ВЫБОР
		               |		КОГДА Рег.ЭтоВходящий
		               |			ТОГДА Опер.Владелец
		               |		ИНАЧЕ Иниц.Владелец
		               |	КОНЕЦ КАК Оператор,
		               |	Рег.Сигнатура,
		               |	Рег.Принят
		               |ИЗ
		               |	РегистрСведений.Звонки КАК Рег
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыПривязка КАК Иниц
		               |		ПО (Иниц.Объект = Рег.Инициатор)
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыПривязка КАК Опер
		               |		ПО (Опер.Объект = Рег.АбонентВнутренний)
		               |ГДЕ
		               |	Рег.АбонентВнешний = &АбонентВнешний
		               |	И Рег.Дата >= &ОпорнаяДата
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Дата УБЫВ";

		   
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("АбонентВнешний", СокрЛП(ТелНомер));
		Запрос.УстановитьПараметр("ОпорнаяДата",ДобавитьМесяц(ТекущаяДата(), -3));
		
		РезультатЗапроса = ОбщегоНазначения.ВыполнитьЗапрос(Запрос);
		Если РезультатЗапроса.Пустой() Тогда
			Возврат;
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока (Выборка.Следующий()) Цикл			
			НовСтрока = ЭтаФорма.ЗадачаИстория.Добавить();
			
			НовСтрока.ЭтоЗвонок 	= Выборка .ЭтоЗвонок;
			НовСтрока.ЭтоВходящий 	= Выборка .ЭтоВходящий;
			НовСтрока.Оператор 		= Выборка .Оператор;
			НовСтрока.Дата 			= Выборка .Дата;
			НовСтрока.Сигнатура 	= Выборка .Сигнатура;
			НовСтрока.Принят		= Выборка .Принят;
		КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаЛояльностиРемонтовОтменить(Команда)
	// Пометим задачу как принудительно закрытую
	
	ИмяТекСтраницы = ЭтаФорма.Элементы.ПанельСтраниц.ТекущаяСтраница.Имя;
	ИмяЭлемента = "ЗадачиСписок"+ИмяТекСтраницы;

	
	Если Элементы[ИмяЭлемента].ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Если Элементы[ИмяЭлемента].ТекущиеДанные.ДатаЗакрытия <> Дата("00010101") Тогда
		Возврат
	КонецЕсли;
	
	СписокОтветов =  ПолучиСписокОтветовПричинРучогоЗакрытияЗадачи();
	
	Если СписокОтветов.Количество()=0 Тогда
		ПоказатьПредупреждение(,"Не задан список причин ручного закрытия задач",3);
		Возврат
	КонецЕсли;
	
	ДопПарамОбработчикаОповещения = Новый Структура("Контрагент, ДатаЗакрытия, ИмяЭлемента", Элементы[ИмяЭлемента].ТекущиеДанные.Контрагент, Элементы[ИмяЭлемента].ТекущиеДанные.ДатаЗакрытия, ИмяЭлемента); 
	Оп = Новый ОписаниеОповещения("ОбработкаОповещения2", ЭтотОбъект, ДопПарамОбработчикаОповещения);
	ПоказатьВыборИзМеню(Оп, СписокОтветов, Команда);

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВведенныхОтветовОтветСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВопросАнкеты = Элемент.Родитель.Родитель.ТекущиеДанные.ВопросАнкеты;
	СписокОтветов = ТаблицаВведенныхОтветов_ПолучиСписокОтветов_НаСервере(ВопросАнкеты);
	ВопросТребуетОбновитьОтвет = Элемент.Родитель.Родитель.ТекущиеДанные.ВопросТребуетОбновитьОтвет;
	Если СписокОтветов.Количество()>0 Тогда
		ДопПарамОбработчикаОповещения = Новый Структура("ВопросАнкеты", ВопросАнкеты); 
		Оп = Новый ОписаниеОповещения("ОбработкаОповещения_ТаблицаВведенныхОтветовОтветНачалоВыбора", ЭтотОбъект, ДопПарамОбработчикаОповещения);
		ПоказатьВыборИзСписка(Оп, СписокОтветов, Элемент);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения_ТаблицаВведенныхОтветовОтветНачалоВыбора(ВыбЗначОтвет, ДопПараметры) Экспорт
	
	Если ВыбЗначОтвет = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	НайденныеСтроки = ЭтаФорма.ТаблицаВведенныхОтветов.НайтиСтроки(ДопПараметры); // должны найти одну строку
	Если НайденныеСтроки.Количество()<>1 Тогда
		Возврат
	КонецЕсли;

	НайденныеСтроки[0].ОтветСтрокой = ВыбЗначОтвет.Значение;
	ДобавитьЗаписьВТаблицуВопросОтвет(ДопПараметры.ВопросАнкеты, ВыбЗначОтвет.Значение);
	НайденныеСтроки[0].ФорматТекстаОтвета = 2;
	
КонецПроцедуры

&НаСервере
Функция ТаблицаВведенныхОтветов_ПолучиСписокОтветов_НаСервере(ВопросАнкеты)
	сзОтветы = Новый СписокЗначений();

	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АнкетыВариантыОтветов.Ответ КАК Ответ
	|ИЗ
	|	Справочник.Анкеты.ВариантыОтветов КАК АнкетыВариантыОтветов
	|ГДЕ
	|	АнкетыВариантыОтветов.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ВопросАнкеты);
	РезультатЗапроса = ОбщегоНазначения.ВыполнитьЗапрос(Запрос);
	Если РезультатЗапроса.Пустой() Тогда
		Возврат сзОтветы
	КонецЕсли;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		сзОтветы.Добавить(Выборка.Ответ);
	КонецЦикла;
	Возврат сзОтветы;
		
КонецФункции

&НаКлиенте
Процедура ТаблицаВведенныхОтветовОтветСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	// Индекс строки	
	//Инд = ЭтаФорма.Элементы.ТаблицаВведенныхОтветов.ТекущаяСтрока;
	
	ТекДанные = ЭтаФорма.Элементы.ТаблицаВведенныхОтветов.ТекущиеДанные;
	
	//Выход, если вопрос требует не выбора, а ввода ответа
	Если ТекДанные.ВопросТребуетВыбораОтвета Тогда 
		СтандартнаяОбработка=Ложь;
		Возврат
	КонецЕсли;
	ТекДанные.ФорматТекстаОтвета = 2;
	ДобавитьЗаписьВТаблицуВопросОтвет(ТекДанные.ВопросАнкеты, Текст);

	
	//Если ЭтаФорма.ТаблицаВведенныхОтветов[Инд].ВопросТребуетВыбораОтвета Тогда
	//	СтандартнаяОбработка=Ложь;
	//	Возврат
	//КонецЕсли;
	//
	
	////<Измени шрифтответа на вопрос, уже полученный при предыдущем разговоре,  на темный>
	//ЭтаФорма.ТаблицаВведенныхОтветов[Инд].ФорматТекстаОтвета = 2;

	////<Добавь запись в кэш вопрос-ответ>	
	//ДобавитьЗаписьВТаблицуВопросОтвет(ЭтаФорма.ТаблицаВведенныхОтветов[Инд].ВопросАнкеты, Текст);

	Элемент.СписокВыбора.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВведенныхОтветовОтветКомментарийСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
		
	ТекДанные = ЭтаФорма.Элементы.ТаблицаВведенныхОтветов.ТекущиеДанные;	
	ТекДанные.ФорматТекстаОтвета = 2;
	ДобавитьЗаписьВТаблицуВопросОтвет(ТекДанные.ВопросАнкеты, ,Текст);

КонецПроцедуры


&НаСервере
Процедура ДобавитьЗаписьВТаблицуВопросОтвет(ВопросАнкеты, Ответ="", ОтветКомментарий = "")
	
	ПарамОтбора = Новый Структура("Вопрос", ВопросАнкеты);
	НайденныеСтроки = ЭтаФорма.ТаблицаВопросОтвет.НайтиСтроки(ПарамОтбора);
	
	Если НайденныеСтроки.Количество()>0 Тогда
		СтрокаТЧ = НайденныеСтроки[0];
	Иначе
		СтрокаТЧ = ЭтаФорма.ТаблицаВопросОтвет.Добавить();
	КонецЕсли;	
	
	СтрокаТЧ.Вопрос = ВопросАнкеты;
	
	Если ЗначениеЗаполнено(Ответ) Тогда //значит позльзователь ввел/выбрал значение для поля Ответ
		СтрокаТЧ.Ответ = Ответ;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтветКомментарий) Тогда //значит позльзователь ввел/выбрал значение для поля ОтветКомментарий
		СтрокаТЧ.ОтветКомментарий = ОтветКомментарий;
	КонецЕсли;

	
КонецПроцедуры

//<Запись анкеты>
&НаКлиенте
Процедура ЗаписатьАнкету(Команда)
	
	ДатаАнкеты = ТекущаяДата();
	
	Тел = ЭтаФорма.Элементы[ЭтаФорма.ИмяАктивногоДинамичСписка].ТекущиеДанные.Телефон;
		
	Доступно = ЗначениеЗаполнено(Тел);
	Доступно = Доступно И  ЭтаФорма.ТаблицаВопросОтвет.Количество()>0;
	
	Если Не Доступно Тогда
		ПоказатьПредупреждение(, "Запись анкеты невозможна. Не указан телефон абонента или не заполнена анкета", 3);
		Возврат
	КонецЕсли;
	
	
	// Запиши анкету
	//--------------------------------------------
	СигнатураПродажи = ""; //значение по умолчанию
	Если ЭтаФорма.ИмяАктивногоДинамичСписка = "ЗадачиСписокЛояльностьПродаж" Или  ЭтаФорма.ИмяАктивногоДинамичСписка = "ЗадачиСписокЛояльностьРемонта" Тогда
		СигнатураПродажи = ЭтаФорма.Элементы[ЭтаФорма.ИмяАктивногоДинамичСписка].ТекущиеДанные.СигнатураПродажи; 	
	КонецЕсли;
	
	Доступно = ЗаписатьВыбранныйОтвет_НаСервере(ДатаАнкеты, Тел, СигнатураПродажи);
	Если Не Доступно Тогда	
		ПоказатьПредупреждение(, "Ошибка записи анкеты", 3);
	КонецЕсли;
	
	//Закрой задачу
	// В реквизит ЗвонокЗакрытия запиши или сигнатуру или внутренний номер сотрудника контакт-центра
	Если ЭтаФорма.ИмяАктивногоДинамичСписка = "ЗадачиСписокЛояльностьПродаж" Или  ЭтаФорма.ИмяАктивногоДинамичСписка = "ЗадачиСписокЛояльностьРемонта" Тогда
		
		//Контрагент = ЭтаФорма.Элементы[ЭтаФорма.ИмяАктивногоДинамичСписка].ТекущиеДанные.Контрагент;
		Успех = ЗакройЗадачуЛояльностиНаСервере(СигнатураПродажи, ДатаАнкеты);
		Если Не Успех Тогда
			ПоказатьПредупреждение(, "Ошибка закрытия задачи", 3);
		КонецЕсли;
		
		//16.10.2017,+, Закрой спакетированные задачи
		//-----------------------------------------------------------------------------
		Если ЭтаФорма.ИмяАктивногоДинамичСписка = "ЗадачиСписокЛояльностьРемонта" Тогда
			//Для Каждого ПодобнаяЗадача Из ЭтаФорма.Ремонты_ПодобныеЗадачи Цикл
			//	Если ПодобнаяЗадача.Спакетировать Тогда	
			//		Успех = ЗапишиПакетЗадач(СигнатураПродажи, ПодобнаяЗадача.СигнатураПродажи);
			//		Успех = ЗакройЗадачуЛояльностиНаСервере(ПодобнаяЗадача.СигнатураПродажи, ДатаАнкеты);
			//	КонецЕсли;
			//КонецЦикла;
			//=>
			ЗакройСпакетированныеЗадачи(СигнатураПродажи, ДатаАнкеты);
		КонецЕсли;
		
		СтартуйБП(СигнатураПродажи);
		
	КонецЕсли;
	
	ЭтаФорма.Элементы[ЭтаФорма.ИмяАктивногоДинамичСписка].Обновить();
	
	
КонецПроцедуры

&НаСервере
Функция СтартуйБП(Сигнатура)
	
	ТекДата = ТекущаяДата();
	
	//Запусти процесс формирования задач обработки негативных анкет
	//-------------------------------------------------------------
	БП 					= БизнесПроцессы.ОбратнаяСвязьЛояльности.СоздатьБизнесПроцесс();
	БП.Дата 			= ТекДата;
	БП.ДатаСтарта		= ТекДата;
	БП.Точка			= ЭтаФорма.Параметры.ТочкаПродажи;
	БП.СигнатураПродажи	= ЭтаФорма.Параметры.СигнатураПродажи;
	БП.Телефон			= ЭтаФорма.Параметры.Телефон;
	
	//Определи подразделение-исполнитель и подразделение-контролер
	//------------------------------------------------------------
	
	//Если Не ЗначениеЗаполнено(ЭтотОбъект.Точка) Тогда 
	//...	
	//КонецЕсли;
	
	Если СтрНайти(БП.Точка, "осква") Тогда        
		Подр = Справочники.Предприятие.НайтиПоКоду("000000071"); // Луидор-Москва
		БП.ПодразделениеИсполнитель = Подр;
	ИначеЕсли 
		СтрНайти(БП.Точка, "19 км") Тогда
		Подр = Справочники.Предприятие.НайтиПоКоду("000001683"); //Гальяново
		БП.ПодразделениеИсполнитель = Подр;	

	ИначеЕсли 
		СтрНайти(БП.Точка, "Байкальская") Тогда
		Подр = Справочники.Предприятие.НайтиПоКоду("000001682"); //Братеево
		БП.ПодразделениеИсполнитель = Подр;	
	ИначеЕсли 
		СтрНайти(БП.Точка, "Балашиха") Тогда
		Подр = Справочники.Предприятие.НайтиПоКоду("000001681"); //Владимир
		БП.ПодразделениеИсполнитель = Подр;	
	ИначеЕсли 
		СтрНайти(БП.Точка, "Владимир") Тогда
		Подр = Справочники.Предприятие.НайтиПоКоду("000000145"); //Владимир
		БП.ПодразделениеИсполнитель = Подр;	
	ИначеЕсли 
		СтрНайти(БП.Точка, "Казань") Тогда
		Подр = Справочники.Предприятие.НайтиПоКоду("000001518"); //Луидор-Казань
		БП.ПодразделениеИсполнитель = Подр;	
	ИначеЕсли 
		СтрНайти(БП.Точка, "Саранск") Тогда
		Подр = Справочники.Предприятие.НайтиПоКоду("000000009"); //Луидор-Саранск
		БП.ПодразделениеИсполнитель = Подр;	
	ИначеЕсли 
		СтрНайти(БП.Точка, "Тамбов") Тогда
		Подр = Справочники.Предприятие.НайтиПоКоду("000002164"); //Азимут
		БП.ПодразделениеИсполнитель = Подр;	
	ИначеЕсли 
		СтрНайти(БП.Точка, "Уфа") Тогда
		Подр = Справочники.Предприятие.НайтиПоКоду("000000141"); //Луидор-Уфа
		БП.ПодразделениеИсполнитель = Подр;
	ИначеЕсли 
		СтрНайти(БП.Точка, "Химки") Тогда
		Подр = Справочники.Предприятие.НайтиПоКоду("000001684"); //Химки
		БП.ПодразделениеИсполнитель = Подр;	  	
	ИначеЕсли 
		СтрНайти(БП.Точка, "Чебоксары") Тогда
		Подр = Справочники.Предприятие.НайтиПоКоду("000000023"); //Луидор-Чебоксары
		БП.ПодразделениеИсполнитель = Подр;	
	ИначеЕсли 
		СтрНайти(БП.Точка, "Челябинск") Тогда
		Подр = Справочники.Предприятие.НайтиПоКоду("000001133"); //Челябинск
		БП.ПодразделениеИсполнитель = Подр;
		
	//Участок кузовного ремонта Москва
	ИначеЕсли  СтрНайти(БП.Точка, "Моторный центр") Тогда
		Подр = Справочники.Предприятие.НайтиПоКоду("000000071"); //Луидор-Москва
		БП.ПодразделениеИсполнитель = Подр;
	ИначеЕсли  СтрНайти(БП.Точка, "Участок СТО Экспресс Сервис") Тогда
		Подр = Справочники.Предприятие.НайтиПоКоду("000000071"); //Луидор-Москва
		БП.ПодразделениеИсполнитель = Подр;  	
		
	//Луидор-Тюнинг
	//-------------    
	ИначеЕсли  СтрНайти(БП.Точка, "Моторный центр") Тогда
		Подр = Справочники.Предприятие.НайтиПоКоду("000000117"); //Луидор-Тюнинг
		БП.ПодразделениеИсполнитель = Подр;
	ИначеЕсли  СтрНайти(БП.Точка, "Производственный участок") Тогда
		Подр = Справочники.Предприятие.НайтиПоКоду("000000117"); //Луидор-Тюнинг
		БП.ПодразделениеИсполнитель = Подр;
	ИначеЕсли  СтрНайти(БП.Точка, "Участок кузовного ремонта НН") Тогда
		Подр = Справочники.Предприятие.НайтиПоКоду("000000117"); //Луидор-Тюнинг
		БП.ПодразделениеИсполнитель = Подр;
	ИначеЕсли  СтрНайти(БП.Точка, "Участок Кузовного ремонта Плюс") Тогда
		Подр = Справочники.Предприятие.НайтиПоКоду("000000117"); //Луидор-Тюнинг
		БП.ПодразделениеИсполнитель = Подр;	  	
	ИначеЕсли  СтрНайти(БП.Точка, "Участок легковых а/м") Тогда
		Подр = Справочники.Предприятие.НайтиПоКоду("000000117"); //Луидор-Тюнинг
		БП.ПодразделениеИсполнитель = Подр;    
	ИначеЕсли  СтрНайти(БП.Точка, "Участок люксовки") Тогда
		Подр = Справочники.Предприятие.НайтиПоКоду("000000117"); //Луидор-Тюнинг
		БП.ПодразделениеИсполнитель = Подр;  
	ИначеЕсли  СтрНайти(БП.Точка, "Участок Ларина 12") Тогда
		Подр = Справочники.Предприятие.НайтиПоКоду("000000117"); //Луидор-Тюнинг
		БП.ПодразделениеИсполнитель = Подр;
	ИначеЕсли  СтрНайти(БП.Точка, "Участок ремонта агрегатов") Тогда
		Подр = Справочники.Предприятие.НайтиПоКоду("000000117"); //Луидор-Тюнинг
		БП.ПодразделениеИсполнитель = Подр;
	ИначеЕсли  СтрНайти(БП.Точка, "Участок грузовых а/м") Тогда
		Подр = Справочники.Предприятие.НайтиПоКоду("000000117"); //Луидор-Тюнинг
		БП.ПодразделениеИсполнитель = Подр;
	КонецЕсли;
	
	//Если подразделение не определено, тогда установи подразделение по умолчанию - Кошелев С. С.
	//-------------------------------------------------------------------------------------------
	Если Не ЗначениеЗаполнено(БП.ПодразделениеИсполнитель) Тогда
		Подр = Справочники.Предприятие.НайтиПоКоду("000001345");
		БП.ПодразделениеИсполнитель = Подр;
	КонецЕсли;
	
	// Подразделение-контролер
	//---------------------------------------------------------------------
	Подр = Справочники.Предприятие.НайтиПоКоду("000002320");// "Департамент работы с клиентами/Клиентская служба"
	БП.ПодразделениеКонтролер = Подр;	
	БП.ПодразделениеИнициатор = Подр;
	БП.Записать();
	
	//Стартовать
	//----------
	БП.Старт();
	
КонецФункции


&НаСервере 
Функция ЗакройСпакетированныеЗадачи(СигнатураМастерПродажи, ДатаАнкеты)
	ЗначениеПоУмолчанию = Ложь;
	
	НачатьТранзакцию();
	
	Для Каждого ПодобнаяЗадача Из ЭтаФорма.Объект.Ремонты_ПодобныеЗадачи Цикл
		Если ПодобнаяЗадача.Спакетировать Тогда
			
			Успех = ЗапишиПакетЗадач(СигнатураМастерПродажи, ПодобнаяЗадача.СигнатураПродажи);
			Если Не Успех Тогда
				ОтменитьТранзакцию();	
				Возврат ЗначениеПоУмолчанию;
			КонецЕсли;
			
			Успех = ЗакройЗадачуЛояльностиНаСервере(ПодобнаяЗадача.СигнатураПродажи, ДатаАнкеты);
			Если Не Успех Тогда
				ОтменитьТранзакцию();	
				Возврат ЗначениеПоУмолчанию;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	//ЭтаФорма.Ремонты_ПодобныеЗадачи.Очистить();
	ЭтаФорма.Объект.Ремонты_ПодобныеЗадачи.Очистить();
	ЗафиксироватьТранзакцию();
	Возврат Истина;
КонецФункции

&НаСервере
Функция ЗапишиПакетЗадач(СигнатураМастерЗадачи, СигнатураЗадачи)
	Возврат РегистрыСведений.ЗадачиЛояльностиПакеты.Добавить(СигнатураМастерЗадачи, СигнатураЗадачи);
КонецФункции

&НаСервере
Функция ЗакройЗадачуЛояльностиНаСервере(СигнатураПродажи, ДатаАнкеты)
	
	ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ = Ложь;
	
	Доступно = ТипЗнч(СигнатураПродажи) = Тип("Строка");
	Доступно = Доступно И ЗначениеЗаполнено(СигнатураПродажи);
	Доступно = Доступно И ТипЗнч(ДатаАнкеты) = Тип("Дата");
	Доступно = Доступно И ЗначениеЗаполнено(ДатаАнкеты);
	
	Если Не Доступно Тогда 
		Данные = "СигнатураПродажи="+СигнатураПродажи+" ;ДатаАнкеты="+ДатаАнкеты;
		ЗаписьЖурналаРегистрации("ЗакройЗадачуЛояльностиНаСервере()", УровеньЖурналаРегистрации.Ошибка, Метаданные.Обработки.КонсольИсходящихЗвонков, Данные, "Ошибка в типах или заполнении аргументов");
		Возврат ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭтаФорма.LinkedID) Тогда
		ЗначРекв = ЭтаФорма.LinkedID;
	Иначе
		ЗначРекв = ЭтаФорма.ТелВнутр;
	КонецЕсли;

	Доступно = ЗначениеЗаполнено(ЗначРекв);	
	Если Не Доступно Тогда
		Данные = ЗначРекв;
		ЗаписьЖурналаРегистрации("ЗакройЗадачуЛояльностиНаСервере()", УровеньЖурналаРегистрации.Ошибка, Метаданные.Обработки.КонсольИсходящихЗвонков, Данные, "Не заполнено значение реквизита");
		Возврат ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ
	КонецЕсли;
	
	Успех = РегистрыСведений.ЗадачиЗвонокЛояльности.УстановиЗначениеРеквизитаИЗакройЗадачу(СигнатураПродажи, ДатаАнкеты, "ЗвонокЗакрытия", ЗначРекв, ПараметрыСеанса.ТекущийПользователь);
	
	Если Не Успех Тогда
		Возврат ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

&НаСервере
Функция ЗаписатьВыбранныйОтвет_НаСервере(ДатаАнкеты, ТелАбонента, СигнатураЗадачи = "")
	//Эапись в регистр сведений АнкетыРасширенные
	
	ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ = Ложь;
	
	Доступно = ТипЗнч(ДатаАнкеты) = Тип("Дата");
	Доступно = Доступно И ЗначениеЗаполнено(ДатаАнкеты);
	Доступно = Доступно И ТипЗнч(ТелАбонента) = Тип("Строка") ;
	Доступно = Доступно И ЗначениеЗаполнено(ТелАбонента);
	
	Если Не Доступно Тогда
		Возврат ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ;
	КонецЕсли;
	
	ПустойИд = Справочники.ИдентификаторыСтрок.ПустаяСсылка();
	
	НЗ = РегистрыСведений.АнкетыРасширенные.СоздатьНаборЗаписей();
	НЗ.Отбор.Период.Установить(ДатаАнкеты);
	НЗ.Отбор.Телефон.Установить(ТелАбонента);
	НЗ.Прочитать();
	
	//<Запись ответов на вопросы  и самих вопросов анкеты. Вопросы маршрутизации записываются в момент выбора строки списка>
	Для Каждого Эл Из ЭтаФорма.ТаблицаВопросОтвет Цикл
		
		//14.07.2017, +, не записываем, если ответ не заполнен
		//-----------------------------------------------------
		Если Не ЗначениеЗаполнено(Эл.Ответ) Тогда
			Продолжить;
		КонецЕсли;
		
		ИдСтрокиВопроса = Справочники.ИдентификаторыСтрок.УстановиИдентификаторСтроки(Строка(Эл.Вопрос), "вопрос", Строка(Эл.Вопрос));
		
		Если ИдСтрокиВопроса = ПустойИд Тогда
			Продолжить
		КонецЕсли;
		
		ИдСтрокиОтвета  = Справочники.ИдентификаторыСтрок.УстановиИдентификаторСтроки(Эл.Ответ, "ответ", Эл.Ответ);
		
		ИдСтрокиОтветКомментарий  = Справочники.ИдентификаторыСтрок.УстановиИдентификаторСтроки(Эл.ОтветКомментарий, "ответ", Эл.ОтветКомментарий);
		
		//Если ответ не выбран или не введен,  тогда записываем пустую ссылку 
		//---------------------------------------------------------------------
		//Если ИдСтрокиОтвета = ПустойИд Тогда
		//	Продолжить
		//КонецЕсли;
		
		НоваяЗапись = НЗ.Добавить();
		НоваяЗапись.Период								=	ДатаАнкеты;
		НоваяЗапись.Телефон 							=	ТелАбонента;
		НоваяЗапись.Вопрос								=	ИдСтрокиВопроса;
		НоваяЗапись.Ответ								=	ИдСтрокиОтвета;
		НоваяЗапись.ОтветКомментарий					=	ИдСтрокиОтветКомментарий;
		НоваяЗапись.ПорядковыйНомерВопроса 				=	Эл.ПорядковыйНомерВопроса;
		НоваяЗапись.ВопросАнкетыТребовалОбновитьОтвет 	=	Эл.ВопросАнкетыТребовалОбновитьОтвет;	
		НоваяЗапись.СигнатураЗадачи						=	СигнатураЗадачи; 
	КонецЦикла;
	//</Запись ответов на вопросы и самих вопросов>
	
	Если НЗ.Количество()>0 Тогда
		Попытка
			НЗ.Записать(Истина);
		Исключение
			ЗаписьЖурналаРегистрации("ЗаписатьВыбранныйОтвет_НаСервере()", УровеньЖурналаРегистрации.Ошибка, Метаданные.РегистрыСведений.АнкетыРасширенные, , ОписаниеОшибки());
			Возврат ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ;
		КонецПопытки
	КонецЕсли;	
	
	Возврат Истина;
	
КонецФункции

//Вопросы, которые требовали ответа, но оператор его не ввел (либо не задал, либо не получил ответ)
//&НаСервере
//Функция УДАЛИТЬ_ЗаписатьАнкетыКонтроль_НаСервере(ДатаАнкеты, ТелАбонента)
//	
//	ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ = Ложь;
//	
//	Доступно = ТипЗнч(ДатаАнкеты) = Тип("Дата");
//	Доступно = Доступно И ЗначениеЗаполнено(ДатаАнкеты);
//	Доступно = Доступно И ТипЗнч(ТелАбонента) = Тип("Строка") ;
//	Доступно = Доступно И ЗначениеЗаполнено(ТелАбонента);
//	
//	Если Не Доступно Тогда
//		Возврат ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ;
//	КонецЕсли;
//	
//	ПустойИд = Справочники.ИдентификаторыСтрок.ПустаяСсылка();

//	НЗ = РегистрыСведений.АнкетыКонтроль.СоздатьНаборЗаписей();
//	НЗ.Отбор.Период.Установить(ДатаАнкеты);
//	НЗ.Отбор.Телефон.Установить(ТелАбонента);
//	НЗ.Прочитать();

//	Для Каждого строкаТЗ Из ЭтаФорма.ТаблицаВведенныхОтветов Цикл
//		
//		Если Не	строкаТЗ.ВопросТребуетОбновитьОтвет Тогда
//			Продолжить
//		КонецЕсли;
//		
//		ИдСтрокиВопроса = Справочники.ИдентификаторыСтрок.УстановиИдентификаторСтроки(Строка(строкаТЗ.ВопросАнкеты), "вопрос");
//		Если ИдСтрокиВопроса = ПустойИд Тогда
//			Продолжить
//		КонецЕсли;
//		НоваяЗапись = НЗ.Добавить();
//		НоваяЗапись.Период		=	ДатаАнкеты;
//		НоваяЗапись.Телефон 	=	ТелАбонента;
//		НоваяЗапись.Вопрос		=	ИдСтрокиВопроса;
//		НоваяЗапись.ВопросАнкетыТребовалОбновитьОтвет = ИСТИНА;
//		НоваяЗапись.Оператор	=	ПараметрыСеанса.ТекущийПользователь;
//	КонецЦикла;
//	//</Дополним таблицу вопрос-ответ данными требовали ли вопросы ответа>
//	
//	Если НЗ.Количество()>0 Тогда
//		Попытка
//			НЗ.Записать(Истина);
//		Исключение
//			ЗаписьЖурналаРегистрации("ЗаписатьАнкетыКонтроль_НаСервере()", УровеньЖурналаРегистрации.Ошибка, Метаданные.РегистрыСведений.АнкетыКонтроль, , ОписаниеОшибки());
//			Возврат ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ;	
//		КонецПопытки
//	КонецЕсли;	
//	
//	Возврат Истина;
//КонецФункции
//</Запись анкеты>

#Область Выбор_телефона

&НаКлиенте
Процедура КонсольТелефонВыбрать(Команда)
	ОпОбработчикЗакрытияФормыВыбораТелефона = Новый ОписаниеОповещения("ОбработчикЗакрытияФормыВыбораТелефона", ЭтотОбъект);
	ОткрытьФорму("Обработка.КонсольКонтактЦентраТест.Форма.ФормаВыбораОператора",,ЭтаФорма,,,,ОпОбработчикЗакрытияФормыВыбораТелефона, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикЗакрытияФормыВыбораТелефона(Параметр, ДопПарам) Экспорт

// Проверим заполненность параметров сеанса, отвечающих за регистрацию оператора консоли
// Если параметры заданы, то получим текущее состояние режима "Пауза" для оператора-агента
// Также выполним подключение компоненты телефонии к серверу
//-------------------------------------------------------------------------------------------------

	ОчерСсылка = ЗначенияСервера.ПолучитьЗначениеПараметраСеанса("ККЦОчередь");
	ТелСсылка = ЗначенияСервера.ПолучитьЗначениеПараметраСеанса("ККЦТелефон");

	Если (ЗначениеЗаполнено(ОчерСсылка) И ЗначениеЗаполнено(ТелСсылка)) Тогда		
		//Получи состояние агента телефонии
		//---------------------------------
		ЭтаФорма.КонсольПауза = ОчередиАгенты.АгентПаузаПолучить(ОчерСсылка,ТелСсылка);
		ОбработайВыборТелефонаНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработайВыборТелефонаНаСервере()	
	ЭтаФорма.ТелВнутр = ПараметрыСеанса.ККЦТелефон.Код;
	Если ЗначениеЗаполнено(ЭтаФорма.ТелВнутр) Тогда
		ЭтаФорма.Элементы.Позвонить2.Доступность			= Истина;
		ЭтаФорма.Элементы.КонсольТелефонВыбрать.Доступность	= Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти


&НаКлиенте
Процедура ЗадачиСписокЛояльностьРемонтаПриАктивизацииСтроки(Элемент)
	
	//Очисти кэш вопросов - ответов
	//-------------------------------------
	ЭтаФорма.ТаблицаВопросОтвет.Очистить();
		
	ИмяТекСтраницы = ЭтаФорма.Элементы.ПанельСтраниц.ТекущаяСтраница.Имя;
	ИмяЭлемента = "ЗадачиСписок"+ИмяТекСтраницы;
	
	ТекДанные = Элементы[ИмяЭлемента].ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
			
	ЭтаФорма.ЗадачаКомментарий = "";
	
	// Загрузи на форму данные выбранной задачи
	//-----------------------------------------
	ПокажиИсториюОбщения(ТекДанные.Телефон);
	
	// Загрузи на форму данные анкеты
	//-------------------------------------------------------------------------
	ЗаполниТаблицуВопросовТребующихВводОтветов(ИмяЭлемента, ТекДанные.Телефон);	
	
	// Покажи заказ-наряды из пакета, связанного с этой задачей
	//---------------------------------------------------------
	//ЭтаФорма.ЗаказНаряды.Параметры.УстановитьЗначениеПараметра("СигнатураПакетаПродажи", ТекДанные.СигнатураПродажи);
	СформируйПодобныеЗадачи(ТекДанные.Товар, ТекДанные.СигнатураПродажи);		
	
КонецПроцедуры

&НаСервере
Функция СформируйПодобныеЗадачи(Автомобиль, СигнатураМастерПродажи) 
	//Об = РеквизитФормыВЗначение("Объект");
	//Об.Очистить();
	//Об.Заполнить(Автомобиль);
	//ЗначениеВРеквизитФормы(Об, "Объект");
	
	ЭтаФорма.Ремонты_ПодобныеЗадачи.Очистить();
	ЭтаФорма.Объект.Ремонты_ПодобныеЗадачи.Очистить();
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	//|	ЗадачиЗвонокЛояльности.Контрагент КАК Контрагент,
	|	ЗадачиЗвонокЛояльности.СигнатураПродажи КАК СигнатураПродажи,
	|	ЗадачиЗвонокЛояльности.Телефон КАК Телефон,
	|	ЗадачиЗвонокЛояльности.Телефоны КАК Телефоны,
	//|	ЗадачиЗвонокЛояльности.Тип КАК Тип,
	//|	ЗадачиЗвонокЛояльности.Исполнитель КАК Исполнитель,
	//|	ЗадачиЗвонокЛояльности.Комментарий КАК Комментарий,
	//|	ЗадачиЗвонокЛояльности.ДатаЗакрытия КАК ДатаЗакрытия,
	//|	ЗадачиЗвонокЛояльности.ДатаПостановки КАК ДатаПостановки,
	//|	ЗадачиЗвонокЛояльности.ЗвонокЗакрытия КАК ЗвонокЗакрытия,
	//|	ЗадачиЗвонокЛояльности.ДатаАктуальности КАК ДатаАктуальности,
	//|	ЗадачиЗвонокЛояльности.ПричинаЗакрытия КАК ПричинаЗакрытия,
	//|	ЗадачиЗвонокЛояльности.НапоминаниеПерезвонить КАК НапоминаниеПерезвонить,
	//|	ВЫБОР
	//|		КОГДА ЗадачиЗвонокЛояльности.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
	//|			ТОГДА ЛОЖЬ
	//|		ИНАЧЕ ИСТИНА
	//|	КОНЕЦ КАК Выполнена,
	|	ЕСТЬNULL(Продажи.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаДок,
	|	ЕСТЬNULL(Продажи.Номер, """") КАК НомерДок,
	|	ЕСТЬNULL(Продажи.ДопДата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаЗакрытияЗаказНаряда,
	|	ЕСТЬNULL(Продажи.Объект, """") КАК Товар,
	|	ЕСТЬNULL(Продажи.ХарактеристикаОбъекта, """") КАК ХарактеристикаТовара,
	//|	ЕСТЬNULL(Продажи.Сотрудник, """") КАК Сотрудник,
	|	ЕСТЬNULL(Продажи.Точка, """") КАК ТочкаПродажи,
	|	ЕСТЬNULL(Продажи.КонтактноеЛицо, """") КАК КонтактноеЛицо
	//|	,НеПерезваниватьСрезПоследних.Категория КАК Категория,
	//|	,НеПерезваниватьСрезПоследних.Индикатор КАК Индикатор
	//|	,ЗадачиЗвонокЛояльности.ДатаПервогоПерезвона КАК ДатаПервогоПерезвона
	|ИЗ
	|	РегистрСведений.ЗадачиЗвонокЛояльности КАК ЗадачиЗвонокЛояльности
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Продажи КАК Продажи
	|		ПО ЗадачиЗвонокЛояльности.СигнатураПродажи = Продажи.Сигнатура
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НеПерезванивать.СрезПоследних КАК НеПерезваниватьСрезПоследних
	//|		ПО ЗадачиЗвонокЛояльности.Телефон = НеПерезваниватьСрезПоследних.Телефон
	|ГДЕ
	|	ЗадачиЗвонокЛояльности.ДатаЗакрытия = ДАТАВРЕМЯ(1,1,1)
	|	И ЗадачиЗвонокЛояльности.СигнатураПродажи <> &СигнатураМастерПродажи
	|	И ЕСТЬNULL(Продажи.Объект, """") = &Автомобиль";
	
	Запрос.УстановитьПараметр("СигнатураМастерПродажи", СигнатураМастерПродажи);
	Запрос.УстановитьПараметр("Автомобиль", 			Автомобиль);
	РезультатЗапроса = ОбщегоНазначения.ВыполнитьЗапрос(Запрос);
		
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ""
	КонецЕсли;
		
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Новая = ЭтаФорма.Ремонты_ПодобныеЗадачи.Добавить();
		Новая.НомерДок					=	Выборка.НомерДок;
		Новая.ДатаДок					=	Выборка.ДатаДок;
		Новая.ДатаЗакрытияЗаказНаряда	=	Выборка.ДатаЗакрытияЗаказНаряда;
		Новая.СигнатураПродажи			=	Выборка.СигнатураПродажи;
		Новая.Телефон					=	Выборка.Телефон;
		Новая.Телефоны					=	Выборка.Телефоны;
		Новая.ТочкаПродажи				=	Выборка.ТочкаПродажи;
		Новая.Товар						=	Выборка.Товар;
		
		Новая = ЭтаФорма.Объект.Ремонты_ПодобныеЗадачи.Добавить();
		Новая.НомерДок					=	Выборка.НомерДок;
		Новая.ДатаДок					=	Выборка.ДатаДок;
		Новая.ДатаЗакрытияЗаказНаряда	=	Выборка.ДатаЗакрытияЗаказНаряда;
		Новая.СигнатураПродажи			=	Выборка.СигнатураПродажи;
		Новая.Телефон					=	Выборка.Телефон;
		Новая.Телефоны					=	Выборка.Телефоны;
		Новая.ТочкаПродажи				=	Выборка.ТочкаПродажи;
		Новая.Товар						=	Выборка.Товар;
		Новая.ВидРемонта				=	Выборка.ХарактеристикаТовара;
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Процедура ИзменитьНапоминаниеПерезвонить(Команда)
	// Вставить содержимое обработчика.
	
	ТекДанные = ЭтаФорма.Элементы[ЭтаФорма.ИмяАктивногоДинамичСписка].ТекущиеДанные;
	
	Доступно = ТекДанные <> Неопределено;
	
	Если Не Доступно Тогда
		Возврат
	КонецЕсли;
	
	ДопПараметры = Новый Структура("ИмяАктивногоДинамичСписка", ЭтаФорма.ИмяАктивногоДинамичСписка);
	Оп = Новый ОписаниеОповещения("ОбработчикОповещения_ИсправьНапоминаниеПерезвонить", ЭтотОбъект, ДопПараметры);
	ВыбЗнач = ТекущаяДата();
	ПоказатьВводЗначения(Оп, ВыбЗнач, "Когда перезвонить:", Тип("Дата"));
	
КонецПроцедуры

 &НаКлиенте
 Процедура ОбработчикОповещения_ИсправьНапоминаниеПерезвонить(ВыбЗнач, ДопПараметры) Экспорт
	 //Выполянет замену комментария в активном динамическом списке
	 //ВыбЗнач = новый тел. номер
	 //ДопПараметры - структура, содержащая имя активного динамического списка
	 
	Доступно = ТипЗнч(ВыбЗнач) = Тип("Дата");
	Доступно = Доступно И ЗначениеЗаполнено(ВыбЗнач);
	Доступно = Доступно И ТипЗнч(ДопПараметры) = Тип("Структура");
	Доступно = Доступно И ДопПараметры <> Неопределено;
	
	ИмяАктивногоСписка =  "";
	ДопПараметры.Свойство("ИмяАктивногоДинамичСписка", ИмяАктивногоСписка);
	
	Доступно = Доступно И ИмяАктивногоСписка <> Неопределено;
	Доступно = Доступно И ЗначениеЗаполнено(ИмяАктивногоСписка);
	
	Если Не Доступно Тогда
		Возврат
	КонецЕсли;
	
	СтароеЗначениеРеквизита = ЭтаФорма.Элементы[ИмяАктивногоДинамичСписка].ТекущиеДанные.НапоминаниеПерезвонить;

	Если ИмяАктивногоСписка = "ЗадачиСписокЗвонки" Или ИмяАктивногоСписка = "ЗадачиСписокПочта" Тогда
		Телефон = ЭтаФорма.Элементы[ИмяАктивногоСписка].ТекущиеДанные.Телефон;
		Успех = ИзмениЗначениеРеквизитаЗадачиОбратныйЗвонок(Телефон, "НапоминаниеПерезвонить",ВыбЗнач);
		
		Если Успех Тогда
			ЭтаФорма.Элементы[ИмяАктивногоСписка].Обновить();
		Иначе
			ПоказатьПредупреждение(, "Не удалось изменить реквизит", 3);
		КонецЕсли;

	ИначеЕсли ИмяАктивногоСписка = "ЗадачиСписокЛояльностьПродаж" Или ИмяАктивногоСписка = "ЗадачиСписокЛояльностьРемонта" Тогда
		СигнатураПродажи 	= ЭтаФорма.Элементы[ИмяАктивногоСписка].ТекущиеДанные.СигнатураПродажи;	
		Успех = ИзмениЗначениеРеквизитаЗадачиЛояльности(СигнатураПродажи, "НапоминаниеПерезвонить", СтароеЗначениеРеквизита, ВыбЗнач);	

		Если Успех Тогда
			
			//19.10.2017
			Если  ИмяАктивногоСписка = "ЗадачиСписокЛояльностьРемонта" Тогда
				Для Каждого ПодобныеЗадачи Из ЭтаФорма.Объект.Ремонты_ПодобныеЗадачи Цикл
					Если ПодобныеЗадачи.Спакетировать Тогда
						ИзмениЗначениеРеквизитаЗадачиЛояльности(ПодобныеЗадачи.СигнатураПродажи, "НапоминаниеПерезвонить", СтароеЗначениеРеквизита, ВыбЗнач);	
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ЭтаФорма.Элементы[ИмяАктивногоСписка].Обновить();
		Иначе
			ПоказатьПредупреждение(, "Не удалось изменить реквизит", 3);
		КонецЕсли;
	ИначеЕсли   ИмяАктивногоСписка = "ЗадачиСписокВебСервис" Тогда
		Телефон = ЭтаФорма.Элементы[ИмяАктивногоСписка].ТекущиеДанные.Телефон;
		Успех = ИзмениЗначениеРеквизитаЗадачиИнтернетЗаявки(Телефон, "НапоминаниеПерезвонить",ВыбЗнач);
		
		Если Успех Тогда
			ЭтаФорма.Элементы[ИмяАктивногоСписка].Обновить();
		Иначе
			ПоказатьПредупреждение(, "Не удалось изменить реквизит", 3);
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсправитьКанал(Команда)
	ТекДанные = ЭтаФорма.Элементы[ЭтаФорма.ИмяАктивногоДинамичСписка].ТекущиеДанные;
	
	Доступно = ТекДанные <> Неопределено;
	
	Если Не Доступно Тогда
		Возврат
	КонецЕсли;
	
	ДопПараметры = Новый Структура("ИмяАктивногоДинамичСписка", ЭтаФорма.ИмяАктивногоДинамичСписка);
	Оп = Новый ОписаниеОповещения("ОбработчикОповещения_ИсправьКанал", ЭтотОбъект, ДопПараметры);
	ВыбЗнач = ТекДанные.Канал;
	ПоказатьВводЗначения(Оп, ВыбЗнач, "Введите канал:", Тип("Строка"));

КонецПроцедуры

&НаКлиенте
 Процедура ОбработчикОповещения_ИсправьКанал(ВыбЗнач, ДопПараметры) Экспорт
	 //Выполянет замену сайта в активном динамическом списке
	 //ВыбЗнач = новое имя сайта, с которого поступила заявка
	 //ДопПараметры - структура, содержащая имя активного динамического списка
	 
	Доступно = ТипЗнч(ВыбЗнач) = Тип("Строка");
	Доступно = Доступно И ЗначениеЗаполнено(ВыбЗнач);
	Доступно = Доступно И ТипЗнч(ДопПараметры) = Тип("Структура");
	Доступно = Доступно И ДопПараметры <> Неопределено;
	
	ИмяАктивногоСписка =  "";
	ДопПараметры.Свойство("ИмяАктивногоДинамичСписка", ИмяАктивногоСписка);
	
	Доступно = Доступно И ИмяАктивногоСписка <> Неопределено;
	Доступно = Доступно И ЗначениеЗаполнено(ИмяАктивногоСписка);
	
	Если Не Доступно Тогда
		Возврат
	КонецЕсли;
	
	Сигнатура = ЭтаФорма.Элементы[ИмяАктивногоДинамичСписка].ТекущиеДанные.ПисьмоИнициатор;

	Если ИмяАктивногоСписка = "ЗадачиСписокПочта" Тогда
		Успех = ИсправьКаналНаСервере(Сигнатура, "Инициатор", ВыбЗнач);	
		Если Успех Тогда
			ЭтаФорма.Элементы[ИмяАктивногоСписка].Обновить();
		Иначе
			ПоказатьПредупреждение(, "Не удалось изменить канал", 3);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИсправьКаналНаСервере(Сигнатура, ИмяРеквизита, ЗначениеРеквизита)
	Возврат РегистрыСведений.Письма.УстановиЗначениеРеквизита(Сигнатура, ИмяРеквизита, ЗначениеРеквизита);
КонецФункции

&НаКлиенте
Процедура НаписатьПисьмо(Команда)
	
	ИдФонЗадания = Новый УникальныйИдентификатор();
	ЭтаФорма.СписокИдФоновыхЗаданийОтправкиПисем.Добавить(ИдФонЗадания);

	ИмяАктивногоДинамичСписка = ЭтаФорма.ИмяАктивногоДинамичСписка;
	
	Сигнатура 		= "";
	АбонентВнешний 	= "";	
	ТелВнутренний 	= "";
	ТипЗадачи		= "";
	Если  ЭтаФорма.Элементы[ЭтаФорма.ИмяАктивногоДинамичСписка].ТекущиеДанные <> Неопределено Тогда
		Если ИмяАктивногоДинамичСписка = "ЗадачиСписокЗвонки" Тогда
			Сигнатура 	= ЭтаФорма.Элементы[ИмяАктивногоДинамичСписка].ТекущиеДанные.ЗвонокИнициатор; 
			ТелВнутренний = ЭтаФорма.ПоследнийНабранныйНомерВнутрАбонента;
			ТипЗадачи	=	"Непринятый";
		ИначеЕсли ИмяАктивногоДинамичСписка = "ЗадачиСписокПочта" Тогда
			Сигнатура 	= ЭтаФорма.Элементы[ИмяАктивногоДинамичСписка].ТекущиеДанные.ПисьмоИнициатор;
			ТелВнутренний 	= "";
			ТипЗадачи = "ПрочаяПочта";
		КонецЕсли;
		АбонентВнешний		= ЭтаФорма.Элементы[ЭтаФорма.ИмяАктивногоДинамичСписка].ТекущиеДанные.Телефон;
	КонецЕсли;
	
	Парам = Новый Структура();
	Парам.Вставить("Сигнатура", 				Сигнатура);			// сигнатура текущего звонка (сотрудник КЦ сделал исходащий вызов на абонента, далее сделал перевод с уведомлением
																	// на сотрудника ОП, но он не принял вызов
	Парам.Вставить("АбонентВнешний",			АбонентВнешний); 	// номер телефона внешнего абонента
	Парам.Вставить("ТелВнутренний",				ЭтаФорма.ПоследнийНабранныйНомерВнутрАбонента);	// Внутренний телефон сотрудника ОП, который не принял вызов ,переведенный на него переводом с уведомлением оператором КЦ 
	Парам.Вставить("ТипЗадачи",					ТипЗадачи);
	Парам.Вставить("ИдентификаторФонЗадания",	 ИдФонЗадания);
	Парам.Вставить("От", 						"bd@luidor.ru");					//адрес эл.почты отправителя (абсолютно любой адрес) 
	Парам.Вставить("Тема",						"Перезвоните клиенту на номер: "+АбонентВнешний);
	Парам.Вставить("Содержание",					"Перезвоните клиенту на номер: "+АбонентВнешний);

	ОткрытьФорму("ОбщаяФорма.ЭлПисьмо", Парам);
	
	//Полагаем, что время между открытием формы письма до отправки не превысит 1 минуты (60 секунд)
	ПодключитьОбработчикОжидания("ПроверьОшибкиФоновыхЗаданийПользователя", 60, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереводПоАнкете(Команда)

	Парам = Новый Структура;
	Парам.Вставить("КаналСистемный", ЭтаФорма.КаналСистемный);

	ТекДанные = ЭтаФорма.Элементы[ЭтаФорма.ИмяАктивногоДинамичСписка].ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Парам.Вставить("Телефон",ТекДанные.Телефон);	
	КонецЕсли;
	
	ОткрытьФорму("Обработка.КонсольИсходящихЗвонков.Форма.ФормаРасширеннойАнкеты", Парам);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПисьмоИзРегистраПисьмаСодержание(Команда)
	
	
	Если ЭтаФорма.Элементы.ЗадачиСписокПочта.ТекущиеДанные =  Неопределено Тогда
		Возврат;
	КонецЕсли;
	Парам = Новый Структура();
	Парам.Вставить("Сигнатура", ЭтаФорма.Элементы.ЗадачиСписокПочта.ТекущиеДанные.ПисьмоИнициатор);
	ОткрытьФорму("РегистрСведений.ПисьмаСодержание.Форма.ФормаЗаписиЧтение", Парам);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаИсторияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.Сигнатура) Тогда
		Возврат
	КонецЕсли;
	
	Парам = Новый Структура();
	Парам.Вставить("Сигнатура", Элемент.ТекущиеДанные.Сигнатура);

	
	Если Элемент.ТекущиеДанные.ЭтоЗвонок Тогда
		Если Элемент.ТекущиеДанные.ЭтоВходящий Тогда
			ИмяОткрываемойФормы = "РегистрСведений.Звонки.Форма.ФормаВходящегоЧтение";
		Иначе
			ИмяОткрываемойФормы = "РегистрСведений.Звонки.Форма.ФормаИсходящегоЧтение";
		КонецЕсли;
		ОткрытьФорму(ИмяОткрываемойФормы, Парам);
	КонецЕсли;
	
	КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДинСписки(Команда)
	ЭтаФорма.Элементы[ЭтаФорма.ИмяАктивногоДинамичСписка].Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиСписокПочтаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	 ОткрытьПисьмоИзРегистраПисьмаСодержание(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВведенныхОтветовОтветСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	//	Автоподбор для ответов	

	Элемент.СписокВыбора.Очистить();
	
	Если Не ЭтаФорма.МоиНастройки_ИспользоватьАвтоподбор Тогда
		Возврат
	КонецЕсли;
	
	Текст = СокрЛП(Текст);
	Если СтрДлина(Текст)<=10 Или Ожидание=0 Тогда
		Возврат
	КонецЕсли;
	
	Результат = ТаблицаВведенныхОтветовОтветСтрокойАвтоПодбор_НаСервере(Текст); 
	Если Не ТипЗнч(Результат) = Тип("СписокЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Эл Из Результат Цикл
		Элемент.СписокВыбора.Добавить(Эл.Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПроверьОшибкиФоновыхЗаданийПользователя_Сервер(СписокИдФоновыхЗаданий)
	СписокИзМассивовСообщенийПользователю = Новый СписокЗначений();
	Для Каждого Эл Из СписокИдФоновыхЗаданий Цикл
		КлючФонЗад = Эл.Значение;
		
		стрОтбор = Новый Структура("Ключ", КлючФонЗад);
		//ФонЗад = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдФонЗад);
		
		// Метод ПолучитьФоновыеЗадания возвратит массив, установленный отбор,
		// но отбор по ключу должен вернуть не более одного фонового задания
		МассивФонЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(стрОтбор); 
		Если МассивФонЗаданий.Количество() = 0 Тогда
			Возврат СписокИзМассивовСообщенийПользователю;
		КонецЕсли;
		ФонЗад = МассивФонЗаданий[0];
		
		Если ФонЗад = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		МассивСообщенийПользователю = ФонЗад.ПолучитьСообщенияПользователю(Истина);
		СписокИзМассивовСообщенийПользователю.Добавить(МассивСообщенийПользователю);
	КонецЦикла;
	Возврат СписокИзМассивовСообщенийПользователю;
КонецФункции

&НаКлиенте
Процедура ПроверьОшибкиФоновыхЗаданийПользователя()
	
	Если Не ЭтаФорма.МоиНастройки_ОповещатьОбОшибкахОтправкиПочты Тогда
		Возврат;
	КонецЕсли;
	
    //Сформируй список из массивов сообщений пользователю, созданных в фоновых заданиях пользователя
	СписокИзМассивовСообщенийПользователю = ПроверьОшибкиФоновыхЗаданийПользователя_Сервер(ЭтаФорма.СписокИдФоновыхЗаданийОтправкиПисем);
		
	//Покажи сообщения пользователю
	Для Каждого Эл Из СписокИзМассивовСообщенийПользователю Цикл
		МассивСообщенийПользователюОдногоФонЗадания = Эл.Значение;
		Для Каждого Сообщ Из МассивСообщенийПользователюОдногоФонЗадания Цикл
			//Сообщ.Сообщить();
			ПоказатьОповещениеПользователя("Ошибка отправки письма", ,Сообщ.Текст);
		КонецЦикла;	
	КонецЦикла;
	
	//Очисти список идентификаторов фоновых заданий, т.о. сообщения об ошибках одного фонового задания выведутся один раз
	ЭтаФорма.СписокИдФоновыхЗаданийОтправкиПисем.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура КонсольПаузаПриИзменении(Элемент = Неопределено)
	
// Получим текущие настройки консоли
//-------------------------------------------------------------------------------------------------
	ОчерСсылка = ЗначенияСервера.ПолучитьЗначениеПараметраСеанса("ККЦОчередь");
	ТелСсылка = ЗначенияСервера.ПолучитьЗначениеПараметраСеанса("ККЦТелефон");

// Если параметры не заданы, то завершим работу процедуры
//-------------------------------------------------------------------------------------------------
	Доступно = ЗначениеЗаполнено(ТелСсылка);
	Доступно = Доступно И ЗначениеЗаполнено(ОчерСсылка);
	Элементы.КонсольПауза.ТолькоПросмотр = (НЕ Доступно);

	Если (Доступно = Ложь) Тогда
		ЭтаФорма.Заголовок = "Консоль оператора: Не выбран телефон рабочего места";
		ЭтаФорма.КонсольПауза = Истина;
		//ОбновлениеОтображения();
		Возврат;
	КонецЕсли;

	// Если процедура вызвана интерактивно (из элемента), то изменим режим паузы на заданный
	// Если процедура вызвана каким-либо автоматом (из функции "ВыбратьТелефон()"), то просто зарегистрируем событие
	//--------------------------------------------------------------------------------------------
	Если (Элемент <> Неопределено) Тогда
		Результат = ОчередиАгенты.АгентПаузаИзменить(ОчерСсылка,ТелСсылка,ЭтаФорма.КонсольПауза);

		Если (ЗначениеЗаполнено(Результат)) Тогда
			Темп = ОчередиАгенты.АгентПаузаПолучить(ОчерСсылка,ТелСсылка);
			ЭтаФорма.КонсольПауза = ?(Темп = Истина,Истина,Ложь);
			Предупреждение(Результат);
		КонецЕсли;
	Иначе
		ОчередиАгенты.АгентСостояниеЗарегистрировать(ТелСсылка,ЭтаФорма.КонсольПауза);
	КонецЕсли;
	//ОбновлениеОтображения();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТаблицаВведенныхОтветовОтветСтрокойАвтоПодбор_НаСервере(Текст)
	
	ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ = Ложь;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 10
	               |	ИдентификаторыСтрок.Наименование
	               |ИЗ
	               |	Справочник.ИдентификаторыСтрок КАК ИдентификаторыСтрок
	               |ГДЕ
	               |	ИдентификаторыСтрок.ПометкаУдаления = ЛОЖЬ
	               |	И ИдентификаторыСтрок.Наименование ПОДОБНО &Наименование";
	Запрос.УстановитьПараметр("Наименование", "%"+Текст+"%");
	РезультатЗапроса = ОбщегоНазначения.ВыполнитьЗапрос(Запрос);
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ
	КонецЕсли;
	
	МассивОтветов = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку(0);
	СписокОтветов = Новый СписокЗначений();
	СписокОтветов.ЗагрузитьЗначения(МассивОтветов);
	
	Возврат СписокОтветов;
КонецФункции

&НаКлиенте
Процедура ОткрытьАнкетуОпроса(Команда)
	//Открывает форму анкеты опроса
	
	Телефон				=	ЭтаФорма.Элементы[ЭтаФорма.ИмяАктивногоДинамичСписка].ТекущиеДанные.Телефон;
	СигнатураПродажи	=	ЭтаФорма.Элементы[ЭтаФорма.ИмяАктивногоДинамичСписка].ТекущиеДанные.СигнатураПродажи;
	ТочкаПродажи		=	ЭтаФорма.Элементы[ЭтаФорма.ИмяАктивногоДинамичСписка].ТекущиеДанные.ТочкаПродажи;
	ДатаЗакрытия		=	ЭтаФорма.Элементы[ЭтаФорма.ИмяАктивногоДинамичСписка].ТекущиеДанные.ДатаЗакрытия;

	Если ЗначениеЗаполнено(ЭтаФорма.LinkedID) Тогда
		ЗначРекв = ЭтаФорма.LinkedID;
	Иначе
		ЗначРекв = ЭтаФорма.ТелВнутр;
	КонецЕсли;
	
	ПакетЗаказНарядов = Новый СписокЗначений();
	Для Каждого Стр Из ЭтаФорма.Объект.Ремонты_ПодобныеЗадачи Цикл
		Если Стр.Спакетировать = Истина Тогда
			ПакетЗаказНарядов.Добавить(Стр.СигнатураПродажи);	
		КонецЕсли;
	КонецЦикла;
	
	Парам = Новый Структура();
	Парам.Вставить("Телефон", 			Телефон);
	Парам.Вставить("СигнатураПродажи",	СигнатураПродажи);
	Парам.Вставить("ЗвонокЗакрытия",	ЗначРекв);
	Парам.Вставить("ПакетЗаказНарядов",	ПакетЗаказНарядов);
	Парам.Вставить("ТочкаПродажи",      ТочкаПродажи);
	Парам.Вставить("ДатаЗакрытия",		ДатаЗакрытия);
	
	ОткрытьФорму("Обработка.КонсольИсходящихЗвонковРемонты.Форма.ФормаАнкетыОпроса", Парам, ЭтаФорма, СигнатураПродажи);
КонецПроцедуры

//&НаСервере
//Функция ТелВнутр(ТелВнутрСсылка)
	//Получает тел. внутр. как строку из ссылки
	//вызывается из ОткрытьАнкетуОпроса	
//	Возврат ТелВнутрСсылка.Код;
//КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "Анкета сохранена, задача закрыта" Тогда		
	    ОчиститьПодобныеЗадачи();
		Элементы[ЭтаФорма.ИмяАктивногоДинамичСписка].Обновить();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ОчиститьПодобныеЗадачи()
		ЭтаФорма.Объект.Ремонты_ПодобныеЗадачи.Очистить();	
КонецФункции 

&НаКлиенте
Процедура ОтобразитьАнкету(Команда)
	ЭтаФорма.Элементы.Анкета.Видимость = Не ЭтаФорма.Элементы.Анкета.Видимость
КонецПроцедуры












