&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Об = РеквизитФормыВЗначение("Объект");
	Об.ЗаполниТЧ_КонтактныеЛица();
	
	ЗначениеВРеквизитФормы(Об, "Объект");
	
	МоиНастройки_ОповещатьОбОшибкахОтправкиПочты 	= Истина;
	МоиНастройки_ПоказыватьИсториюЗвонков 			= Истина;
	МоиНастройки_ПолучатьИсториюАсинхронно			= Ложь;
	Фильтры = Истина;
	
	#Область Новости
	Новости 		= ЛентаНовостей();
	АрхивНовостей 	= АрхивНовостей(); 
	#КонецОбласти
				
	#Область Система_взаимодействия
	МоиНастройки_ПолучатьИсториюАсинхронно = Ложь;
	Парам = Новый Структура("ИспользоватьСистемуВзаимодействияВКонсолиКонтактЦентра");
	Если РегистрыСведений.УчетнаяПолитика.Получи(Парам) Тогда
		МоиНастройки_ПолучатьИсториюАсинхронно = Парам.ИспользоватьСистемуВзаимодействияВКонсолиКонтактЦентра;
	КонецЕсли;

	Если МоиНастройки_ПолучатьИсториюАсинхронно Тогда
		УстановитьПривилегированныйРежим(Истина);
		КлючОбсуждения = "csc_"+xmlСтрока(ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор);
		
		Обс = СистемаВзаимодействия.ПолучитьОбсуждение(КлючОбсуждения);
		
		ИдПользователяСистемыВзаимодействия = СистемаВзаимодействия.ПолучитьИдентификаторПользователя(ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор);
		
		Если Обс <> Неопределено Тогда
			Обс.Участники.Добавить(ИдПользователяСистемыВзаимодействия);
			
			Обс.Отображаемое = Ложь;
			Обс.Заголовок = "Служебный канал";
			Обс.Записать();
		Иначе
			Обс = СистемаВзаимодействия.СоздатьОбсуждение();
			Обс.Ключ 		 = КлючОбсуждения;
			Обс.Заголовок	 = "Служебный канал";
			Обс.Отображаемое = Ложь;
			Обс.Участники.Добавить(ИдПользователяСистемыВзаимодействия);
			Обс.Записать();
			
		КонецЕсли;
		ЭтаФорма.КлючСкрытогоОбсужденияСистемыВзаимодействия = КлючОбсуждения;
		
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	#КонецОбласти 
	
	#Область Websocket_and_SSE
	Websocket = Истина;
	#КонецОбласти
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Начальная установка видимости элементов
	//------------------------------------------
	СправочникПоискПриИзменении();	
	
	#Область Обратный_звонок
	
	КЦ = ПолучитьКонтактЦентрТекущегоПользователя();
	Если КЦ = ПредопределенноеЗначение("Справочник.КонтактЦентры.ПустаяСсылка") Тогда
		Отказ = Истина;
		Возврат
	КонецЕсли;

	ЭтаФорма.ЗадачиСписокЗвонки.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы.Очистить();

	//Отбор по контакт-центру
	//------------------------
	ЭлОтбора1 = ЭтаФорма.ЗадачиСписокЗвонки.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлОтбора1.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Исполнитель");
	ЭлОтбора1.ПравоеЗначение	= КЦ;
	ЭлОтбора1.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлОтбора1.Использование		= Истина;	
		
	//Отбор по не выполненным задачам
	//--------------------------------
	ЭлОтбора1 = ЭтаФорма.ЗадачиСписокЗвонки.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлОтбора1.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Выполнена");
	ЭлОтбора1.ПравоеЗначение	= ЛОЖЬ;
	ЭлОтбора1.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлОтбора1.Использование		= Истина;	
	
	//Отбор по каналу 88312222222
	//----------------------------
	ЭлОтбора1 = ЭтаФорма.ЗадачиСписокЗвонки.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлОтбора1.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Канал");
	ЭлОтбора1.ПравоеЗначение	= "88312222222";
	ЭлОтбора1.ВидСравнения		= ВидСравненияКомпоновкиДанных.НеСодержит;
	ЭлОтбора1.Использование		= Истина;	
	#КонецОбласти
	
	#Область Почта
	ЭтаФорма.ЗадачиСписокПочта.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы.Очистить();

	//Отбор по контакт-центру
	//------------------------
	ЭлОтбора1 = ЭтаФорма.ЗадачиСписокПочта.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлОтбора1.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Исполнитель");
	ЭлОтбора1.ПравоеЗначение	= КЦ;
	ЭлОтбора1.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлОтбора1.Использование		= Истина;	

	//Отбор по не выполненным задачам
	//---------------------------------
	ЭлОтбора1 = ЭтаФорма.ЗадачиСписокПочта.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлОтбора1.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Выполнена");
	ЭлОтбора1.ПравоеЗначение	= ЛОЖЬ;
	ЭлОтбора1.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлОтбора1.Использование		= Истина;	
	//</Почта>
	
	МоиНастройки_ПричинаРучногоЗакрытияРегистрирующаяСпаммера="Спам";

	#КонецОбласти
			
	#Область ЗадачиГАЗ
	ЭтаФорма.ЗадачиСписокГАЗ.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы.Очистить();

	//Отбор по не выполненным задачам
	//---------------------------------
	ЭлОтбора1 = ЭтаФорма.ЗадачиСписокГАЗ.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлОтбора1.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Выполнена");
	ЭлОтбора1.ПравоеЗначение	= ЛОЖЬ;
	ЭлОтбора1.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлОтбора1.Использование		= Истина;	
	//</Почта>
	
	МоиНастройки_ПричинаРучногоЗакрытияРегистрирующаяСпаммера="Спам";

	#КонецОбласти
			
	#Область ВебСервис 	
	ЭтаФорма.Элементы.Позвонить.Доступность = Ложь;
	ЭтаФорма.Элементы.ИзменитьНапоминаниеПерезвонить.Доступность = Ложь;


	//Отбор по не выполненным задачам
	//---------------------------------
	ЭлОтбора1 = ЭтаФорма.ЗадачиСписокВебСервис.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлОтбора1.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("Выполнена");
	ЭлОтбора1.ПравоеЗначение=ЛОЖЬ;
	ЭлОтбора1.ВидСравнения=ВидСравненияКомпоновкиДанных.Равно;
	ЭлОтбора1.Использование=Истина;	
	#КонецОбласти
	
	ВнешнееСобытиеHangup();
	
	#Область Система_взаимодействия
	Если МоиНастройки_ПолучатьИсториюАсинхронно Тогда
		ОпОбработкаСообщенийСистемыВзаимодействия  	= Новый ОписаниеОповещения("ОбработкаСообщенийСистемыВзаимодействия", ОбщегоНазначенияКлиент);
		
		Если МоиНастройки_ТестовыйРежим Тогда
			ОпОбработкаПослеПодключенияОбработчика	  	= Новый ОписаниеОповещения("НаПодключениеОбработчикаСистемыВзаимодействия", ЭтаФорма);
		КонецЕсли;
		
		СистемаВзаимодействия.НачатьПодключениеОбработчикаНовыхСообщений(ОпОбработкаПослеПодключенияОбработчика, ЭтаФорма.КлючСкрытогоОбсужденияСистемыВзаимодействия, ОпОбработкаСообщенийСистемыВзаимодействия, Неопределено);
	КонецЕсли;
	#КонецОбласти
	
	#Область SSE
	ПриОткрытииНаСервере();
	#КонецОбласти
	
КонецПроцедуры

#Область Система_взаимодействия

#Область Система_взаимодействия_Отладка
Процедура НаПодключениеОбработчикаСистемыВзаимодействия(Парам1) Экспорт
	//Используется для отладки
	
	Если МоиНастройки_ТестовыйРежим Тогда
		Сообщить("НаПодключениеОбработчикаСистемыВзаимодействия");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТестСообщения(Команда)
	//Используется для отладки
	ТестСообщенияНаСервере(ЭтаФорма.КлючСкрытогоОбсужденияСистемыВзаимодействия);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТестСообщенияНаСервере(КлючСкрытогоОбсужденияСистемыВзаимодействия)
	//Используется для отладки
	УстановитьПривилегированныйРежим(Истина);
	Обс 	= СистемаВзаимодействия.ПолучитьОбсуждение(КлючСкрытогоОбсужденияСистемыВзаимодействия);
	Сообщ 	= СистемаВзаимодействия.СоздатьСообщение(Обс.Идентификатор);
	Парам 	= Новый Структура();
	Парам.Вставить("Источник", "ФоновоеЗадание");
	Сообщ.Данные = Парам;
	Сообщ.Текст = "Привет";
	Сообщ.Записать();
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры
#КонецОбласти  

Процедура ОбработкаСообщенийСистемыВзаимодействия(Сообщение, ДополнительныеПараметры)Экспорт
	//Сообщить("ОбработкаСообщенийСистемыВзаимодействия");
КонецПроцедуры
#КонецОбласти

#Область WebSocket
&НаСервере
Процедура ПриОткрытииНаСервере()
	Об = РеквизитФормыВЗначение("Объект");
	текстHtml = Об.ПолучиМакетHTML();
	ЗначениеВРеквизитФормы(Об, "Объект");	
	ЭтаФорма.html=текстHtml;
КонецПроцедуры	

&НаКлиенте
Процедура htmlПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	//Событие вызываетя программно 	
	Если ДанныеСобытия.Button = Неопределено Тогда
		Возврат
	КонецЕсли;
	Данные = ДанныеСобытия.Button.value;
	//Сообщить(Данные);
	Если Данные = "send" Тогда
		Возврат
	КонецЕсли;
	_ВнешнееСобытие("TCPCLIENT","Reseeved",Данные);
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПриЗакрытии()
	// Отключим компоненту телефонии
	//---------------------------------
	КонтактЦентр.КомпонентаОтключить();
КонецПроцедуры

#Область Выбор_телефона

&НаКлиенте
Процедура КонсольТелефонВыбрать(Команда)
	ОпОбработчикЗакрытияФормыВыбораТелефона = Новый ОписаниеОповещения("ОбработчикЗакрытияФормыВыбораТелефона", ЭтотОбъект);
	ОткрытьФорму("Обработка.КонсольКонтактЦентраТест4.Форма.ФормаВыбораОператора",,ЭтаФорма,,,,ОпОбработчикЗакрытияФормыВыбораТелефона, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикЗакрытияФормыВыбораТелефона(Параметр, ДопПарам) Экспорт

// Проверим заполненность параметров сеанса, отвечающих за регистрацию оператора консоли
// Если параметры заданы, то получим текущее состояние режима "Пауза" для оператора-агента
// Также выполним подключение компоненты телефонии к серверу
//-------------------------------------------------------------------------------------------------

	ОчерСсылка = ЗначенияСервера.ПолучитьЗначениеПараметраСеанса("ККЦОчередь");
	ТелСсылка = ЗначенияСервера.ПолучитьЗначениеПараметраСеанса("ККЦТелефон");

	Если (ЗначениеЗаполнено(ОчерСсылка) И ЗначениеЗаполнено(ТелСсылка)) Тогда
		
		//<14.06.2018 10-37, //=>, >
		//Темп = ОчередиАгенты.АгентПаузаПолучить(ОчерСсылка,ТелСсылка);
		//ЭтаФорма.КонсольПауза = ?(Темп = Истина,Истина,Ложь);
		//=>
		
		//Получи состояние агента телефонии
		//---------------------------------
		ЭтаФорма.КонсольПауза = ОчередиАгенты.АгентПаузаПолучить(ОчерСсылка,ТелСсылка);
		
		ОбработайВыборТелефонаНаСервере();
		
		//Сформируй заголовок формы с указанием назначения очереди
		//---------------------------------------------------------
		Темп = ЗначенияСервера.ПолучитьЗначениеРеквизита(ОчерСсылка,"Назначение");
		ЭтаФорма.Заголовок = СокрЛП(ТелСсылка) + " - " + СокрЛП(Темп);
		//</14.06.2018 10-37>
		
		#Если ТонкийКлиент Тогда
			Если Не WebSocket Тогда		
				Результат = КонтактЦентр.КомпонентаИнициализировать();
				Если (ЗначениеЗаполнено(Результат)) Тогда
					Сообщить(Результат);
					Отказ = Истина;
					Возврат;
				КонецЕсли;
				
				Если Фильтры Тогда
					Результат = КонтактЦентр.КомпонентаПодключить(КонсольТелефон, IPАдресСервера);
				Иначе
					Результат = КонтактЦентр.КомпонентаПодключитьТест(КонсольТелефон, IPАдресСервера);

				КонецЕсли;
				Если (ЗначениеЗаполнено(Результат)) Тогда
					Сообщить(Результат);
				КонецЕсли;	
			КонецЕсли;	
		#КонецЕсли
		
		//31.08.2018, +, Автоматически включить прием автозвонков
		//--------------------------------------------------------
		ВключитьВыключитьПодключениеОбработчикаОжидания(Истина);
		
	КонецЕсли;

		
КонецПроцедуры

&НаСервере
Процедура ОбработайВыборТелефонаНаСервере()
	
	КонсольТелефон = ПараметрыСеанса.ККЦТелефон.Код;
	Элементы.СтраницаЗадачи.Видимость = Ложь;
	
	// Настроим элементы страницы "СтраницаЗадачи" и признак обработки автозвонка
	//-------------------------------------------------------------------------------------------------
	Если (ЗначениеЗаполнено(ПараметрыСеанса.ККЦКонтактЦентр)) Тогда
		//Установить признак обработки автозвонка
		//-----------------------------------------
		Если ПараметрыСеанса.ККЦКонтактЦентр.ИспользуетсяКаскадОчередей Тогда
			Запрос = Новый Запрос();
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	КаскадОчередей.ОбрабатыватьАвтозвонок КАК ОбрабатыватьАвтозвонок
			|ИЗ
			|	Справочник.КонтактЦентры.КаскадОчередей КАК КаскадОчередей
			|ГДЕ
			|	КаскадОчередей.Ссылка = &КонтактЦентр
			|	И КаскадОчередей.Очередь = &Очередь";
			Запрос.УстановитьПараметр("КонтактЦентр", 	ПараметрыСеанса.ККЦКонтактЦентр);
			Запрос.УстановитьПараметр("Очередь",		ПараметрыСеанса.ККЦОчередь);
			РезультатЗапроса = ОбщегоНазначения.ВыполнитьЗапрос(Запрос);
			Если РезультатЗапроса.Пустой() Тогда
				Возврат;
			КонецЕсли;
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			ЭтаФорма.МоиНастройки_ОбрабатыватьАвтозвонки = Выборка.ОбрабатыватьАвтозвонок;
		Иначе
			ЭтаФорма.МоиНастройки_ОбрабатыватьАвтозвонки = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

# Область Управление_паузой
&НаКлиенте
Процедура КонсольПаузаПриИзменении(Элемент = Неопределено)
	
	// Получим текущие настройки консоли
	//-------------------------------------------------------------------------------------------------
	ОчерСсылка = ЗначенияСервера.ПолучитьЗначениеПараметраСеанса("ККЦОчередь");
	ТелСсылка = ЗначенияСервера.ПолучитьЗначениеПараметраСеанса("ККЦТелефон");
	
	// Если параметры не заданы, то завершим работу процедуры
	//-------------------------------------------------------------------------------------------------
	Доступно = 		ЗначениеЗаполнено(ТелСсылка)
				И 	ЗначениеЗаполнено(ОчерСсылка);
	
	Элементы.КонсольПауза.ТолькоПросмотр = НЕ Доступно;
	
	Если Не Доступно Тогда
		ЭтаФорма.Заголовок = "Консоль оператора: Не выбран телефон рабочего места";
		ЭтаФорма.КонсольПауза = Истина;
		Возврат;
	КонецЕсли;
	
	// Параметры заданы
	// Сформируем заголовок для переключателя активности
	//-------------------------------------------------------------------------------------------------
	Темп = ЗначенияСервера.ПолучитьЗначениеРеквизита(ОчерСсылка,"Назначение");
	ЭтаФорма.Заголовок = СокрЛП(ТелСсылка) + " - " + СокрЛП(Темп);
	
	//оу

	// Если процедура вызвана интерактивно (из элемента), то изменим режим паузы на заданный
	// Если процедура вызвана каким-либо автоматом, то просто зарегистрируем событие
	//-------------------------------------------------------------------------------------------------
	Если (Элемент <> Неопределено) Тогда
		
		//Результат = ОчередиАгенты.АгентПаузаИзменить(ОчерСсылка,ТелСсылка,НЕ ЭтаФорма.КонсольПауза);
		//=>
		//как в оу через web-сервис
		Результат = Интеграция_Агр_ТелАгентСостояниеУстановить(ОчерСсылка, ТелСсылка, Не ЭтаФорма.КонсольПауза);

		Если (ЗначениеЗаполнено(Результат)) Тогда
			// изменение режима пауза не выполнено
			
			//<14.06.2018 10-37, //=>, >	
			//Темп = ОчередиАгенты.АгентПаузаПолучить(ОчерСсылка,ТелСсылка);
			//ЭтаФорма.КонсольПауза = ОчередиАгенты.АгентПаузаПолучить(ОчерСсылка,ТелСсылка);
			//=>
			ЭтаФорма.КонсольПауза = Не ЭтаФорма.КонсольПауза;
			//</14.06.2018 10-37>	
			
			Сообщить(Результат);
			
		КонецЕсли;
		
		ОчередиАгенты.АгентСостояниеЗарегистрировать(ТелСсылка,ЭтаФорма.КонсольПауза);
	КонецЕсли;
	//31.08.2018, +, Автоматически включить прием автозвонков
	//-------------------------------------------------------
	Если КонсольПауза = Ложь Тогда
		ВключитьВыключитьПодключениеОбработчикаОжидания(Истина);
	КонецЕсли;
	
	#Область ХранилищеОбщихНастроекПауза
	КонсольПаузаПриИзмененииНаСервере(СокрЛП(ТелСсылка), КонсольПауза);
	#КонецОбласти
КонецПроцедуры

#Область ХранилищеОбщихНастроекПауза
&НаСервере
Процедура КонсольПаузаПриИзмененииНаСервере(ТелефонОператора, КонсольПауза)
	ХранилищеОбщихНастроек.Сохранить("КонсольКонтактЦентраТелефонПауза", ТелефонОператора, КонсольПауза);
КонецПроцедуры
#КонецОбласти

&НаСервере
Функция Интеграция_Агр_ТелАгентСостояниеУстановить(Очередь, Телефон, НовСостояние, АгентовНеНаПаузе = 0) Экспорт
	//Изменение состояния телефона через web-service asterisk по аналогии с ОУ
	
	//http://astws.main.luidorauto.ru:8081/asterisk_ws/soap/description
	//:param queuename: queue name (string)
	//:param agentnum: agent phone number (string)
	//:param active: False - set pause, True - set unpause (bool)
	//:param min_agents: minimum count of agents (int)
	
	Доступно = 		ТипЗнч(Очередь) 	 = Тип("СправочникСсылка.ТелОчереди")
				И 	ТипЗнч(Телефон)		 = Тип("СправочникСсылка.ТелВнутренние")
				И 	ТипЗнч(НовСостояние) = Тип("Булево")
				И 	ЗначениеЗаполнено(Очередь)
				И 	ЗначениеЗаполнено(Телефон);
	
	Данные = "Очередь = " + Очередь + "; Телефон = "+Телефон+"; НовСостояние = "+НовСостояние ;
	
	Если Не Доступно Тогда
		ЗаписьЖурналаРегистрации("Интеграция_Агр_ТелАгентСостояниеУстановить", УровеньЖурналаРегистрации.Ошибка, ,Данные, "Ошибка в типе или заполнении аргументов");
	КонецЕсли;
	
	ОчередьИмя 	 	= Очередь.Наименование;
	ТелефонНомер 	= Телефон.Код;
	Ответ 			= "";
	Попытка
		
		//ВебСервис = WSСсылки.PbxService.СоздатьWSПрокси("http://tempuri.org/","asterisk_ws","asterisk_ws");
		//=>
		ОпределениеСервиса = Новый WSОпределения("http://astws.main.luidorauto.ru:8081/asterisk_ws/soap/description");
		ВебСервис = Новый WSПрокси(ОпределениеСервиса, "http://tempuri.org/", "asterisk_ws", "asterisk_ws"); 

		Результат = ВебСервис.change_agent_state(ОчередьИмя, ТелефонНомер, НовСостояние, 0);
		
		Если ТипЗнч(Результат) = Тип("Строка") И ЗначениеЗаполнено(Результат) Тогда
			Ответ = "Изменение состояния для агента  невозможно по причине: " + СокрЛП(Результат);
			Возврат (Ответ);
		КонецЕсли;
	Исключение
		Комментарий = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("Интеграция_Агр_ТелАгентСостояниеУстановить", УровеньЖурналаРегистрации.Ошибка, ,Данные, Комментарий);
		Ответ = Комментарий;
	КонецПопытки;

	Возврат (Ответ);
КонецФункции
#КонецОбласти

#Область Работа_со_справочником_Предприятие
&НаКлиенте
Процедура СправочникПоискПриИзменении(Элемент = Неопределено)

// Удалим существующий отбор
//-------------------------------------------------------------------------------------------------
	Для Каждого ТекСтрока Из ЭтаФорма.Справочник.Отбор.Элементы Цикл
		Если (ТекСтрока.Представление = "ОтборПоПодстрокеПоиска") Тогда
			ЭтаФорма.Справочник.Отбор.Элементы.Удалить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;

// Если подстрока поиска не заполнена, то завершим процедуру
//-------------------------------------------------------------------------------------------------
	Если (НЕ ЗначениеЗаполнено(ЭтаФорма.СправочникПоиск)) Тогда
		Элементы.Справочник.Отображение = ОтображениеТаблицы.ИерархическийСписок;
		ЭтаФорма.ТекущийЭлемент = Элементы.СправочникПоиск;

// Если подстрока поиска заполнена, то сформируем условие фильтрации
// Поиск может производиться по одному или нескольким словам
//-------------------------------------------------------------------------------------------------
	Иначе
		МассивСлов 						= КонвертацияКлиент.СтрокаРазделить(СокрЛП(ЭтаФорма.СправочникПоиск)," ");
		ГруппаОтбора 				 	= ЭтаФорма.Справочник.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.РежимОтображения 	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ГруппаОтбора.ТипГруппы 			= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		ГруппаОтбора.Представление 		= "ОтборПоПодстрокеПоиска";
		ГруппаОтбора.Использование 		= Истина;

		Для Каждого ТекСлово Из МассивСлов Цикл
			ВнутрГруппаОтбора 					= ГруппаОтбора.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ВнутрГруппаОтбора.РежимОтображения 	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
			ВнутрГруппаОтбора.ТипГруппы 		= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ;
			ВнутрГруппаОтбора.Использование 	= Истина;

			ЭлементОтбора = ВнутрГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("НаименованиеПолное");
			ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Содержит;
			ЭлементОтбора.ПравоеЗначение	= СокрЛП(ТекСлово);
			ЭлементОтбора.Использование		= Истина;

			ЭлементОтбора = ВнутрГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Телефоны");
			ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Содержит;
			ЭлементОтбора.ПравоеЗначение	= СокрЛП(ТекСлово);
			ЭлементОтбора.Использование		= Истина;
		КонецЦикла;

		Элементы.Справочник.Отображение = ОтображениеТаблицы.Список;
		ЭтаФорма.ТекущийЭлемент = Элементы.Справочник;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СправочникВыбор(Элемент,ВыбраннаяСтрока,Поле,СтандартнаяОбработка)

// Если пользователь выбрал строку и эта строка является группой, то необходимо проверить
// используется ли фильтр для поиска по Списку (заполненность реквизита "ПодстрокаПоиска")
// Если реквизит заполнен (т.е. фильтр существует), то для правильного входа в группу и отображения
// элементов группы - очистим фильтр и переведем режим отображения списка в "ИерархическийСписок"
//-------------------------------------------------------------------------------------------------
	Если (Элемент.ТекущиеДанные.ЭтоГруппа = Истина) Тогда
		ЭтаФорма.СправочникПоиск = Неопределено;
		СправочникПоискПриИзменении();
	Иначе
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СправочникПриАктивизацииСтроки(Элемент)

// Отобразим все телефоны текущего выбранного элемента справочника
//-------------------------------------------------------------------------------------------------
	ТекСсылка = ?(Элемент.ТекущиеДанные = Неопределено,Неопределено,Элемент.ТекущиеДанные.Ссылка);
	
	Доступно = Телефоны.Количество() = 0; 
	Если Доступно Тогда
		СправочникЭлементПолучитьТелефоны(ТекСсылка);	
		Возврат;
	КонецЕсли; 
	
	Доступно = 		Телефоны.Количество() > 0
				И 	Телефоны[0].Владелец <> ТекСсылка;
	Если Доступно Тогда	
		СправочникЭлементПолучитьТелефоны(ТекСсылка);
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СправочникЭлементПолучитьТелефоны(ТекСсылка)

// Если переданная ссылка не пустая
// Получим все телефоны закрепленные за объектом
//-------------------------------------------------------------------------------------------------
	ЭтаФорма.Телефоны.Очистить();

	Если (ЗначениеЗаполнено(ТекСсылка)) Тогда
		ТЗТемп = Телефония.ТелефоныВладельцаПолучить(ТекСсылка);

		Для Каждого ТекСтрока Из ТЗТемп Цикл
			НовСтрока 			= ЭтаФорма.Телефоны.Добавить();
			НовСтрока.Ссылка 	= ТекСтрока.Телефон;
			НовСтрока.Тип 		= СокрЛП(ТекСтрока.Тип);
			НовСтрока.Atxfer 	= СокрЛП(ТекСтрока.Телефон);
			НовСтрока.Redirect	= СокрЛП(ТекСтрока.Телефон);
			НовСтрока.Владелец  = ТекСсылка;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ВнешнееСобытие

//*************************************************************************************************
// Обработка внешних событий (событий компоненты телефонии)
//*************************************************************************************************

#Если ТонкийКлиент Тогда
	
&НаКлиенте
Процедура ВнешнееСобытие_Оригинал(Источник,Событие,Данные)
	
	//Если МоиНастройки_ТестовыйРежим Тогда
	//	Если ЭтаФорма.Отладка_Лог.КоличествоСтрок()>20000 Тогда
	//		ЭтаФорма.Отладка_Лог.Очистить();
	//	КонецЕсли;
	//	ЭтаФорма.Отладка_Лог.ДобавитьСтроку("**********************");
	//	ЭтаФорма.Отладка_Лог.ДобавитьСтроку("ДатаВремя = "+ТекущаяДата()+"; Источник = "+Источник+ "; Событие = "+Событие);
	//	ЭтаФорма.Отладка_Лог.ДобавитьСтроку("Данные = "+Данные);
	//	Сообщить(Данные);
	//КонецЕсли;
	
	//Для повышения производительности закоментарим>
	//		// Убедимся в том, что полученное событие - это событие телефонной компоненты
	//		//-------------------------------------------------------------------------------------------------
	//	Доступно = (ТипЗнч(Источник) = Тип("Строка"));
	//	Доступно = Доступно И (ТипЗнч(Данные) = Тип("Строка"));
	//	Доступно = Доступно И (Найти(ВРег(СокрЛП(Источник)),"TCPCLIENT") > 0);
	
	//	Если (Доступно = Ложь) Тогда
	//		Возврат;
	//	КонецЕсли;
	//</23.01.2018>
	
	//<Кошелев_05092017, //>
	//Игнорировать событие,  если консоль в режиме паузы
	//---------------------------------------------------
	//Если ЭтаФорма.КонсольПауза Тогда
	//	Возврат
	//КонецЕсли;
	//</Кошелев_05092017>
	
	// Disconnect - событие, извещающее о разрыве соединения с сервером телефонии
	//-------------------------------------------------------------------------------------------------
	Доступно = ВРег(СокрЛП(Событие)) = "DISCONNECT";
	Если Доступно Тогда
		ВнешнееСобытиеHangup();
		ПриОткрытии(Ложь);
		Возврат;
	КонецЕсли;	
		
	// В полученном пакете может находиться несколько событий
	// Каждое событие начинается со строки "Event:" и заканчивается двойным символом переноса строки
	// Выполним разбиение полученного пакета на строки - события
	//-------------------------------------------------------------------------------------------------
	ПакетСобытий = ВРег(СокрЛП(Данные));
	
	// Получим очередное событие
	//-------------------------------------------------------------------------------------------------
	Пока СтрДлина(ПакетСобытий)>6 Цикл // СтрДлина("EVENT:")
		
		ПозОкончания = СтрНайти(ПакетСобытий,"EVENT:", , 2)-1; // ищи 2-й Event
		ПозОкончания = ?(ПозОкончания <= 0,СтрДлина(ПакетСобытий),ПозОкончания);
		ТекСобытие = СокрЛП(Лев(ПакетСобытий,ПозОкончания));
		
		// Получим тип события
		// DialBegin 	- Вызов оператора не из очереди (оператор выполняет начал исходящий звонок)
		// AgentCalled 	- Вызов оператора из очереди (поступил входящий звонок на оператора)
		// Hangup 		- Завершение звонка
		//-------------------------------------------------------------------------------------------------
		Если ЗначениеЗаполнено(КаналСистемный) Тогда 
			// Переменная КаналСистемный заполнена, если агент очереди уже взял трубку и разговаривает с абонентом при любом  
			// (входящем или исходящем) вызове. Причем, если опеатор сделал исходящий звонок и разговаривает, то канал системный заполнен
			// данными этого исходящего звонка, но в это же время может поступить входящий из очереди, в этом случае возникнет событие HANGUP 
			// по этому непринятому входящему из очереди с другим  с "CAUSE-TXT: USER BUSY" - такой HANGUP нужно отборосить	
			//Здесь обработаем события связанные с завершением текущего разговора
			
			Доступно = 		СтрНайти(ТекСобытие,"EVENT: HANGUP") > 0				 
						И 	СтрНайти(ТекСобытие,"CAUSE-TXT: USER BUSY") = 0;
			Если Доступно Тогда
					ВнешнееСобытиеHangup(ТекСобытие);		
			КонецЕсли;
		Иначе
			// абонент в текущий момент не обрабатывает вызов, т.е. трубка телефона лежит
			
			Если СтрНайти(ТекСобытие,"EVENT: DIALBEGIN")>0 Тогда
				ВнешнееСобытиеDialBegin(ТекСобытие);       
			КонецЕсли;
			
			Если СтрНайти(ТекСобытие,"EVENT: AGENTCALLED")>0 Тогда
				ВнешнееСобытиеAgentCalled(ТекСобытие);
			КонецЕсли;
		КонецЕсли;
		
		// Уберем из текущего пакета событий обработанный блок
		//-------------------------------------------------------------------------------------------------
		ПакетСобытий = СокрЛП(Сред(ПакетСобытий,ПозОкончания,СтрДлина(ПакетСобытий)));
		
	КонецЦикла;
КонецПроцедуры
#КонецЕсли

&НаКлиенте
Процедура ВнешнееСобытиеAgentCalled(Данные)
	//возникает, когда агенту очереди поступает из нее входящий вызов
	
	#Область Пример
	//Пример параметра Данные:
	//Агенту (оператору КЦ) с внутренним телефоном 5240, состоящим в очереди  RECEPTION 
	//поступает из нее входящий звонок от внешнего абонента 9253651964, позвонившего в компанию на телефон  88002002402:
	//Event: AgentCalled
	//Privilege: agent,all
	//Channel: SIP/edgeast-001e5e69
	//ChannelState: 6
	//ChannelStateDesc: Up
	//CallerIDNum: 9253651964
	//CallerIDName: 88002002402
	//ConnectedLineNum: <unknown>
	//ConnectedLineName: <unknown>
	//Language: ru
	//AccountCode: 
	//Context: macro-QueueRoutine
	//Exten: s
	//Priority: 23
	//Uniqueid: 1535529257.16433228
	//Linkedid: 1535529257.16433228
	//DestChannel: SIP/5240-001e5e6a
	//DestChannelState: 0
	//DestChannelStateDesc: Down
	//DestCallerIDNum: <unknown>
	//DestCallerIDName: <unknown>
	//DestConnectedLineNum: 9253651964
	//DestConnectedLineName: 88002002402
	//DestLanguage: ru
	//DestAccountCode: 
	//DestContext: default
	//DestExten: 5519
	//DestPriority: 1
	//DestUniqueid: 1535529257.16433236
	//DestLinkedid: 1535529257.16433228
	//Queue: RECEPTION
	//Interface: SIP/5240
	//MemberName: 5240
	#КонецОбласти 
			
	#Область Отладка 
	Если МоиНастройки_ТестовыйРежим Тогда
		Если Отладка_Лог.КоличествоСтрок() > 20000 Тогда
			Отладка_Лог.Очистить();
		КонецЕсли;
		Отладка_Лог.ДобавитьСтроку("***** ВнешнееСобытиеAgentCalled ***** ДатаВремя = " + ТекущаяДата());
		Отладка_Лог.ДобавитьСтроку("Данные = "+Данные);     
		Отладка_Лог.ДобавитьСтроку(СтрШаблон("СайтИнтернетЗаявкиАвтозвонка = %1; КонсольСостояние = %2; КаналСистемный = %3; к_LinkedID = %4", СайтИнтернетЗаявкиАвтозвонка, КонсольСостояние, КаналСистемный, к_LinkedID)); 
	КонецЕсли;
	#КонецОбласти  
 	
	// Выясним относится ли полученное событие к данной консоли -
	// в этом случае в полученном событии поле MemberName совпадает с номером консоли
	// также отбор по MemberName добавлен при подключении компоненты
	//-------------------------------------------------------------------------
	Доступно = СтрНайти(Данные,"MEMBERNAME: " + КонсольТелефон) > 0;	
	Если Не Доступно Тогда
		Возврат;
	КонецЕсли; 
			
	//Если оператор не свободен, отключи дальнейшую обработку события
	//----------------------------------------------------------------  
	
	//Если МоиНастройки_ТестовыйРежим Тогда
	//		Отладка_Лог.ДобавитьСтроку(СтрШаблон("***ФильтрПоКонсольСостояние*ДО**** КонсольСостояние = %1", 	КонсольСостояние));    
	//КонецЕсли;    
	
	//25.04.2022+, если значение заполнено, значит, вероятно, идет исходящий автозвонок
	Если ЗначениеЗаполнено(КаналСистемный) Тогда   
		#Область Отладка 
		Если МоиНастройки_ТестовыйРежим Тогда
			Если Отладка_Лог.КоличествоСтрок() > 20000 Тогда
				Отладка_Лог.Очистить();
			КонецЕсли;
			Отладка_Лог.ДобавитьСтроку("***** ВнешнееСобытиеAgentCalled ***** ДатаВремя = " + ТекущаяДата());
			Отладка_Лог.ДобавитьСтроку(СтрШаблон("СайтИнтернетЗаявкиАвтозвонка = %1; КонсольСостояние = %2; КаналСистемный = %3; к_LinkedID = %4", СайтИнтернетЗаявкиАвтозвонка, КонсольСостояние, КаналСистемный, к_LinkedID)); 
			Отладка_Лог.ДобавитьСтроку("Возврат, т.к. заполнен КаналСистемный");     
		КонецЕсли;
		#КонецОбласти 
		Возврат;
	КонецЕсли; 	
	
	//21.01.2022+, если значение заполнено, значит, вероятно, идет исходящий автозвонок
	Если ЗначениеЗаполнено(к_LinkedID) Тогда                                          
		Возврат;
	КонецЕсли;  
	
	//Если выполняется исходящий автозвонок и поступил входящий из очереди - отбрось входящий
	//----------------------------------------------------------------------------------------
	Если КонсольСостояние > 0 Тогда
		//Если МоиНастройки_ТестовыйРежим Тогда
		//	Отладка_Лог.ДобавитьСтроку(СтрШаблон("***ФильтПоКонсольСостояние > 0***КонсольСостояние = %1", КонсольСостояние));  
		//КонецЕсли;   
		Возврат;
	КонецЕсли; 
		
	Если МоиНастройки_ТестовыйРежим Тогда
			Отладка_Лог.ДобавитьСтроку(СтрШаблон("***Фильтр к_LinkedId ПОСЛЕ***     КонсольСостояние = %1", КонсольСостояние));  	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИнтернетЗаявкаСигнатура) Тогда
		Возврат;
	КонецЕсли;  
	   	
	Если МоиНастройки_ТестовыйРежим Тогда
			Отладка_Лог.ДобавитьСтроку(СтрШаблон("***ФильтрПоКонсольСостояние*ПОСЛЕ***    КонсольСостояние = %1", КонсольСостояние));   		
	КонецЕсли;       
	
 	//Обработку автозвонков - отключи
	//--------------------------------
	ВключитьВыключитьПодключениеОбработчикаОжидания(Ложь);

	// Поступил входящий звонок из системной очереди
	//-------------------------------------------------------------------------------------------------
	КаналСистемный 		= КонвертацияКлиент.ПараметрПолучить(Данные,"DESTCHANNEL");
	КаналИнициатор 		= КонвертацияКлиент.ПараметрПолучить(Данные,"CALLERIDNAME");
	АбонентВнешний 		= КонвертацияКлиент.ПараметрПолучить(Данные,"CALLERIDNUM");	
	КонсольСостояние 	= 1;
	к_LinkedID 			= "1#"+КонвертацияКлиент.ПараметрПолучить(Данные,"DestLinkedid");

	Элементы.ГруппаДисплей.Видимость = Истина;        
		
	//18.01.2022+ Если оказались здевь

	// Если звонок поступил по каналу с номером "88342270703" (Саранск), то поменяем местами значения
	// реквизитов "КаналИнициатор" и "АбонентВнешний"
	//-------------------------------------------------------------------------------------------------
	Доступно = 		СтрДлина(СокрЛП(АбонентВнешний)) = 11
				И 	СокрЛП(АбонентВнешний) = "88342270703";
	Если Доступно Тогда
		АбонентВнешний = СокрЛП(КаналИнициатор);
		КаналИнициатор = "88342270703";
	КонецЕсли;

	// Вызовем процедуру визуализации звонка
	//-------------------------------------------------------------------------------------------------
	Если СтрДлина(АбонентВнешний) = 4 Тогда
		ЗвонокОбработатьВнутренний();
	Иначе
		ЗвонокОбработатьВнешнийВходящий_НаКлиенте();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытиеDialBegin(Данные)   
	
	
	//Возникает когда звонок стартовал. Так как возникает при любом звонке (входящем и исходящем),
	//то можно отказаться от события AgentCalled     
	
	//Событие возникает дважды (по каждому абоненту), возможен фильтр по DialString
		
	#Область Пример1
	
	//Пример 1 параметра Данные. 
	//Первое событие. Возникает только при звонке из программы. Сервер телефонии звонит оператору ЕКЦ.
	//Уже на это этапе нужно показать оператору сайт Автозвонка.
	//Похоже между этими двумя DialBegin-ами может влезть AgentCalled
	//После него последует второе событие DialBegin.
	//--------------------------------------------------------------------------
	//EVENT: DIALBEGIN
	//PRIVILEGE: CALL,ALL
	//DESTCHANNEL: SIP/3029-000051c6
	//DESTCHANNELSTATE: 0
	//DESTCHANNELSTATEDESC: DOWN
	//DESTCALLERIDNUM: 3029
	//DESTCALLERIDNAME: 3029
	//DESTCONNECTEDLINENUM: 3029
	//DESTCONNECTEDLINENAME: 3029
	//DESTLANGUAGE: RU
	//DESTACCOUNTCODE: 
	//DESTCONTEXT: DEFAULT
	//DESTEXTEN: 
	//DESTPRIORITY: 1
	//DESTUNIQUEID: 1650528919.33221
	//DESTLINKEDID: 1650528919.33221
	//DIALSTRING: 3029  
		
	//Пример 2 параметра Данные. 
	//Событие возникло:
	//	 - при входящем звонке (в случае ЕКЦ - после AgentCalled)
	//	 - при ручном исходящем звонке оператора с телефона 
	//	 - при автозвонке, как второй DialBegin после первого (малого) DialBegina. 
	//---------------------------
	//Event: DialBegin
	//Privilege: call,all
	//Channel: SIP/3029-000051c6
	//ChannelState: 6
	//ChannelStateDesc: Up
	//CallerIDNum: 3029
	//CallerIDName: 3029
	//ConnectedLineNum: 3029
	//ConnectedLineName: 3029
	//Language: ru
	//AccountCode: 
	//Context: macro-outcalls
	//Exten: s
	//Priority: 7
	//Uniqueid: 1650528919.33221
	//Linkedid: 1650528919.33221
	//DestChannel: SIP/edgeast-000051cd
	//DestChannelState: 0
	//DestChannelStateDesc: Down
	//DestCallerIDNum: 89101439551
	//DestCallerIDName: 3029
	//DestConnectedLineNum: 3029
	//DestConnectedLineName: 3029
	//DestLanguage: ru
	//DestAccountCode: 
	//DestContext: default
	//DestExten: 89101439551
	//DestPriority: 1
	//DestUniqueid: 1650528920.33229
	//DestLinkedid: 1650528919.33221
	//DialString: edgeast/89101439551    - у первого события или "DialString: 3029"  - у второго события   
	
    //Linkedid одинаков в обоих DialBegin
	#КонецОбласти  
	
	#Область Отладка
	Если МоиНастройки_ТестовыйРежим Тогда
		Если Отладка_Лог.КоличествоСтрок()>20000 Тогда
			Отладка_Лог.Очистить();
		КонецЕсли;
		Отладка_Лог.ДобавитьСтроку("***** ВнешнееСобытиеDialBegin ***** ДатаВремя = "+ТекущаяДата());
		Отладка_Лог.ДобавитьСтроку("Данные = "+Данные);  
		Отладка_Лог.ДобавитьСтроку(СтрШаблон("СайтИнтернетЗаявкиАвтозвонка = %1; КаналСистемный= %2; КонсольСостояние = %3", СайтИнтернетЗаявкиАвтозвонка, КаналСистемный, КонсольСостояние));  
	КонецЕсли;
	#КонецОбласти

	// Выполняется прямой вызов {кош: оператора} (вызов не из очереди){кош: например при автозвонке}
	// Получим номер телефона оператора консоли
	//-------------------------------------------------------------------------------------------------
	ТелСсылка 	= ЗначенияСервера.ПолучитьЗначениеПараметраСеанса("ККЦТелефон");
	ТелКонсоли 	= ЗначенияСервера.ПолучитьЗначениеРеквизита(ТелСсылка,"Код");
	
	// Выясним выполняется ли данный вызов в режиме "CallBack" (т.е. телефонный сервер вызывает
	// абонента). Системный вызов отличается от полноценного тем, что у него нет реквизита "Channel"
	//-------------------------------------------------------------------------------------------------  
	
	Доступно = 	(	СтрНайти(Данные,"CALLERIDNUM: " + ТелКонсоли) > 0 
					ИЛИ СтрНайти(Данные,"DESTEXTEN: " + ТелКонсоли) > 0
				)		
					И 	ЗначениеЗаполнено(КонвертацияКлиент.ПараметрПолучить(Данные,"CHANNEL"));	
	Если Не Доступно Тогда
		Возврат;
	КонецЕсли;
	
	//<Кошелев_07.09.2017_14-29, +, ЭТОТ КОД НЕПРАВИЛЬНЫЙ>
	//Исключи повторный DialBegin при слепом переводе автозвонка
	//-----------------------------------------------------------
	_LinkedID 	= КонвертацияКлиент.ПараметрПолучить(Данные,"DestLinkedid");
	_UniqueID 	= КонвертацияКлиент.ПараметрПолучить(Данные,"UniqueID");
	
	#Область Отладка
	Если МоиНастройки_ТестовыйРежим Тогда
		Если Отладка_Лог.КоличествоСтрок()>20000 Тогда
			Отладка_Лог.Очистить();
		КонецЕсли;
		Отладка_Лог.ДобавитьСтроку("***** ВнешнееСобытиеDialBegin до _LinkedID <> _UniqueID ***** ДатаВремя = "+ТекущаяДата());
		Отладка_Лог.ДобавитьСтроку(СтрШаблон("_LinkedID = %1; _UniqueID= %2", _LinkedID, _UniqueID));  
	КонецЕсли;
	#КонецОбласти

	Если _LinkedID <> _UniqueID Тогда
		Возврат;
	КонецЕсли;   
	
	#Область Отладка
	Если МоиНастройки_ТестовыйРежим Тогда
		Если Отладка_Лог.КоличествоСтрок()>20000 Тогда
			Отладка_Лог.Очистить();
		КонецЕсли;
		Отладка_Лог.ДобавитьСтроку("***** ВнешнееСобытиеDialBegin После _LinkedID <> _UniqueID ***** ДатаВремя = "+ТекущаяДата());
		Отладка_Лог.ДобавитьСтроку(СтрШаблон("_LinkedID = %1; _UniqueID= %2", _LinkedID, _UniqueID));  
	КонецЕсли;
	#КонецОбласти

	//<Кошелев_07.09.2017_14-29
	
	// Обработку автозвонков - отключи
	//---------------------------------
	ВключитьВыключитьПодключениеОбработчикаОжидания(Ложь);
	
	// Вызов не системный. Определим направление вызова - входящий или исходящий
	//-------------------------------------------------------------------------------------------------
	ТелВызывающий = КонвертацияКлиент.ПараметрПолучить(Данные,"CALLERIDNUM");
	Элементы.ГруппаДисплей.Видимость = Истина;
	
	КаналИнициатор = "";
	
	Если СокрЛП(ТелВызывающий) = ТелКонсоли Тогда 
		//Это вызов исходящий
  		КаналСистемный 		= КонвертацияКлиент.ПараметрПолучить(Данные,"CHANNEL");
		АбонентВнешний 		= КонвертацияКлиент.ПараметрПолучить(Данные,"DESTCALLERIDNUM");
		КонсольСостояние 	= 2;
		
		//<Кошелев_05092017, +>
		// Поставь агента в паузу, чтобы при автозвонке на него поступали входящие из очереди
		//-----------------------------------------------------------------------------------
		//Если ЭтаФорма.МоиНастройки_ОбрабатыватьАвтозвонки Тогда
		//	ЭтаФорма.КонсольПауза = Истина;
		//	КонсольПаузаПриИзменении("просто какое-то значение");
		//КонецЕсли;
		//</Кошелев_05092017>         
				
		к_LinkedID = "0#"+КонвертацияКлиент.ПараметрПолучить(Данные,"DestLinkedid");
	Иначе   
		// Если вызов входящий
		КаналСистемный 		= КонвертацияКлиент.ПараметрПолучить(Данные,"DESTCHANNEL");
		АбонентВнешний 		= КонвертацияКлиент.ПараметрПолучить(Данные,"CALLERIDNUM");
		КонсольСостояние 	= 1;
		
		к_LinkedID 	= "1#"+КонвертацияКлиент.ПараметрПолучить(Данные,"DestLinkedid");		
	КонецЕсли;
	
	// Вызовем процедуру визуализации информации о звонке
	//-------------------------------------------------------------------------------------------------
	Если СтрДлина(АбонентВнешний) = 4 Тогда
		ЗвонокОбработатьВнутренний();
	ИначеЕсли КонсольСостояние = 2 Тогда   
		
		#Область Звонок_обработать_внешний_исходящий
		// Включение и настройка элементов дисплея
		//-----------------------------------------
		Элементы.Дисплей02.Заголовок = "Исходящий звонок на телефон абонента";
		
		Если ЗначениеЗаполнено (СайтИнтернетЗаявкиАвтозвонка) Тогда
			Элементы.Дисплей03.Заголовок = СайтИнтернетЗаявкиАвтозвонка;
		ИначеЕсли ЗначениеЗаполнено (СайтИнтернетЗаявкиНеАвтозвонка) Тогда
			Элементы.Дисплей03.Заголовок = СайтИнтернетЗаявкиНеАвтозвонка;	
		КонецЕсли;
		
		// Сформируем строку дисплея с номером телефона и регионом звонка
		//--------------------------------------------------------------------
		АбонентВнешний				 = ТелефонВнешнийНормализовать_НаКлиенте(АбонентВнешний);			
		Регион						 = Регион(АбонентВнешний);	
		Элементы.Дисплей01.Заголовок = СокрЛП(АбонентВнешний) + "   " + Регион;
		#КонецОбласти
		
	Иначе
		//входящий оператору напрямую, а не из очереди
		//--------------------------------------------
		ЗвонокОбработатьВнешнийВходящий_НаКлиенте()
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗвонокОбработатьВнешнийВходящий_НаКлиенте()
	
	Если ЗначениеЗаполнено(АбонентВнешний) Тогда
		АбонентВнешний 				 = ТелефонВнешнийНормализовать_НаКлиенте(АбонентВнешний, "");
		Регион						 = Регион(АбонентВнешний);
		Элементы.Дисплей01.Заголовок = СокрЛП(АбонентВнешний)+ "  " + Регион;	
	Иначе
		Элементы.Дисплей01.Заголовок = "Номер и регион абонента не определены";
	КонецЕсли;
	
	// Отображение кнопки вызова формы истории звонков
	//-------------------------------------------------------------------------------------------------
	Элементы.АбонентИстория.Видимость = ЗначениеЗаполнено(АбонентВнешний);

	#Область ВходящийЗвонок_ОтображениеКаналаЗвонка
	//Отображение канала звонка
	//-------------------------
	Если Не ЗначениеЗаполнено(КаналИнициатор) Тогда
		Элементы.Дисплей02.Заголовок = "Канал поступления звонка не определен";
	Иначе
		
		КаналИнициатор = ТелефонВнешнийНормализовать_НаКлиенте(КаналИнициатор);
		_КаналВходящего = Канал(КаналИнициатор);
		Если ЗначениеЗаполнено(_КаналВходящего) Тогда
			КаналИнициатор 							= _КаналВходящего.Ссылка;
			НомерИНазначениеВнешнегоТелефонаЛуидор 	= _КаналВходящего.НомерИНазначение;
			Элементы.Дисплей02.Заголовок			= НомерИНазначениеВнешнегоТелефонаЛуидор;
		Иначе 
			Элементы.Дисплей02.Заголовок = СокрЛП(КаналИнициатор) + "  неизвестный канал";
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти
	
	Элементы.Дисплей03.Заголовок = "";
КонецПроцедуры

#Область ВходящийЗвонок_ОтображениеКаналаЗвонка

&НаСервереБезКонтекста
Функция Канал(КаналИнициатор)
	
	Результат = Новый Структура();
	Результат.Вставить("Ссылка",	 		Справочники.ТелВнешние.ПустаяСсылка());
	Результат.Вставить("НомерИНазначение", 	"");
	
	Канал = КаналИнициатор; //Нормализовали уже на клиенте
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВЫБОР
	|		КОГДА Ссылка.Родитель = ЗНАЧЕНИЕ(Справочник.ТелВнешние.ПустаяСсылка)
	|			ТОГДА Ссылка
	|		ИНАЧЕ Ссылка.Родитель
	|	КОНЕЦ КАК Ссылка,
	|	ВЫБОР
	|		КОГДА Ссылка.Родитель = ЗНАЧЕНИЕ(Справочник.ТелВнешние.ПустаяСсылка)
	|			ТОГДА Ссылка.Код + ""   "" + Ссылка.Назначение
	|		ИНАЧЕ Ссылка.Родитель.Код + ""   "" + Ссылка.Родитель.Назначение
	|	КОНЕЦ КАК НомерИНазначение
	|ИЗ
	|	Справочник.ТелВнешние.Варианты 
	|ГДЕ
	|	Код = &Канал";
	Запрос.УстановитьПараметр("Канал",Канал);
	РезультатЗапроса = ОбщегоНазначения.ВыполнитьЗапрос(Запрос);
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	Выборка= РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	Возврат Результат;
КонецФункции

&НаСервере
Функция НомерИНазначениеВнешнегоТелефонаЛуидор(КаналИнициаторСсылка)
	Результат = "";
	Результат =  СокрЛП(КаналИнициаторСсылка.Код) + "   " + СокрЛП(КаналИнициаторСсылка.Назначение);
	Возврат Результат;
КонецФункции
#КонецОбласти


&НаКлиенте
Функция ТелефонВнешнийНормализовать_НаКлиенте(НомерТелефона, КодГорода = Неопределено)
	
// Функция возвращает номер телефона в 10-ти значном формате (без международного и междугородного
// префиксов "7" или "8". Если длина переданного номера телефона меньше 10 знаков, то выполняется
// попытка дополнить его переданным кодом города. Если длина переданного номера больше 10 знаков,
// то возвращается сам переданный номер без изменений
//-------------------------------------------------------------------------------------------------
	Доступно = 	  ТипЗнч(НомерТелефона) = Тип("Строка") 
				И ЗначениеЗаполнено(НомерТелефона);
	Если Не Доступно Тогда
		Возврат ("Anonimous");
	КонецЕсли;

// Уберем из НомераТелефона все спецсимволы, где символ(34) - кавычки
//-------------------------------------------------------------------------------------------------
	Телефон = СтрЗаменить(НомерТелефона," ","");
	Телефон = СтрЗаменить(Телефон,"+","");
	Телефон = СтрЗаменить(Телефон,"-","");
	Телефон = СтрЗаменить(Телефон,"(","");
	Телефон = СтрЗаменить(Телефон,")","");
	Телефон = СтрЗаменить(Телефон, Символ(34), "");
	Телефон = ВРег(СокрЛП(Телефон));
	ДлинаНомера = СтрДлина(Телефон);

// Если переданный номер телефона равен "1111", значит номер абонента скрыт
//-------------------------------------------------------------------------------------------------
	Доступно = 	Телефон = "111"
			ИЛИ Телефон = "1111"
			ИЛИ Телефон = "11111";
	Если Доступно Тогда
		Возврат ("Anonimous");
	КонецЕсли;

// Если переданный номер телефона имеет формат "8800" или "8804" или "8808" и его длина 11 знаков,
// то такой номер не подлежит преобразованию и возвращается в исходном виде
//-------------------------------------------------------------------------------------------------
	Доступно = Лев(Телефон,4) = "8800";
	Доступно = Доступно ИЛИ (Лев(Телефон,4) = "8804");
	Доступно = Доступно ИЛИ (Лев(Телефон,4) = "8808");
	Доступно = Доступно И ДлинаНомера = 11;
  	Если Доступно Тогда
		Возврат (Телефон);
	КонецЕсли;

// Если в функцию передан код города, то выясним необходимость в его использовании
//-------------------------------------------------------------------------------------------------
	Доступно = 		ДлинаНомера < 10
				И 	ЗначениеЗаполнено(КодГорода)
				И 	ТипЗнч(КодГорода) = Тип("Строка");

	Если Доступно Тогда
		Префикс 		= ВРег(СокрЛП(КодГорода));
		ДлинаПрефикса 	= СтрДлина(Префикс);

		Если (ДлинаНомера + ДлинаПрефикса) = 10 Тогда
			Телефон 	= ВРег(СокрЛП(Префикс) + СокрЛП(Телефон));
			ДлинаНомера = СтрДлина(Телефон);
		Иначе
			Возврат (Телефон);
		КонецЕсли;
	КонецЕсли;

// Уберем из полученного номера телефона все лишние междунарожные префиксы
// Таким образом, если номер телефона имеет Российский формат, то он примет 10-ти значный вид
//-------------------------------------------------------------------------------------------------
	Доступно = ((ДлинаНомера = 14) И (Лев(Телефон,3) = "810"));
	Доступно = Доступно ИЛИ (ДлинаНомера = 12) И (Лев(Телефон,2) = "87");
	Доступно = Доступно ИЛИ (ДлинаНомера = 11) И (Лев(Телефон,1) = "8");
	Доступно = Доступно ИЛИ (ДлинаНомера = 11) И (Лев(Телефон,1) = "7");
	Телефон = ?(Доступно = Истина,Прав(Телефон,10),Телефон);

// Если после всех преобразований длина номера телефона больше 10 знаков, значит этот номер
// имеет международный формат. Вернем его в том виде в каком он был передан в функцию
//-------------------------------------------------------------------------------------------------
	Телефон = ?(СтрДлина(СокрЛП(Телефон)) > 10,НомерТелефона,Телефон);
	Возврат (ВРег(СокрЛП(Телефон)));
	
КонецФункции

&НаСервере
Функция ТелефонВнешнийНормализовать(Телефон)
	Возврат КонвертацияСервер.ТелефонВнешнийНормализовать(Телефон);
КонецФункции

&НаКлиенте
Процедура ВнешнееСобытиеHangup(Данные = Неопределено)
	
	# Область Пример 
	//Пример параметра Данные по номеру 5240
	//--------------------------------------
	//Event: Hangup
	//Privilege: call,all
	//Channel: SIP/5240-0003729c
	//ChannelState: 0
	//ChannelStateDesc: Down
	//CallerIDNum: <unknown>
	//CallerIDName: <unknown>
	//ConnectedLineNum: 89209161927
	//ConnectedLineName: 84922778079
	//Language: ru
	//AccountCode: 
	//Context: default
	//Exten: 5519
	//Priority: 1
	//Uniqueid: 1540886600.1869935
	//Linkedid: 1540886600.1869931
	//Cause: 17
	//Cause-txt: User busy
	#КонецОбласти
			
// Выясним относится ли полученное событие к данной консоли
//-------------------------------------------------------------------------------------------------
	Доступно = 		(Данные = Неопределено)
				ИЛИ (СтрДлина(КаналСистемный)>0  И СтрНайти(Данные,"CHANNEL: " + ВРег(СокрЛП(КаналСистемный))) > 0);
	Если Доступно = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	#Область Отладка
	Если МоиНастройки_ТестовыйРежим Тогда
		Если Отладка_Лог.КоличествоСтрок()>20000 Тогда
			Отладка_Лог.Очистить();
		КонецЕсли;
		Отладка_Лог.ДобавитьСтроку("****************************************************************************");
		Отладка_Лог.ДобавитьСтроку("********************** ВнешнееСобытиеHangup_до_ЗакрытьЗадачуАвтоЗвонка******");
		Отладка_Лог.ДобавитьСтроку("ДатаВремя = "+ТекущаяДата());
		Отладка_Лог.ДобавитьСтроку("Данные = "+Данные);     
		Отладка_Лог.ДобавитьСтроку(СтрШаблон("СайтИнтернетЗаявкиАвтозвонка = %1", СайтИнтернетЗаявкиАвтозвонка));
	КонецЕсли;
	#КонецОбласти 
	
	// Закрой задачу автозвонка
	//---------------------------------------
	Если ЭтаФорма.КонсольСостояние = 2 Тогда
		ЗакрытьЗадачуАвтоЗвонка(ЭтаФорма.АбонентВнешний, ПолучиСигнатуруЗвонка());
	КонецЕсли;   
	
	#Область Отладка
	Если МоиНастройки_ТестовыйРежим Тогда
		Если Отладка_Лог.КоличествоСтрок()>20000 Тогда
			Отладка_Лог.Очистить();
		КонецЕсли;
		Отладка_Лог.ДобавитьСтроку("****************************************************************************");
		Отладка_Лог.ДобавитьСтроку("********************** ВнешнееСобытиеHangup_после_ЗакрытьЗадачуАвтоЗвонка****");
		Отладка_Лог.ДобавитьСтроку("ДатаВремя = "+ТекущаяДата());
		Отладка_Лог.ДобавитьСтроку(СтрШаблон("СайтИнтернетЗаявкиАвтозвонка = %1", СайтИнтернетЗаявкиАвтозвонка)); 
		Отладка_Лог.ДобавитьСтроку(СтрШаблон("КонсольСостояние = %1", 			  КонсольСостояние)); 
	КонецЕсли;
	#КонецОбласти
	
	Элементы.Дисплей01.Заголовок = "";
	Элементы.Дисплей02.Заголовок = "";
	Элементы.Дисплей03.Заголовок = "";   
	Элементы.ДисплейСодержаниеИнтернетПочтовойЗаявки.Заголовок = "";
		
	КонсольСостояние 	= 0;
	КаналСистемный 		= "";
	АбонентВнешний		= "";
	
	к_ТелВнутрОП						= "";
	к_LinkedID							= "";
	КаналИнициаторЗадачиОбратногоЗвонка = "";
	
	Элементы.Дисплей03.Заголовок = "";
	
	ИнтернетЗаявкаСигнатура 				= "";
	СайтИнтернетЗаявкиАвтозвонка 			= "";
	СайтИнтернетЗаявкиНеАвтозвонка			= "";
	ДисплейИмяАвтозвонка 					= "";
	ДисплейМайлАвтозвонка 					= "";	
	ДисплейДругиеСайты						= ""; 
	
	ИнтернетПочтоваяЗаявкаСодержание		= "";
	
	Регион 									= "";
	НомерИНазначениеВнешнегоТелефонаЛуидор 	= "";
		
	#Область Отладка
	Если МоиНастройки_ТестовыйРежим Тогда
		Если Отладка_Лог.КоличествоСтрок()>20000 Тогда
			Отладка_Лог.Очистить();
		КонецЕсли;
		Отладка_Лог.ДобавитьСтроку("****************************************************************************");
		Отладка_Лог.ДобавитьСтроку("********************** ВнешнееСобытиеHangup_до_ОбработкаАвтозвонков****");
		Отладка_Лог.ДобавитьСтроку("ДатаВремя = "+ТекущаяДата());
		Отладка_Лог.ДобавитьСтроку(СтрШаблон("СайтИнтернетЗаявкиАвтозвонка = %1", СайтИнтернетЗаявкиАвтозвонка));
	КонецЕсли;
	#КонецОбласти

	//ОбработкаАвтозвонков
	//--------------------
	ВключитьВыключитьПодключениеОбработчикаОжидания(Истина);
КонецПроцедуры

#Область Регион_абонента_на_сервере
&НаСервере
Функция Регион(Телефон) 
	Результат = "";
	Результат = КонвертацияСерверРегионПолучитьПоНомеруТелефона(Телефон);
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция  КонвертацияСерверРегионПолучитьПоНомеруТелефона(Знач Телефон)
	Результат = "";
	Тел = Телефон;
	
	Если СтрДлина(Тел) = 10 Тогда
		Тел = "7" + СокрЛП(Тел);
	ИначеЕсли СтрДлина(Тел) = 11 Тогда
		Доступно = 		Лев(Тел,4) = "8800"
					ИЛИ Лев(Тел,4) = "8804"
					ИЛИ Лев(Тел,4) = "8808";	
		Если Доступно Тогда
			Тел= "7" + Прав(СокрЛП(Тел),10);
		КонецЕсли;
	КонецЕсли;

	Тел = Число(Тел);
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	 "ВЫБРАТЬ ПЕРВЫЕ 1
	 |	Страна.Наименование КАК Страна
	 |ИЗ
	 |	РегистрСведений.ТелНомерныеПланы
	 |ГДЕ
	 |	НачДиапазона <= &ИскомыйНомер
	 |	И КонДиапазона >= &ИскомыйНомер
	 |УПОРЯДОЧИТЬ ПО
	 |	Страна.ЭтоГруппа";
	Запрос.УстановитьПараметр("ИскомыйНомер", Тел);
	РезультатЗапроса = ОбщегоНазначения.ВыполнитьЗапрос(Запрос);
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Результат = Выборка.Страна;
	
	Возврат Результат;
КонецФункции
#КонецОбласти

&НаСервере
Процедура ЗвонокОбработатьВнутренний()

// Сформируем главную строку дисплея
//-------------------------------------------------------------------------------------------------
	Если КонсольСостояние = 1 Тогда
		Темп = "Входящий внутренний звонок от " + СокрЛП(ЭтаФорма.АбонентВнешний);
		Элементы.Дисплей01.Заголовок = СокрЛП(Темп);
	Иначе
		Темп = "Исходящий звонок внутреннему абоненту " + СокрЛП(ЭтаФорма.АбонентВнешний);
		Элементы.Дисплей01.Заголовок = СокрЛП(Темп);
	КонецЕсли;

// Получим ссылку на Владельца телефона абонента
//-------------------------------------------------------------------------------------------------
	ТелСсылка 	= КонвертацияСервер.ТелВнутреннийПолучитьСсылку(ЭтаФорма.АбонентВнешний);
	ВладСсылка 	= Телефония.ВладелецПолучить(ТелСсылка);

	Если ЗначениеЗаполнено(ВладСсылка) Тогда
		Если ВладСсылка.ЭтоГруппа Тогда
			Темп = СокрЛП(ВладСсылка) + ", " + СокрЛП(ВладСсылка.ТочкаРазмещения);
			Элементы.Дисплей02.Заголовок = СокрЛП(Темп);
		Иначе
			Темп = СокрЛП(ВладСсылка) + ", " + СокрЛП(ВладСсылка.Должность) + ", " + СокрЛП(ВладСсылка.ТочкаРазмещения);
			Элементы.Дисплей02.Заголовок = СокрЛП(Темп);
		КонецЕсли;
	Иначе
		Элементы.Дисплей02.Заголовок = "Абонент отсутствует в телефонном справочнике";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция РегистрыСведений_ЗадачиОбратныйЗвонок_Добавить(Телефон, ДатаЗакрытия, Тип, Исполнитель, Комментарий, ДатаПостановки, ЗвонокИнициатор, ДатаАктуальности, ПисьмоИнициатор, Основание = "")
	// Обработка непринятого автозвонка - создание задачи на перезвон по пропущенному
	//-----------------------------------------------------------
	Если Тип = "Перечисления.ТипЗадачи.НепринятыйИсходящий" Тогда
		 Тип = Перечисления.ТипЗадачи.НепринятыйИсходящий;
	КонецЕсли;
	Если Исполнитель = "ПараметрыСеанса.ККЦКонтактЦентр" Тогда
		 Исполнитель = ПараметрыСеанса.ККЦКонтактЦентр;
	КонецЕсли;
	Рез = РегистрыСведений.ЗадачиОбратныйЗвонок.Добавить(Телефон, ДатаЗакрытия, Тип, Исполнитель, Комментарий, ДатаПостановки, ЗвонокИнициатор, ДатаАктуальности, ПисьмоИнициатор,,, Основание);
	Возврат Рез;
КонецФункции 

&НаСервере
Функция РегистрыСведений_ЗадачиОбратныйЗвонок_ДобавитьСЗаменой(Телефон, ДатаЗакрытия, Тип, Исполнитель, Комментарий, ДатаПостановки, ЗвонокИнициатор, ДатаАктуальности, ПисьмоИнициатор, Основание = "")
	//В отличие от РегистрыСведений_ЗадачиОбратныйЗвонок_Добавить() если находит открытую задачу, то не завершается,
	//а в этой открытой задаче меняет реквизиты, кроме измерений
	//-----------------------------------------------------------
	Если Тип = "Перечисления.ТипЗадачи.НепринятыйИсходящий" Тогда
		 Тип = Перечисления.ТипЗадачи.НепринятыйИсходящий;
	КонецЕсли;
	Если Исполнитель = "ПараметрыСеанса.ККЦКонтактЦентр" Тогда
		 Исполнитель = ПараметрыСеанса.ККЦКонтактЦентр;
	КонецЕсли;
	Рез = РегистрыСведений.ЗадачиОбратныйЗвонок.ДобавитьСЗаменой(Телефон, ДатаЗакрытия, Тип, Исполнитель, Комментарий, ДатаПостановки, ЗвонокИнициатор, ДатаАктуальности, ПисьмоИнициатор,,, Основание);
	Возврат Рез;
КонецФункции 

#Область Управление_звонками
//*************************************************************************************************
// Управление звонком
//*************************************************************************************************

&НаКлиенте
Процедура АбонентИстория(Команда)

// Откроем форму для показа истории звонков по внешнему абоненту
//-------------------------------------------------------------------------------------------------
	Парам = Новый Структура("Канал, Телефон", КаналСистемный, АбонентВнешний);
	ОткрытьФорму("Обработка.КонсольКонтактЦентраТест4.Форма.ФормаИсторииЗвонков", Парам, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПанельБыстрогоВызова(Элемент)

// Откроем форму панели быстрого вызова
//-------------------------------------------------------------------------------------------------
	Парам = Новый Структура("Канал, Телефон", КаналСистемный, АбонентВнешний);
	ОткрытьФорму("Обработка.КонсольКонтактЦентраТест4.Форма.ФормаБыстрогоВызова",Парам,ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ТелефоныВыбор(Элемент,ВыбраннаяСтрока,Поле,СтандартнаяОбработка)

// Если консоль находится в режиме ожидания, то выполним вызов выбранного номера
// Во всех остальных случаях (режим разговора) - выполним переадресацию в зависимости от команды
//-------------------------------------------------------------------------------------------------        

	СтандартнаяОбработка = Ложь;

	Доступно = (Поле.Имя = "ТелефоныAtxfer");
	Доступно = Доступно ИЛИ (Поле.Имя = "ТелефоныRedirect");
	Доступно = Доступно И (Элементы.Телефоны.ТекущиеДанные <> Неопределено);
	Если Не Доступно Тогда
		Возврат;
	КонецЕсли;

// Получим номер для переадресации
//-------------------------------------------------------------------------------------------------
	ТелНомер = ВРег(СокрЛП(Элементы.Телефоны.ТекущиеДанные.Redirect));
	
// Выполним команду
//-------------------------------------------------------------------------------------------------
	Если КонсольСостояние = 0 Тогда
		Результат = КонтактЦентр.КомандаOriginate(ТелНомер);
	ИначеЕсли Поле.Имя = "ТелефоныAtxfer" Тогда
		Результат = КонтактЦентр.КомандаAtxfer(КаналСистемный,ТелНомер);
		ЭтаФорма.к_ТелВнутрОП = ТелНомер;
	ИначеЕсли Поле.Имя = "ТелефоныRedirect" Тогда
		Результат = КонтактЦентр.КомандаBlindTransfer(КаналСистемный,ТелНомер);
		ЭтаФорма.к_ТелВнутрОП = ТелНомер;
	КонецЕсли;

// Выведем сообщение о результате
//-------------------------------------------------------------------------------------------------
	Если (Результат = Ложь) Тогда
		ПоказатьПредупреждение(,"Ошибка при наборе номера абонента",3);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)
	
		// обнули реквизиты формы
		//-----------------------------
		КонсольСостояние 	= 0;
		КаналСистемный 		= "";
		АбонентВнешний		= "";
		к_ТелВнутрОП		= "";
		к_LinkedID			= "";
		
		ИнтернетЗаявкаСигнатура 				= "";
		СайтИнтернетЗаявкиАвтозвонка			= "";
		СайтИнтернетЗаявкиНеАвтозвонка			= "";
		ДисплейИмяАвтозвонка 					= "";
		ДисплейМайлАвтозвонка					= "";
		ДисплейДругиеСайты			 			= ""; 
		
		ИнтернетПочтоваяЗаявкаСодержание		= "";
		
		Элементы.Дисплей01.Заголовок = "";
		Элементы.Дисплей02.Заголовок = "";
		Элементы.Дисплей03.Заголовок = "";   
		Элементы.ДисплейСодержаниеИнтернетПочтовойЗаявки.Заголовок = "";
		
		Регион									= "";
		НомерИНазначениеВнешнегоТелефонаЛуидор  = "";
		
		//Переподключи компоненту
		//-----------------------
		КонтактЦентр.КомпонентаОтключить();
		КонтактЦентр.КомпонентаПодключить();
КонецПроцедуры

#Область Маршрутизация_по_расширенной_анкете 
&НаКлиенте
Процедура ПереключитьЗвонокПоРасширеннойАнкете(Команда)
   	
	Парам = Новый Структура("Телефон, КаналСистемный", АбонентВнешний, КаналСистемный);
	
	Если ЗначениеЗаполнено(КаналИнициатор) Тогда
		Парам.Вставить("КаналИнициатор", КаналИнициатор);
	ИначеЕсли ЗначениеЗаполнено(КаналИнициаторЗадачиОбратногоЗвонка) Тогда
		Парам.Вставить("КаналИнициатор",КаналИнициаторЗадачиОбратногоЗвонка);
	КонецЕсли;
		
	Парам.Вставить("Сигнатура", 								ПолучиСигнатуруЗвонка());
	Парам.Вставить("Регион",									Регион);
	Парам.Вставить("НомерИНазначениеВнешнегоТелефонаЛуидор",	НомерИНазначениеВнешнегоТелефонаЛуидор);
	
	Парам.Вставить("СайтИнтернетЗаявки",		?(ЗначениеЗаполнено(СайтИнтернетЗаявкиАвтозвонка), 		СайтИнтернетЗаявкиАвтозвонка, ""));
	Парам.Вставить("СайтИнтернетЗаявки",		?(ЗначениеЗаполнено(СайтИнтернетЗаявкиНеАвтозвонка), 	СайтИнтернетЗаявкиНеАвтозвонка, Парам.СайтИнтернетЗаявки));

	//Если это звонок по сайту, тогда передай признак автоответа на вопрос регион абонента
	//------------------------------------------------------------------------------------
	Доступно = ЗначениеЗаполнено(Парам.СайтИнтернетЗаявки)
				И СтрНайти(ЭтаФорма.Объект.КэшСайтыТребующиеАвтоответаАнкетыНаВопросРегионАбонента, Парам.СайтИнтернетЗаявки)>0;
	Парам.Вставить("СайтИнтернетЗаявки_АвтоответНаВопросРегионАбонента", Доступно);
	       
	Парам.Вставить("ДругиеСайты",						ДисплейДругиеСайты);
	Парам.Вставить("ИнтернетЗаявкаСигнатура", 			ИнтернетЗаявкаСигнатура);  
	Парам.Вставить("ИнтернетПочтоваяЗаявкаСодержание",	ИнтернетПочтоваяЗаявкаСодержание); 

	
	Парам.Вставить("МоиНастройки_ПоказыватьИсториюЗвонков", 		МоиНастройки_ПоказыватьИсториюЗвонков);
	Парам.Вставить("МоиНастройки_ПолучатьИсториюАсинхронно", 		МоиНастройки_ПолучатьИсториюАсинхронно);  
	
	ОткрытьФорму("Обработка.КонсольКонтактЦентраТест4.Форма.ФормаРасширеннойАнкеты", Парам, ЭтаФорма);
КонецПроцедуры
#КонецОбласти

&НаСервере
Функция ВыгрузитьсИсториюОбщенияВоВремХран();
	Адрес = ПоместитьВоВременноеХранилище(Объект.ИсторияЗвонков.Выгрузить());
	Возврат Адрес;
КонецФункции 

&НаКлиенте
Функция ПолучиСигнатуруЗвонка()
	
	Если Не ЗначениеЗаполнено(к_LinkedID) Тогда
		Возврат "";
	КонецЕсли;  
	
	Если СтрНайти(к_LinkedID, "#")>0 Тогда
		Возврат(к_LinkedID+"#000000001");
	Иначе
		Возврат("2#" + к_LinkedID+"#000000001"); 
	КонецЕсли
	
КонецФункции

&НаКлиенте
Процедура ОтправитьПисьмо_ПоставитьЗадачу(Команда)	
	// Если КЦ перевело звонок с уведомлением на ОП, но никто из сотрудинков ОП его не принял
	// тогда напиши письмо этому сотруднику и поставь  ему задачу перезвонить
	
	ИдФонЗадания = Новый УникальныйИдентификатор();

	Сигнатура 		= "";
	ТелВнутренний 	= "";
	ТипЗадачи		= "";
	
	Доступно = 		ИмяАктивногоДинамичСписка <> ""
				И	Элементы[ИмяАктивногоДинамичСписка].ТекущиеДанные <> Неопределено;
	Если  Доступно Тогда
		Если ИмяАктивногоДинамичСписка = "ЗадачиСписокЗвонки" Тогда
			Сигнатура 			= ЭтаФорма.Элементы[ИмяАктивногоДинамичСписка].ТекущиеДанные.ЗвонокИнициатор; 
			ТелВнутренний 		= ЭтаФорма.к_ТелВнутрОП;
			ТипЗадачи			= "Непринятый";
			АбонентВнешний		= ЭтаФорма.Элементы[ЭтаФорма.ИмяАктивногоДинамичСписка].ТекущиеДанные.Телефон;   
			
		ИначеЕсли ИмяАктивногоДинамичСписка = "ЗадачиСписокПочта" Тогда
			Сигнатура 			= ЭтаФорма.Элементы[ИмяАктивногоДинамичСписка].ТекущиеДанные.ПисьмоИнициатор;
			ТелВнутренний 		= "";
			ТипЗадачи 			= "ПрочаяПочта";
			АбонентВнешний		= ЭтаФорма.Элементы[ЭтаФорма.ИмяАктивногоДинамичСписка].ТекущиеДанные.Телефон;  
			
		ИначеЕсли ИмяАктивногоДинамичСписка = "ЗадачиСписокГАЗ" Тогда
			#Область Закрытие_ПочтовойЗадачиГАЗ_Почтовым_сообщением_менеджеру
			Сигнатура 		= ЭтаФорма.Элементы[ИмяАктивногоДинамичСписка].ТекущиеДанные.Сигнатура;   //сигнатура заявки ГАЗ
			ТелВнутренний 	= "";
			ТипЗадачи 		= "Исходящее почтовое сообщение менеджеру по заявке ГАЗ";
			АбонентВнешний	= ЭтаФорма.Элементы[ИмяАктивногоДинамичСписка].ТекущиеДанные.Почта;
			
			Парам = Новый Структура();
			Парам.Вставить("Сигнатура", 				Сигнатура);			// сигнатура текущего звонка (сотрудник КЦ сделал исходащий вызов на абонента, далее сделал перевод с уведомлением															// на сотрудника ОП, но он не принял вызов
			Парам.Вставить("АбонентВнешний",			АбонентВнешний); 	// номер телефона внешнего абонента
			Парам.Вставить("ТелВнутренний",				ЭтаФорма.ПоследнийНабранныйНомерВнутрАбонента);	// Внутренний телефон сотрудника ОП, который не принял вызов ,переведенный на него переводом с уведомлением оператором КЦ 
			Парам.Вставить("ТипЗадачи",					ТипЗадачи);
			Парам.Вставить("ИдентификаторФонЗадания",	 ИдФонЗадания);
			Парам.Вставить("От", 						"info@luidor.ru");					//адрес эл.почты отправителя (абсолютно любой адрес) 
			Парам.Вставить("Тема",						"ГАЗ-заявка. Почта клиента: "+АбонентВнешний);
			Парам.Вставить("Содержание",				"ГАЗ-заявка. Почта клиента: "+АбонентВнешний);
			Парам.Вставить("ОтправлятьФоновымЗаданием",	Истина);
			
			ДопПарам = Новый Структура("Ключ", "ЗадачиСписокГАЗ");
			НаЗакрытиеФормыПисьма = Новый ОписаниеОповещения("НаЗакрытиеФормыПисьма", ЭтаФорма, ДопПарам);
			ОткрытьФорму("ОбщаяФорма.ЭлПисьмо", Парам, ЭтаФорма.Элементы.ЗадачиСписокГАЗ, , , , НаЗакрытиеФормыПисьма, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
			#КонецОбласти
					
		КонецЕсли;
	КонецЕсли;
		
	//Если оказались здесь, значит отправка письма в следующих случаях:
	//	- с закладки почта
	//  - с закладки звонки
	//  - с закладки интернет-заявки
	//	- ни с какой закладки, прямо в момент разговора с абонентом
	Парам = Новый Структура();
	Парам.Вставить("Сигнатура", 				Сигнатура);			// сигнатура текущего звонка (сотрудник КЦ сделал исходащий вызов на абонента, далее сделал перевод с уведомлением
																	// на сотрудника ОП, но он не принял вызов
	Парам.Вставить("АбонентВнешний",			АбонентВнешний); 	// номер телефона внешнего абонента
	Парам.Вставить("ТелВнутренний",				ЭтаФорма.ПоследнийНабранныйНомерВнутрАбонента);	// Внутренний телефон сотрудника ОП, который не принял вызов ,переведенный на него переводом с уведомлением оператором КЦ 
	Парам.Вставить("ТипЗадачи",					ТипЗадачи);
	Парам.Вставить("ИдентификаторФонЗадания",	 ИдФонЗадания);
	Парам.Вставить("От", 						"info@luidor.ru");					//адрес эл.почты отправителя (абсолютно любой адрес) 
	Парам.Вставить("Тема",						"Перезвоните клиенту на номер: "+АбонентВнешний);
	Парам.Вставить("Содержание",				"Перезвоните клиенту на номер: "+АбонентВнешний);
	Парам.Вставить("ОтправлятьФоновымЗаданием",	Истина); 
	
	//Обнови закладки Звонки и ВебСервис при закрытии формы письма
	//------------------------------------------------------------------
	ДопПарам = Новый Структура("Ключ", "");
  	НаЗакрытиеФормыПисьмаПрочее = Новый ОписаниеОповещения("НаЗакрытиеФормыПисьмаПрочее", ЭтаФорма, ДопПарам);
	
	ОткрытьФорму("ОбщаяФорма.ЭлПисьмо", Парам, ЭтаФорма,,,,НаЗакрытиеФормыПисьмаПрочее);
	
КонецПроцедуры    

&НаКлиенте
Процедура НаЗакрытиеФормыПисьмаПрочее(Парам1, Парам2) Экспорт     	
  Элементы.ЗадачиСписокВебСервис.Обновить();
  Элементы.ЗадачиСписокЗвонки.Обновить(); 
КонецПроцедуры

#Область Закрытие_ПочтовойЗадачиГАЗ_Почтовым_сообщением_менеджеру
&НаКлиенте
Процедура НаЗакрытиеФормыПисьма(Парам1, Парам2) Экспорт
	ТекДанные = ЭтаФорма.Элементы.ЗадачиСписокГАЗ.ТекущиеДанные;
	
	Доступно = 		ТекДанные <> Неопределено
				И 	Парам1 = "ОтправленоПочтовоеСообщениеМенеджеруПоПочтовойЗадачеГАЗ";
	Если Не Доступно Тогда
		Возврат;
	КонецЕсли;
	
	ЗакройПочтовуюЗадачуГАЗ(ТекДанные.Телефон, ТекДанные.Сигнатура);
	Элементы.ЗадачиСписокГАЗ.Обновить();
КонецПроцедуры

&НаСервере
Процедура ЗакройПочтовуюЗадачуГАЗ(Телефон, Сигнатура)
	РегистрыСведений.ЗадачиГАЗЗаявки.ЗакройЗадачуЗвонкаОткройЗадачуПроверки(Телефон, ТекущаяДата(), "", Сигнатура, ПараметрыСеанса.ТекущийПользователь);	
КонецПроцедуры
	
#КонецОбласти

#КонецОбласти

&НаСервере
Процедура ЗадачаПерезвонитьНаСервере(ТелНомер,Результат)

// Получим объект задачи
//-------------------------------------------------------------------------------------------------
	ТекЗапись = РегистрыСведений.ЗадачиОбратныйЗвонок.СоздатьМенеджерЗаписи();
	ТекЗапись.ДатаЗакрытия = Дата("00010101");
	ТекЗапись.Телефон = СокрЛП(ТелНомер);
	ТекЗапись.Прочитать();

// Если задача получена, то в зависимости от результата сформируем комментарий и дату актуальности
//-------------------------------------------------------------------------------------------------
	Если (ТекЗапись.Выбран()) Тогда
		Темп = СокрЛП(ТекЗапись.Комментарий);
		Темп = Темп + ?(ЗначениеЗаполнено(Темп),Символы.ПС,"");
		Темп = Темп + СокрЛП(Формат(ТекущаяДата(),"ДЛФ=DDT")) + ", ";
		Темп = Темп + ?(Результат,"Выполнен звонок абоненту","Ошибка при наборе номера абонента");

		ТекЗапись.ДатаАктуальности = ?(Результат,ТекущаяДата() + 300,ТекЗапись.ДатаАктуальности);
		ТекЗапись.Комментарий = СокрЛП(Темп);
		ТекЗапись.Записать();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗадачаОтменить1НаСервере(ТелНомер)

// Получим объект задачи
//-------------------------------------------------------------------------------------------------
	ТекЗапись = РегистрыСведений.ЗадачиОбратныйЗвонок.СоздатьМенеджерЗаписи();
	ТекЗапись.ДатаЗакрытия = Дата("00010101");
	ТекЗапись.Телефон = СокрЛП(ТелНомер);
	ТекЗапись.Прочитать();

// Если задача получена, то выполним ее принудительное закрытие
//-------------------------------------------------------------------------------------------------
	Если (ТекЗапись.Выбран()) Тогда
		Темп = СокрЛП(ТекЗапись.Комментарий);
		Темп = Темп + ?(ЗначениеЗаполнено(Темп),Символы.ПС,"");
		Темп = Темп + СокрЛП(Формат(ТекущаяДата(),"ДЛФ=DDT")) + ", задача закрыта вручную";

		ТекЗапись.Исполнитель = ПараметрыСеанса.ТекущийПользователь;
		ТекЗапись.ДатаЗакрытия = ТекущаяДата();
		ТекЗапись.Комментарий = СокрЛП(Темп);
		ТекЗапись.Записать();
	КонецЕсли;
КонецПроцедуры

#Область Задача_отменить
&НаКлиенте
Процедура ЗадачаОтменить(Команда)
	// Пометим задачу как принудительно закрытую
	
	//Общая часть - одинаковая для всех закладок
	//------------------------------------------	
	ИмяЭлемента = ЭтаФорма.ИмяАктивногоДинамичСписка;
	
	Если Элементы[ИмяЭлемента].ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Если Элементы[ИмяЭлемента].ТекущиеДанные.ДатаЗакрытия <> Дата("00010101") Тогда
		Возврат
	КонецЕсли;
	
		
	ДопПарамОбработчикаОповещения = Новый Структура("Телефон, ИмяЭлемента", Элементы[ИмяЭлемента].ТекущиеДанные.Телефон, ИмяЭлемента); 
	
	//Особая часть - уникальная для каждой закладки
	//---------------------------------------------
	Если ИмяЭлемента = "ЗадачиСписокЗвонки" Тогда
		СписокОтветов =  ПолучиСписокОтветовПричинРучогоЗакрытияЗадачи("ПРИЧИНЫ РУЧНОГО ЗАКРЫТИЯ ЗАДАЧ");	
		Если СписокОтветов.Количество()=0 Тогда
			ПоказатьПредупреждение(,"Не задан список причин ручного закрытия задач",3);
			Возврат
		КонецЕсли;	
	КонецЕсли;
	
	Если ИмяЭлемента = "ЗадачиСписокПочта" Тогда
		СписокОтветов =  ПолучиСписокОтветовПричинРучогоЗакрытияЗадачи("ПРИЧИНЫ РУЧНОГО ЗАКРЫТИЯ ПОЧТА");	
		Если СписокОтветов.Количество()=0 Тогда
			ПоказатьПредупреждение(,"Не задан список причин ручного закрытия задач",3);
			Возврат
		КонецЕсли;	
		ДопПарамОбработчикаОповещения.Вставить("АдресОтправителя", Элементы[ИмяЭлемента].ТекущиеДанные.АдресОтправителя);
		
		//Пометка на удаление почтовых сообщений>
		//---------------------------------------
		ДопПарамОбработчикаОповещения.Вставить("Сигнатура", Элементы[ИмяЭлемента].ТекущиеДанные.Сигнатура);
	КонецЕсли;
	
	Если ИмяЭлемента = "ЗадачиСписокГАЗ" Тогда
		СписокОтветов =  ПолучиСписокОтветовПричинРучогоЗакрытияЗадачи("ЗАДАЧИ ГАЗ: ПРИЧИНЫ РУЧНОГО ЗАКРЫТИЯ");	
		Если СписокОтветов.Количество()=0 Тогда
			ПоказатьПредупреждение(,"Не задан список причин ручного закрытия задач",3);
			Возврат
		КонецЕсли;	
		
		//Сигнатура заявки ГАЗ
		//---------------------
		ДопПарамОбработчикаОповещения.Вставить("Сигнатура", Элементы[ИмяЭлемента].ТекущиеДанные.Сигнатура);
	КонецЕсли;

	Если ИмяЭлемента = "ЗадачиСписокВебСервис" Тогда
		СписокОтветов =  ПолучиСписокОтветовПричинРучогоЗакрытияЗадачи("ПРИЧИНЫ РУЧНОГО ЗАКРЫТИЯ ИНТЕРНЕТ-ЗАЯВКИ");	
		Если СписокОтветов.Количество()=0 Тогда
			ПоказатьПредупреждение(,"Не задан список причин ручного закрытия задач",3);
			Возврат
		КонецЕсли;		
	КонецЕсли;
		
	//Общая часть - одинаковая для всех закладок
	//-----------------------------------------------------------------------------------------------------------
	Оп = Новый ОписаниеОповещения("ОбработкаОповещенияЗадачаОтменить", ЭтотОбъект, ДопПарамОбработчикаОповещения);
	ПоказатьВыборИзМеню(Оп, СписокОтветов, Команда);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучиСписокОтветовПричинРучогоЗакрытияЗадачи(ИмяШаблона = "ПРИЧИНЫ РУЧНОГО ЗАКРЫТИЯ ЗАДАЧ")
	
	СписЗнач = Новый СписокЗначений();
	
	ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ = списзнач;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Т.Ответ КАК Ответ
	|ИЗ
	|	Справочник.Анкеты.ВариантыОтветов КАК Т
	|ГДЕ
	|	Т.Ссылка.Родитель.Наименование = &РодительНаименование
	|	И Т.Ссылка.Наименование = &Наименование";
	Запрос.УстановитьПараметр("РодительНаименование", "ПРОЧЕЕ");
	Запрос.УстановитьПараметр("Наименование", ИмяШаблона);
	
	РезультатЗапроса = ОбщегоНазначения.ВыполнитьЗапрос(Запрос);
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СписЗнач.Добавить(Выборка.Ответ, Выборка.Ответ);
	КонецЦикла;
	
	Возврат СписЗнач
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещенияЗадачаОтменить(ВыбЗначОтвет, ДопПараметры) Экспорт
	
	//Общая часть - одинаковая для всех закладок
	//------------------------------------------			
	Если ВыбЗначОтвет = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ДатаЗакрытия = ТекущаяДата();

	// Запиши анкету
	Успех = ЗаписатьВыбранныйОтвет_НаСервере(ДатаЗакрытия, ДопПараметры.Телефон);
	Если Не Успех Тогда	
		ПоказатьПредупреждение(, "Ошибка записи анкеты", 3);
	КонецЕсли;

	// Закрой задачу звонка или почты
	//-------------------------------------------------------------------------------------------------------------
	Доступно =  	ДопПараметры.ИмяЭлемента = "ЗадачиСписокПочта"
				ИЛИ ДопПараметры.ИмяЭлемента = "ЗадачиСписокЗвонки";
	Если Доступно Тогда
		Успех = УстановиПричинуЗакрытияЗадачи(ДопПараметры.Телефон, ДатаЗакрытия, ВыбЗначОтвет.Значение);
		Если Не Успех Тогда	
			ПоказатьПредупреждение(, "Ошибка закрытия задачи", 3);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ДопПараметры.ИмяЭлемента = "ЗадачиСписокГАЗ" Тогда
		Успех = ЗакройЗадачуГАЗСоздайПроверку(ДопПараметры.Телефон, ДатаЗакрытия, ВыбЗначОтвет.Значение, ДопПараметры.Сигнатура);
		Если Не Успех Тогда	
			ПоказатьПредупреждение(, "Ошибка закрытия задачи", 3);
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	
	// Закрой задачу интернет-заявки
	//-------------------------------------------------------------------------------------------------------------
	Доступно = ДопПараметры.ИмяЭлемента = "ЗадачиСписокВебСервис";
	Если Доступно Тогда
		Успех = УстановиПричинуЗакрытияЗадачиАвтозвонка(ДопПараметры.Телефон, ДатаЗакрытия, ВыбЗначОтвет.Значение);
		Если Не Успех Тогда	
			ПоказатьПредупреждение(, "Ошибка закрытия задачи", 3);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	//Особая часть - уникальная для каждой закладки
	//----------------------------------------------

	//Если работа в закладке Почта и выбрана причина ручного закрытия Спам, тогда добавь адрес отправителя в список спаммеров
	//--------------------------------------------------------------------------------------------------------------------------
	Доступно = 		ДопПараметры.ИмяЭлемента = "ЗадачиСписокПочта"
				И 	ВыбЗначОтвет.Значение = ЭтаФорма.МоиНастройки_ПричинаРучногоЗакрытияРегистрирующаяСпаммера
				И 	ДопПараметры.Свойство("АдресОтправителя")
	 			И	ЗначениеЗаполнено(ДопПараметры.АдресОтправителя);
	Если Доступно Тогда
		Спаммера_Добавить_НаСервере(ДопПараметры.АдресОтправителя);
	КонецЕсли;
				
	//Общая часть - одинаковая для всех закладок
	//-------------------------------------------			
	// Обнови динамический список (убери закрытую задачу)
	Элементы[ДопПараметры.ИмяЭлемента].Обновить();
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьВыбранныйОтвет_НаСервере(ДатаАнкеты, ТелАбонента, СигнатураЗадачи = "")
	//Эапись в регистр сведений АнкетыРасширенные  
	
	Доступно = 		ТипЗнч(ДатаАнкеты) = Тип("Дата")
				И 	ЗначениеЗаполнено(ДатаАнкеты)
				И 	ТипЗнч(ТелАбонента) = Тип("Строка")
				И 	ЗначениеЗаполнено(ТелАбонента);
	Если Не Доступно Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;	
КонецФункции

&НаСервереБезКонтекста
Функция УстановиПричинуЗакрытияЗадачи(Телефон, Дата, ВыбЗнач)
	Возврат РегистрыСведений.ЗадачиОбратныйЗвонок.УстановиЗначениеРеквизитаИЗакройЗадачу(Телефон, ТекущаяДата(), "ПричинаЗакрытия",ВыбЗнач, ПараметрыСеанса.ТекущийПользователь); 
КонецФункции

&НаСервереБезКонтекста
Функция ЗакройЗадачуГАЗСоздайПроверку (Телефон, Дата, ВыбЗнач, СигнатураЗаявкиГАЗ = "")
	Результат = РегистрыСведений.ЗадачиГАЗЗаявки.ЗакройЗадачуЗвонкаОткройЗадачуПроверки(Телефон, Дата, ВыбЗнач, СигнатураЗаявкиГАЗ, ПараметрыСеанса.ТекущийПользователь);
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция УстановиПричинуЗакрытияЗадачиАвтозвонка(Телефон, Дата, ВыбЗнач)
	Возврат РегистрыСведений.ЗадачиИнтернетЗаявки.УстановиЗначениеРеквизитаИЗакройЗадачу(Телефон, ТекущаяДата(), "ПричинаЗакрытия",ВыбЗнач, ПараметрыСеанса.ТекущийПользователь); 
КонецФункции

&НаСервереБезКонтекста
Функция Спаммера_Добавить_НаСервере(АдресОтправителя)
	РегистрыСведений.ПисьмаСпаммеры.Добавить(АдресОтправителя);	
КонецФункции
#КонецОбласти

#Область Автозвонок
//<Кошелев_13102016; ОбработкаАвтозвонков>

&НаКлиенте
Процедура ВыполниИсходящийАвтоЗвонок()
	//Вызывается только автоматически для автозвонков
	
	Доступно = 		КонсольПауза	 = Ложь    						//Оператор не в паузе
      			И 	КонсольСостояние = 0   							// никакой звонок не выполняется
				И 	МоиНастройки_ОбрабатыватьАвтозвонки = Истина
// Временное решение. Разрешаем отрабатывать задачи по автозвонку только операторам ЕКЦ на Ларина
//-------------------------------------------------------------------------------------------------
				И (СтрНайти("1387,5334,5319,5242,5241,5240,1391,1392", КонсольТелефон) > 0);
	Если Не Доступно Тогда
		Возврат
	КонецЕсли;

	ТелефонИСигнатураОткрытойЗадачи = ТелефонИСигнатураИнтернетЗаявки(КонсольТелефон);
	
	ТелефонОткрытойЗадачи = ТелефонИСигнатураОткрытойЗадачи.Телефон;
	Если ТелефонОткрытойЗадачи = "" Тогда
		Возврат
	КонецЕсли;
	
	ИнтернетЗаявкаСигнатура 			= ТелефонИСигнатураОткрытойЗадачи.Сигнатура;
	ДисплейИмяАвтозвонка 				= "";
	ДисплейМайлАвтозвонка 				= "";

	СайтИнтернетЗаявкиАвтозвонка	= ТелефонИСигнатураОткрытойЗадачи.Сайт;	  
	
	#Область Отладка
	Если МоиНастройки_ТестовыйРежим Тогда
		Если Отладка_Лог.КоличествоСтрок()>20000 Тогда
			Отладка_Лог.Очистить();
		КонецЕсли;
		Отладка_Лог.ДобавитьСтроку("**********************ВыполниИсходящийАвтоЗвонок().ТелефонИСигнатураОткрытойЗадачи.Сайт До КомандаOriginate****");
		Отладка_Лог.ДобавитьСтроку("ДатаВремя = "+ТекущаяДата());     
		Отладка_Лог.ДобавитьСтроку(СтрШаблон("ТелефонОткрытойЗадачи = %1", ТелефонОткрытойЗадачи));
		Отладка_Лог.ДобавитьСтроку(СтрШаблон("СайтИнтернетЗаявкиАвтозвонка = %1", СайтИнтернетЗаявкиАвтозвонка));
	КонецЕсли;
	#КонецОбласти
	
	ДисплейИмяАвтозвонка 			= СвойствоАвтозвонка(ТелефонИСигнатураОткрытойЗадачи.Сигнатура, "name");
	ДисплейМайлАвтозвонка 			= СвойствоАвтозвонка(ТелефонИСигнатураОткрытойЗадачи.Сигнатура, "email");
	ДисплейДругиеСайты				= СайтыПоДругимИнтернетЗаявкам(ИнтернетЗаявкаСигнатура);   
	
	Если СайтИнтернетЗаявкиАвтозвонка = "luidor.lada.ru" Тогда
		ИнтернетПочтоваяЗаявкаСодержание = СодержаниеИнтернетПочтовойЗаявки(ИнтернетЗаявкаСигнатура);  
		Доступно = 		ЗначениеЗаполнено(ИнтернетПочтоваяЗаявкаСодержание)
					И	СтрНайти(ИнтернетПочтоваяЗаявкаСодержание, "<!DOCTYPE html>") > 0;
		Элементы.ДисплейСодержаниеИнтернетПочтовойЗаявки.Заголовок = ?(Доступно, "Показать" ,"");
	КонецЕсли;
	
	Выполнено = КонтактЦентр.КомандаOriginate(ТелефонОткрытойЗадачи, "iq_"+ИнтернетЗаявкаСигнатура);
	#Область Отладка
	Если МоиНастройки_ТестовыйРежим Тогда
		Если Отладка_Лог.КоличествоСтрок()>20000 Тогда
			Отладка_Лог.Очистить();
		КонецЕсли;
		Отладка_Лог.ДобавитьСтроку("**********************ВыполниИсходящийАвтоЗвонок().После КомандаOriginate****");
		Отладка_Лог.ДобавитьСтроку("ДатаВремя = "+ТекущаяДата());     
		Отладка_Лог.ДобавитьСтроку(СтрШаблон("ТелефонОткрытойЗадачи = %1", ТелефонОткрытойЗадачи));
		Отладка_Лог.ДобавитьСтроку(СтрШаблон("СайтИнтернетЗаявкиАвтозвонка = %1", СайтИнтернетЗаявкиАвтозвонка));
	КонецЕсли;
	#КонецОбласти

КонецПроцедуры   

&НаСервереБезКонтекста
Функция СодержаниеИнтернетПочтовойЗаявки(ИнтернетЗаявка) 
	//Возвращает содержание (тело письма) интернет почтовой заявки
	Доступно = 		ТипЗнч(ИнтернетЗаявка) = Тип("Строка")
				И	ЗначениеЗаполнено(ИнтернетЗаявка);
	Если Не Доступно Тогда
		Возврат "ошибка: неверные параметры"
	КонецЕсли;	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 Комментарий ИЗ РегистрСведений.ИнтернетЗаявки ГДЕ Сигнатура = &Сигнатура");
	Запрос.УстановитьПараметр("Сигнатура", ИнтернетЗаявка);
	РезультатЗапроса = Запрос.Выполнить();
	Рез = ?(РезультатЗапроса.Пустой(), "", РезультатЗапроса.Выгрузить()[0][0]);
	Возврат Рез;	
КонецФункции

&НаСервереБезКонтекста
Функция СайтыПоДругимИнтернетЗаявкам(ИнтернетЗаявка)
	//Возвращает список сайтов других интернет-заявок по этому же номеру телефона, что и в интернет-заявке, по которой звоним,
	//поступивших позже ее и по которым не создано задач на перезвон
	//Вызывается при ручном прозвоне интернет-задач не автозвонков, а также при автозвонке  
	Доступно = 		ТипЗнч(ИнтернетЗаявка) = Тип("Строка")
				И	ЗначениеЗаполнено(ИнтернетЗаявка);
	Если Не Доступно Тогда
		Возврат "ошибка: неверные параметры"
	КонецЕсли;				
					
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИнтернетЗаявки.Сигнатура КАК Сигнатура,
	|	ИнтернетЗаявки.Инициатор КАК Инициатор,
	|	ИнтернетЗаявки.Дата КАК Дата,
	|	ИнтернетЗаявки.АбонентВнешний КАК АбонентВнешний
	|ПОМЕСТИТЬ ВТ1_ИсходнаяЗаявка
	|ИЗ
	|	РегистрСведений.ИнтернетЗаявки КАК ИнтернетЗаявки
	|ГДЕ
	|	ИнтернетЗаявки.Сигнатура = &ИнтернетЗаявка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИнтернетЗаявки.Инициатор КАК Инициатор
	|ИЗ
	|	РегистрСведений.ИнтернетЗаявки КАК ИнтернетЗаявки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиИнтернетЗаявки КАК Задачи
	|		ПО ИнтернетЗаявки.Сигнатура = Задачи.Сигнатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ1_ИсходнаяЗаявка КАК ВТ1
	|		ПО ИнтернетЗаявки.АбонентВнешний = ВТ1.АбонентВнешний
	|ГДЕ
	|	ИнтернетЗаявки.Сигнатура <> &ИнтернетЗаявка
	|	И Задачи.Сигнатура ЕСТЬ NULL
	|	И ИнтернетЗаявки.Дата > ВТ1.Дата
	|	И ИнтернетЗаявки.Инициатор <> ВТ1.Инициатор";
	Запрос.УстановитьПараметр("ИнтернетЗаявка", ИнтернетЗаявка);
	РезультатЗапроса=Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат "";   
	КонецЕсли;
	Рез = "Сайты: "+ СтрСоединить(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку(0), ", ");       
	Возврат Рез;	
КонецФункции

&НаСервереБезКонтекста
Функция СайтыИнтернетЗаявокПоТелефону(АбонентВнешний, Период)
	//Возвращает список сайтов других интернет-заявок по указанному телефону
	//поступивших позже ее и по которым не создано задач на перезвон
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Интернет.Инициатор КАК Инициатор
	|ИЗ
	|	РегистрСведений.ИнтернетЗаявки КАК Интернет
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиИнтернетЗаявки КАК Задачи
	|		ПО Интернет.Сигнатура = Задачи.Сигнатура
	|ГДЕ
	|	Интернет.АбонентВнешний = &АбонентВнешний
	|	И Интернет.Дата > &Период
	|	И Задачи.Сигнатура ЕСТЬ NULL";
	Запрос.УстановитьПараметр("АбонентВнешний", АбонентВнешний);
	Запрос.УстановитьПараметр("Период", Период);
	РезультатЗапроса=Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат "";
	КонецЕсли;
	Рез = "Сайты"+СтрСоединить(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку(0));
	
	Возврат Рез;	
КонецФункции


#Область Поиск_свойств_интернет_заявки
&НаСервереБезКонтекста
Функция СвойствоАвтозвонка(Сигнатура, ИмяСвойства = "TEXT")
	//Возвращает значение свойства интернет-заявки с заданной сигнатурой и именем, по которой совершается автозвонок
	//Параметры:
	//    Сигнатура - сигнатура интернет-заявки
	//	  ИмяСвойства - имя свойства интернет-заявки
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 Значение.ПолнаяСтрока ИЗ РегистрСведений.ИнтернетЗаявкиСвойства ГДЕ Сигнатура = &Сигнатура И Свойство.Наименование = &Свойство");
	Запрос.УстановитьПараметр("Сигнатура", Сигнатура);
	Запрос.УстановитьПараметр("Свойство",  ИмяСвойства);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат "";
	КонецЕсли;
	Возврат РезультатЗапроса.Выгрузить()[0][0];
КонецФункции
#КонецОбласти

&НаСервере
Процедура ЗакрытьЗадачуАвтоЗвонка(Телефон, ЗвонокЗакрытия = "")
	Исполнитель = ПараметрыСеанса.ККЦТелефон.Код;
	РегистрыСведений.ЗадачиИнтернетЗаявки.ЗакройОткрытуюЗадачу(Телефон, ТекущаяДата(), Истина, Исполнитель, ЗвонокЗакрытия);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТелефонИСигнатураИнтернетЗаявки(КонсольТелефон)	
	//Возвращает структуру в которой поле "Телефон" содержит телефон абонента, 
	//поле "Сигнатура" содержит сигнатуру интернет-заявки
	//поле "Сайт" содержит сайт
	
	Возврат КонтактЦентрСервер.ПоставьЗадачуСвободномуОператору(КонсольТелефон);	
КонецФункции

&НаКлиенте
Процедура ВключитьВыключитьПодключениеОбработчикаОжидания(Включить)
	Если Включить Тогда
		Доступно = КонсольПауза = Ложь;
		Доступно = Доступно И КонсольСостояние = 0; // звонок не выполняется
		Доступно = Доступно И МоиНастройки_ОбрабатыватьАвтозвонки = Истина;
		Если Не Доступно Тогда
			Возврат
		КонецЕсли;

		ПодключитьОбработчикОжидания("ВыполниИсходящийАвтоЗвонок", 10, Ложь)	
	Иначе
		ОтключитьОбработчикОжидания("ВыполниИсходящийАвтоЗвонок")		
	КонецЕсли;
	
КонецПроцедуры
//</Кошелев_13102016; ОбработкаАвтозвонков>
#КонецОбласти

&НаКлиенте
Функция Позвонить(Команда)	
// Выполняет звонок на телефонный номер абонента задачи

// Если не выбрана строка динамического списка, значит не знаем телефон, на который нужно звонить
//-------------------------------------------------------------------------------------------------
	Если (Элементы[ИмяАктивногоДинамичСписка].ТекущиеДанные = Неопределено) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеЗадачи = Элементы[ИмяАктивногоДинамичСписка].ТекущиеДанные;
	SYSAGR = "";

	Если ИмяАктивногоДинамичСписка = "ЗадачиСписокЗвонки" Тогда	
		//Основание звонка - интернет-звонка
		//-----------------------------------
		Доступно = 		ЗначениеЗаполнено(ДанныеЗадачи.Основание)
					И 	Лев(ДанныеЗадачи.Основание, 2)="iq";
		Если Доступно Тогда
			СайтИнтернетЗаявкиНеАвтозвонка = ДанныеЗадачи.ПисьмоИнициатор;   
			
			//Передай сигнатуру интернет-заявки в виде "iq_"<сигнатура интернет-заявки>
			SYSAGR = ДанныеЗадачи.Основание;
			
			ДисплейДругиеСайты = СайтыПоДругимИнтернетЗаявкам(Сред(ДанныеЗадачи.Основание, 4, 36));
		КонецЕсли;    
		
		Доступно = Не ЗначениеЗаполнено(SYSAGR);
		Если Доступно Тогда
			//Значит звонок не по интернет-заявке
			//Передай в команду звонка сигнатуру звонка-инициатора в виде "mc_"<сигнатура звонка>, где "mc" означает "missed call"
			SYSAGR = "mc_"+ДанныеЗадачи.ЗвонокИнициатор;	
		КонецЕсли;
		
		//Если это пропущенный не по интернет-заявке, но есть другие интернет-заявки в которых указан этот телефон, то покажи такие сайты
		//-------------------------------------------------------------------------------------------------------------------------------
		СайтыИнтернетЗаявокПоТелефону(ДанныеЗадачи.Телефон, ДанныеЗадачи.ДатаПостановки);
		
		Если ЗначениеЗаполнено(ДанныеЗадачи.Канал) Тогда
			ТелВнешнийСсылка = ТелВнешнийСсылкаПоНомеру(ДанныеЗадачи.Канал);
			Если ТелВнешнийСсылка <> ПредопределенноеЗначение("Справочник.ТелВнешние.ПустаяСсылка") Тогда
				КаналИнициаторЗадачиОбратногоЗвонка = ТелВнешнийСсылка;
			КонецЕсли;
		КонецЕсли;	
	
		Результат = КонтактЦентр.КомандаOriginate(ДанныеЗадачи.Телефон, SYSAGR);
		
		ЗадачаПерезвонитьНаСервере(ДанныеЗадачи.Телефон,Результат);
		 Элементы[ИмяАктивногоДинамичСписка].Обновить();
		 Возврат Неопределено;
	 КонецЕсли;
	 
	Если ИмяАктивногоДинамичСписка = "ЗадачиСписокПочта" Тогда
	
		//Основание звонка - почтовое сообщение
		//--------------------------------------
   		Если ИмяАктивногоДинамичСписка = "ЗадачиСписокПочта" Тогда
			SYSAGR = "ml_"+	ДанныеЗадачи.Сигнатура;
		КонецЕсли;
			
		Результат = КонтактЦентр.КомандаOriginate(ДанныеЗадачи.Телефон, SYSAGR);
		
		ЗадачаПерезвонитьНаСервере(ДанныеЗадачи.Телефон,Результат);
		Элементы[ИмяАктивногоДинамичСписка].Обновить();
		Возврат Неопределено;
	 КонецЕсли;
	 
	Если  ИмяАктивногоДинамичСписка = "ЗадачиСписокВебСервис" Тогда
		Если Не ЗадачаВебСервисЗаблокироватьНаСервере(ДанныеЗадачи.Телефон) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		//Если оказались здесь, значит задача заблокирована для исполнения текущим исполнителем, можно звонить
		//Результат = КомандаOriginate(ДанныеЗадачи.Телефон, ДанныеЗадачи.Сигнатура);
		SYSAGR="iq_"  + ДанныеЗадачи.Сигнатура;
		Результат = КонтактЦентр.КомандаOriginate(ДанныеЗадачи.Телефон, SYSAGR);
		
		//Сохраняем сайт интернет-заявки-не-автозвонка
		СайтИнтернетЗаявкиНеАвтозвонка  = ДанныеЗадачи.Инициатор;
		ИнтернетЗаявкаСигнатура			= ДанныеЗадачи.Сигнатура;
		ДисплейДругиеСайты			    = СайтыПоДругимИнтернетЗаявкам(ДанныеЗадачи.Сигнатура);
		
		
		ЗадачаВебСервисПерезвонитьНаСервере(ДанныеЗадачи.Телефон, Результат);
		Элементы[ИмяАктивногоДинамичСписка].Обновить();
	КонецЕсли;
	
	Если ИмяАктивногоДинамичСписка = "ЗадачиСписокГАЗ" Тогда
		SYSAGR = ДанныеЗадачи.Сигнатура;
		
		Результат = КонтактЦентр.КомандаOriginate(ДанныеЗадачи.Телефон, SYSAGR);

		ЗадачаГазЗаявкаПерезвонитьНаСервере(ДанныеЗадачи.Телефон);
		Элементы[ИмяАктивногоДинамичСписка].Обновить();
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция ТелВнешнийСсылкаПоНомеру(Номер)
	Результат = Справочники.ТелВнешние.ПустаяСсылка();
	
	Доступно = 		ТипЗнч(Номер) = Тип("Строка")
				И 	ЗначениеЗаполнено(Номер)>0;	
	Если Не Доступно Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат = Справочники.ТелВнешние.НайтиПоКоду(Номер);
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция  ЗадачаВебСервисЗаблокироватьНаСервере(ТелНомер)
	
		ЗначениеПоУмолчанию = Ложь;
	
		ТекЗапись = РегистрыСведений.ЗадачиИнтернетЗаявки.СоздатьМенеджерЗаписи();
		ТекЗапись.ДатаЗакрытия = Дата("00010101");
		ТекЗапись.Телефон = ТелНомер;
		ТекЗапись.Прочитать();
		
		Если Не ТекЗапись.Выбран() Тогда
			//Возврат "Запись не выбрана"
			Возврат ЗначениеПоУмолчанию;
		КонецЕсли;
		
		// Если задача заблокирована для исполнения другим пользователем, выходим
		Если ТекЗапись.Заблокирована И ТекЗапись.Исполнитель <> ПараметрыСеанса.ККЦТелефон.Код Тогда
			//Возврат "Заблокирована другим оператором:"+ТекЗапись.Исполнитель;
			Возврат ЗначениеПоУмолчанию;
		КонецЕсли;
		
		// Если задача уже заблокирована текущим пользвателем, тогда функция успешно выполнена
		Если ТекЗапись.Заблокирована И ТекЗапись.Исполнитель = ПараметрыСеанса.ККЦТелефон.Код Тогда
			Возврат Истина;
		КонецЕсли;
		
		//Если оказались здесь, значит запись не заблокирована, блокируем
		ТекЗапись.Заблокирована = Истина;
		ТекЗапись.Исполнитель = ПараметрыСеанса.ККЦТелефон.Код;
			
		Попытка
			ТекЗапись.Записать();
		Исключение
			Данные = "ТелНомер  = "+ТелНомер+"; Исполнитель = "+ТекЗапись.Исполнитель; 
			Комментарий = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("ЗадачаВебСервисЗаблокироватьНаСервере", УровеньЖурналаРегистрации.Ошибка, Метаданные.РегистрыСведений.ЗадачиИнтернетЗаявки, Данные, Комментарий);
			//Возврат "Ошибка записи"
			Возврат ЗначениеПоУмолчанию;		
		КонецПопытки;
		
		Возврат Истина;
КонецФункции
	
&НаСервереБезКонтекста
Процедура  ЗадачаВебСервисПерезвонитьНаСервере(ТелНомер,Результат)	
	
	//02.08.2017, =>, Не нужно автоматически закрывать задачу, т.к. могли не дозвониться или было занято
	//РегистрыСведений.ЗадачиИнтернетЗаявки.ЗакройОткрытуюЗадачу(ТелНомер, ТекущаяДата(), ПараметрыСеанса.ККЦТелефон.Код);		
	//=>
	
	// Получим объект задачи
	//----------------------------------------------------------------------------------------------
	ТекЗапись = РегистрыСведений.ЗадачиИнтернетЗаявки.СоздатьМенеджерЗаписи();
	ТекЗапись.ДатаЗакрытия = Дата("00010101");
	ТекЗапись.Телефон = СокрЛП(ТелНомер);
	ТекЗапись.Прочитать();
		
	// Если задача получена, то в зависимости от результата сформируем комментарий и дату актуальности
	//-------------------------------------------------------------------------------------------------
	Если (ТекЗапись.Выбран()) Тогда
			ТекДата = ТекущаяДата();
			
			Темп = СокрЛП(ТекЗапись.Комментарий);
			Темп = Темп + ?(ЗначениеЗаполнено(Темп),Символы.ПС,"");
			Темп = Темп + СокрЛП(Формат(ТекДата,"ДЛФ=DDT")) + ", ";
			Темп = Темп + "Звонок абоненту";
			
			Если Не ЗначениеЗаполнено(ТекЗапись.ДатаПервогоПерезвона) Тогда 
				ТекЗапись.ДатаПервогоПерезвона = ТекДата;
			КонецЕсли;
			
			//ТекЗапись.ДатаАктуальности = ?(Результат,ТекДата + 300,ТекЗапись.ДатаАктуальности);  // нет такого реквизита
			ТекЗапись.Комментарий = СокрЛП(Темп);
			ТекЗапись.Записать();
	КонецЕсли;
			
КонецПроцедуры

&НаСервереБезКонтекста
Процедура  ЗадачаГазЗаявкаПерезвонитьНаСервере(ТелНомер)	
		
	// Получим объект задачи
	//----------------------------------------------------------------------------------------------
	ТекЗапись = РегистрыСведений.ЗадачиГАЗЗаявки.СоздатьМенеджерЗаписи();
	ТекЗапись.ДатаЗакрытия = Дата("00010101");
	ТекЗапись.Телефон = СокрЛП(ТелНомер);
	ТекЗапись.Прочитать();
		
	// Если задача получена, то в зависимости от результата сформируем комментарий и дату первого перезвона
	//-------------------------------------------------------------------------------------------------
	Если (ТекЗапись.Выбран()) Тогда
			ТекДата = ТекущаяДата();
			
			Темп = СокрЛП(ТекЗапись.Комментарий);
			Темп = Темп + ?(ЗначениеЗаполнено(Темп),Символы.ПС,"");
			Темп = Темп + СокрЛП(Формат(ТекДата,"ДЛФ=DDT")) + ", ";
			Темп = Темп + "Звонок абоненту";
			
			Если Не ЗначениеЗаполнено(ТекЗапись.ДатаПервогоПерезвона) Тогда 
				ТекЗапись.ДатаПервогоПерезвона = ТекДата;
			КонецЕсли;
			
			ТекЗапись.Комментарий = СокрЛП(Темп);
			ТекЗапись.Записать();
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ПанельСтраницПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ЗадачаКомментарий="";
	
	//Очистить кэш вопросов - ответов
	//	ЭтаФорма.ТаблицаВопросОтвет.Очистить();

	//Общая часть
	//-----------	
	ИмяАктивногоДинамичСписка = "";
	
	Если 	ТекущаяСтраница.Имя = "Звонки" 
		Или ТекущаяСтраница.Имя = "Почта" 
		Или ТекущаяСтраница.Имя = "ВебСервис" 
		Или ТекущаяСтраница.Имя = "ГАЗ"
	Тогда
		Элементы.Позвонить.Доступность = Истина;
		Элементы.ИзменитьНапоминаниеПерезвонить.Доступность = Истина;
	Иначе
		Элементы.Позвонить.Доступность = Ложь;
		Элементы.ИзменитьНапоминаниеПерезвонить.Доступность = Ложь;
	КонецЕсли;

	Если ТекущаяСтраница.Имя = "Звонки" Тогда
		ИмяАктивногоДинамичСписка 	= "ЗадачиСписокЗвонки";	
		ТекТаблицаФормы 			= Элементы.ЗадачиСписокЗвонки;	
		ЗадачиСписокЗвонкиПриАктивизацииСтроки(ТекТаблицаФормы);
		
	ИначеЕсли ТекущаяСтраница.Имя = "Почта" Тогда
		ИмяАктивногоДинамичСписка 	= "ЗадачиСписокПочта";	
		
	ИначеЕсли ТекущаяСтраница.Имя = "ГАЗ" Тогда
		ИмяАктивногоДинамичСписка 	= "ЗадачиСписокГАЗ";	
		ТекТаблицаФормы 			= Элементы.ЗадачиСписокГАЗ;	
		ЗадачиСписокГАЗПриАктивизацииСтроки(ТекТаблицаФормы);	
		
	ИначеЕсли ТекущаяСтраница.Имя = "ВебСервис" Тогда
		ИмяАктивногоДинамичСписка 	= "ЗадачиСписокВебСервис";
		ТекТаблицаФормы			 	= Элементы.ЗадачиСписокВебСервис;	
		ВэбСервисПриАктивизацииСтроки(ТекТаблицаФормы)
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВэбСервисПриАктивизацииСтроки(Элемент)
	
	//Очисти содержимое окна содержания заявки при переходе на новую строку
	//----------------------------------------------------------------------
	ИнтернетПочтоваяЗаявкаСодержаниеОтображение = "";
	
	Тек = Элементы["ЗадачиСписокВебСервис"].ТекущиеДанные; 
	Если Тек = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ТелНомер = Тек.Телефон;
	
	//Покажи историю общения
	//------------------------
	Окончание 	= ТекущаяДата();
	Начало 		= ДобавитьМесяц(Окончание, -2);
	СформируйИсториюОбщения(СокрЛП(ТелНомер), Начало, Окончание, Ложь);
	
	//Покажи комментарий в отдельном поле
	//------------------------------------
	ЭтаФорма.ЗадачаКомментарий = Тек.Комментарий;
	
	//Покажи текст почтовой интернет-заявки
	//-------------------------------------
	Если СтрНайти(Тек.Инициатор, "lada") Тогда
		ИнтернетПочтоваяЗаявкаСодержаниеОтображение = СодержаниеИнтернетПочтовойЗаявки(Тек.Сигнатура);  
		Доступно = 		ЗначениеЗаполнено(ИнтернетПочтоваяЗаявкаСодержаниеОтображение)
					И	СтрНайти(ИнтернетПочтоваяЗаявкаСодержание, "<!DOCTYPE html>") > 0;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция СформируйИсториюОбщения(Телефон, Начало, Окончание, Фоном = Истина, КлючОбсуждения = "", ИдФормы="")
	
	Если Не МоиНастройки_ПоказыватьИсториюЗвонков Тогда
		Возврат "";
	КонецЕсли;
			
	//Если история по этому номеру уже отображается
	//---------------------------------------------
	Доступно = 		Объект.ИсторияЗвонков.Количество()>0
				И 	Объект.ИсторияЗвонков[0].Телефон = Телефон;
	Если Доступно Тогда
		Возврат "";
	КонецЕсли;
	
	Объект.ИсторияЗвонков.Очистить();
	
	// В разработе асинхронное отображение истории общения
	//
	////Асинхронно через фоновое задание и систему взаимодействия
	////---------------------------------------------------------
	//Доступно = Истина;
	//
	//Доступно = Доступно И МоиНастройки_ПоказыватьИсториюЗвонков;
	//Доступно = Доступно И МоиНастройки_ПолучатьИсториюАсинхронно=Истина;
	//Если Доступно Тогда
	//	Окончание = ТекущаяДата();
	//	Начало = ДобавитьМесяц(Окончание, -2);
	//	
	//	//КонсольКонтактЦентраСервер.СформируйИсториюФоновымЗаданием("9506080027", '20190101', '20190630', Истина, "csc_"+xmlСтрока(ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор), ЭтаФорма.УникальныйИдентификатор); // отладка
	//	КонсольКонтактЦентраСервер.СформируйИсториюФоновымЗаданием(Телефон, Начало, Окончание, Истина, "csc_"+xmlСтрока(ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор), ЭтаФорма.УникальныйИдентификатор);
	//	Возврат "";
	//КонецЕсли;
	//
	////Обычным образом: не асинхронно
	////------------------------------
	//Доступно = Истина;
	//Доступно = Доступно И МоиНастройки_ПоказыватьИсториюЗвонков;
	//Доступно = Доступно И МоиНастройки_ПолучатьИсториюАсинхронно = Ложь;
	//Если Доступно Тогда
			
		Окончание = ТекущаяДата();
		Начало = ДобавитьМесяц(Окончание, -2);
		ТЗ = СформируйИсториюОбщения2(Телефон, Начало, Окончание);
		
		Если ТЗ.Количество()>0 Тогда
			Объект.ИсторияЗвонков.Загрузить(ТЗ);
			Возврат "";
		КонецЕсли;
	//КонецЕсли;

КонецФункции

&НаСервереБезКонтекста
Функция СформируйИсториюОбщения2(Телефон, Начало, Окончание) Экспорт  
	// Возвращает таблицу значений состоявшихся звонков и действующих интернет-заявок
	
	Результат = Новый ТаблицаЗначений();
	
	//Для входящего звонка Инициатором указываем канал (точнее его назначение), для исходящего по интенет-заявке - сайт
  	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 9
	|	ВЫБОР
	|		КОГДА Звонки.ЭтоВходящий
	|			ТОГДА ""Вх""
	|		ИНАЧЕ ""Исх""
	|	КОНЕЦ КАК Событие,
	|	&АбонентВнешний КАК Телефон,
	|	ИСТИНА КАК ЭтоЗвонок,
	|	Звонки.Сигнатура КАК Сигнатура,
	|	Звонки.Дата КАК Дата,
	|	Звонки.ЭтоВходящий КАК ЭтоВходящий,
	|	Звонки.Принят КАК Принят,
	|	Звонки.АбонентВнутренний.Код КАК АбонентВнутренний,
	|	ВЫБОР
	|		КОГДА Звонки.ЭтоВходящий
	|			ТОГДА Звонки.Инициатор.Назначение
	|		КОГДА НЕ Звонки.ЭтоВходящий
	|				И НЕ Интернет.Инициатор ЕСТЬ NULL
	|			ТОГДА Интернет.Инициатор
	|		ИНАЧЕ Звонки.Инициатор
	|	КОНЕЦ КАК Инициатор,
	|	ЕСТЬNULL(Стат.Исполнитель, ЗНАЧЕНИЕ(Справочник.Предприятие.ПустаяСсылка)) КАК Оператор,
	|	ЕСТЬNULL(Стат.ОПСсылка, ЗНАЧЕНИЕ(Справочник.Предприятие.ПустаяСсылка)) КАК ОП,
	|	ЕСТЬNULL(Стат.Исполнитель.ТочкаРазмещения, ЗНАЧЕНИЕ(Справочник.ТочкиРазмещения.ПустаяСсылка)) КАК ТочкаРазмещения
	|ИЗ
	|	РегистрСведений.Звонки КАК Звонки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗвонкиСтатОбщая КАК Стат
	|		ПО (Стат.Сигнатура = Звонки.Сигнатура)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИнтернетЗаявки КАК Интернет
	|		ПО (ПОДСТРОКА(Стат.Основание, 4, 36) = Интернет.Сигнатура)
	|ГДЕ
	|	Звонки.АбонентВнешний = &АбонентВнешний
	|	И Звонки.Дата МЕЖДУ &Начало И &Окончание
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	""Интернет"",
	|	&АбонентВнешний,
	|	ЛОЖЬ,
	|	"""",
	|	Т.ДатаПостановки,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	"""",
	|	Т.Инициатор,
	|	ЗНАЧЕНИЕ(Справочник.Предприятие.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.Предприятие.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.ТочкиРазмещения.ПустаяСсылка)
	|ИЗ
	|	РегистрСведений.ЗадачиИнтернетЗаявки КАК Т
	|ГДЕ
	|	Т.Телефон = &АбонентВнешний
	|	И Т.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	
	Запрос.УстановитьПараметр("АбонентВнешний", СокрЛП(Телефон));
	Запрос.УстановитьПараметр("Начало",			Начало);
	Запрос.УстановитьПараметр("Окончание", 		Окончание);
	
	РезультатЗапроса = ОбщегоНазначения.ВыполнитьЗапрос(Запрос);
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат; 
	КонецЕсли;
	
	Результат = РезультатЗапроса.Выгрузить();
	Возврат Результат;	
КонецФункции

#Область Изменить_напоминание_перезвонить

&НаКлиенте
Процедура ИзменитьНапоминаниеПерезвонить(Команда)
	
	//Признак выполняющегося автозвонка
	//---------------------------------
	Доступно = 		ЗначениеЗаполнено(АбонентВнешний)
				И 	ЗначениеЗаполнено(к_LinkedID)
				И 	СтрДлина(СайтИнтернетЗаявкиАвтозвонка)>0	
				И	СтрДлина(ИнтернетЗаявкаСигнатура)>0;
	Если Доступно = Истина Тогда
		
		ДатаПостановки = ЗначенияСервера.ТекущаяДатаСервер();
		
		ДопПараметры = Новый Структура();
		ДопПараметры.Вставить("АбонентВнешний",		АбонентВнешний);
		ДопПараметры.Вставить("ДатаЗакрытия", 		Дата(1,1,1,0,0,0));
		ДопПараметры.Вставить("Тип",				"Перечисления.ТипЗадачи.НепринятыйИсходящий");
		ДопПараметры.Вставить("Исполнитель",		"ПараметрыСеанса.ККЦКонтактЦентр");
		ДопПараметры.Вставить("Комментарий",		"Просьба перезвонить по автозвонку");
		ДопПараметры.Вставить("ДатаПостановки",		ДатаПостановки); // переопределится на дату введенную оператором
		ДопПараметры.Вставить("ЗвонокИнициатор",	ПолучиСигнатуруЗвонка());
		ДопПараметры.Вставить("ДатаАктуальности",	ДатаПостановки+600);
		ДопПараметры.Вставить("ПисьмоИнициатор",	СайтИнтернетЗаявкиАвтозвонка);
		ДопПараметры.Вставить("Основание",			"iq_"+ИнтернетЗаявкаСигнатура);
		
		Оп = Новый ОписаниеОповещения("ОбработчикОповещения_ИсправьНапоминаниеПерезвонитьВоВремяЗвонка", ЭтотОбъект, ДопПараметры);
		ВыбЗнач = ТекущаяДата();
		ПоказатьВводЗначения(Оп, ВыбЗнач, "Когда перезвонить:", Тип("Дата"));
		
	    Возврат;
	КонецЕсли;
		
	ТекДанные = Элементы[ИмяАктивногоДинамичСписка].ТекущиеДанные;	
	Доступно = ТекДанные <> Неопределено;	
	Если Не Доступно Тогда
		Возврат
	КонецЕсли;
	
	ДопПараметры = Новый Структура("ИмяАктивногоДинамичСписка", ИмяАктивногоДинамичСписка);
	Оп = Новый ОписаниеОповещения("ОбработчикОповещения_ИсправьНапоминаниеПерезвонить", ЭтотОбъект, ДопПараметры);
	ВыбЗнач = ТекущаяДата();
	ПоказатьВводЗначения(Оп, ВыбЗнач, "Когда перезвонить:", Тип("Дата"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_ИсправьНапоминаниеПерезвонить(ВыбЗнач, ДопПараметры) Экспорт
	 
	Доступно = 		ТипЗнч(ВыбЗнач) = Тип("Дата")
				И 	ЗначениеЗаполнено(ВыбЗнач)
				И 	ТипЗнч(ДопПараметры) = Тип("Структура")
				И 	ДопПараметры <> Неопределено;
	
	ИмяАктивногоСписка =  "";
	ДопПараметры.Свойство("ИмяАктивногоДинамичСписка", ИмяАктивногоСписка);
	
	Доступно = 		ИмяАктивногоСписка <> Неопределено
				И 	ЗначениеЗаполнено(ИмяАктивногоСписка);	
	Если Не Доступно Тогда
		Возврат
	КонецЕсли;
	
	СтароеЗначениеРеквизита = ЭтаФорма.Элементы[ИмяАктивногоДинамичСписка].ТекущиеДанные.НапоминаниеПерезвонить;

	Если ИмяАктивногоСписка = "ЗадачиСписокЗвонки" Или ИмяАктивногоСписка = "ЗадачиСписокПочта" Тогда
		Телефон = ЭтаФорма.Элементы[ИмяАктивногоСписка].ТекущиеДанные.Телефон;
		Успех = ИзмениЗначениеРеквизитаЗадачиОбратныйЗвонок(Телефон, "НапоминаниеПерезвонить",ВыбЗнач);	
		Если Успех Тогда
			ЭтаФорма.Элементы[ИмяАктивногоСписка].Обновить();
		Иначе
			ПоказатьПредупреждение(, "Не удалось изменить реквизит", 3);
		КонецЕсли;
	ИначеЕсли ИмяАктивногоСписка = "ЗадачиСписокГАЗ" Тогда
		Телефон = ЭтаФорма.Элементы[ИмяАктивногоСписка].ТекущиеДанные.Телефон;
		Успех = ИзмениЗначениеРеквизитаЗадачиГАЗ(Телефон, "НапоминаниеПерезвонить",ВыбЗнач);	
		Если Успех Тогда
			ЭтаФорма.Элементы[ИмяАктивногоСписка].Обновить();
		Иначе
			ПоказатьПредупреждение(, "Не удалось изменить реквизит", 3);
		КонецЕсли;
	ИначеЕсли   ИмяАктивногоСписка = "ЗадачиСписокВебСервис" Тогда
		Телефон = ЭтаФорма.Элементы[ИмяАктивногоСписка].ТекущиеДанные.Телефон;
		Успех = ИзмениЗначениеРеквизитаЗадачиИнтернетЗаявки(Телефон, "НапоминаниеПерезвонить",ВыбЗнач);
		Если Успех Тогда
			ЭтаФорма.Элементы[ИмяАктивногоСписка].Обновить();
		Иначе
			ПоказатьПредупреждение(, "Не удалось изменить реквизит", 3);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_ИсправьНапоминаниеПерезвонитьВоВремяЗвонка(ВыбЗнач, ДопПараметры) Экспорт
	 
	Доступно = 		ТипЗнч(ВыбЗнач) = Тип("Дата")
				И 	ЗначениеЗаполнено(ВыбЗнач)
				И 	ТипЗнч(ДопПараметры) = Тип("Структура")
				И 	ДопПараметры.Свойство("АбонентВнешний");
	Если Не Доступно Тогда
		Возврат
	КонецЕсли;
	
	Рез = РегистрыСведений_ЗадачиОбратныйЗвонок_Добавить(ДопПараметры.АбонентВнешний, ДопПараметры.ДатаЗакрытия, ДопПараметры.Тип, ДопПараметры.Исполнитель, ДопПараметры.Комментарий, ВыбЗнач, ДопПараметры.ЗвонокИнициатор, ВыбЗнач+600, ДопПараметры.ПисьмоИнициатор, ДопПараметры.Основание);
	Если Рез = Ложь Тогда
		
		Рез = РегистрыСведений_ЗадачиОбратныйЗвонок_ДобавитьСЗаменой(ДопПараметры.АбонентВнешний, ДопПараметры.ДатаЗакрытия, ДопПараметры.Тип, ДопПараметры.Исполнитель, ДопПараметры.Комментарий, ВыбЗнач, ДопПараметры.ЗвонокИнициатор, ВыбЗнач+600, ДопПараметры.ПисьмоИнициатор, ДопПараметры.Основание);
		Если Рез = Ложь Тогда
			Сообщить("Ошибка создания задачи обратного звонка во время активного автозвонка");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ИзмениЗначениеРеквизитаЗадачиОбратныйЗвонок(Телефон, ИмяРеквизита, ЗначениеРеквизита)	
	Возврат РегистрыСведений.ЗадачиОбратныйЗвонок.УстановиЗначениеРеквизита(Телефон, ИмяРеквизита, ЗначениеРеквизита);
КонецФункции

&НаСервере
Функция ИзмениЗначениеРеквизитаЗадачиИнтернетЗаявки(Телефон, ИмяРеквизита, ЗначениеРеквизита)	
	Возврат РегистрыСведений.ЗадачиИнтернетЗаявки.УстановиЗначениеРеквизита(Телефон, ИмяРеквизита, ЗначениеРеквизита);
КонецФункции

&НаСервере
Функция ИзмениЗначениеРеквизитаЗадачиГАЗ(Телефон, ИмяРеквизита, ЗначениеРеквизита)	
	Возврат РегистрыСведений.ЗадачиГАЗЗаявки.УстановиЗначениеРеквизита(Телефон, ИмяРеквизита, ЗначениеРеквизита);
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ОбновитьДинСписки(Команда)
	Если ИмяАктивногоДинамичСписка = "" Тогда
		Возврат;
	КонецЕсли;
	ЭтаФорма.Элементы[ИмяАктивногоДинамичСписка].Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаИстория1Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.Сигнатура) Тогда
		Возврат
	КонецЕсли;
	
	Парам = Новый Структура("Сигнатура", Элемент.ТекущиеДанные.Сигнатура);
	Если Элемент.ТекущиеДанные.ЭтоЗвонок Тогда
		Если Элемент.ТекущиеДанные.ЭтоВходящий Тогда
			ИмяОткрываемойФормы = "РегистрСведений.Звонки.Форма.ФормаВходящегоЧтение";
		Иначе
			ИмяОткрываемойФормы = "РегистрСведений.Звонки.Форма.ФормаИсходящегоЧтение";
		КонецЕсли;
		ОткрытьФорму(ИмяОткрываемойФормы, Парам);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	#Область Система_взаимодействия
	//Обработка сообщения системы взаимодействия
	//-------------------------------------------
	Доступно = 		СокрЛП(ИмяСобытия)	= "СкрытыйКанал"
				И 	ТипЗнч(Параметр) 	= Тип("Структура")
				И 	ТипЗнч(Источник) 	= Тип("Строка")
				И СокрЛП(Источник) 	 	= "СистемаВзаимодействия";
	Если Доступно Тогда
		Доступно = 		Доступно И Параметр.Свойство("Источник")
					И 	СокрЛП(Параметр.Источник) = "ФоновоеЗадание";

		Если Доступно Тогда
			
			Если ЭтаФорма.МоиНастройки_ТестовыйРежим Тогда
				Сообщить("попал!");
			КонецЕсли;
			
			Доступно = 		Доступно И Параметр.Свойство("ИдФормы")
						И 	Параметр.ИдФормы = Этаформа.УникальныйИдентификатор;
			Если Не Доступно Тогда
				Возврат;
			КонецЕсли;

			Доступно = 		Доступно И Параметр.Свойство("Результат")
						И 	Параметр.Результат = "ВременноеХранилище"
						И 	Параметр.Свойство("ТипЗначенияРезультата")
						И 	Параметр.Свойство("Адрес");
			Если Доступно Тогда
				ТЗ = ПолучитьИзВременногоХранилища(Параметр.Адрес);
			КонецЕсли;
			
			Возврат;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	#КонецОбласти
	
	//Для отправки письма сотруднику, которому последний раз переводили звонок
	//----------------------------------------------------------------------------
	Доступно = 		ИмяСобытия = ПоследнийНабранныйНомерВнутрАбонента
				И 	СтрДлина(Параметр)=4;
	Если Не Доступно Тогда
		к_ТелВнутрОП = Параметр;
		Возврат;
	КонецЕсли;

КонецПроцедуры

#Область Обратный_звонок

&НаСервереБезКонтекста
Функция ПолучитьКонтактЦентрТекущегоПользователя()
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ Ссылка ИЗ Справочник.КонтактЦентры.Пользователи ГДЕ Пользователь = &Пользователь УПОРЯДОЧИТЬ ПО Ссылка.Наименование");
	Запрос.УстановитьПараметр("Пользователь",ПараметрыСеанса.ТекущийПользователь);	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Справочники.КонтактЦентры.ПустаяСсылка();
	КонецЕсли;	
	Возврат  РезультатЗапроса.Выгрузить()[0][0];	
КонецФункции

&НаКлиенте
Процедура ЗадачиСписокЗвонкиПриАктивизацииСтроки(Элемент)
	
	ТекДанные = Элементы.ЗадачиСписокЗвонки.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	ТелНомер = ТекДанные.Телефон; 
	
	//Покажи историю телефонных звонков
	//---------------------------------
	Окончание = ТекущаяДата();
	Начало = ДобавитьМесяц(Окончание, -2);
	СформируйИсториюОбщения(СокрЛП(ТелНомер), Начало, Окончание);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КомментарийЗадачи(ТелНомер)
	
	// Покажи комментарий
	//------------------------------------------------------------------------------------		
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 Комментарий ИЗ РегистрСведений.ЗадачиОбратныйЗвонок ГДЕ Телефон = &Телефон И ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)");
	Запрос.УстановитьПараметр("Телефон", СокрЛП(ТелНомер));
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ""
	КонецЕсли;
	Результат = РезультатЗапроса.Выгрузить()[0][0];	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ЗадачаИсторияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.Сигнатура) Тогда
		Возврат
	КонецЕсли;
	
	Парам = Новый Структура("Сигнатура", Элемент.ТекущиеДанные.Сигнатура);
	Если Элемент.ТекущиеДанные.ЭтоЗвонок Тогда
		Если Элемент.ТекущиеДанные.ЭтоВходящий Тогда
			ИмяОткрываемойФормы = "РегистрСведений.Звонки.Форма.ФормаВходящегоЧтение";
		Иначе
			ИмяОткрываемойФормы = "РегистрСведений.Звонки.Форма.ФормаИсходящегоЧтение";
		КонецЕсли;
		ОткрытьФорму(ИмяОткрываемойФормы, Парам);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Почта

&НаКлиенте
Процедура ЗадачиСписокГАЗПриАктивизацииСтроки(Элемент)
	
	Если (Элементы["ЗадачиСписокГАЗ"].ТекущиеДанные = Неопределено) Тогда
		Возврат
	КонецЕсли;
	
	ТелНомер = Элементы["ЗадачиСписокГАЗ"].ТекущиеДанные.Телефон;
	
	// Загрузим  историю звонков
	//---------------------------- 	
	Окончание = ТекущаяДата();
	Начало = ДобавитьМесяц(Окончание, -2);
	СформируйИсториюОбщения(ТелНомер, Начало, Окончание, Ложь);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиСписокПочтаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Тек = Элементы.ЗадачиСписокПочта.ТекущиеДанные;
	Если Тек =  Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОткрытьПисьмо(Тек.Сигнатура, Тек.АдресОтправителя, Тек.ДатаОтправки);
КонецПроцедуры
 
 &НаКлиенте
 Процедура ОткрытьПисьмо(Сигнатура, АдресОтправителя, ДатаОтправки)	
	 
	Тек = Элементы.ЗадачиСписокПочта.ТекущиеДанные;
	Если Тек =  Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	//Найти входящее письмо
	Письмо	= ЭлПочтаКлиентСервер.ПисьмоНайти(Сигнатура,  ИмяПользователяПочтовогоЯщика(Сигнатура), АдресОтправителя, ДатаОтправки);
	Если Письмо.ИдентификаторСообщения <> Тек.Сигнатура Тогда
		Сообщить(СтрШаблон("Не найдено почтовое сообщение. Идентификатор сообщения (message id) = %1 ", Тек.Сигнатура));
		Возврат;
	КонецЕсли;
	
	//Открыть форму исходящего письма с пересылкой входящего
	//ЭлПочтаКлиент.ПисьмоПереслать2(Письмо, Запись.АдресПолучателя);
	Оп = Новый ОписаниеОповещения("ОткрытьПисьмоИзРегистраПисьмаСодержание_Окончание", ЭтаФорма);
	ПисьмоПереслать2(Письмо, Тек.АдресПолучателя, Оп);	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПисьмоИзРегистраПисьмаСодержание_Окончание(Парам1, Парам2) Экспорт
	
	//Переведи консоль в паузу, так как некоторые письма открываются долго
	//---------------------------------------------------------------------
	Если КонсольПауза Тогда
		ОчерСсылка 	= ЗначенияСервера.ПолучитьЗначениеПараметраСеанса("ККЦОчередь");
		ТелСсылка 	= ЗначенияСервера.ПолучитьЗначениеПараметраСеанса("ККЦТелефон");
		Рез = Интеграция_Агр_ТелАгентСостояниеУстановить(ОчерСсылка, ТелСсылка, Истина);
		КонсольПауза = ?( Рез = "", Ложь, КонсольПауза);
	КонецЕсли;

	Элементы.ЗадачиСписокПочта.Обновить();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяПользователяПочтовогоЯщика(Сигнатура)
	//Возвращает имя пользователя почтового ящика по сигнатуре письма
	
	Доступно = 		ТипЗнч(Сигнатура) = Тип("Строка")
				И	ЗначениеЗаполнено(Сигнатура);
	Если Не Доступно Тогда
		Возврат "";
	КонецЕсли;

	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 ИмяПользователяПочтовогоЯщика ИЗ РегистрСведений.Письма ГДЕ Сигнатура = &Сигнатура");
	Запрос.УстановитьПараметр("Сигнатура", Сигнатура);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат "";
	КонецЕсли;
	Возврат РезультатЗапроса.Выгрузить()[0][0];
КонецФункции

&НаКлиенте
Функция ПисьмоПереслать2(Письмо, АдресОтвета, Оп="")Экспорт
	//Пересылает входящее письмо (параметр Письмо)
	Доступно = 		ТипЗнч(Письмо) 		= Тип("ИнтернетПочтовоеСообщение")
				И	ТипЗнч(АдресОтвета) = Тип("Строка")
				И	ЗначениеЗаполнено(АдресОтвета);
	Если Не Доступно Тогда
		Возврат "ошибка"
	КонецЕсли;
	
	//Переведи консоль в паузу, так как некоторые письма открываются долго
	//---------------------------------------------------------------------
	Если Не КонсольПауза Тогда
		ОчерСсылка 	 = ЗначенияСервера.ПолучитьЗначениеПараметраСеанса("ККЦОчередь");
		ТелСсылка 	 = ЗначенияСервера.ПолучитьЗначениеПараметраСеанса("ККЦТелефон");
		Рез 		 = Интеграция_Агр_ТелАгентСостояниеУстановить(ОчерСсылка, ТелСсылка, Ложь, 1);
		КонсольПауза = ?( Рез = "", Истина, КонсольПауза);
	КонецЕсли;
	
	//Получи вложения
	Вложения = Новый СписокЗначений();
	Для Каждого i Из Письмо.Вложения Цикл
		//Исключи из вложений - вложенные почтовые сообщения, не получается пока их обработать корректно
		Если ТипЗнч(i.Данные) = Тип("ИнтернетПочтовоеСообщение") Тогда
			Продолжить;
		КонецЕсли;
		Вложения.Добавить(i.Данные, i.ИмяФайла);	
	КонецЦикла;
	
	//Получи идентификаторы вложений
	ВложенияИдентификаторы = Новый СписокЗначений();
	Для Каждого i Из Письмо.Вложения Цикл
		//Исключи из вложений - вложенные почтовые сообщения, не получается пока их обработать корректно
		Если ТипЗнч(i.Данные) = Тип("ИнтернетПочтовоеСообщение") Тогда
			Продолжить;
		КонецЕсли;
		ВложенияИдентификаторы.Добавить(Новый Структура("Идентификатор, Данные, ТипСодержимого, ИмяФайла", i.Идентификатор, i.Данные, i.ТипСодержимого, i.ИмяФайла), i.Идентификатор);	
	КонецЦикла;

	
	//Сформируй из полученного письма тело, включая шапку from,send,to,subject
	Отправитель 	= ?(ТипЗнч(Письмо.Отправитель) = Тип("ИнтернетПочтовыйАдрес"), Письмо.Отправитель.Адрес, Письмо.Отправитель);
	Отправлено		= Письмо.ДатаОтправления;
	Получатели = "";
	Для Каждого i Из Письмо.Получатели Цикл
		Получатели = Получатели + ?(ЗначениеЗаполнено(Получатели), ",", "") + i.Адрес;
	КонецЦикла;
	Тема = Письмо.Тема;
			
	Тело = "";
	Для Каждого i Из Письмо.Тексты Цикл
		Тело = Тело + i.Текст;	
	КонецЦикла; 
	
	//По некоторым письмам от no-reply@perx.ru текст в теле письма записан дважды: простой текст и текст HTML. Берем только текст HTML
	Если Письмо.Тексты.Количество()>=2 Тогда
		Тело = Письмо.Тексты[1].Текст;	
	КонецЕсли;
	
	ПС = "";
	Тело ="<html>-----------------------------------"+ПС+"<div><b>From:</b> "+Отправитель+"</div>"+ПС+"<div><b>Sent:</b> "+Отправлено+"</div>"+ПС+"<div><b>To:</b> "+Получатели+"</div>"+ПС+"<div><b>Subject:</b> "+Тема+"</div><div> </div></html>"+ПС+ПС+Тело;	
	
	Парам = Новый Структура();
	Парам.Вставить("АдресОтвета",				"ekc@luidor.ru");
	Парам.Вставить("Тема",						СтрШаблон("FW:%1", Письмо.Тема));
	Парам.Вставить("Тело",						Тело);
	Парам.Вставить("Вложения", 					Вложения);
	Парам.Вставить("ВходящееПисьмоОснование",	Письмо.ИдентификаторСообщения);
	Парам.Вставить("ВложенияИдентификаторы",	ВложенияИдентификаторы);  
	
	//ОткрытьФорму("ОбщаяФорма.ОтправкаПочтовогоСообщения4", Парам,,,,, Оп);
	ОткрытьФорму("Обработка.ОтправкаПочтовогоСообщения.Форма.ОтправкаПочтовогоСообщения4", Парам, ЭтаФорма ,,,, Оп);
		
КонецФункции

#КонецОбласти

#Область Магистральные_клиенты

//<Выбор сотрудника по умолчанию для обработки звонка (магистрального) контрагента>
&НаСервере
Процедура ВыбратьСотрудника_НаСервере()
	
	// Очисти старые значения
	//----------------------------------------------------
	Объект.ОтветственныеЗаКонтрагента.Очистить();
	
	// Заполни ТЧ "Ответственные за контрагента"
	//-----------------------------------------------------------------------------------------------
	Об = РеквизитФормыВЗначение("Объект");	
	Об.ЗаполниТЧ_ОтветственныеЗаКонтрагента(ЭтаФорма.АбонентВнешний);
	//для отладки =>
	//Об.ЗаполниТЧ_ОтветственныеЗаКонтрагента("9506080027");
	
	ЗначениеВРеквизитФормы(Об, "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСотрудника(Команда=Неопределено)
	
	//Открывает форму выбора сотрудника
	//------------------------------------------------------------------------------------------------------------
	ВыбратьСотрудника_НаСервере();
	
	Если Объект.ОтветственныеЗаКонтрагента.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокСотрудников = Новый СписокЗначений();
	
	Для Каждого Стр Из ЭтаФорма.Объект.ОтветственныеЗаКонтрагента Цикл
		СписокСотрудников.Добавить(Стр.СотрудникТел, Стр.Сотрудник+" ("+Стр.СотрудникТел+")");
		
		//Добавь уровень +1
		//--------------------------------------------------------------------------------------------------------
		Если ЗначениеЗаполнено(Стр.Сотрудник1) и ЗначениеЗаполнено(Стр.Сотрудник1Тел) Тогда
			СписокСотрудников.Добавить(Стр.Сотрудник1Тел, "   "+Стр.Сотрудник1+" ("+Стр.Сотрудник1Тел+")");
			
			//Добавь уровень +2
			//----------------------------------------------------------------------------------------------------
			Если ЗначениеЗаполнено(Стр.Сотрудник2) и ЗначениеЗаполнено(Стр.Сотрудник2Тел) Тогда
				СписокСотрудников.Добавить(Стр.Сотрудник2Тел, "      "+Стр.Сотрудник2+" ("+Стр.Сотрудник2Тел+")");
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДопПарам = Новый Структура();
	Оп = Новый ОписаниеОповещения("ПослеВыбораСотрудникаИзМеню", ЭтотОбъект, ДопПарам);
	ПоказатьВыборИзМеню(Оп, СписокСотрудников);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСотрудникаИзМеню(ВыбЗнач, ДопПарам) Экспорт
	
	Если ВыбЗнач = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Доступно = 		ЗначениеЗаполнено(ЭтаФорма.КаналСистемный)
				И 	ЗначениеЗаполнено(ВыбЗнач.Значение);
	Если Не Доступно Тогда
		Возврат
	КонецЕсли;
	
	//Переведи звонок контрагента на сотрудника с уведомлением
	//-------------------------------------------------------------------
	КонтактЦентр.КомандаAtxfer(ЭтаФорма.КаналСистемный,ВыбЗнач.Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура Дисплей03Нажатие(Элемент)
	СписокСотрудников = Новый СписокЗначений();
	
	Для Каждого Стр Из ЭтаФорма.Объект.ОтветственныеЗаКонтрагента Цикл
		СписокСотрудников.Добавить(Стр.СотрудникТел, Стр.Сотрудник+" ("+Стр.СотрудникТел+")");
		
		//Добавь уровень +1
		//--------------------------------------------------------------------------------------------------------
		Если ЗначениеЗаполнено(Стр.Сотрудник1) и ЗначениеЗаполнено(Стр.Сотрудник1Тел) Тогда
			СписокСотрудников.Добавить(Стр.Сотрудник1Тел, "   "+Стр.Сотрудник1+" ("+Стр.Сотрудник1Тел+")");
			
			//Добавь уровень +2
			//----------------------------------------------------------------------------------------------------
			Если ЗначениеЗаполнено(Стр.Сотрудник2) и ЗначениеЗаполнено(Стр.Сотрудник2Тел) Тогда
				СписокСотрудников.Добавить(Стр.Сотрудник2Тел, "      "+Стр.Сотрудник2+" ("+Стр.Сотрудник2Тел+")");
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДопПарам = Новый Структура();
	Оп = Новый ОписаниеОповещения("ПослеВыбораСотрудникаИзМеню", ЭтотОбъект, ДопПарам);
	ПоказатьВыборИзМеню(Оп, СписокСотрудников);
	
КонецПроцедуры

#КонецОбласти

#Область  Отладочная_информация

&НаСервере
Функция Отладка_ЗначенияПеременных_НаСервере()
	ТекстДок = Новый ТекстовыйДокумент();
	
	НоваяСтрока = "       ******* Отчет об ошибках от "+ТекущаяДата()+" *******"+Символы.ПС+Символы.ВК;
	ТекстДок.ДобавитьСтроку(НоваяСтрока);
	
	НоваяСтрока = "     ***** Параметры сеанса *****"+Символы.ПС+Символы.ВК;
	ТекстДок.ДобавитьСтроку(НоваяСтрока);
	НоваяСтрока = "ККЦКонтактЦентр 		= " + ПараметрыСеанса.ККЦКонтактЦентр		+ Символы.ПС;
	ТекстДок.ДобавитьСтроку(НоваяСтрока);
	НоваяСтрока = "ККЦОчередь 			= " + ПараметрыСеанса.ККЦОчередь			+ Символы.ПС;
	ТекстДок.ДобавитьСтроку(НоваяСтрока);
	НоваяСтрока = "ККЦТелефон 			= " + ПараметрыСеанса.ККЦТелефон			+ Символы.ПС;
	ТекстДок.ДобавитьСтроку(НоваяСтрока);
	НоваяСтрока	= "ТекущийПользователь 	= "	+ ПараметрыСеанса.ТекущийПользователь	+ Символы.ПС;
	ТекстДок.ДобавитьСтроку(НоваяСтрока);
	НоваяСтрока	= "ИнтерактивныйРежим	= "	+ ПараметрыСеанса.ИнтерактивныйРежим	+ Символы.ПС;
	ТекстДок.ДобавитьСтроку(НоваяСтрока);
	НоваяСтрока = "ФонЗадания			= " + ПараметрыСеанса.ФонЗадания			+ Символы.ПС;
	ТекстДок.ДобавитьСтроку(НоваяСтрока);

	
	//НоваяСтрока = "     ***** Реквизиты формы ******"+Символы.ПС+Символы.ВК;
	//ТекстДок.ДобавитьСтроку(НоваяСтрока);
	//
	//РеквизитыФормы = ЭтаФорма.ПолучитьРеквизиты();
	//Для Каждого Рекв Из РеквизитыФормы Цикл
	//	ИмяРеквизита = Рекв.Имя;
	//	ЗначениеРеквизита = ЭтаФорма[ИмяРеквизита];
	//	НоваяСтрока = ИмяРеквизита +" = " +ЗначениеРеквизита+ " (ТипЗнч = "+Рекв.ТипЗначения+")"+Символы.ПС;
	//	ТекстДок.ДобавитьСтроку(НоваяСтрока);
	//	
	//	Если Рекв.ТипЗначения = Тип("СписокЗначений") Тогда
	//		Для Каждого Эл Из ЭтаФорма[ИмяРеквизита] Цикл
	//			НоваяСтрока = "   "+Эл.Значение+" = " +ЗначениеРеквизита+Символы.ПС;
	//			ТекстДок.ДобавитьСтроку(НоваяСтрока);
	//		КонецЦикла;
	//	КонецЕсли;
	//КонецЦикла;
		
	Адрес = ПоместитьВоВременноеХранилище(ТекстДок);
	Возврат Адрес
КонецФункции

&НаКлиенте
Функция Отладка_ЗначенияПеременных(Команда)
	
	Адрес = Отладка_ЗначенияПеременных_НаСервере();
	Если СтрДлина(Адрес)=0 Тогда
		Возврат "Ошибка";
	КонецЕсли;
	Рез = ПолучитьИзВременногоХранилища(Адрес);
	Если ТипЗнч(Рез)<>Тип("ТекстовыйДокумент") Тогда
		Возврат "Ошибка";
	КонецЕсли;
		
	НоваяСтрока = "     ***** Параметры клиента ******"+Символы.ПС;
	Рез.ДобавитьСтроку(НоваяСтрока);
	НоваяСтрока = "**** ЛОГ *****";	
	Рез.ДобавитьСтроку(НоваяСтрока);
	НоваяСтрока = ЭтаФорма.Отладка_Лог.ПолучитьТекст();	
	Рез.ДобавитьСтроку(НоваяСтрока);
	
	//ИдФонЗадания = Новый УникальныйИдентификатор();
	//ЭтаФорма.СписокИдФоновыхЗаданийОтправкиПисем.Добавить(ИдФонЗадания);
	
	Парам = Новый Структура();	
	Парам.Вставить("Сигнатура",					"");	//сигнатура текущего звонка, который переводился с уведомлением на ОП, но не был им принят
	//Парам.Вставить("АбонентВнешний",			"9506080027");			//номер телефона внешнего абонента, будет ключом задачи на обратный звонок
	//Парам.Вставить("ТелВнутренний",  			"1387");	    		//номер внутреннего телефона сотрудника ОП, на которого с уведомлением переводили звонок, но он  его не принял,
																		//будет значением поля Исполнитель для задачи на обратный звонок
	//Парам.Вставить("ИдентификаторФонЗадания", 	ИдФонЗадания);			//идентификатор фонового задания, которым будет отправляься это письмо, необходимо для извещения об ошибках отправки письма
	Парам.Вставить("От", 						"info@luidor.ru");		//адрес эл.почты отправителя (абсолютно любой адрес) 
	Парам.Вставить("Тема",						"Ошибка Агрегатора");
	Парам.Вставить("Содержание",				Рез.ПолучитьТекст());

	ОткрытьФорму("ОбщаяФорма.ЭлПисьмо", Парам);

КонецФункции
#КонецОбласти

#Область Новости
&НаСервере
Функция ЛентаНовостей()
	Перем Новости;
	Новости ="";

	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Т.Ссылка КАК Ссылка,
	|	Т.Тело КАК Тело,
	|	Т.Вложения.(
	|		Ключ КАК Ключ,
	|		Вложение КАК Вложение
	|	) КАК Вложения,
	|	Т.Период КАК Период
	|ИЗ
	|	Справочник.Сообщения КАК Т
	|ГДЕ
	|	Т.Активность
	|	И НЕ Т.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ";
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Сч = 0;
	
	Пока Выборка.Следующий() Цикл
		Сч = Сч + 1;
		
		ТекстHTML = Выборка.Тело;
		ВложенияВыб = Выборка.Вложения.Выбрать();
		Пока ВложенияВыб.Следующий() Цикл
			стр = ВложенияВыб.Вложение;
			
			ТекстHTML = СтрЗаменить(ТекстHTML, ВложенияВыб.Ключ, "data:image/png;base64,"+стр);
		КонецЦикла;
		
		Если Сч = 1 Тогда
			Новости = ТекстHTML
		Иначе
			Новости = Новости + "<hr/>"+ТекстHTML;
		КонецЕсли;
	КонецЦикла;
	Возврат Новости;
КонецФункции

Функция АрхивНовостей()
	Перем Новости;
	Новости ="";
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Т.Ссылка КАК Ссылка,
	|	Т.Тело КАК Тело,
	|	Т.Вложения.(
	|		Ключ КАК Ключ,
	|		Вложение КАК Вложение
	|	) КАК Вложения,
	|	Т.Период КАК Период
	|ИЗ
	|	Справочник.Сообщения КАК Т
	|ГДЕ
	|	НЕ Т.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ";
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Сч = 0;
	Пока Выборка.Следующий() Цикл
		Сч = Сч + 1;
		
		ТекстHTML = Выборка.Тело;
		ВложенияВыб = Выборка.Вложения.Выбрать();
		Пока ВложенияВыб.Следующий() Цикл
			стр = ВложенияВыб.Вложение;
			
			ТекстHTML = СтрЗаменить(ТекстHTML, ВложенияВыб.Ключ, "data:image/png;base64,"+стр);
		КонецЦикла;
		
		Если Сч = 1 Тогда
			Новости = ТекстHTML
		Иначе
			Новости = Новости + "<hr/>"+ТекстHTML;
		КонецЕсли;
	КонецЦикла;
	Возврат Новости;
КонецФункции

&НаКлиенте
Процедура НовостиПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	ПриНажатииГиперСсылкиВНовости(Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура АрхивНовостей1ПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	ПриНажатииГиперСсылкиВНовости(Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте 
Процедура ПриНажатииГиперСсылкиВНовости(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	href = ДанныеСобытия.Href;
	Если href = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Попытка
		ПерейтиПоНавигационнойСсылке(href);
	Исключение
		href = СтрЗаменить(href, "e1c://server/MainAppL/sys_agr/", "");
		href = "http://"+href;
		ПерейтиПоНавигационнойСсылке(href);
	КонецПопытки
КонецПроцедуры
#КонецОбласти

&НаКлиенте
Процедура ИзменитьНапоминаниеПерезвонитьВоВремяЗвонка(Команда)
	
	//Признак автозвонка
	//-------------------
	Доступно = СтрДлина(СайтИнтернетЗаявкиАвтозвонка)>3;	
	Если Не Доступно Тогда
		Возврат;
	КонецЕсли;
	
	ДатаЗакрытия 		= Дата(1,1,1,0,0,0);
	Тип 				= "Перечисления.ТипЗадачи.ПросьбаПерезвонить";
	Исполнитель 		= "ПараметрыСеанса.ККЦКонтактЦентр";
	Комментарий 		= "Просьба перезвонить по автозвонку";
	ДатаПостановки 		=  ЗначенияСервера.ТекущаяДатаСервер();
	ЗвонокИнициатор 	= "0#"+к_LinkedID+"#"+Телефония.ПолучиСерверТелефонииВнутрТелефона(КонсольТелефон);
	ДатаАктуальности 	= ДатаПостановки+600;
	ПисьмоИнициатор  	= СайтИнтернетЗаявкиАвтозвонка; 	

	РегистрыСведений_ЗадачиОбратныйЗвонок_Добавить(АбонентВнешний, ДатаЗакрытия, Тип, Исполнитель, Комментарий, ДатаПостановки, ЗвонокИнициатор, ДатаАктуальности, ПисьмоИнициатор);
	
КонецПроцедуры

#Область Выбор_звонка_в_истории_звонков
&НаКлиенте
Процедура ИсторияЗвонковВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.Сигнатура) Тогда
		Возврат
	КонецЕсли;
	ВыборЗвонкаВИсторииЗвонков(Элемент.ТекущиеДанные.Сигнатура, Элемент.ТекущиеДанные.ЭтоЗвонок, Элемент.ТекущиеДанные.ЭтоВходящий);
КонецПроцедуры

&НаКлиенте
Процедура ИсторияЗвонков1Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.Сигнатура) Тогда
		Возврат
	КонецЕсли;
	ВыборЗвонкаВИсторииЗвонков(Элемент.ТекущиеДанные.Сигнатура, Элемент.ТекущиеДанные.ЭтоЗвонок, Элемент.ТекущиеДанные.ЭтоВходящий);
КонецПроцедуры

&НаКлиенте
Процедура ИсторияЗвонков2Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
		Если Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.Сигнатура) Тогда
		Возврат
	КонецЕсли;
	ВыборЗвонкаВИсторииЗвонков(Элемент.ТекущиеДанные.Сигнатура, Элемент.ТекущиеДанные.ЭтоЗвонок, Элемент.ТекущиеДанные.ЭтоВходящий);
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗвонкаВИсторииЗвонков(Сигнатура, ЭтоЗвонок, ЭтоВходящий)
	// Звонок - сигнатура звонка
	
	Если Не ЗначениеЗаполнено(Сигнатура) Тогда
		Возврат
	КонецЕсли;
	
	Парам = Новый Структура("Сигнатура", Сигнатура);
	Если ЭтоЗвонок Тогда
		Если ЭтоВходящий Тогда
			ИмяОткрываемойФормы = "РегистрСведений.Звонки.Форма.ФормаВходящегоЧтение";
		Иначе
			ИмяОткрываемойФормы = "РегистрСведений.Звонки.Форма.ФормаИсходящегоЧтение";
		КонецЕсли;
		ОткрытьФорму(ИмяОткрываемойФормы, Парам);
	КонецЕсли;

КонецПроцедуры


#КонецОбласти

&НаКлиенте
Процедура ДисплейСодержаниеИнтернетПочтовойЗаявкиНажатие(Элемент)  	
	//Обработчик события нажание на гиперссылку "Открыть" для интернет-почтовой заявки
	Парам = Новый Структура("Тема, Тело, ПриОткрытииСвернутьШапку", "Интернет-заявка", ИнтернетПочтоваяЗаявкаСодержание, "Истина");
	ОткрытьФорму("ОбщаяФорма.ОтправкаПочтовогоСообщения4", Парам);
КонецПроцедуры






#Область SSE 

&НаКлиенте
Процедура _ВнешнееСобытие(Источник,Событие,Данные)
	//Используется вместо процедуры ВнешнееСобытие(), которую нужно будет переменовать (закоментарить) при работе через websocket
		
	// Убедимся в том, что полученное событие - это событие телефонной компоненты
	//-------------------------------------------------------------------------------------------------
	Доступно = 		ТипЗнч(Источник)	 = Тип("Строка")
				И 	ТипЗнч(Данные) 		= Тип("Строка")
				И 	СтрНайти(ВРег(СокрЛП(Источник)),"TCPCLIENT") > 0;	
	Если Не Доступно Тогда
		Возврат;
	КонецЕсли;
	
	Если МоиНастройки_ТестовыйРежим Тогда
		Если ЭтаФорма.Отладка_Лог.КоличествоСтрок()>20000 Тогда
			ЭтаФорма.Отладка_Лог.Очистить();
		КонецЕсли;
		ЭтаФорма.Отладка_Лог.ДобавитьСтроку("**********************");
		ЭтаФорма.Отладка_Лог.ДобавитьСтроку("ДатаВремя = "+ТекущаяДата()+"; Источник = "+Источник+ "; Событие = "+Событие);
		ЭтаФорма.Отладка_Лог.ДобавитьСтроку("Данные = "+Данные);
		Сообщить(Данные);
	КонецЕсли;

	//Игнорировать событие,  если консоль в режиме паузы
	//---------------------------------------------------
	Если КонсольПауза Тогда
		Возврат
	КонецЕсли;

	Если СтрНайти(Данные, "agentcalled")>0 Тогда
		_ВнешнееСобытиеAgentCalled(Данные);	
	КонецЕсли;                           
	Если СтрНайти(Данные, "dialbegin")>0 Тогда
		_ВнешнееСобытиеDialBegin(Данные);	
	КонецЕсли; 
	Если СтрНайти(Данные, "hangup")>0 Тогда //{"amiEvent":"{name:hangup, asteriskChannel:SIP/5240-0000c8b4, linkedid:1650980150.81267}"}
		_ВнешнееСобытиеHangup(Данные);	
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура _ВнешнееСобытиеAgentCalled(Данные)
	//возникает, когда агенту очереди поступает из нее входящий вызов
	
	#Область Пример
	//Пример параметра Данные:
	//Агенту (оператору КЦ) с внутренним телефоном 5240, состоящим в очереди  RECEPTION 
	//поступает из нее входящий звонок от внешнего абонента 9253651964, позвонившего в компанию на телефон  88002002402:
	//Event: AgentCalled
	//Privilege: agent,all
	//Channel: SIP/edgeast-001e5e69
	//ChannelState: 6
	//ChannelStateDesc: Up
	//CallerIDNum: 9253651964
	//CallerIDName: 88002002402
	//ConnectedLineNum: <unknown>
	//ConnectedLineName: <unknown>
	//Language: ru
	//AccountCode: 
	//Context: macro-QueueRoutine
	//Exten: s
	//Priority: 23
	//Uniqueid: 1535529257.16433228
	//Linkedid: 1535529257.16433228
	//DestChannel: SIP/5240-001e5e6a
	//DestChannelState: 0
	//DestChannelStateDesc: Down
	//DestCallerIDNum: <unknown>
	//DestCallerIDName: <unknown>
	//DestConnectedLineNum: 9253651964
	//DestConnectedLineName: 88002002402
	//DestLanguage: ru
	//DestAccountCode: 
	//DestContext: default
	//DestExten: 5519
	//DestPriority: 1
	//DestUniqueid: 1535529257.16433236
	//DestLinkedid: 1535529257.16433228
	//Queue: RECEPTION
	//Interface: SIP/5240
	//MemberName: 5240
	#КонецОбласти 
	 		
	//25.04.2022+, если значение заполнено, значит, вероятно, идет исходящий автозвонок
	Если ЗначениеЗаполнено(КаналСистемный) Тогда   
			Возврат;
	КонецЕсли; 	
	
	//21.01.2022+, если значение заполнено, значит, вероятно, идет исходящий автозвонок
	Если ЗначениеЗаполнено(к_LinkedID) Тогда                                          
		Возврат;
	КонецЕсли;  
	
	//Если выполняется исходящий автозвонок и поступил входящий из очереди - отбрось входящий
	//----------------------------------------------------------------------------------------
	Если КонсольСостояние > 0 Тогда
		Возврат;
	КонецЕсли; 
		
	Если ЗначениеЗаполнено(ИнтернетЗаявкаСигнатура) Тогда
		Возврат;
	КонецЕсли;  
	   	
 	//Обработку автозвонков - отключи
	//--------------------------------
	ВключитьВыключитьПодключениеОбработчикаОжидания(Ложь);

	// Поступил входящий звонок из системной очереди
	//-------------------------------------------------------------------------------------------------  
	
	Дат1 = Jsonify(Данные); 
	Дат = Jsonify(Дат1.amievent);
	
	КаналСистемный			= Дат.asteriskChannel;
	КаналИнициатор			= Дат.luidorChannel;
	АбонентВнешний			= Дат.abonent;
	к_LinkedID	 			= "1#"+Дат.linkedid;
	
	//КаналСистемный 		= КонвертацияКлиент.ПараметрПолучить(Данные,"DESTCHANNEL");
	//КаналИнициатор 		= КонвертацияКлиент.ПараметрПолучить(Данные,"CALLERIDNAME");
	//АбонентВнешний 		= КонвертацияКлиент.ПараметрПолучить(Данные,"CALLERIDNUM");	
	//к_LinkedID 			= "1#"+КонвертацияКлиент.ПараметрПолучить(Данные,"DestLinkedid");
		
	КонсольСостояние 	= 1;

	Элементы.ГруппаДисплей.Видимость = Истина;        
		
	//18.01.2022+ Если оказались здевь

	// Если звонок поступил по каналу с номером "88342270703" (Саранск), то поменяем местами значения
	// реквизитов "КаналИнициатор" и "АбонентВнешний"
	//-------------------------------------------------------------------------------------------------
	Доступно = 		СтрДлина(СокрЛП(АбонентВнешний)) = 11
				И 	СокрЛП(АбонентВнешний) = "88342270703";
	Если Доступно Тогда
		АбонентВнешний = СокрЛП(КаналИнициатор);
		КаналИнициатор = "88342270703";
	КонецЕсли;

	// Вызовем процедуру визуализации звонка
	//-------------------------------------------------------------------------------------------------
	Если СтрДлина(АбонентВнешний) = 4 Тогда
		ЗвонокОбработатьВнутренний();
	Иначе
		ЗвонокОбработатьВнешнийВходящий_НаКлиенте();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ВнешнееСобытиеDialBegin(Данные)   
	
	
	//Возникает когда звонок стартовал.   	
	//Событие возникает дважды (по каждому абоненту), возможен фильтр по DialString
		
	#Область Пример1
	
	//Пример 1 параметра Данные. 
	//Первое событие. Возникает только при звонке из программы. Сервер телефонии звонит оператору ЕКЦ.
	//Уже на это этапе нужно показать оператору сайт Автозвонка.
	//Похоже между этими двумя DialBegin-ами может влезть AgentCalled
	//После него последует второе событие DialBegin.
	//--------------------------------------------------------------------------
	//EVENT: DIALBEGIN
	//PRIVILEGE: CALL,ALL
	//DESTCHANNEL: SIP/3029-000051c6
	//DESTCHANNELSTATE: 0
	//DESTCHANNELSTATEDESC: DOWN
	//DESTCALLERIDNUM: 3029
	//DESTCALLERIDNAME: 3029
	//DESTCONNECTEDLINENUM: 3029
	//DESTCONNECTEDLINENAME: 3029
	//DESTLANGUAGE: RU
	//DESTACCOUNTCODE: 
	//DESTCONTEXT: DEFAULT
	//DESTEXTEN: 
	//DESTPRIORITY: 1
	//DESTUNIQUEID: 1650528919.33221
	//DESTLINKEDID: 1650528919.33221
	//DIALSTRING: 3029  
		
	//Пример 2 параметра Данные. 
	//Событие возникло:
	//	 - при входящем звонке (в случае ЕКЦ - после AgentCalled)
	//	 - при ручном исходящем звонке оператора с телефона 
	//	 - при автозвонке, как второй DialBegin после первого (малого) DialBegina. 
	//---------------------------
	//Event: DialBegin
	//Privilege: call,all
	//Channel: SIP/3029-000051c6
	//ChannelState: 6
	//ChannelStateDesc: Up
	//CallerIDNum: 3029
	//CallerIDName: 3029
	//ConnectedLineNum: 3029
	//ConnectedLineName: 3029
	//Language: ru
	//AccountCode: 
	//Context: macro-outcalls
	//Exten: s
	//Priority: 7
	//Uniqueid: 1650528919.33221
	//Linkedid: 1650528919.33221
	//DestChannel: SIP/edgeast-000051cd
	//DestChannelState: 0
	//DestChannelStateDesc: Down
	//DestCallerIDNum: 89101439551
	//DestCallerIDName: 3029
	//DestConnectedLineNum: 3029
	//DestConnectedLineName: 3029
	//DestLanguage: ru
	//DestAccountCode: 
	//DestContext: default
	//DestExten: 89101439551
	//DestPriority: 1
	//DestUniqueid: 1650528920.33229
	//DestLinkedid: 1650528919.33221
	//DialString: edgeast/89101439551    - у первого события или "DialString: 3029"  - у второго события   
	
    //Linkedid одинаков в обоих DialBegin
	#КонецОбласти  
	
	// Выполняется прямой вызов {кош: оператора} (вызов не из очереди){кош: например при автозвонке}
	// Получим номер телефона оператора консоли
	//-------------------------------------------------------------------------------------------------
	ТелСсылка 	= ЗначенияСервера.ПолучитьЗначениеПараметраСеанса("ККЦТелефон");
	ТелКонсоли 	= ЗначенияСервера.ПолучитьЗначениеРеквизита(ТелСсылка,"Код");  
	
	
	Дат1 = Jsonify(Данные); 
	Дат = Jsonify(Дат1.amievent);

	
	// Выясним выполняется ли данный вызов в режиме "CallBack" (т.е. телефонный сервер вызывает
	// абонента). Системный вызов отличается от полноценного тем, что у него нет реквизита "Channel"
	//-------------------------------------------------------------------------------------------------  
	//т.е. отбрось малый dialbegin
	
	Доступно = 	
	//(	СтрНайти(Данные,"CALLERIDNUM: " + ТелКонсоли) > 0 
	//				ИЛИ СтрНайти(Данные,"DESTEXTEN: " + ТелКонсоли) > 0
	//			)		
	//				И 	
	Дат.Свойство("channel");	
	Если Не Доступно Тогда
		Возврат;
	КонецЕсли;
	
	// Обработку автозвонков - отключи
	//---------------------------------
	ВключитьВыключитьПодключениеОбработчикаОжидания(Ложь);
	
	// Вызов не системный. Определим направление вызова - входящий или исходящий
	//-------------------------------------------------------------------------------------------------
	ТелВызывающий = Дат.calleridnum;//КонвертацияКлиент.ПараметрПолучить(Данные,"CALLERIDNUM");
	Элементы.ГруппаДисплей.Видимость = Истина;
	
	КаналИнициатор = "";
	
	Если СокрЛП(ТелВызывающий) = ТелКонсоли Тогда 
		//Это вызов исходящий
  		КаналСистемный 		= Дат.channel; //КонвертацияКлиент.ПараметрПолучить(Данные,"CHANNEL");
		АбонентВнешний 		= Дат.destcalleridnum;
		КонсольСостояние 	= 2;      
				
		к_LinkedID = "0#"+Дат.linkedid;
	Иначе   
		// Если вызов входящий
		КаналСистемный 		= Дат.destchannel; //КонвертацияКлиент.ПараметрПолучить(Данные,"DESTCHANNEL");
		АбонентВнешний 		= Дат.calleridnum; 
		КонсольСостояние 	= 1;
		
		к_LinkedID 	= "1#"+Дат.linkedid;		
	КонецЕсли;  
		
	// Вызовем процедуру визуализации информации о звонке
	//-------------------------------------------------------------------------------------------------
	Если СтрДлина(АбонентВнешний) = 4 Тогда
		ЗвонокОбработатьВнутренний();
	ИначеЕсли КонсольСостояние = 2 Тогда   
		
		#Область Звонок_обработать_внешний_исходящий
		// Включение и настройка элементов дисплея
		//-----------------------------------------
		Элементы.Дисплей02.Заголовок = "Исходящий звонок на телефон абонента";
		
		Если ЗначениеЗаполнено (СайтИнтернетЗаявкиАвтозвонка) Тогда
			Элементы.Дисплей03.Заголовок = СайтИнтернетЗаявкиАвтозвонка;
		ИначеЕсли ЗначениеЗаполнено (СайтИнтернетЗаявкиНеАвтозвонка) Тогда
			Элементы.Дисплей03.Заголовок = СайтИнтернетЗаявкиНеАвтозвонка;	
		КонецЕсли;
		
		// Сформируем строку дисплея с номером телефона и регионом звонка
		//--------------------------------------------------------------------
		АбонентВнешний				 = ТелефонВнешнийНормализовать_НаКлиенте(АбонентВнешний);			
		Регион						 = Регион(АбонентВнешний);	
		Элементы.Дисплей01.Заголовок = СокрЛП(АбонентВнешний) + "   " + Регион;
		#КонецОбласти
		
	Иначе
		//входящий оператору напрямую, а не из очереди
		//--------------------------------------------
		ЗвонокОбработатьВнешнийВходящий_НаКлиенте()
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура _ВнешнееСобытиеHangup(Данные = Неопределено)
	
	# Область Пример 
	//Пример параметра Данные по номеру 5240
	//--------------------------------------
	//Event: Hangup
	//Privilege: call,all
	//Channel: SIP/5240-0003729c
	//ChannelState: 0
	//ChannelStateDesc: Down
	//CallerIDNum: <unknown>
	//CallerIDName: <unknown>
	//ConnectedLineNum: 89209161927
	//ConnectedLineName: 84922778079
	//Language: ru
	//AccountCode: 
	//Context: default
	//Exten: 5519
	//Priority: 1
	//Uniqueid: 1540886600.1869935
	//Linkedid: 1540886600.1869931
	//Cause: 17
	//Cause-txt: User busy
	#КонецОбласти
 //{"amiEvent":"{name:hangup, asteriskChannel:SIP/5240-0000c8b4, linkedid:1650980150.81267}"}
 
// Выясним относится ли полученное событие к данной консоли
//-------------------------------------------------------------------------------------------------
	
	// Закрой задачу автозвонка
	//---------------------------------------
	Если ЭтаФорма.КонсольСостояние = 2 Тогда
		ЗакрытьЗадачуАвтоЗвонка(ЭтаФорма.АбонентВнешний, ПолучиСигнатуруЗвонка());
	КонецЕсли;   
		
	Элементы.Дисплей01.Заголовок = "";
	Элементы.Дисплей02.Заголовок = "";
	Элементы.Дисплей03.Заголовок = "";   
	Элементы.ДисплейСодержаниеИнтернетПочтовойЗаявки.Заголовок = "";
		
	КонсольСостояние 	= 0;
	КаналСистемный 		= "";
	АбонентВнешний		= "";
	
	к_ТелВнутрОП						= "";
	к_LinkedID							= "";
	КаналИнициаторЗадачиОбратногоЗвонка = "";
	
	Элементы.Дисплей03.Заголовок = "";
	
	ИнтернетЗаявкаСигнатура 				= "";
	СайтИнтернетЗаявкиАвтозвонка 			= "";
	СайтИнтернетЗаявкиНеАвтозвонка			= "";
	ДисплейИмяАвтозвонка 					= "";
	ДисплейМайлАвтозвонка 					= "";	
	ДисплейДругиеСайты						= ""; 
	
	ИнтернетПочтоваяЗаявкаСодержание		= "";
	
	Регион 									= "";
	НомерИНазначениеВнешнегоТелефонаЛуидор 	= "";
		
	//ОбработкаАвтозвонков
	//--------------------
	ВключитьВыключитьПодключениеОбработчикаОжидания(Истина);
КонецПроцедуры


#КонецОбласти

&НаСервере
Функция Jsonify(стр)         
	Доступно = ТипЗнч(Стр) = Тип("Строка")
			И ЗначениеЗаполнено(Стр);
	Если Не Доступно Тогда
		Возврат Новый Структура();
	КонецЕсли;		
	Чт = Новый ЧтениеJson();
	Чт.УстановитьСтроку(стр); 
	Попытка
		Возврат ПрочитатьJSON(Чт);  
	Исключение
		Возврат Новый Структура();
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Процедура тест(Команда)              
	_ВнешнееСобытиеDialBegin(тестДанные);
КонецПроцедуры
