
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Об = РеквизитФормыВЗначение("Объект");
	Об.ЗаполниТЧ_КонтактныеЛица();
	ЗначениеВРеквизитФормы(Об, "Объект");
	
	МоиНастройки_ОповещатьОбОшибкахОтправкиПочты 	= Истина;
	МоиНастройки_ПоказыватьИсториюЗвонков 			= Истина;
	Фильтры = Истина;
	
	#Область Новости
	Новости 		= ЛентаНовостей();
	АрхивНовостей 	= АрхивНовостей(); 
	#КонецОбласти
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Начальная установка видимости элементов
	//------------------------------------------
	СправочникПоискПриИзменении();	
	
	#Область Обратный_звонок
	
	КЦ = ПолучитьКонтактЦентрТекущегоПользователя();
	Если КЦ = ПредопределенноеЗначение("Справочник.КонтактЦентры.ПустаяСсылка") Тогда
		Отказ = Истина;
		Возврат
	КонецЕсли;

	ЭтаФорма.ЗадачиСписокЗвонки.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы.Очистить();

	//Отбор по контакт-центру
	//------------------------
	ЭлОтбора1 = ЭтаФорма.ЗадачиСписокЗвонки.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлОтбора1.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Исполнитель");
	ЭлОтбора1.ПравоеЗначение	= КЦ;
	ЭлОтбора1.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлОтбора1.Использование		= Истина;	
		
	//Отбор по не выполненным задачам
	//--------------------------------
	ЭлОтбора1 = ЭтаФорма.ЗадачиСписокЗвонки.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлОтбора1.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Выполнена");
	ЭлОтбора1.ПравоеЗначение	= ЛОЖЬ;
	ЭлОтбора1.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлОтбора1.Использование		= Истина;	
	
	//Отбор по каналу 88312222222
	//----------------------------
	ЭлОтбора1 = ЭтаФорма.ЗадачиСписокЗвонки.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлОтбора1.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Канал");
	ЭлОтбора1.ПравоеЗначение	= "88312222222";
	ЭлОтбора1.ВидСравнения		= ВидСравненияКомпоновкиДанных.НеСодержит;
	ЭлОтбора1.Использование		= Истина;	
	#КонецОбласти
	
	#Область Почта
	ЭтаФорма.ЗадачиСписокПочта.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы.Очистить();

	//Отбор по контакт-центру
	//------------------------
	ЭлОтбора1 = ЭтаФорма.ЗадачиСписокПочта.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлОтбора1.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Исполнитель");
	ЭлОтбора1.ПравоеЗначение	= КЦ;
	ЭлОтбора1.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлОтбора1.Использование		= Истина;	

	//Отбор по не выполненным задачам
	//---------------------------------
	ЭлОтбора1 = ЭтаФорма.ЗадачиСписокПочта.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлОтбора1.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Выполнена");
	ЭлОтбора1.ПравоеЗначение	= ЛОЖЬ;
	ЭлОтбора1.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлОтбора1.Использование		= Истина;	
	//</Почта>
	
	МоиНастройки_ПричинаРучногоЗакрытияРегистрирующаяСпаммера="Спам";

	#КонецОбласти
			
	#Область ЗадачиГАЗ
	ЭтаФорма.ЗадачиСписокГАЗ.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы.Очистить();

	//Отбор по не выполненным задачам
	//---------------------------------
	ЭлОтбора1 = ЭтаФорма.ЗадачиСписокГАЗ.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлОтбора1.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Выполнена");
	ЭлОтбора1.ПравоеЗначение	= ЛОЖЬ;
	ЭлОтбора1.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлОтбора1.Использование		= Истина;	
	//</Почта>
	
	МоиНастройки_ПричинаРучногоЗакрытияРегистрирующаяСпаммера="Спам";

	#КонецОбласти
			
	#Область ВебСервис 	
	ЭтаФорма.Элементы.Позвонить.Доступность = Ложь;
	ЭтаФорма.Элементы.ИзменитьНапоминаниеПерезвонить.Доступность = Ложь;


	//Отбор по не выполненным задачам
	//---------------------------------
	ЭлОтбора1 = ЭтаФорма.ЗадачиСписокВебСервис.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлОтбора1.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("Выполнена");
	ЭлОтбора1.ПравоеЗначение=ЛОЖЬ;
	ЭлОтбора1.ВидСравнения=ВидСравненияКомпоновкиДанных.Равно;
	ЭлОтбора1.Использование=Истина;	
	#КонецОбласти
	
	ВнешнееСобытиеHangup();

	#Область WebSocket
	Если Websocket Тогда
		ПриОткрытииНаСервере();
	КонецЕсли;
	#КонецОбласти
КонецПроцедуры

#Область WebSocket

&НаКлиенте
Процедура Websocket1ПриИзменении(Элемент)
	Элементы.ЗагрузиHtml.Доступность = Websocket;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузиHtml(Команда)
	Если Websocket Тогда
		ПриОткрытииНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриОткрытииНаСервере()
	Об = РеквизитФормыВЗначение("Объект");
	текстHtml = Об.ПолучиМакетHTML();
	ЗначениеВРеквизитФормы(Об, "Объект");	
	ЭтаФорма.html=текстHtml;
КонецПроцедуры	

&НаКлиенте
Процедура htmlПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	//Событие вызываетя программно через Websocket
	
	Если ДанныеСобытия.Button = Неопределено Тогда
		Возврат
	КонецЕсли;
	Данные = ДанныеСобытия.Button.value;
	//Сообщить(Данные);
	Если Данные = "send" Тогда
		Возврат
	КонецЕсли;
	_ВнешнееСобытие("TCPCLIENT","Reseeved",Данные);
КонецПроцедуры

&НаКлиенте
Функция WebSocket_КомандаHangup(Канал)	
// Функция выполняет отключение звонка в переданном Канале
// Возвращает Истину в случае успеха
//-------------------------------------------------------------------------------------------------
	//Доступно = (ТипЗнч(Канал) = Тип("Строка"));
	//Доступно = Доступно И ЗначениеЗаполнено(Канал);

	//Если (Доступно = Истина) Тогда
		ТекстКоманды = "Action: Hangup" 			+ Символы.ПС +
					   "Channel: " 	+ СокрЛП(Канал) + Символы.ПС + Символы.ПС;

		//Если (КомпонентаВыполнитьКоманду(ТекстКоманды) = Истина) Тогда
		//	Возврат Истина;
		//КонецЕсли;
		
		ф=ЭтаФорма.Элементы.html.Документ.GetElementById("messageField");
		ф.value = ТекстКоманды;
		
		кн = ЭтаФорма.Элементы.html.Документ.GetElementById("sendButton");
		кн.Click();
	//КонецЕсли;

	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура _ВнешнееСобытие(Источник,Событие,Данные)
	//Используется вместо процедуры ВнешнееСобытие(), которую нужно будет переменовать (закоментарить) при работе через websocket
		
	// Убедимся в том, что полученное событие - это событие телефонной компоненты
	//-------------------------------------------------------------------------------------------------
	Доступно = (ТипЗнч(Источник) = Тип("Строка"));
	Доступно = Доступно И (ТипЗнч(Данные) = Тип("Строка"));
	Доступно = Доступно И (Найти(ВРег(СокрЛП(Источник)),"TCPCLIENT") > 0);
	
	Если (Доступно = Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	//Игнорировать событие,  если консоль в режиме паузы
	//---------------------------------------------------
	Если ЭтаФорма.КонсольПауза Тогда
		Возврат
	КонецЕсли;
	
	// Disconnect - событие, извещающее о разрыве соединения с сервером телефонии
	//-------------------------------------------------------------------------------------------------
	Доступно = (ТипЗнч(Событие) = Тип("Строка"));
	Доступно = Доступно И (ВРег(СокрЛП(Событие)) = "DISCONNECT");
	
	Если (Доступно = Истина) Тогда
		ВнешнееСобытиеHangup();
		//ПриОткрытии(Ложь);
		Возврат;
	КонецЕсли;	
		
	// В полученном пакете может находиться несколько событий
	// Каждое событие начинается со строки "Event:" и заканчивается двойным символом переноса строки
	// Выполним разбиение полученного пакета на строки - события
	//-------------------------------------------------------------------------------------------------
	ПакетСобытий = ВРег(СокрЛП(Данные));
	
	// Получим очередное событие
	//-------------------------------------------------------------------------------------------------
	Пока СтрДлина(ПакетСобытий)>6 Цикл // СтрДлина("EVENT:")
		
		ПозОкончания = СтрНайти(ПакетСобытий,"EVENT:", , 2)-1; // ищи 2-й Event
		ПозОкончания = ?(ПозОкончания <= 0,СтрДлина(ПакетСобытий),ПозОкончания);
		ТекСобытие = СокрЛП(Лев(ПакетСобытий,ПозОкончания));
		
		// Получим тип события
		// DialBegin 	- Вызов оператора не из очереди (оператор выполняет начал исходящий звонок)
		// AgentCalled 	- Вызов оператора из очереди (поступил входящий звонок на оператора)
		// Hangup 		- Завершение звонка
		//-------------------------------------------------------------------------------------------------
		Если (ЗначениеЗаполнено(ЭтаФорма.КаналСистемный)) Тогда 
			// Переменная КаналСистемный заполнена, если агент очереди уже взял трубку и разговаривает с абонентом 
			// при входящем или исходящем вызове. Здесь обработаем события связанные с завершением текущего разговора
			Если 
				(СтрНайти(ТекСобытие,"EVENT: HANGUP"))Тогда
					ВнешнееСобытиеHangup(ТекСобытие);		
			КонецЕсли;
		Иначе
			// абонент в текущий момент не обрабатывает вызов, т.е. трубка телефона лежит
			Если  СтрНайти(ТекСобытие,"EVENT: DIALBEGIN") Тогда
					ВнешнееСобытиеDialBegin(ТекСобытие);
			ИначеЕсли СтрНайти(ТекСобытие,"EVENT: AGENTCALLED") Тогда
					ВнешнееСобытиеAgentCalled(ТекСобытие);
			КонецЕсли;
		КонецЕсли;
		
		// Уберем из текущего пакета событий обработанный блок
		//-------------------------------------------------------------------------------------------------
		ПакетСобытий = СокрЛП(Сред(ПакетСобытий,ПозОкончания,СтрДлина(ПакетСобытий)));
		
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПриЗакрытии()

	// Отключим компоненту телефонии
	//---------------------------------
	КонтактЦентр.КомпонентаОтключить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеОтображения(Элемент = Неопределено)
	// Настроим отображение колонок в списке "Телефоны"
	//--------------------------------------------------
	Если (ЗначениеЗаполнено(ЭтаФорма.КонсольТелефон)) Тогда
		Если (ЭтаФорма.КонсольСостояние = 0) Тогда 	// звонок не выполняется
			Элементы.Телефоны.ПодчиненныеЭлементы.ТелефоныAtxfer.Видимость 				= Ложь;
			Элементы.Телефоны.ПодчиненныеЭлементы.ТелефоныRedirect.Заголовок 			= "Вызвать";
			Элементы.Телефоны.ПодчиненныеЭлементы.ТелефоныRedirect.ГиперссылкаЯчейки 	= Истина;
		Иначе
			Элементы.Телефоны.ПодчиненныеЭлементы.ТелефоныAtxfer.Видимость 				= Истина;
			Элементы.Телефоны.ПодчиненныеЭлементы.ТелефоныRedirect.ГиперссылкаЯчейки	= Истина;
			Элементы.Телефоны.ПодчиненныеЭлементы.ТелефоныAtxfer.Заголовок 				= "С уведомлением";
			Элементы.Телефоны.ПодчиненныеЭлементы.ТелефоныRedirect.Заголовок 			= "Без уведомления";
		КонецЕсли;
	Иначе
		Элементы.Телефоны.ПодчиненныеЭлементы.ТелефоныAtxfer.Видимость 					= Ложь;
		Элементы.Телефоны.ПодчиненныеЭлементы.ТелефоныRedirect.Заголовок 				= "Телефоны";
		Элементы.Телефоны.ПодчиненныеЭлементы.ТелефоныRedirect.ГиперссылкаЯчейки 		= Ложь;
	КонецЕсли;
КонецПроцедуры

#Область Выбор_телефона

&НаКлиенте
Процедура КонсольТелефонВыбрать(Команда)
	ОпОбработчикЗакрытияФормыВыбораТелефона = Новый ОписаниеОповещения("ОбработчикЗакрытияФормыВыбораТелефона", ЭтотОбъект);
	ОткрытьФорму("Обработка.КонсольКонтактЦентраТест4.Форма.ФормаВыбораОператора",,ЭтаФорма,,,,ОпОбработчикЗакрытияФормыВыбораТелефона, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикЗакрытияФормыВыбораТелефона(Параметр, ДопПарам) Экспорт

// Проверим заполненность параметров сеанса, отвечающих за регистрацию оператора консоли
// Если параметры заданы, то получим текущее состояние режима "Пауза" для оператора-агента
// Также выполним подключение компоненты телефонии к серверу
//-------------------------------------------------------------------------------------------------

	ОчерСсылка = ЗначенияСервера.ПолучитьЗначениеПараметраСеанса("ККЦОчередь");
	ТелСсылка = ЗначенияСервера.ПолучитьЗначениеПараметраСеанса("ККЦТелефон");

	Если (ЗначениеЗаполнено(ОчерСсылка) И ЗначениеЗаполнено(ТелСсылка)) Тогда
		
		//<14.06.2018 10-37, //=>, >
		//Темп = ОчередиАгенты.АгентПаузаПолучить(ОчерСсылка,ТелСсылка);
		//ЭтаФорма.КонсольПауза = ?(Темп = Истина,Истина,Ложь);
		//=>
		
		//Получи состояние агента телефонии
		//---------------------------------
		ЭтаФорма.КонсольПауза = ОчередиАгенты.АгентПаузаПолучить(ОчерСсылка,ТелСсылка);
		
		ОбработайВыборТелефонаНаСервере();
		
		//Сформируй заголовок формы с указанием назначения очереди
		//---------------------------------------------------------
		Темп = ЗначенияСервера.ПолучитьЗначениеРеквизита(ОчерСсылка,"Назначение");
		ЭтаФорма.Заголовок = СокрЛП(ТелСсылка) + " - " + СокрЛП(Темп);
		//</14.06.2018 10-37>
		
		#Если ТонкийКлиент Тогда
			Если Не WebSocket Тогда		
				Результат = КонтактЦентр.КомпонентаИнициализировать();
				Если (ЗначениеЗаполнено(Результат)) Тогда
					Сообщить(Результат);
					Отказ = Истина;
					Возврат;
				КонецЕсли;
				
				Если Фильтры Тогда
					Результат = КонтактЦентр.КомпонентаПодключить(КонсольТелефон, IPАдресСервера);
				Иначе
					Результат = КонтактЦентр.КомпонентаПодключитьТест(КонсольТелефон, IPАдресСервера);

				КонецЕсли;
				Если (ЗначениеЗаполнено(Результат)) Тогда
					Сообщить(Результат);
				КонецЕсли;	
			КонецЕсли;	
		#КонецЕсли
		
		//31.08.2018, +, Автоматически включить прием автозвонков
		//--------------------------------------------------------
		ВключитьВыключитьПодключениеОбработчикаОжидания(Истина);
		
	КонецЕсли;

		
КонецПроцедуры

&НаСервере
Процедура ОбработайВыборТелефонаНаСервере()
	
	//<29.08.2018, +>
	ЭтаФорма.КонсольТелефон = ПараметрыСеанса.ККЦТелефон.Код;
	//</29.08.2018>
	
	Элементы.СтраницаЗадачи.Видимость = Ложь;
	
	// Настроим элементы страницы "СтраницаЗадачи" и признак обработки автозвонка
	//-------------------------------------------------------------------------------------------------
	Если (ЗначениеЗаполнено(ПараметрыСеанса.ККЦКонтактЦентр)) Тогда
		//Установить признак обработки автозвонка
		//-----------------------------------------
		Если ПараметрыСеанса.ККЦКонтактЦентр.ИспользуетсяКаскадОчередей Тогда
			Запрос = Новый Запрос();
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	КаскадОчередей.ОбрабатыватьАвтозвонок КАК ОбрабатыватьАвтозвонок
			|ИЗ
			|	Справочник.КонтактЦентры.КаскадОчередей КАК КаскадОчередей
			|ГДЕ
			|	КаскадОчередей.Ссылка = &КонтактЦентр
			|	И КаскадОчередей.Очередь = &Очередь";
			Запрос.УстановитьПараметр("КонтактЦентр", 	ПараметрыСеанса.ККЦКонтактЦентр);
			Запрос.УстановитьПараметр("Очередь",		ПараметрыСеанса.ККЦОчередь);
			РезультатЗапроса = ОбщегоНазначения.ВыполнитьЗапрос(Запрос);
			Если РезультатЗапроса.Пустой() Тогда
				Возврат;
			КонецЕсли;
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			ЭтаФорма.МоиНастройки_ОбрабатыватьАвтозвонки = Выборка.ОбрабатыватьАвтозвонок;
		Иначе
			ЭтаФорма.МоиНастройки_ОбрабатыватьАвтозвонки = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

# Область Управление_паузой
&НаКлиенте
Процедура КонсольПаузаПриИзменении(Элемент = Неопределено)
	
	// Получим текущие настройки консоли
	//-------------------------------------------------------------------------------------------------
	ОчерСсылка = ЗначенияСервера.ПолучитьЗначениеПараметраСеанса("ККЦОчередь");
	ТелСсылка = ЗначенияСервера.ПолучитьЗначениеПараметраСеанса("ККЦТелефон");
	
	// Если параметры не заданы, то завершим работу процедуры
	//-------------------------------------------------------------------------------------------------
	Доступно = ЗначениеЗаполнено(ТелСсылка);
	Доступно = Доступно И ЗначениеЗаполнено(ОчерСсылка);
	
	Элементы.КонсольПауза.ТолькоПросмотр = (НЕ Доступно);
	
	Если (Доступно = Ложь) Тогда
		ЭтаФорма.Заголовок = "Консоль оператора: Не выбран телефон рабочего места";
		ЭтаФорма.КонсольПауза = Истина;
		ОбновлениеОтображения();
		Возврат;
	КонецЕсли;
	
	// Параметры заданы
	// Сформируем заголовок для переключателя активности
	//-------------------------------------------------------------------------------------------------
	Темп = ЗначенияСервера.ПолучитьЗначениеРеквизита(ОчерСсылка,"Назначение");
	ЭтаФорма.Заголовок = СокрЛП(ТелСсылка) + " - " + СокрЛП(Темп);
	
	//оу

	// Если процедура вызвана интерактивно (из элемента), то изменим режим паузы на заданный
	// Если процедура вызвана каким-либо автоматом, то просто зарегистрируем событие
	//-------------------------------------------------------------------------------------------------
	Если (Элемент <> Неопределено) Тогда
		
		//Результат = ОчередиАгенты.АгентПаузаИзменить(ОчерСсылка,ТелСсылка,НЕ ЭтаФорма.КонсольПауза);
		//=>
		//как в оу через web-сервис
		Результат = Интеграция_Агр_ТелАгентСостояниеУстановить(ОчерСсылка, ТелСсылка, Не ЭтаФорма.КонсольПауза);

		Если (ЗначениеЗаполнено(Результат)) Тогда
			// изменение режима пауза не выполнено
			
			//<14.06.2018 10-37, //=>, >	
			//Темп = ОчередиАгенты.АгентПаузаПолучить(ОчерСсылка,ТелСсылка);
			//ЭтаФорма.КонсольПауза = ОчередиАгенты.АгентПаузаПолучить(ОчерСсылка,ТелСсылка);
			//=>
			ЭтаФорма.КонсольПауза = Не ЭтаФорма.КонсольПауза;
			//</14.06.2018 10-37>	
			
			Сообщить(Результат);
			
		КонецЕсли;
		
		ОчередиАгенты.АгентСостояниеЗарегистрировать(ТелСсылка,ЭтаФорма.КонсольПауза);
	КонецЕсли;
	//31.08.2018, +, Автоматически включить прием автозвонков
	//-------------------------------------------------------
	Если КонсольПауза = Ложь Тогда
		ВключитьВыключитьПодключениеОбработчикаОжидания(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция Интеграция_Агр_ТелАгентСостояниеУстановить(Очередь, Телефон, НовСостояние) Экспорт
	//Изменение состояния телефона через web-service asterisk по аналогии с ОУ
	
	//http://astws.main.luidorauto.ru:8081/asterisk_ws/soap/description
	//:param queuename: queue name (string)
	//:param agentnum: agent phone number (string)
	//:param active: False - set pause, True - set unpause (bool)
	//:param min_agents: minimum count of agents (int)
	
	Доступно = 				ТипЗнч(Очередь) = Тип("СправочникСсылка.ТелОчереди");
	Доступно = Доступно И 	ТипЗнч(Телефон) = Тип("СправочникСсылка.ТелВнутренние");
	Доступно = Доступно И 	ТипЗнч(НовСостояние) = Тип("Булево");
	Доступно = Доступно И 	ЗначениеЗаполнено(Очередь);
	Доступно = Доступно И 	ЗначениеЗаполнено(Телефон);
	
	Данные = "Очередь = " + Очередь + "; Телефон = "+Телефон+"; НовСостояние = "+НовСостояние ;
	
	Если Не Доступно Тогда
		Комментарий = "Ошибка в типе или заполнении аргументов";
		ЗаписьЖурналаРегистрации("Интеграция_Агр_ТелАгентСостояниеУстановить", УровеньЖурналаРегистрации.Ошибка, ,Данные, Комментарий);
	КонецЕсли;
	
	ОчередьИмя 	 = Очередь.Наименование;
	ТелефонНомер = Телефон.Код;
	Ответ = "";
	Попытка
		
		//ВебСервис = WSСсылки.PbxService.СоздатьWSПрокси("http://tempuri.org/","asterisk_ws","asterisk_ws");
		//=>
		ОпределениеСервиса = Новый WSОпределения("http://astws.main.luidorauto.ru:8081/asterisk_ws/soap/description");
		ВебСервис = Новый WSПрокси(ОпределениеСервиса, "http://tempuri.org/", "asterisk_ws", "asterisk_ws"); 

		Результат = ВебСервис.change_agent_state(ОчередьИмя, ТелефонНомер, НовСостояние, 0);
		
		Если (ТипЗнч(Результат) = Тип("Строка")) И (ЗначениеЗаполнено(Результат)) Тогда
			Ответ = "Изменение состояния для агента  невозможно по причине: " + СокрЛП(Результат);
			Возврат (Ответ);
		КонецЕсли;
	Исключение
		Комментарий = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("Интеграция_Агр_ТелАгентСостояниеУстановить", УровеньЖурналаРегистрации.Ошибка, ,Данные, Комментарий);
		Ответ = Комментарий;
	КонецПопытки;

	// Если мы оказались здесь, значит сервис успешно отработал
	// Обновим информацию о состоянии агента в базе данных
	//-------------------------------------------------------------------------------------------------
	//Агр_ТелАгентСостояниеОбновить(СтрАгент.Телефон);
	//СтрАгент = Агр_ТелАгентСостояниеПолучить(СтрАгент.Телефон);
	//Ответ = ?(ТипЗнч(СтрАгент) = Тип("Структура"),СтрАгент.Состояние,"Общая ошибка изменения состояния агента");
	

	Возврат (Ответ);
КонецФункции
#КонецОбласти

#Область Работа_со_справочником_Предприятие
&НаКлиенте
Процедура СправочникПоискПриИзменении(Элемент = Неопределено)

// Удалим существующий отбор
//-------------------------------------------------------------------------------------------------
	Для Каждого ТекСтрока Из ЭтаФорма.Справочник.Отбор.Элементы Цикл
		Если (ТекСтрока.Представление = "ОтборПоПодстрокеПоиска") Тогда
			ЭтаФорма.Справочник.Отбор.Элементы.Удалить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;

// Если подстрока поиска не заполнена, то завершим процедуру
//-------------------------------------------------------------------------------------------------
	Если (НЕ ЗначениеЗаполнено(ЭтаФорма.СправочникПоиск)) Тогда
		Элементы.Справочник.Отображение = ОтображениеТаблицы.ИерархическийСписок;
		ЭтаФорма.ТекущийЭлемент = Элементы.СправочникПоиск;

// Если подстрока поиска заполнена, то сформируем условие фильтрации
// Поиск может производиться по одному или нескольким словам
//-------------------------------------------------------------------------------------------------
	Иначе
		МассивСлов 						= КонвертацияКлиент.СтрокаРазделить(СокрЛП(ЭтаФорма.СправочникПоиск)," ");
		ГруппаОтбора 				 	= ЭтаФорма.Справочник.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.РежимОтображения 	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ГруппаОтбора.ТипГруппы 			= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		ГруппаОтбора.Представление 		= "ОтборПоПодстрокеПоиска";
		ГруппаОтбора.Использование 		= Истина;

		Для Каждого ТекСлово Из МассивСлов Цикл
			ВнутрГруппаОтбора 					= ГруппаОтбора.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ВнутрГруппаОтбора.РежимОтображения 	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
			ВнутрГруппаОтбора.ТипГруппы 		= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ;
			ВнутрГруппаОтбора.Использование 	= Истина;

			ЭлементОтбора = ВнутрГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("НаименованиеПолное");
			ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Содержит;
			ЭлементОтбора.ПравоеЗначение	= СокрЛП(ТекСлово);
			ЭлементОтбора.Использование		= Истина;

			ЭлементОтбора = ВнутрГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Телефоны");
			ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Содержит;
			ЭлементОтбора.ПравоеЗначение	= СокрЛП(ТекСлово);
			ЭлементОтбора.Использование		= Истина;
		КонецЦикла;

		Элементы.Справочник.Отображение = ОтображениеТаблицы.Список;
		ЭтаФорма.ТекущийЭлемент = Элементы.Справочник;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СправочникВыбор(Элемент,ВыбраннаяСтрока,Поле,СтандартнаяОбработка)

// Если пользователь выбрал строку и эта строка является группой, то необходимо проверить
// используется ли фильтр для поиска по Списку (заполненность реквизита "ПодстрокаПоиска")
// Если реквизит заполнен (т.е. фильтр существует), то для правильного входа в группу и отображения
// элементов группы - очистим фильтр и переведем режим отображения списка в "ИерархическийСписок"
//-------------------------------------------------------------------------------------------------
	Если (Элемент.ТекущиеДанные.ЭтоГруппа = Истина) Тогда
		ЭтаФорма.СправочникПоиск = Неопределено;
		СправочникПоискПриИзменении();
	Иначе
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СправочникПриАктивизацииСтроки(Элемент)

// Отобразим все телефоны текущего выбранного элемента справочника
//-------------------------------------------------------------------------------------------------
	ТекСсылка = ?(Элемент.ТекущиеДанные = Неопределено,Неопределено,Элемент.ТекущиеДанные.Ссылка);
	СправочникЭлементПолучитьТелефоны(ТекСсылка);
КонецПроцедуры

&НаСервере
Процедура СправочникЭлементПолучитьТелефоны(ТекСсылка)

// Если переданная ссылка не пустая
// Получим все телефоны закрепленные за объектом
//-------------------------------------------------------------------------------------------------
	ЭтаФорма.Телефоны.Очистить();

	Если (ЗначениеЗаполнено(ТекСсылка)) Тогда
		ТЗТемп = Телефония.ТелефоныВладельцаПолучить(ТекСсылка);

		Для Каждого ТекСтрока Из ТЗТемп Цикл
			НовСтрока = ЭтаФорма.Телефоны.Добавить();
			НовСтрока.Ссылка = ТекСтрока.Телефон;
			НовСтрока.Тип = СокрЛП(ТекСтрока.Тип);
			НовСтрока.Atxfer = СокрЛП(ТекСтрока.Телефон);
			НовСтрока.Redirect = СокрЛП(ТекСтрока.Телефон);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ВнешнееСобытие

//*************************************************************************************************
// Обработка внешних событий (событий компоненты телефонии)
//*************************************************************************************************

#Если ТонкийКлиент Тогда
	
&НаКлиенте
Процедура Оригинал_ВнешнееСобытие(Источник,Событие,Данные)
	
	Если МоиНастройки_ТестовыйРежим Тогда
		Если ЭтаФорма.Отладка_Лог.КоличествоСтрок()>20000 Тогда
			ЭтаФорма.Отладка_Лог.Очистить();
		КонецЕсли;
		ЭтаФорма.Отладка_Лог.ДобавитьСтроку("**********************");
		ЭтаФорма.Отладка_Лог.ДобавитьСтроку("ДатаВремя = "+ТекущаяДата()+"; Источник = "+Источник+ "; Событие = "+Событие);
		ЭтаФорма.Отладка_Лог.ДобавитьСтроку("Данные = "+Данные);
		Сообщить(Данные);
	КонецЕсли;
	
	//<23.01.2018 Для повышения производительности закоментарим>
	//		// Убедимся в том, что полученное событие - это событие телефонной компоненты
	//		//-------------------------------------------------------------------------------------------------
	//	Доступно = (ТипЗнч(Источник) = Тип("Строка"));
	//	Доступно = Доступно И (ТипЗнч(Данные) = Тип("Строка"));
	//	Доступно = Доступно И (Найти(ВРег(СокрЛП(Источник)),"TCPCLIENT") > 0);
	
	//	Если (Доступно = Ложь) Тогда
	//		Возврат;
	//	КонецЕсли;
	//</23.01.2018>
	
	//<Кошелев_05092017, //>
	//Игнорировать событие,  если консоль в режиме паузы
	//---------------------------------------------------
	//Если ЭтаФорма.КонсольПауза Тогда
	//	Возврат
	//КонецЕсли;
	//</Кошелев_05092017>
	
	// Disconnect - событие, извещающее о разрыве соединения с сервером телефонии
	//-------------------------------------------------------------------------------------------------
	Доступно = (ТипЗнч(Событие) = Тип("Строка"));
	Доступно = Доступно И (ВРег(СокрЛП(Событие)) = "DISCONNECT");
	
	Если (Доступно = Истина) Тогда
		ВнешнееСобытиеHangup();
		ПриОткрытии(Ложь);
		Возврат;
	КонецЕсли;	
		
	// В полученном пакете может находиться несколько событий
	// Каждое событие начинается со строки "Event:" и заканчивается двойным символом переноса строки
	// Выполним разбиение полученного пакета на строки - события
	//-------------------------------------------------------------------------------------------------
	ПакетСобытий = ВРег(СокрЛП(Данные));
	
	// Получим очередное событие
	//-------------------------------------------------------------------------------------------------
	Пока СтрДлина(ПакетСобытий)>6 Цикл // СтрДлина("EVENT:")
		
		ПозОкончания = СтрНайти(ПакетСобытий,"EVENT:", , 2)-1; // ищи 2-й Event
		ПозОкончания = ?(ПозОкончания <= 0,СтрДлина(ПакетСобытий),ПозОкончания);
		ТекСобытие = СокрЛП(Лев(ПакетСобытий,ПозОкончания));
		
		// Получим тип события
		// DialBegin 	- Вызов оператора не из очереди (оператор выполняет начал исходящий звонок)
		// AgentCalled 	- Вызов оператора из очереди (поступил входящий звонок на оператора)
		// Hangup 		- Завершение звонка
		//-------------------------------------------------------------------------------------------------
		Если (ЗначениеЗаполнено(ЭтаФорма.КаналСистемный)) Тогда 
			// Переменная КаналСистемный заполнена, если агент очереди уже взял трубку и разговаривает с абонентом 
			// при входящем или исходящем вызове. Здесь обработаем события связанные с завершением текущего разговора
				
			Если (СтрНайти(ТекСобытие,"EVENT: HANGUP")) Тогда
					ВнешнееСобытиеHangup(ТекСобытие);		
			//ИначеЕсли(Найти(ТекСобытие,"EVENT: DIALEND")) И ЭтаФорма.МоиНастройки_ОбрабатыватьАвтозвонки Тогда
			// Обработка непринятого автозвонка
			//-----------------------------------
			//	ВнешнееСобытиеDialEnd(ТекСобытие);
			КонецЕсли;
		Иначе
			// абонент в текущий момент не обрабатывает вызов, т.е. трубка телефона лежит
			
			Если (Найти(ТекСобытие,"EVENT: DIALBEGIN")) Тогда
				ВнешнееСобытиеDialBegin(ТекСобытие);
			ИначеЕсли (Найти(ТекСобытие,"EVENT: AGENTCALLED")) Тогда
				ВнешнееСобытиеAgentCalled(ТекСобытие);
			КонецЕсли;
		КонецЕсли;
		
		// Уберем из текущего пакета событий обработанный блок
		//-------------------------------------------------------------------------------------------------
		ПакетСобытий = СокрЛП(Сред(ПакетСобытий,ПозОкончания,СтрДлина(ПакетСобытий)));
		
	КонецЦикла;
КонецПроцедуры
#КонецЕсли

&НаКлиенте
Процедура ВнешнееСобытиеAgentCalled(Данные)
	//возникает, когда агенту очереди поступает из нее входящий вызов
	
	#Область Пример
	//Пример параметра Данные:
	//Агенту (оператору КЦ) с внутренним телефоном 5240, состоящим в очереди  RECEPTION 
	//поступает из нее входящий звонок от внешнего абонента 9253651964, позвонившего в компанию на телефон  88002002402:
	//Event: AgentCalled
	//Privilege: agent,all
	//Channel: SIP/edgeast-001e5e69
	//ChannelState: 6
	//ChannelStateDesc: Up
	//CallerIDNum: 9253651964
	//CallerIDName: 88002002402
	//ConnectedLineNum: <unknown>
	//ConnectedLineName: <unknown>
	//Language: ru
	//AccountCode: 
	//Context: macro-QueueRoutine
	//Exten: s
	//Priority: 23
	//Uniqueid: 1535529257.16433228
	//Linkedid: 1535529257.16433228
	//DestChannel: SIP/5240-001e5e6a
	//DestChannelState: 0
	//DestChannelStateDesc: Down
	//DestCallerIDNum: <unknown>
	//DestCallerIDName: <unknown>
	//DestConnectedLineNum: 9253651964
	//DestConnectedLineName: 88002002402
	//DestLanguage: ru
	//DestAccountCode: 
	//DestContext: default
	//DestExten: 5519
	//DestPriority: 1
	//DestUniqueid: 1535529257.16433236
	//DestLinkedid: 1535529257.16433228
	//Queue: RECEPTION
	//Interface: SIP/5240
	//MemberName: 5240
	#КонецОбласти

	//Если оператор не свободен, отключи дальнейшую обработку события
	//----------------------------------------------------------------
	Если ЭтаФорма.КонсольСостояние > 0 Тогда
		Возврат;
	КонецЕсли;

	// Выясним относится ли полученное событие к данной консоли -
	// в этом случае в полученном событии поле MemberName совпадает с номером консоли
	// также отбор по MemberName добавлен при подключении компоненты
	//-------------------------------------------------------------------------
	Доступно = (СтрНайти(Данные,"MEMBERNAME: " + ЭтаФорма.КонсольТелефон) > 0);	
	Если (Доступно = Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	#Область Отладка 
	Если МоиНастройки_ТестовыйРежим Тогда
		Если Отладка_Лог.КоличествоСтрок()>20000 Тогда
			Отладка_Лог.Очистить();
		КонецЕсли;
		Отладка_Лог.ДобавитьСтроку("****************************************************************************");
		Отладка_Лог.ДобавитьСтроку("**********************ВнешнееСобытиеAgentCalled******************************");
		Отладка_Лог.ДобавитьСтроку("ДатаВремя = "+ТекущаяДата());
		Отладка_Лог.ДобавитьСтроку("Данные = "+Данные);
	КонецЕсли;
	#КонецОбласти

	//Обработку автозвонков - отключи
	//--------------------------------
	ВключитьВыключитьПодключениеОбработчикаОжидания(Ложь);

	// Поступил входящий звонок из системной очереди
	//-------------------------------------------------------------------------------------------------
	КаналСистемный = КонвертацияКлиент.ПараметрПолучить(Данные,"DESTCHANNEL");
	КаналИнициатор = КонвертацияКлиент.ПараметрПолучить(Данные,"CALLERIDNAME");
	АбонентВнешний = КонвертацияКлиент.ПараметрПолучить(Данные,"CALLERIDNUM");	
	
	КонсольСостояние 	= 1;
	к_LinkedID 		= "1#"+КонвертацияКлиент.ПараметрПолучить(Данные,"LinkedID");

	Элементы.ГруппаДисплей.Видимость = Истина;

	// Если звонок поступил по каналу с номером "88342270703" (Саранск), то поменяем местами значения
	// реквизитов "КаналИнициатор" и "АбонентВнешний"
	//-------------------------------------------------------------------------------------------------
	Доступно = (СтрДлина(СокрЛП(АбонентВнешний)) = 11);
	Доступно = Доступно И (СокрЛП(АбонентВнешний) = "88342270703");
	Если (Доступно = Истина) Тогда
		АбонентВнешний = СокрЛП(КаналИнициатор);
		КаналИнициатор = "88342270703";
	КонецЕсли;

	// Вызовем процедуру визуализации звонка
	//-------------------------------------------------------------------------------------------------
	Если (СтрДлина(АбонентВнешний) = 4) Тогда
		ЗвонокОбработатьВнутренний();
	Иначе
		ЗвонокОбработатьВнешнийВходящий();
	КонецЕсли;

	ОбновлениеОтображения();
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытиеDialBegin(Данные)
	//Возникает когда звонок стартовал. Так как возникает при любом звонке (входящем и исходящем),
	//то можно отказаться от события AgentCalled
	//Событие возникает дважды (по каждому абоненту), возможен фильтр по DialString
		
	#Область Пример
	//Пример параметра Данные:
	//-----------------------
	//Event: DialBegin
	//Privilege: call,all
	//Channel: SIP/5240-00037260
	//ChannelState: 6
	//ChannelStateDesc: Up
	//CallerIDNum: 5240
	//CallerIDName: 5240
	//ConnectedLineNum: 5240
	//ConnectedLineName: 5240
	//Language: ru
	//AccountCode: 
	//Context: macro-outcalls
	//Exten: s
	//Priority: 7
	//Uniqueid: 1540886586.1869498
	//Linkedid: 1540886586.1869498
	//DestChannel: SIP/edgeast-00037266
	//DestChannelState: 0
	//DestChannelStateDesc: Down
	//DestCallerIDNum: 89519054422
	//DestCallerIDName: 5240
	//DestConnectedLineNum: 5240
	//DestConnectedLineName: 5240
	//DestLanguage: ru
	//DestAccountCode: 
	//DestContext: default
	//DestExten: 89519054422
	//DestPriority: 1
	//DestUniqueid: 1540886588.1869553
	//DestLinkedid: 1540886586.1869498
	//DialString: edgeast/89519054422    - у первого события или "DialString: 5240"  - у второго события
	#КонецОбласти

	// Выполняется прямой вызов {кош: оператора} (вызов не из очереди){кош: например при автозвонке}
	// Получим номер телефона оператора консоли
	//-------------------------------------------------------------------------------------------------
	ТелСсылка = ЗначенияСервера.ПолучитьЗначениеПараметраСеанса("ККЦТелефон");
	ТелКонсоли = ЗначенияСервера.ПолучитьЗначениеРеквизита(ТелСсылка,"Код");
	
	// Выясним выполняется ли данный вызов в режиме "CallBack" (т.е. телефонный сервер вызывает
	// абонента). Системный вызов отличается от полноценного тем, что у него нет реквизита "Channel"
	//-------------------------------------------------------------------------------------------------
	Доступно = (Найти(Данные,"CALLERIDNUM: " + ТелКонсоли) > 0);
	Доступно = Доступно ИЛИ (Найти(Данные,"DESTEXTEN: " + ТелКонсоли) > 0);
	Доступно = Доступно И ЗначениеЗаполнено(КонвертацияКлиент.ПараметрПолучить(Данные,"CHANNEL"));	
	Если (Доступно = Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	#Область Отладка
	Если МоиНастройки_ТестовыйРежим Тогда
		Если Отладка_Лог.КоличествоСтрок()>20000 Тогда
			Отладка_Лог.Очистить();
		КонецЕсли;
		Отладка_Лог.ДобавитьСтроку("****************************************************************************");
		Отладка_Лог.ДобавитьСтроку("********************** ВнешнееСобытиеDialBegin******************************");
		Отладка_Лог.ДобавитьСтроку("ДатаВремя = "+ТекущаяДата());
		Отладка_Лог.ДобавитьСтроку("Данные = "+Данные);
	КонецЕсли;
	#КонецОбласти
	
	//<Кошелев_07.09.2017_14-29, +, ЭТОТ КОД НЕПРАВИЛЬНЫЙ>
	//Исключи повторный DialBegin при слепом переводе автозвонка
	//-----------------------------------------------------------
	_LinkedID 	= КонвертацияКлиент.ПараметрПолучить(Данные,"LinkedID");
	_UniqueID 	= КонвертацияКлиент.ПараметрПолучить(Данные,"UniqueID");
	Если _LinkedID <> _UniqueID Тогда
		Возврат;
	КонецЕсли;
	//<Кошелев_07.09.2017_14-29
	
	// Обработку автозвонков - отключи
	//---------------------------------
	ВключитьВыключитьПодключениеОбработчикаОжидания(Ложь);
	
	// Вызов не системный. Определим направление вызова - входящий или исходящий
	//-------------------------------------------------------------------------------------------------
	ТелВызывающий = КонвертацияКлиент.ПараметрПолучить(Данные,"CALLERIDNUM");
	Элементы.ГруппаДисплей.Видимость = Истина;
	
	КаналИнициатор = "";
	
	// Если вызов исходящий
	//-------------------------------------------------------------------------------------------------
	Если (ВРег(СокрЛП(ТелВызывающий)) = ТелКонсоли) Тогда
		КаналСистемный = КонвертацияКлиент.ПараметрПолучить(Данные,"CHANNEL");
		АбонентВнешний = КонвертацияКлиент.ПараметрПолучить(Данные,"DESTCALLERIDNUM");
		КонсольСостояние = 2;
		
		//<Кошелев_05092017, +>
		// Поставь агента в паузу, чтобы при автозвонке на него поступали входящие из очереди
		//-----------------------------------------------------------------------------------
		//Если ЭтаФорма.МоиНастройки_ОбрабатыватьАвтозвонки Тогда
		//	ЭтаФорма.КонсольПауза = Истина;
		//	КонсольПаузаПриИзменении("просто какое-то значение");
		//КонецЕсли;
		//</Кошелев_05092017>
		
		к_LinkedID = "0#"+КонвертацияКлиент.ПараметрПолучить(Данные,"LinkedID");
		
	// Если вызов входящий
	//-------------------------------------------------------------------------------------------------
	Иначе
		КаналСистемный = КонвертацияКлиент.ПараметрПолучить(Данные,"DESTCHANNEL");
		АбонентВнешний = КонвертацияКлиент.ПараметрПолучить(Данные,"CALLERIDNUM");
		КонсольСостояние = 1;
		
		к_LinkedID = "1#"+КонвертацияКлиент.ПараметрПолучить(Данные,"LinkedID");		
	КонецЕсли;
	
	// Вызовем процедуру визуализации информации о звонке
	//-------------------------------------------------------------------------------------------------
	Если (СтрДлина(АбонентВнешний) = 4) Тогда
		ЗвонокОбработатьВнутренний();
	ИначеЕсли (КонсольСостояние = 2) Тогда
		ЗвонокОбработатьВнешнийИсходящий();
	Иначе
		ЗвонокОбработатьВнешнийВходящий();
	КонецЕсли;
	
	ОбновлениеОтображения();
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытиеHangup(Данные = Неопределено)
	
	# Область Пример 
	//Пример параметра Данные по номеру 5240
	//--------------------------------------
	//Event: Hangup
	//Privilege: call,all
	//Channel: SIP/5240-0003729c
	//ChannelState: 0
	//ChannelStateDesc: Down
	//CallerIDNum: <unknown>
	//CallerIDName: <unknown>
	//ConnectedLineNum: 89209161927
	//ConnectedLineName: 84922778079
	//Language: ru
	//AccountCode: 
	//Context: default
	//Exten: 5519
	//Priority: 1
	//Uniqueid: 1540886600.1869935
	//Linkedid: 1540886600.1869931
	//Cause: 17
	//Cause-txt: User busy
	#КонецОбласти
			
// Выясним относится ли полученное событие к данной консоли
//-------------------------------------------------------------------------------------------------
	Доступно = (Данные = Неопределено);
	Доступно = Доступно ИЛИ (СтрДлина(КаналСистемный)>0  И СтрНайти(Данные,"CHANNEL: " + ВРег(СокрЛП(КаналСистемный))) > 0);
	Если Доступно = Ложь Тогда
		Возврат;
	КонецЕсли;
					
	// Закрой задачу автозвонка
	//---------------------------------------
	Если ЭтаФорма.КонсольСостояние = 2 Тогда
		//Значит звонок исходящий
		
		//Если СтрДлина(СайтИнтернетЗаявкиАвтозвонка)>0 Тогда
		//	ЗакрытьЗадачуАвтоЗвонка(ЭтаФорма.АбонентВнешний, ПолучиСигнатуруЗвонка());
		//		
		//	#Область Перенесено_создание_задачи_на_перезвон_при_неудаче_автозвонка_из_DialEnd_с_141218
		//	Доступно = Найти(Данные,"CAUSE-TXT: USER BUSY") 								> 0;   // Вызываемый номер занят (User busy)
		//	Доступно = Доступно Или (Найти(Данные,"CAUSE-TXT: CALL REJECTED") 				> 0);  // Вызов отклонен (Call rejected)
		//	Доступно = Доступно Или (Найти(Данные,"CAUSE-TXT: NORMAL TEMPORARY FAILURE") 	> 0);  // Временная неработоспособность (Temporary failure)
		//	Доступно = Доступно Или (Найти(Данные,"CAUSE-TXT: SWITCH CONGESTION") 			> 0);  // Сетевое оборудование перегружено (Switching equipment congestion)
		//	Доступно = Доступно Или (Найти(Данные,"CAUSE-TXT: INCOMPATIBLE DESTINATION") 	> 0);  // Несовместимый адресат (Incompatible destination)
		//	Доступно = Доступно Или (Найти(Данные,"CAUSE-TXT: NO ANSWER") 					> 0);  // Нет сигнализации от пользователя, нет ответа (User Alerted, No answer from user)
		//	Доступно = Доступно Или (Найти(Данные,"CAUSE-TXT: NOT DEFINED") 				> 0);  // Неопределенная ошибка (Cause not defined)
		//	Доступно = Доступно Или (Найти(Данные,"CAUSE-TXT: UNALLOCATED") 				> 0);  // Номер не найден (Номера не существует) (Unallocated or unassigned number)
		//	Доступно = Доступно Или (Найти(Данные,"CAUSE-TXT: NO USER RESPONSE") 			> 0);  // Нет ответа (No user responding)
		//	Доступно = Доступно Или (Найти(Данные,"CAUSE-TXT: INVALID NUMBER FORMAT") 		> 0);  // Неверный формат номера или неполный адрес (Invalid number format or incomplete address)
		//	Доступно = Доступно Или (Найти(Данные,"CAUSE-TXT: NETWORK OUT OF ORDER") 		> 0);  // Сеть вышла из строя (Network out of order)
		//	Доступно = Доступно Или (Найти(Данные,"CAUSE-TXT: INCOMING CALL BARRED") 		> 0);  // Входящие вызовы закрыты (Incoming calls barred)			
		//	Если Доступно Тогда
		//		ДатаЗакрытия 		= Дата(1,1,1,0,0,0);
		//		Тип 				= "Перечисления.ТипЗадачи.НепринятыйИсходящий";
		//		Исполнитель 		= "ПараметрыСеанса.ККЦКонтактЦентр";
		//		Комментарий 		= "Пропущеный автозвонок";
		//		ДатаПостановки 		= ЗначенияСервера.ТекущаяДатаСервер();
		//		ЗвонокИнициатор 	= ПолучиСигнатуруЗвонка();
		//		ДатаАктуальности 	= ДатаПостановки+600;
		//		ПисьмоИнициатор  	= СайтИнтернетЗаявкиАвтозвонка; 	
		//		РегистрыСведений_ЗадачиОбратныйЗвонок_Добавить(АбонентВнешний, ДатаЗакрытия, Тип, Исполнитель, Комментарий, ДатаПостановки, ЗвонокИнициатор, ДатаАктуальности, ПисьмоИнициатор, "iq_"+СигнатураИнтернетЗаявкиАвтозвонка);
		//	КонецЕсли;
		//	#КонецОбласти
		//	
		//Иначе
		//	//Обработка ситуации когда СайтИнтернетЗаявкиАвтозвонка ошибочно не заполнена
		//	// тогда также закрываем интернет-заявку, но только ту, которая выполняется автозвонком
		//	//(т.е. ночные задачи, перезваниваемые вручную не должны закрываться)
		//	//-----------------------------------------------------------------------
		//	ЗакрытьЗадачуАвтоЗвонка(ЭтаФорма.АбонентВнешний, ПолучиСигнатуруЗвонка());	
		//КонецЕсли;
		ЗакрытьЗадачуАвтоЗвонка(ЭтаФорма.АбонентВнешний, ПолучиСигнатуруЗвонка());
	КонецЕсли;
	
	Элементы.Дисплей01.Заголовок = "";
	Элементы.Дисплей02.Заголовок = "";
	Элементы.Дисплей03.Заголовок = "";
		
	КонсольСостояние 	= 0;
	КаналСистемный 		= "";
	АбонентВнешний		= "";
	
	к_ТелВнутрОП						= "";
	к_LinkedID							= "";
	КаналИнициаторЗадачиОбратногоЗвонка = "";
	
	Элементы.Дисплей03.Заголовок = "";
	
	СигнатураИнтернетЗаявкиАвтозвонка 		= "";
	СайтИнтернетЗаявкиАвтозвонка 			= "";
	СайтИнтернетЗаявкиНеАвтозвонка			= "";
	ДисплейТекстАвтозвонка 					= "";
	ДисплейИмяАвтозвонка 					= "";
	ДисплейМайлАвтозвонка 					= "";	
	Регион 									= "";
	НомерИНазначениеВнешнегоТелефонаЛуидор 	= "";
	
	ОбновлениеОтображения();
	
	//ОбработкаАвтозвонков
	//--------------------
	ВключитьВыключитьПодключениеОбработчикаОжидания(Истина);
КонецПроцедуры

&НаСервере
Процедура ЗвонокОбработатьВнешнийИсходящий()

	// Включение и настройка элементов дисплея
	//-----------------------------------------
	Элементы.Дисплей02.Заголовок = "Исходящий звонок на телефон абонента";

	// Сформируем строку дисплея с номером телефона и регионом звонка
	//--------------------------------------------------------------------
	АбонентВнешний 		= КонвертацияСервер.ТелефонВнешнийНормализовать(АбонентВнешний);
	РегСсылка 			= КонвертацияСервер.РегионПолучитьПоНомеруТелефона(АбонентВнешний);
	Регион				= СокрЛП(РегСсылка.Наименование);	
	Элементы.Дисплей01.Заголовок 	=  СокрЛП(ЭтаФорма.АбонентВнешний) + "   " + Регион;
	
	// Отобрази сайт, т.к. исходящий может быть по интернет-заявке, которая в свою очередь
	//может быть автозвонком или не автозвонком
	//------------------------------------------------------
	Если ЗначениеЗаполнено (СайтИнтернетЗаявкиАвтозвонка) Тогда
		Элементы.Дисплей03.Заголовок = СайтИнтернетЗаявкиАвтозвонка;
	ИначеЕсли ЗначениеЗаполнено (СайтИнтернетЗаявкиНеАвтозвонка) Тогда
		Элементы.Дисплей03.Заголовок = СайтИнтернетЗаявкиНеАвтозвонка;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗвонокОбработатьВнешнийВходящий()

// Сформируем ссылку на рекламный канал по которому поступил звонок
// Если ссылка получена, то обработаем вариант когда звонок поступил через подчиненный канал
//-------------------------------------------------------------------------------------------------
	ТелСсылка = КонвертацияСервер.ТелВнешнийПолучитьСсылку(КаналИнициатор);
	КодГорода = "";

	Если (ЗначениеЗаполнено(ТелСсылка)) Тогда
		ТелСсылка 								= ?(ЗначениеЗаполнено(ТелСсылка.Родитель),ТелСсылка.Родитель,ТелСсылка);
		КаналИнициатор 							= ТелСсылка;
		НомерИНазначениеВнешнегоТелефонаЛуидор 	= СокрЛП(ТелСсылка.Код) + "   " + СокрЛП(ТелСсылка.Назначение);
		Элементы.Дисплей02.Заголовок			= НомерИНазначениеВнешнегоТелефонаЛуидор;
	ИначеЕсли (ЗначениеЗаполнено(ЭтаФорма.КаналИнициатор)) Тогда
		Элементы.Дисплей02.Заголовок = СокрЛП(ЭтаФорма.КаналИнициатор) + "  неизвестный канал";
	Иначе
		Элементы.Дисплей02.Заголовок = "Канал поступления звонка не определен";
	КонецЕсли;
	
	Элементы.Дисплей03.Заголовок = "";

// Отображение номера абонента
//-------------------------------------------------------------------------------------------------
	Если (ЗначениеЗаполнено(АбонентВнешний)) Тогда
		ЭтаФорма.АбонентВнешний = КонвертацияСервер.ТелефонВнешнийНормализовать(ЭтаФорма.АбонентВнешний,КодГорода);
		
		
		//<Выбор сотрудника по умолчанию для обработки звонка (магистрального) контрагента>
	    ВыбратьСотрудника_НаСервере();
		Если ЭтаФорма.Объект.ОтветственныеЗаКонтрагента.Количество()>0 Тогда
			Элементы.Дисплей03.Заголовок = ЭтаФорма.Объект.ОтветственныеЗаКонтрагента[0].Контрагент;	
		КонецЕсли;
		//</Выбор сотрудника по умолчанию для обработки звонка (магистрального) контрагента>
		
		РегСсылка = КонвертацияСервер.РегионПолучитьПоНомеруТелефона(ЭтаФорма.АбонентВнешний);
		Регион = СокрЛП(РегСсылка.Наименование);
		Элементы.Дисплей01.Заголовок = СокрЛП(ЭтаФорма.АбонентВнешний)+ "  " + Регион;	
	Иначе
		Элементы.Дисплей01.Заголовок = "Номер и регион абонента не определены";
	КонецЕсли;

// Отображение кнопки вызова формы истории звонков
//-------------------------------------------------------------------------------------------------
	Доступно = ЗначениеЗаполнено(АбонентВнешний);
	Элементы.АбонентИстория.Видимость = Доступно;	
КонецПроцедуры

&НаСервере
Процедура ЗвонокОбработатьВнутренний()

// Сформируем главную строку дисплея
//-------------------------------------------------------------------------------------------------
	Если (ЭтаФорма.КонсольСостояние = 1) Тогда
		Темп = "Входящий внутренний звонок от " + СокрЛП(ЭтаФорма.АбонентВнешний);
		Элементы.Дисплей01.Заголовок = СокрЛП(Темп);
	Иначе
		Темп = "Исходящий звонок внутреннему абоненту " + СокрЛП(ЭтаФорма.АбонентВнешний);
		Элементы.Дисплей01.Заголовок = СокрЛП(Темп);
	КонецЕсли;

// Получим ссылку на Владельца телефона абонента
//-------------------------------------------------------------------------------------------------
	ТелСсылка = КонвертацияСервер.ТелВнутреннийПолучитьСсылку(ЭтаФорма.АбонентВнешний);
	ВладСсылка = Телефония.ВладелецПолучить(ТелСсылка);

	Если (ЗначениеЗаполнено(ВладСсылка)) Тогда
		Если (ВладСсылка.ЭтоГруппа = Истина) Тогда
			Темп = СокрЛП(ВладСсылка) + ", " + СокрЛП(ВладСсылка.ТочкаРазмещения);
			Элементы.Дисплей02.Заголовок = СокрЛП(Темп);
		Иначе
			Темп = СокрЛП(ВладСсылка) + ", " + СокрЛП(ВладСсылка.Должность) + ", " + СокрЛП(ВладСсылка.ТочкаРазмещения);
			Элементы.Дисплей02.Заголовок = СокрЛП(Темп);
		КонецЕсли;
	Иначе
		Элементы.Дисплей02.Заголовок = "Абонент отсутствует в телефонном справочнике";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция РегистрыСведений_ЗадачиОбратныйЗвонок_Добавить(Телефон, ДатаЗакрытия, Тип, Исполнитель, Комментарий, ДатаПостановки, ЗвонокИнициатор, ДатаАктуальности, ПисьмоИнициатор, Основание = "")
	// Обработка непринятого автозвонка - создание задачи на перезвон по пропущенному
	//-----------------------------------------------------------
	Если Тип = "Перечисления.ТипЗадачи.НепринятыйИсходящий" Тогда
		 Тип = Перечисления.ТипЗадачи.НепринятыйИсходящий;
	КонецЕсли;
	Если Исполнитель = "ПараметрыСеанса.ККЦКонтактЦентр" Тогда
		 Исполнитель = ПараметрыСеанса.ККЦКонтактЦентр;
	КонецЕсли;
	Рез = РегистрыСведений.ЗадачиОбратныйЗвонок.Добавить(Телефон, ДатаЗакрытия, Тип, Исполнитель, Комментарий, ДатаПостановки, ЗвонокИнициатор, ДатаАктуальности, ПисьмоИнициатор,,, Основание);
	Возврат Рез;
КонецФункции 

&НаСервере
Функция РегистрыСведений_ЗадачиОбратныйЗвонок_ДобавитьСЗаменой(Телефон, ДатаЗакрытия, Тип, Исполнитель, Комментарий, ДатаПостановки, ЗвонокИнициатор, ДатаАктуальности, ПисьмоИнициатор, Основание = "")
	//В отличие от РегистрыСведений_ЗадачиОбратныйЗвонок_Добавить() если находит открытую задачу, то не завершается,
	//а в этой открытой задаче меняет реквизиты, кроме измерений
	//-----------------------------------------------------------
	Если Тип = "Перечисления.ТипЗадачи.НепринятыйИсходящий" Тогда
		 Тип = Перечисления.ТипЗадачи.НепринятыйИсходящий;
	КонецЕсли;
	Если Исполнитель = "ПараметрыСеанса.ККЦКонтактЦентр" Тогда
		 Исполнитель = ПараметрыСеанса.ККЦКонтактЦентр;
	КонецЕсли;
	Рез = РегистрыСведений.ЗадачиОбратныйЗвонок.ДобавитьСЗаменой(Телефон, ДатаЗакрытия, Тип, Исполнитель, Комментарий, ДатаПостановки, ЗвонокИнициатор, ДатаАктуальности, ПисьмоИнициатор,,, Основание);
	Возврат Рез;
КонецФункции 

#Область Управление_звонками

&НаКлиенте
Процедура АбонентИстория(Команда)

// Откроем форму для показа истории звонков по внешнему абоненту
//-------------------------------------------------------------------------------------------------
	СтрПараметры = Новый Структура;
	СтрПараметры.Вставить("Канал",ЭтаФорма.КаналСистемный);
	СтрПараметры.Вставить("Телефон",ЭтаФорма.АбонентВнешний);
	ОткрытьФорму("Обработка.КонсольКонтактЦентраТест4.Форма.ФормаИсторииЗвонков",СтрПараметры,ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЗвонокЗавершить(Команда)
	КонтактЦентр.КомандаHangup(ЭтаФорма.КаналСистемный);
	ВнешнееСобытиеHangup();
КонецПроцедуры

&НаКлиенте
Процедура ЗвонокПеревести(Команда)

// Попросим пользователя ввести номер телефона для перевода звонка
//-------------------------------------------------------------------------------------------------
	СтрПодсказка = "Перевести звонок на номер";
	ТелНомер = "";

// Если телефонный номер введен
//-------------------------------------------------------------------------------------------------
	Если (ВвестиСтроку(ТелНомер,СтрПодсказка,11,Ложь) = Истина) Тогда
		Если (СокрЛП(Команда.Имя) = "ЗвонокAtxfer") Тогда
			Результат = КонтактЦентр.КомандаAtxfer(ЭтаФорма.КаналСистемный,ТелНомер);
			
			//<Кошелев; Эл. письмо>
			ЭтаФорма.к_ТелВнутрОП = ТелНомер;
			//</Кошелев>
			
		Иначе
			Результат = КонтактЦентр.КомандаBlindTransfer(ЭтаФорма.КаналСистемный,ТелНомер);
		КонецЕсли;

// Вывод сведений о результате выполнения перевода
//-------------------------------------------------------------------------------------------------
		ТекстСообщения = ?(Результат,"Перевод выполнен","Ошибка перевода звонка");
		ПоказатьПредупреждение(,ТекстСообщения,3);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПанельБыстрогоВызова(Элемент)

// Откроем форму панели быстрого вызова
//-------------------------------------------------------------------------------------------------
	СтрПараметры = Новый Структура;
	СтрПараметры.Вставить("Канал",ЭтаФорма.КаналСистемный);
	СтрПараметры.Вставить("Телефон",ЭтаФорма.АбонентВнешний);
	ОткрытьФорму("Обработка.КонсольКонтактЦентраТест4.Форма.ФормаБыстрогоВызова",СтрПараметры,ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ТелефоныВыбор(Элемент,ВыбраннаяСтрока,Поле,СтандартнаяОбработка)

// Если консоль находится в режиме ожидания, то выполним вызов выбранного номера
// Во всех остальных случаях (режим разговора) - выполним переадресацию в зависимости от команды
//-------------------------------------------------------------------------------------------------
	Доступно = (Поле.Имя = "ТелефоныAtxfer");
	Доступно = Доступно ИЛИ (Поле.Имя = "ТелефоныRedirect");
	Доступно = Доступно И (Элементы.Телефоны.ТекущиеДанные <> Неопределено);
	СтандартнаяОбработка = Ложь;

	Если (Доступно = Ложь) Тогда
		Возврат;
	КонецЕсли;

// Получим номер для переадресации
//-------------------------------------------------------------------------------------------------
	ТелНомер = ВРег(СокрЛП(Элементы.Телефоны.ТекущиеДанные.Redirect));
	
// Выполним команду
//-------------------------------------------------------------------------------------------------
	Если (ЭтаФорма.КонсольСостояние = 0) Тогда
		Результат = КонтактЦентр.КомандаOriginate(ТелНомер);
	ИначеЕсли (Поле.Имя = "ТелефоныAtxfer") Тогда
		Результат = КонтактЦентр.КомандаAtxfer(ЭтаФорма.КаналСистемный,ТелНомер);
		ЭтаФорма.к_ТелВнутрОП = ТелНомер;
	ИначеЕсли (Поле.Имя = "ТелефоныRedirect") Тогда
		Результат = КонтактЦентр.КомандаBlindTransfer(ЭтаФорма.КаналСистемный,ТелНомер);
		ЭтаФорма.к_ТелВнутрОП = ТелНомер;
	КонецЕсли;

// Выведем сообщение о результате
//-------------------------------------------------------------------------------------------------
	Если (Результат = Ложь) Тогда
		ПоказатьПредупреждение(,"Ошибка при наборе номера абонента",3);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)
	
		// обнули реквизиты формы
		//-----------------------------
		КонсольСостояние 	= 0;
		КаналСистемный 		= "";
		АбонентВнешний		= "";
		к_ТелВнутрОП		= "";
		к_LinkedID			= "";
		
		СигнатураИнтернетЗаявкиАвтозвонка 	= "";
		СайтИнтернетЗаявкиАвтозвонка		= "";
		СайтИнтернетЗаявкиНеАвтозвонка		= "";
		ДисплейТекстАвтозвонка 		   		= "";
		ДисплейИмяАвтозвонка 				= "";
		ДисплейМайлАвтозвонка				= "";
		
		Элементы.Дисплей01.Заголовок = "";
		Элементы.Дисплей02.Заголовок = "";
		Элементы.Дисплей03.Заголовок = "";
		
		Регион									= "";
		НомерИНазначениеВнешнегоТелефонаЛуидор  = "";
		
		//Переподключи компоненту
		//-----------------------
		КонтактЦентр.КомпонентаОтключить();
		КонтактЦентр.КомпонентаПодключить();
		
		ОбновлениеОтображения();
КонецПроцедуры

#Область Маршрутизация_по_расширенной_анкете 
&НаКлиенте
Процедура ПереключитьЗвонокПоРасширеннойАнкете(Команда)
	
		
	Парам = Новый Структура;
	Парам.Вставить("Телефон", 									АбонентВнешний);
	Парам.Вставить("КаналСистемный", 							КаналСистемный);
	
	Если ЗначениеЗаполнено(КаналИнициатор) Тогда
		Парам.Вставить("КаналИнициатор", КаналИнициатор);
	ИначеЕсли ЗначениеЗаполнено(КаналИнициаторЗадачиОбратногоЗвонка) Тогда
		Парам.Вставить("КаналИнициатор",КаналИнициаторЗадачиОбратногоЗвонка);
	КонецЕсли;
		
	Парам.Вставить("Сигнатура", 								ПолучиСигнатуруЗвонка());
	Парам.Вставить("Регион",									Регион);
	Парам.Вставить("НомерИНазначениеВнешнегоТелефонаЛуидор",	НомерИНазначениеВнешнегоТелефонаЛуидор);

	Если ЗначениеЗаполнено(СайтИнтернетЗаявкиАвтозвонка) Тогда
		Парам.Вставить("СайтИнтернетЗаявки",		СайтИнтернетЗаявкиАвтозвонка);
	ИначеЕсли ЗначениеЗаполнено(СайтИнтернетЗаявкиНеАвтозвонка) Тогда
		Парам.Вставить("СайтИнтернетЗаявки",		СайтИнтернетЗаявкиНеАвтозвонка);
	КонецЕсли;
	
	//Сформируй историю общения, т.к. она может не совпадать с историей текущей строки дин.списка
	//--------------------------------------------------------------------------------------------
	Окончание = ТекущаяДата();
	Начало = ДобавитьМесяц(Окончание, -2);
	СформируйИсториюОбщения(АбонентВнешний, Начало, Окончание, Ложь);

	Доступно = Истина;
	Доступно = Доступно И Объект.ИсторияЗвонков.Количество()>0;
	Если Доступно Тогда
		АдресИсторииОбщения = ВыгрузитьсИсториюОбщенияВоВремХран();		
	Иначе
		АдресИсторииОбщения = "";
	КонецЕсли;
	Парам.Вставить("ИсторияОбщения", АдресИсторииОбщения);
	
	ОткрытьФорму("Обработка.КонсольКонтактЦентраWebsoket_8085.Форма.ФормаРасширеннойАнкеты4", Парам, ЭтаФорма);

КонецПроцедуры
#КонецОбласти

&НаСервере
Функция ВыгрузитьсИсториюОбщенияВоВремХран();
	Адрес = ПоместитьВоВременноеХранилище(Объект.ИсторияЗвонков.Выгрузить());
	Возврат Адрес;
КонецФункции 

&НаКлиенте
Функция ПолучиСигнатуруЗвонка()
	
	Если Не ЗначениеЗаполнено(к_LinkedID) Тогда
		Возврат "";
	КонецЕсли;  
	
	Если СтрНайти(к_LinkedID, "#")>0 Тогда
		Возврат(к_LinkedID+"#000000001");
	Иначе
		Возврат("2#" + к_LinkedID+"#000000001"); 
	КонецЕсли
	
КонецФункции

&НаКлиенте
Процедура ОтправитьПисьмо_ПоставитьЗадачу(Команда)
	
	// Если КЦ перевело звонок с уведомлением на ОП, но никто из сотрудинков ОП его не принял
	// тогда напиши письмо этому сотруднику и поставь  ему задачу перезвонить
	
	ИдФонЗадания = Новый УникальныйИдентификатор();
	//ЭтаФорма.СписокИдФоновыхЗаданийОтправкиПисем.Добавить(ИдФонЗадания);

	ИмяАктивногоДинамичСписка = ЭтаФорма.ИмяАктивногоДинамичСписка;
	
	Сигнатура 		= "";
	ТелВнутренний 	= "";
	ТипЗадачи		= "";
	
	Доступно = ИмяАктивногоДинамичСписка <> "";
	Доступно = Доступно И  ЭтаФорма.Элементы[ЭтаФорма.ИмяАктивногоДинамичСписка].ТекущиеДанные <> Неопределено;
	Если  Доступно Тогда
		Если ИмяАктивногоДинамичСписка = "ЗадачиСписокЗвонки" Тогда
			Сигнатура 			= ЭтаФорма.Элементы[ИмяАктивногоДинамичСписка].ТекущиеДанные.ЗвонокИнициатор; 
			ТелВнутренний 		= ЭтаФорма.к_ТелВнутрОП;
			ТипЗадачи			= "Непринятый";
			АбонентВнешний		= ЭтаФорма.Элементы[ЭтаФорма.ИмяАктивногоДинамичСписка].ТекущиеДанные.Телефон;
		ИначеЕсли ИмяАктивногоДинамичСписка = "ЗадачиСписокПочта" Тогда
			Сигнатура 			= ЭтаФорма.Элементы[ИмяАктивногоДинамичСписка].ТекущиеДанные.ПисьмоИнициатор;
			ТелВнутренний 		= "";
			ТипЗадачи 			= "ПрочаяПочта";
			АбонентВнешний		= ЭтаФорма.Элементы[ЭтаФорма.ИмяАктивногоДинамичСписка].ТекущиеДанные.Телефон;
		ИначеЕсли ИмяАктивногоДинамичСписка = "ЗадачиСписокГАЗ" Тогда
			#Область Закрытие_ПочтовойЗадачиГАЗ_Почтовым_сообщением_менеджеру
			Сигнатура 		= ЭтаФорма.Элементы[ИмяАктивногоДинамичСписка].ТекущиеДанные.Сигнатура;   //сигнатура заявки ГАЗ
			ТелВнутренний 	= "";
			ТипЗадачи 		= "Исходящее почтовое сообщение менеджеру по заявке ГАЗ";
			АбонентВнешний	= ЭтаФорма.Элементы[ИмяАктивногоДинамичСписка].ТекущиеДанные.Почта;
			
			Парам = Новый Структура();
			Парам.Вставить("Сигнатура", 				Сигнатура);			// сигнатура текущего звонка (сотрудник КЦ сделал исходащий вызов на абонента, далее сделал перевод с уведомлением															// на сотрудника ОП, но он не принял вызов
			Парам.Вставить("АбонентВнешний",			АбонентВнешний); 	// номер телефона внешнего абонента
			Парам.Вставить("ТелВнутренний",				ЭтаФорма.ПоследнийНабранныйНомерВнутрАбонента);	// Внутренний телефон сотрудника ОП, который не принял вызов ,переведенный на него переводом с уведомлением оператором КЦ 
			Парам.Вставить("ТипЗадачи",					ТипЗадачи);
			Парам.Вставить("ИдентификаторФонЗадания",	 ИдФонЗадания);
			Парам.Вставить("От", 						"info@luidor.ru");					//адрес эл.почты отправителя (абсолютно любой адрес) 
			Парам.Вставить("Тема",						"ГАЗ-заявка. Почта клиента: "+АбонентВнешний);
			Парам.Вставить("Содержание",				"ГАЗ-заявка. Почта клиента: "+АбонентВнешний);
			Парам.Вставить("ОтправлятьФоновымЗаданием",	Истина);
			
			ДопПарам = Новый Структура();
			ДопПарам.Вставить("Ключ", "ЗадачиСписокГАЗ");
			НаЗакрытиеФормыПисьма = Новый ОписаниеОповещения("НаЗакрытиеФормыПисьма", ЭтаФорма, ДопПарам);
			ОткрытьФорму("ОбщаяФорма.ЭлПисьмо", Парам, ЭтаФорма.Элементы.ЗадачиСписокГАЗ, , , , НаЗакрытиеФормыПисьма, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
			#КонецОбласти
					
		КонецЕсли;
	КонецЕсли;
		
	//Если оказались здесь, значит отправка письма в следующих случаях:
	//	- с закладки почта
	//  - с закладки звонки
	//  - с закладки интернет-заявки
	//	- ни с какой закладки, прямо в момент разговора с абонентом
	Парам = Новый Структура();
	Парам.Вставить("Сигнатура", 				Сигнатура);			// сигнатура текущего звонка (сотрудник КЦ сделал исходащий вызов на абонента, далее сделал перевод с уведомлением
																	// на сотрудника ОП, но он не принял вызов
	Парам.Вставить("АбонентВнешний",			АбонентВнешний); 	// номер телефона внешнего абонента
	Парам.Вставить("ТелВнутренний",				ЭтаФорма.ПоследнийНабранныйНомерВнутрАбонента);	// Внутренний телефон сотрудника ОП, который не принял вызов ,переведенный на него переводом с уведомлением оператором КЦ 
	Парам.Вставить("ТипЗадачи",					ТипЗадачи);
	Парам.Вставить("ИдентификаторФонЗадания",	 ИдФонЗадания);
	Парам.Вставить("От", 						"info@luidor.ru");					//адрес эл.почты отправителя (абсолютно любой адрес) 
	Парам.Вставить("Тема",						"Перезвоните клиенту на номер: "+АбонентВнешний);
	Парам.Вставить("Содержание",				"Перезвоните клиенту на номер: "+АбонентВнешний);
	Парам.Вставить("ОтправлятьФоновымЗаданием",	Истина);

	ОткрытьФорму("ОбщаяФорма.ЭлПисьмо", Парам, ЭтаФорма);
	
КонецПроцедуры

#Область Закрытие_ПочтовойЗадачиГАЗ_Почтовым_сообщением_менеджеру
&НаКлиенте
Процедура НаЗакрытиеФормыПисьма(Парам1, Парам2) Экспорт
	ТекДанные = ЭтаФорма.Элементы.ЗадачиСписокГАЗ.ТекущиеДанные;
	
	Доступно = Истина;
	Доступно = Доступно И ТекДанные <> Неопределено;
	Доступно = Доступно И Парам1 = "ОтправленоПочтовоеСообщениеМенеджеруПоПочтовойЗадачеГАЗ";
	Если Доступно = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ЗакройПочтовуюЗадачуГАЗ(ТекДанные.Телефон, ТекДанные.Сигнатура);
	ЭтаФорма.Элементы.ЗадачиСписокГАЗ.Обновить();
КонецПроцедуры

&НаСервере
Процедура ЗакройПочтовуюЗадачуГАЗ(Телефон, Сигнатура)
	ТекДата = ТекущаяДата();
	РегистрыСведений.ЗадачиГАЗЗаявки.ЗакройЗадачуЗвонкаОткройЗадачуПроверки(Телефон, ТекДата, "", Сигнатура, ПараметрыСеанса.ТекущийПользователь);	
КонецПроцедуры
	
#КонецОбласти

#КонецОбласти

&НаСервере
Процедура ЗадачаПерезвонитьНаСервере(ТелНомер,Результат)

// Получим объект задачи
//-------------------------------------------------------------------------------------------------
	ТекЗапись = РегистрыСведений.ЗадачиОбратныйЗвонок.СоздатьМенеджерЗаписи();
	ТекЗапись.ДатаЗакрытия = Дата("00010101");
	ТекЗапись.Телефон = СокрЛП(ТелНомер);
	ТекЗапись.Прочитать();

// Если задача получена, то в зависимости от результата сформируем комментарий и дату актуальности
//-------------------------------------------------------------------------------------------------
	Если (ТекЗапись.Выбран()) Тогда
		Темп = СокрЛП(ТекЗапись.Комментарий);
		Темп = Темп + ?(ЗначениеЗаполнено(Темп),Символы.ПС,"");
		Темп = Темп + СокрЛП(Формат(ТекущаяДата(),"ДЛФ=DDT")) + ", ";
		Темп = Темп + ?(Результат,"Выполнен звонок абоненту","Ошибка при наборе номера абонента");

		ТекЗапись.ДатаАктуальности = ?(Результат,ТекущаяДата() + 300,ТекЗапись.ДатаАктуальности);
		ТекЗапись.Комментарий = СокрЛП(Темп);
		ТекЗапись.Записать();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗадачаОтменить1НаСервере(ТелНомер)

// Получим объект задачи
//-------------------------------------------------------------------------------------------------
	ТекЗапись = РегистрыСведений.ЗадачиОбратныйЗвонок.СоздатьМенеджерЗаписи();
	ТекЗапись.ДатаЗакрытия = Дата("00010101");
	ТекЗапись.Телефон = СокрЛП(ТелНомер);
	ТекЗапись.Прочитать();

// Если задача получена, то выполним ее принудительное закрытие
//-------------------------------------------------------------------------------------------------
	Если (ТекЗапись.Выбран()) Тогда
		Темп = СокрЛП(ТекЗапись.Комментарий);
		Темп = Темп + ?(ЗначениеЗаполнено(Темп),Символы.ПС,"");
		Темп = Темп + СокрЛП(Формат(ТекущаяДата(),"ДЛФ=DDT")) + ", задача закрыта вручную";

		ТекЗапись.Исполнитель = ПараметрыСеанса.ТекущийПользователь;
		ТекЗапись.ДатаЗакрытия = ТекущаяДата();
		ТекЗапись.Комментарий = СокрЛП(Темп);
		ТекЗапись.Записать();
	КонецЕсли;
КонецПроцедуры

#Область Задача_отменить
&НаКлиенте
Процедура ЗадачаОтменить(Команда)
	// Пометим задачу как принудительно закрытую
	
	//Общая часть - одинаковая для всех закладок
	//------------------------------------------	
	ИмяЭлемента = ЭтаФорма.ИмяАктивногоДинамичСписка;
	
	Если Элементы[ИмяЭлемента].ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Если Элементы[ИмяЭлемента].ТекущиеДанные.ДатаЗакрытия <> Дата("00010101") Тогда
		Возврат
	КонецЕсли;
	
		
	ДопПарамОбработчикаОповещения = Новый Структура("Телефон, ИмяЭлемента", Элементы[ИмяЭлемента].ТекущиеДанные.Телефон, ИмяЭлемента); 
	
	//Особая часть - уникальная для каждой закладки
	//---------------------------------------------
	Если ИмяЭлемента = "ЗадачиСписокЗвонки" Тогда
		СписокОтветов =  ПолучиСписокОтветовПричинРучогоЗакрытияЗадачи("ПРИЧИНЫ РУЧНОГО ЗАКРЫТИЯ ЗАДАЧ");	
		Если СписокОтветов.Количество()=0 Тогда
			ПоказатьПредупреждение(,"Не задан список причин ручного закрытия задач",3);
			Возврат
		КонецЕсли;	
	КонецЕсли;
	
	Если ИмяЭлемента = "ЗадачиСписокПочта" Тогда
		СписокОтветов =  ПолучиСписокОтветовПричинРучогоЗакрытияЗадачи("ПРИЧИНЫ РУЧНОГО ЗАКРЫТИЯ ПОЧТА");	
		Если СписокОтветов.Количество()=0 Тогда
			ПоказатьПредупреждение(,"Не задан список причин ручного закрытия задач",3);
			Возврат
		КонецЕсли;	
		ДопПарамОбработчикаОповещения.Вставить("АдресОтправителя", Элементы[ИмяЭлемента].ТекущиеДанные.АдресОтправителя);
		
		//Пометка на удаление почтовых сообщений>
		//---------------------------------------
		ДопПарамОбработчикаОповещения.Вставить("Сигнатура", Элементы[ИмяЭлемента].ТекущиеДанные.Сигнатура);
	КонецЕсли;
	
	Если ИмяЭлемента = "ЗадачиСписокГАЗ" Тогда
		СписокОтветов =  ПолучиСписокОтветовПричинРучогоЗакрытияЗадачи("ЗАДАЧИ ГАЗ: ПРИЧИНЫ РУЧНОГО ЗАКРЫТИЯ");	
		Если СписокОтветов.Количество()=0 Тогда
			ПоказатьПредупреждение(,"Не задан список причин ручного закрытия задач",3);
			Возврат
		КонецЕсли;	
		
		//Сигнатура заявки ГАЗ
		//---------------------
		ДопПарамОбработчикаОповещения.Вставить("Сигнатура", Элементы[ИмяЭлемента].ТекущиеДанные.Сигнатура);
	КонецЕсли;

	Если ИмяЭлемента = "ЗадачиСписокВебСервис" Тогда
		СписокОтветов =  ПолучиСписокОтветовПричинРучогоЗакрытияЗадачи("ПРИЧИНЫ РУЧНОГО ЗАКРЫТИЯ ИНТЕРНЕТ-ЗАЯВКИ");	
		Если СписокОтветов.Количество()=0 Тогда
			ПоказатьПредупреждение(,"Не задан список причин ручного закрытия задач",3);
			Возврат
		КонецЕсли;		
	КонецЕсли;
		
	//Общая часть - одинаковая для всех закладок
	//-----------------------------------------------------------------------------------------------------------
	Оп = Новый ОписаниеОповещения("ОбработкаОповещенияЗадачаОтменить", ЭтотОбъект, ДопПарамОбработчикаОповещения);
	ПоказатьВыборИзМеню(Оп, СписокОтветов, Команда);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучиСписокОтветовПричинРучогоЗакрытияЗадачи(ИмяШаблона = "ПРИЧИНЫ РУЧНОГО ЗАКРЫТИЯ ЗАДАЧ")
	
	СписЗнач = Новый СписокЗначений();
	
	ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ = списзнач;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	АнкетыВариантыОтветов.Ответ
	               |ИЗ
	               |	Справочник.Анкеты.ВариантыОтветов КАК АнкетыВариантыОтветов
	               |ГДЕ
	               |	АнкетыВариантыОтветов.Ссылка.Родитель.Наименование = &РодительНаименование
	               |	И АнкетыВариантыОтветов.Ссылка.Наименование = &Наименование";
	Запрос.УстановитьПараметр("РодительНаименование", "ПРОЧЕЕ");
	Запрос.УстановитьПараметр("Наименование", ИмяШаблона);
	
	РезультатЗапроса = ОбщегоНазначения.ВыполнитьЗапрос(Запрос);
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СписЗнач.Добавить(Выборка.Ответ, Выборка.Ответ);
	КонецЦикла;
	
	Возврат СписЗнач
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещенияЗадачаОтменить(ВыбЗначОтвет, ДопПараметры) Экспорт
	
	//Общая часть - одинаковая для всех закладок
	//------------------------------------------			
	Если ВыбЗначОтвет = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ДатаЗакрытия = ТекущаяДата();

	// Запиши анкету
	Успех = ЗаписатьВыбранныйОтвет_НаСервере(ДатаЗакрытия, ДопПараметры.Телефон);
	Если Не Успех Тогда	
		ПоказатьПредупреждение(, "Ошибка записи анкеты", 3);
	КонецЕсли;

	// Закрой задачу звонка или почты
	//-------------------------------------------------------------------------------------------------------------
	Доступно =  ДопПараметры.ИмяЭлемента = "ЗадачиСписокПочта";
	Доступно = Доступно ИЛИ ДопПараметры.ИмяЭлемента = "ЗадачиСписокЗвонки";
	Если Доступно Тогда
		Успех = УстановиПричинуЗакрытияЗадачи(ДопПараметры.Телефон, ДатаЗакрытия, ВыбЗначОтвет.Значение);
		Если Не Успех Тогда	
			ПоказатьПредупреждение(, "Ошибка закрытия задачи", 3);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ДопПараметры.ИмяЭлемента = "ЗадачиСписокГАЗ" Тогда
		Успех = ЗакройЗадачуГАЗСоздайПроверку(ДопПараметры.Телефон, ДатаЗакрытия, ВыбЗначОтвет.Значение, ДопПараметры.Сигнатура);
		Если Не Успех Тогда	
			ПоказатьПредупреждение(, "Ошибка закрытия задачи", 3);
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	
	// Закрой задачу интернет-заявки
	//-------------------------------------------------------------------------------------------------------------
	Доступно = ДопПараметры.ИмяЭлемента = "ЗадачиСписокВебСервис";
	Если Доступно Тогда
		Успех = УстановиПричинуЗакрытияЗадачиАвтозвонка(ДопПараметры.Телефон, ДатаЗакрытия, ВыбЗначОтвет.Значение);
		Если Не Успех Тогда	
			ПоказатьПредупреждение(, "Ошибка закрытия задачи", 3);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	//Особая часть - уникальная для каждой закладки
	//----------------------------------------------

	//Если работа в закладке Почта и выбрана причина ручного закрытия Спам, тогда добавь адрес отправителя в список спаммеров
	//--------------------------------------------------------------------------------------------------------------------------
	Доступно = ДопПараметры.ИмяЭлемента = "ЗадачиСписокПочта";
	Доступно = Доступно И ВыбЗначОтвет.Значение = ЭтаФорма.МоиНастройки_ПричинаРучногоЗакрытияРегистрирующаяСпаммера;
	Доступно = Доступно И ДопПараметры.Свойство("АдресОтправителя");
	Доступно = Доступно И ЗначениеЗаполнено(ДопПараметры.АдресОтправителя);
	Если Доступно Тогда
		Спаммера_Добавить_НаСервере(ДопПараметры.АдресОтправителя);
	КонецЕсли;
		
		
	//Общая часть - одинаковая для всех закладок
	//-------------------------------------------			
	// Обнови динамический список (убери закрытую задачу)
	Элементы[ДопПараметры.ИмяЭлемента].Обновить();
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьВыбранныйОтвет_НаСервере(ДатаАнкеты, ТелАбонента, СигнатураЗадачи = "")
	//Эапись в регистр сведений АнкетыРасширенные
	
	ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ = Ложь;
	
	Доступно = ТипЗнч(ДатаАнкеты) = Тип("Дата");
	Доступно = Доступно И ЗначениеЗаполнено(ДатаАнкеты);
	Доступно = Доступно И ТипЗнч(ТелАбонента) = Тип("Строка") ;
	Доступно = Доступно И ЗначениеЗаполнено(ТелАбонента);
	
	Если Не Доступно Тогда
		Возврат ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ;
	КонецЕсли;
	
	Возврат Истина;	
КонецФункции

&НаСервереБезКонтекста
Функция УстановиПричинуЗакрытияЗадачи(Телефон, Дата, ВыбЗнач)
	Возврат РегистрыСведений.ЗадачиОбратныйЗвонок.УстановиЗначениеРеквизитаИЗакройЗадачу(Телефон, ТекущаяДата(), "ПричинаЗакрытия",ВыбЗнач, ПараметрыСеанса.ТекущийПользователь); 
КонецФункции

&НаСервереБезКонтекста
Функция ЗакройЗадачуГАЗСоздайПроверку (Телефон, Дата, ВыбЗнач, СигнатураЗаявкиГАЗ = "")
	Результат = РегистрыСведений.ЗадачиГАЗЗаявки.ЗакройЗадачуЗвонкаОткройЗадачуПроверки(Телефон, Дата, ВыбЗнач, СигнатураЗаявкиГАЗ, ПараметрыСеанса.ТекущийПользователь);
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция УстановиПричинуЗакрытияЗадачиАвтозвонка(Телефон, Дата, ВыбЗнач)
	Возврат РегистрыСведений.ЗадачиИнтернетЗаявки.УстановиЗначениеРеквизитаИЗакройЗадачу(Телефон, ТекущаяДата(), "ПричинаЗакрытия",ВыбЗнач, ПараметрыСеанса.ТекущийПользователь); 
КонецФункции

&НаСервереБезКонтекста
Функция Спаммера_Добавить_НаСервере(АдресОтправителя)
	РегистрыСведений.ПисьмаСпаммеры.Добавить(АдресОтправителя);	
КонецФункции
#КонецОбласти

#Область Автозвонок
//<Кошелев_13102016; ОбработкаАвтозвонков>

&НаКлиенте
Процедура ВыполниИсходящийАвтоЗвонок()
	Доступно = ЭтаФорма.КонсольПауза = Ложь;
	Доступно = Доступно И ЭтаФорма.КонсольСостояние = 0; // звонок не выполняется
	Доступно = Доступно И ЭтаФорма.МоиНастройки_ОбрабатыватьАвтозвонки = Истина;

// Временное решение
// Разрешаем отрабатывать задачи по автозвонку только операторам ЕКЦ на Ларина
//-------------------------------------------------------------------------------------------------
	Доступно = Доступно И (СтрНайти("1387,5334,5319,5242,5241,5240,1391,1392", КонсольТелефон) > 0);

	Если Не Доступно Тогда
		Возврат
	КонецЕсли;

	ТелефонИСигнатураОткрытойЗадачи = ТелефонИСигнатураИнтернетЗаявки(КонсольТелефон);
	
	ТелефонОткрытойЗадачи = ТелефонИСигнатураОткрытойЗадачи.Телефон;
	Если ТелефонОткрытойЗадачи = "" Тогда
		Возврат
	КонецЕсли;
	
	СигнатураИнтернетЗаявкиАвтозвонка 	= ТелефонИСигнатураОткрытойЗадачи.Сигнатура;
	СайтИнтернетЗаявкиАвтозвонка  		= "";
	ДисплейТекстАвтозвонка 				= "";
	ДисплейИмяАвтозвонка 				= "";
	ДисплейМайлАвтозвонка 				= "";

	СайтИнтернетЗаявкиАвтозвонка	= ТелефонИСигнатураОткрытойЗадачи.Сайт;	
	ДисплейТекстАвтозвонка 			= СвойствоАвтозвонка(ТелефонИСигнатураОткрытойЗадачи.Сигнатура, "TEXT");
	ДисплейИмяАвтозвонка 			= СвойствоАвтозвонка(ТелефонИСигнатураОткрытойЗадачи.Сигнатура, "name");
	ДисплейМайлАвтозвонка 			= СвойствоАвтозвонка(ТелефонИСигнатураОткрытойЗадачи.Сигнатура, "email");
	
	Выполнено = КонтактЦентр.КомандаOriginate(ТелефонОткрытойЗадачи, "iq_"+СигнатураИнтернетЗаявкиАвтозвонка);	
КонецПроцедуры


#Область Поиск_свойств_интернет_заявки
&НаСервереБезКонтекста
Функция СвойствоАвтозвонка(Сигнатура, ИмяСвойства = "TEXT")
	//Возвращает значение свойства интернет-заявки с заданной сигнатурой и именем, по которой совершается автозвонок
	//Параметры:
	//    Сигнатура - сигнатура интернет-заявки
	//	  ИмяСвойства - имя свойства интернет-заявки
	
	ЗначениеПоУмолчанию = "";
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИнтернетЗаявкиСвойства.Значение.ПолнаяСтрока КАК Значение
	|ИЗ
	|	РегистрСведений.ИнтернетЗаявкиСвойства КАК ИнтернетЗаявкиСвойства
	|ГДЕ
	|	ИнтернетЗаявкиСвойства.Сигнатура = &Сигнатура
	|	И ИнтернетЗаявкиСвойства.Свойство.Наименование = &Свойство";
	Запрос.УстановитьПараметр("Сигнатура", Сигнатура);
	Запрос.УстановитьПараметр("Свойство",  ИмяСвойства);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Результат = Выборка.Значение;
	Возврат Результат;
КонецФункции
#КонецОбласти

&НаСервере
Процедура ЗакрытьЗадачуАвтоЗвонка(Телефон, ЗвонокЗакрытия = "")
	ТекДата = ТекущаяДата();
	Исполнитель = ПараметрыСеанса.ККЦТелефон.Код;
	РегистрыСведений.ЗадачиИнтернетЗаявки.ЗакройОткрытуюЗадачу(Телефон, ТекДата, Истина,Исполнитель, ЗвонокЗакрытия);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТелефонИСигнатураИнтернетЗаявки(КонсольТелефон)	
	//Возвращает структуру в которой поле "Телефон" содержит телефон абонента, 
	//поле "Сигнатура" содержит сигнатуру интернет-заявки
	//поле "Сайт" содержит сайт
	
	Возврат КонтактЦентрСервер.ПоставьЗадачуСвободномуОператору(КонсольТелефон);	
КонецФункции

&НаКлиенте
Процедура ВключитьВыключитьПодключениеОбработчикаОжидания(Включить)
	Если Включить Тогда
		Доступно = КонсольПауза = Ложь;
		Доступно = Доступно И КонсольСостояние = 0; // звонок не выполняется
		Доступно = Доступно И МоиНастройки_ОбрабатыватьАвтозвонки = Истина;
		Если Не Доступно Тогда
			Возврат
		КонецЕсли;

		ПодключитьОбработчикОжидания("ВыполниИсходящийАвтоЗвонок", 10, Ложь)	
	Иначе
		ОтключитьОбработчикОжидания("ВыполниИсходящийАвтоЗвонок")		
	КонецЕсли;
	
КонецПроцедуры
//</Кошелев_13102016; ОбработкаАвтозвонков>
#КонецОбласти

#Область ВебСервис

&НаКлиенте
Функция Позвонить(Команда)	
// Выполняет звонок на телефонный номер абонента задачи

// Если не выбрана строка динамического списка, значит не знаем телефон, на который нужно звонить
//-------------------------------------------------------------------------------------------------
	Если (Элементы[ЭтаФорма.ИмяАктивногоДинамичСписка].ТекущиеДанные = Неопределено) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеЗадачи = Элементы[ЭтаФорма.ИмяАктивногоДинамичСписка].ТекущиеДанные;
	SYSAGR = "";

	Если 	ЭтаФорма.ИмяАктивногоДинамичСписка = "ЗадачиСписокЗвонки" Тогда	
		//Основание звонка - интернет-звонка
		//-----------------------------------
		Доступно = Истина;
		Доступно = Доступно И ЗначениеЗаполнено(ДанныеЗадачи.Основание);
		Доступно = Доступно И Лев(ДанныеЗадачи.Основание, 2)="iq";
		Если Доступно = Истина Тогда
			СайтИнтернетЗаявкиНеАвтозвонка = ДанныеЗадачи.ПисьмоИнициатор;
			SYSAGR = ДанныеЗадачи.Основание;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеЗадачи.Канал) Тогда
			ТелВнешнийСсылка = ТелВнешнийСсылкаПоНомеру(ДанныеЗадачи.Канал);
			Если ТелВнешнийСсылка <> ПредопределенноеЗначение("Справочник.ТелВнешние.ПустаяСсылка") Тогда
				КаналИнициаторЗадачиОбратногоЗвонка = ТелВнешнийСсылка;
			КонецЕсли;
		КонецЕсли;	
	
		Результат = КонтактЦентр.КомандаOriginate(ДанныеЗадачи.Телефон, SYSAGR);
		
		ЗадачаПерезвонитьНаСервере(ДанныеЗадачи.Телефон,Результат);
		 Элементы[ЭтаФорма.ИмяАктивногоДинамичСписка].Обновить();
		 Возврат Неопределено;
	 КонецЕсли;
	 
	Если 	ЭтаФорма.ИмяАктивногоДинамичСписка = "ЗадачиСписокПочта" Тогда
	
		//Основание звонка - почтовое сообщение
		//--------------------------------------
   		Если ЭтаФорма.ИмяАктивногоДинамичСписка = "ЗадачиСписокПочта" Тогда
			SYSAGR = "ml_"+	ДанныеЗадачи.Сигнатура;
		КонецЕсли;
			
		Результат = КонтактЦентр.КомандаOriginate(ДанныеЗадачи.Телефон, SYSAGR);
		
		ЗадачаПерезвонитьНаСервере(ДанныеЗадачи.Телефон,Результат);
		Элементы[ЭтаФорма.ИмяАктивногоДинамичСписка].Обновить();
		Возврат Неопределено;
	 КонецЕсли;
	 
	Если  ИмяАктивногоДинамичСписка = "ЗадачиСписокВебСервис" Тогда
		Если Не ЗадачаВебСервисЗаблокироватьНаСервере(ДанныеЗадачи.Телефон) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		//Если оказались здесь, значит задача заблокирована для исполнения текущим исполнителем, можно звонить
		//Результат = КомандаOriginate(ДанныеЗадачи.Телефон, ДанныеЗадачи.Сигнатура);
		SYSAGR="iq_"  + ДанныеЗадачи.Сигнатура;
		Результат = КонтактЦентр.КомандаOriginate(ДанныеЗадачи.Телефон, SYSAGR);
		
		//Сохраняем сайт интернет-заявки-не-автозвонка
		СайтИнтернетЗаявкиНеАвтозвонка = ДанныеЗадачи.Инициатор;
		
		ЗадачаВебСервисПерезвонитьНаСервере(ДанныеЗадачи.Телефон, Результат);
		Элементы[ЭтаФорма.ИмяАктивногоДинамичСписка].Обновить();
	КонецЕсли;
	
	Если ИмяАктивногоДинамичСписка = "ЗадачиСписокГАЗ" Тогда
		SYSAGR = ДанныеЗадачи.Сигнатура;
		
		Результат = КонтактЦентр.КомандаOriginate(ДанныеЗадачи.Телефон, SYSAGR);

		ЗадачаГазЗаявкаПерезвонитьНаСервере(ДанныеЗадачи.Телефон);
		Элементы[ЭтаФорма.ИмяАктивногоДинамичСписка].Обновить();
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция ТелВнешнийСсылкаПоНомеру(Номер)
	Результат = Справочники.ТелВнешние.ПустаяСсылка();
	
	Доступно = Истина;
	Доступно = Доступно И ТипЗнч(Номер) = Тип("Строка");
	Доступно = Доступно И СтрДлина(Номер)>0;
	
	Если Не Доступно Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат = Справочники.ТелВнешние.НайтиПоКоду(Номер);
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция  ЗадачаВебСервисЗаблокироватьНаСервере(ТелНомер)
	
		ЗначениеПоУмолчанию = Ложь;
	
		ТекЗапись = РегистрыСведений.ЗадачиИнтернетЗаявки.СоздатьМенеджерЗаписи();
		ТекЗапись.ДатаЗакрытия = Дата("00010101");
		ТекЗапись.Телефон = ТелНомер;
		ТекЗапись.Прочитать();
		
		Если Не ТекЗапись.Выбран() Тогда
			//Возврат "Запись не выбрана"
			Возврат ЗначениеПоУмолчанию;
		КонецЕсли;
		
		// Если задача заблокирована для исполнения другим пользователем, выходим
		Если ТекЗапись.Заблокирована И ТекЗапись.Исполнитель <> ПараметрыСеанса.ККЦТелефон.Код Тогда
			//Возврат "Заблокирована другим оператором:"+ТекЗапись.Исполнитель;
			Возврат ЗначениеПоУмолчанию;
		КонецЕсли;
		
		// Если задача уже заблокирована текущим пользвателем, тогда функция успешно выполнена
		Если ТекЗапись.Заблокирована И ТекЗапись.Исполнитель = ПараметрыСеанса.ККЦТелефон.Код Тогда
			Возврат Истина;
		КонецЕсли;
		
		//Если оказались здесь, значит запись не заблокирована, блокируем
		ТекЗапись.Заблокирована = Истина;
		ТекЗапись.Исполнитель = ПараметрыСеанса.ККЦТелефон.Код;
			
		Попытка
			ТекЗапись.Записать();
		Исключение
			Данные = "ТелНомер  = "+ТелНомер+"; Исполнитель = "+ТекЗапись.Исполнитель; 
			Комментарий = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("ЗадачаВебСервисЗаблокироватьНаСервере", УровеньЖурналаРегистрации.Ошибка, Метаданные.РегистрыСведений.ЗадачиИнтернетЗаявки, Данные, Комментарий);
			//Возврат "Ошибка записи"
			Возврат ЗначениеПоУмолчанию;		
		КонецПопытки;
		
		Возврат Истина;
КонецФункции
	
&НаСервереБезКонтекста
Процедура  ЗадачаВебСервисПерезвонитьНаСервере(ТелНомер,Результат)	
	
	//02.08.2017, =>, Не нужно автоматически закрывать задачу, т.к. могли не дозвониться или было занято
	//РегистрыСведений.ЗадачиИнтернетЗаявки.ЗакройОткрытуюЗадачу(ТелНомер, ТекущаяДата(), ПараметрыСеанса.ККЦТелефон.Код);		
	//=>
	
	// Получим объект задачи
	//----------------------------------------------------------------------------------------------
	ТекЗапись = РегистрыСведений.ЗадачиИнтернетЗаявки.СоздатьМенеджерЗаписи();
	ТекЗапись.ДатаЗакрытия = Дата("00010101");
	ТекЗапись.Телефон = СокрЛП(ТелНомер);
	ТекЗапись.Прочитать();
		
	// Если задача получена, то в зависимости от результата сформируем комментарий и дату актуальности
	//-------------------------------------------------------------------------------------------------
	Если (ТекЗапись.Выбран()) Тогда
			ТекДата = ТекущаяДата();
			
			Темп = СокрЛП(ТекЗапись.Комментарий);
			Темп = Темп + ?(ЗначениеЗаполнено(Темп),Символы.ПС,"");
			Темп = Темп + СокрЛП(Формат(ТекДата,"ДЛФ=DDT")) + ", ";
			Темп = Темп + "Звонок абоненту";
			
			Если Не ЗначениеЗаполнено(ТекЗапись.ДатаПервогоПерезвона) Тогда 
				ТекЗапись.ДатаПервогоПерезвона = ТекДата;
			КонецЕсли;
			
			//ТекЗапись.ДатаАктуальности = ?(Результат,ТекДата + 300,ТекЗапись.ДатаАктуальности);  // нет такого реквизита
			ТекЗапись.Комментарий = СокрЛП(Темп);
			ТекЗапись.Записать();
	КонецЕсли;
			
КонецПроцедуры

&НаСервереБезКонтекста
Процедура  ЗадачаГазЗаявкаПерезвонитьНаСервере(ТелНомер)	
		
	// Получим объект задачи
	//----------------------------------------------------------------------------------------------
	ТекЗапись = РегистрыСведений.ЗадачиГАЗЗаявки.СоздатьМенеджерЗаписи();
	ТекЗапись.ДатаЗакрытия = Дата("00010101");
	ТекЗапись.Телефон = СокрЛП(ТелНомер);
	ТекЗапись.Прочитать();
		
	// Если задача получена, то в зависимости от результата сформируем комментарий и дату первого перезвона
	//-------------------------------------------------------------------------------------------------
	Если (ТекЗапись.Выбран()) Тогда
			ТекДата = ТекущаяДата();
			
			Темп = СокрЛП(ТекЗапись.Комментарий);
			Темп = Темп + ?(ЗначениеЗаполнено(Темп),Символы.ПС,"");
			Темп = Темп + СокрЛП(Формат(ТекДата,"ДЛФ=DDT")) + ", ";
			Темп = Темп + "Звонок абоненту";
			
			Если Не ЗначениеЗаполнено(ТекЗапись.ДатаПервогоПерезвона) Тогда 
				ТекЗапись.ДатаПервогоПерезвона = ТекДата;
			КонецЕсли;
			
			ТекЗапись.Комментарий = СокрЛП(Темп);
			ТекЗапись.Записать();
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ПанельСтраницПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ЗадачаКомментарий="";
	
	//Очистить кэш вопросов - ответов
	//	ЭтаФорма.ТаблицаВопросОтвет.Очистить();

	//Общая часть
	//-----------	
	ИмяАктивногоДинамичСписка = "";
	
	Если 	ТекущаяСтраница.Имя = "Звонки" 
		Или ТекущаяСтраница.Имя = "Почта" 
		Или ТекущаяСтраница.Имя = "ВебСервис" 
		Или ТекущаяСтраница.Имя = "ГАЗ"
	Тогда
		Элементы.Позвонить.Доступность = Истина;
		Элементы.ИзменитьНапоминаниеПерезвонить.Доступность = Истина;
	Иначе
		Элементы.Позвонить.Доступность = Ложь;
		Элементы.ИзменитьНапоминаниеПерезвонить.Доступность = Ложь;
	КонецЕсли;

	Если ТекущаяСтраница.Имя = "Звонки" Тогда
		ИмяАктивногоДинамичСписка 	= "ЗадачиСписокЗвонки";	
		ТекТаблицаФормы 			= Элементы.ЗадачиСписокЗвонки;	
		ЗадачиСписокЗвонкиПриАктивизацииСтроки(ТекТаблицаФормы);
		
	ИначеЕсли ТекущаяСтраница.Имя = "Почта" Тогда
		ИмяАктивногоДинамичСписка 	= "ЗадачиСписокПочта";	
		
	ИначеЕсли ТекущаяСтраница.Имя = "ГАЗ" Тогда
		ИмяАктивногоДинамичСписка 	= "ЗадачиСписокГАЗ";	
		ТекТаблицаФормы 			= Элементы.ЗадачиСписокГАЗ;	
		ЗадачиСписокГАЗПриАктивизацииСтроки(ТекТаблицаФормы);	
		
	ИначеЕсли ТекущаяСтраница.Имя = "ВебСервис" Тогда
		ИмяАктивногоДинамичСписка 	= "ЗадачиСписокВебСервис";
		ТекТаблицаФормы			 	= Элементы.ЗадачиСписокВебСервис;	
		ВэбСервисПриАктивизацииСтроки(ТекТаблицаФормы)
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВэбСервисПриАктивизацииСтроки(Элемент)
	
	//Очистить кэш вопросов - ответов
	//---------------------------------------------------
	//ЭтаФорма.ТаблицаВопросОтвет.Очистить();
	
	ИмяТекСтраницы = ЭтаФорма.Элементы.ПанельСтраниц.ТекущаяСтраница.Имя;
	ИмяЭлемента = "ЗадачиСписок"+ИмяТекСтраницы;
	Если (Элементы[ИмяЭлемента].ТекущиеДанные = Неопределено) Тогда
		Возврат
	КонецЕсли;
	
	ТелНомер = Элементы[ИмяЭлемента].ТекущиеДанные.Телефон;
	
	//Покажи историю общения
	//------------------------------
	//ПокажиИсториюОбщения(ТелНомер);

	Окончание = ТекущаяДата();
	Начало = ДобавитьМесяц(Окончание, -2);
	СформируйИсториюОбщения(СокрЛП(ТелНомер), Начало, Окончание, Ложь);
	
	//Покажи комментарий в отдельном поле
	//------------------------------------------------------------------------------------------------------
	ЭтаФорма.ЗадачаКомментарий = Элементы[ИмяЭлемента].ТекущиеДанные.Комментарий; 
	
	// Загрузим на форму данные анкеты
	//------------------------------------------------------------------------------------------------------
	//ЗаполниТаблицуВопросовТребующихВводОтветов(ИмяЭлемента, Элементы[ИмяЭлемента].ТекущиеДанные.Телефон);	
КонецПроцедуры

&НаСервере
Процедура СформируйИсториюОбщения(Телефон, Начало, Окончание, Фоном = Истина)
	
	Если Не МоиНастройки_ПоказыватьИсториюЗвонков Тогда
		Возврат;
	КонецЕсли;
			
	//Если история по этому номеру уже отображается
	//---------------------------------------------
	Доступно = Истина;
	Доступно = Доступно И Объект.ИсторияЗвонков.Количество()>0;
	Доступно = Доступно И Объект.ИсторияЗвонков[0].Телефон = Телефон;
	
	Если Доступно Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ИсторияЗвонков.Очистить();
	
	Если Фоном = Ложь Тогда
		ТЗ = КонсольКонтактЦентраСервер.СформируйИсториюОбщения(Телефон, Начало, Окончание);
		Если ТЗ.Количество()>0 Тогда
			Объект.ИсторияЗвонков.Загрузить(ТЗ);
		КонецЕсли;	
	//В разработке...	
	Иначе
		Парам = Новый Структура();
		Парам.Вставить("Телефон", 			Телефон);
		Парам.Вставить("Начало", 			Начало);
		Парам.Вставить("Окончание",			Окончание);
		Парам.Вставить("ИдФоновогоЗадания", Телефон+"_"+Новый УникальныйИдентификатор());
		ФоновыеЗадания.Выполнить("КонсольКонтактЦентраСервер.СформируйИсториюОбщения", Парам);
	КонецЕсли;	
КонецПроцедуры

#Область Изменить_напоминание_перезвонить

&НаКлиенте
Процедура ИзменитьНапоминаниеПерезвонить(Команда)
	
	//Признак выполняющегося автозвонка
	//---------------------------------
	Доступно = Истина;
	Доступно = Доступно И ЗначениеЗаполнено(АбонентВнешний);
	Доступно = Доступно И ЗначениеЗаполнено(к_LinkedID);
	Доступно = Доступно И СтрДлина(СайтИнтернетЗаявкиАвтозвонка)>0;	
	Доступно = Доступно И СтрДлина(СигнатураИнтернетЗаявкиАвтозвонка)>0;
	Если Доступно = Истина Тогда
		
		ДатаПостановки = ЗначенияСервера.ТекущаяДатаСервер();
		
		ДопПараметры = Новый Структура();
		ДопПараметры.Вставить("АбонентВнешний",		АбонентВнешний);
		ДопПараметры.Вставить("ДатаЗакрытия", 		Дата(1,1,1,0,0,0));
		ДопПараметры.Вставить("Тип",				"Перечисления.ТипЗадачи.НепринятыйИсходящий");
		ДопПараметры.Вставить("Исполнитель",		"ПараметрыСеанса.ККЦКонтактЦентр");
		ДопПараметры.Вставить("Комментарий",		"Просьба перезвонить по автозвонку");
		ДопПараметры.Вставить("ДатаПостановки",		ДатаПостановки); // переопределится на дату введенную оператором
		ДопПараметры.Вставить("ЗвонокИнициатор",	ПолучиСигнатуруЗвонка());
		ДопПараметры.Вставить("ДатаАктуальности",	ДатаПостановки+600);
		ДопПараметры.Вставить("ПисьмоИнициатор",	СайтИнтернетЗаявкиАвтозвонка);
		ДопПараметры.Вставить("Основание",			"iq_"+СигнатураИнтернетЗаявкиАвтозвонка);
		
		Оп = Новый ОписаниеОповещения("ОбработчикОповещения_ИсправьНапоминаниеПерезвонитьВоВремяЗвонка", ЭтотОбъект, ДопПараметры);
		ВыбЗнач = ТекущаяДата();
		ПоказатьВводЗначения(Оп, ВыбЗнач, "Когда перезвонить:", Тип("Дата"));
		
	    Возврат;
	КонецЕсли;
		
	ТекДанные = ЭтаФорма.Элементы[ЭтаФорма.ИмяАктивногоДинамичСписка].ТекущиеДанные;	
	Доступно = ТекДанные <> Неопределено;	
	Если Не Доступно Тогда
		Возврат
	КонецЕсли;
	
	ДопПараметры = Новый Структура("ИмяАктивногоДинамичСписка", ЭтаФорма.ИмяАктивногоДинамичСписка);
	Оп = Новый ОписаниеОповещения("ОбработчикОповещения_ИсправьНапоминаниеПерезвонить", ЭтотОбъект, ДопПараметры);
	ВыбЗнач = ТекущаяДата();
	ПоказатьВводЗначения(Оп, ВыбЗнач, "Когда перезвонить:", Тип("Дата"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_ИсправьНапоминаниеПерезвонить(ВыбЗнач, ДопПараметры) Экспорт
	 
	Доступно = ТипЗнч(ВыбЗнач) = Тип("Дата");
	Доступно = Доступно И ЗначениеЗаполнено(ВыбЗнач);
	Доступно = Доступно И ТипЗнч(ДопПараметры) = Тип("Структура");
	Доступно = Доступно И ДопПараметры <> Неопределено;
	
	ИмяАктивногоСписка =  "";
	ДопПараметры.Свойство("ИмяАктивногоДинамичСписка", ИмяАктивногоСписка);
	
	Доступно = Доступно И ИмяАктивногоСписка <> Неопределено;
	Доступно = Доступно И ЗначениеЗаполнено(ИмяАктивногоСписка);
	
	Если Не Доступно Тогда
		Возврат
	КонецЕсли;
	
	СтароеЗначениеРеквизита = ЭтаФорма.Элементы[ИмяАктивногоДинамичСписка].ТекущиеДанные.НапоминаниеПерезвонить;

	Если ИмяАктивногоСписка = "ЗадачиСписокЗвонки" Или ИмяАктивногоСписка = "ЗадачиСписокПочта" Тогда
		Телефон = ЭтаФорма.Элементы[ИмяАктивногоСписка].ТекущиеДанные.Телефон;
		Успех = ИзмениЗначениеРеквизитаЗадачиОбратныйЗвонок(Телефон, "НапоминаниеПерезвонить",ВыбЗнач);	
		Если Успех Тогда
			ЭтаФорма.Элементы[ИмяАктивногоСписка].Обновить();
		Иначе
			ПоказатьПредупреждение(, "Не удалось изменить реквизит", 3);
		КонецЕсли;
	ИначеЕсли ИмяАктивногоСписка = "ЗадачиСписокГАЗ" Тогда
		Телефон = ЭтаФорма.Элементы[ИмяАктивногоСписка].ТекущиеДанные.Телефон;
		Успех = ИзмениЗначениеРеквизитаЗадачиГАЗ(Телефон, "НапоминаниеПерезвонить",ВыбЗнач);	
		Если Успех Тогда
			ЭтаФорма.Элементы[ИмяАктивногоСписка].Обновить();
		Иначе
			ПоказатьПредупреждение(, "Не удалось изменить реквизит", 3);
		КонецЕсли;
	ИначеЕсли   ИмяАктивногоСписка = "ЗадачиСписокВебСервис" Тогда
		Телефон = ЭтаФорма.Элементы[ИмяАктивногоСписка].ТекущиеДанные.Телефон;
		Успех = ИзмениЗначениеРеквизитаЗадачиИнтернетЗаявки(Телефон, "НапоминаниеПерезвонить",ВыбЗнач);
		Если Успех Тогда
			ЭтаФорма.Элементы[ИмяАктивногоСписка].Обновить();
		Иначе
			ПоказатьПредупреждение(, "Не удалось изменить реквизит", 3);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_ИсправьНапоминаниеПерезвонитьВоВремяЗвонка(ВыбЗнач, ДопПараметры) Экспорт
	 
	Доступно = ТипЗнч(ВыбЗнач) = Тип("Дата");
	Доступно = Доступно И ЗначениеЗаполнено(ВыбЗнач);
	Доступно = Доступно И ТипЗнч(ДопПараметры) = Тип("Структура");
	Доступно = Доступно И ДопПараметры.Свойство("АбонентВнешний");
	
	Если Доступно = Ложь Тогда
		Возврат
	КонецЕсли;
	
	Рез = РегистрыСведений_ЗадачиОбратныйЗвонок_Добавить(ДопПараметры.АбонентВнешний, ДопПараметры.ДатаЗакрытия, ДопПараметры.Тип, ДопПараметры.Исполнитель, ДопПараметры.Комментарий, ВыбЗнач, ДопПараметры.ЗвонокИнициатор, ВыбЗнач+600, ДопПараметры.ПисьмоИнициатор, ДопПараметры.Основание);
	Если Рез = Ложь Тогда
		
		Рез = РегистрыСведений_ЗадачиОбратныйЗвонок_ДобавитьСЗаменой(ДопПараметры.АбонентВнешний, ДопПараметры.ДатаЗакрытия, ДопПараметры.Тип, ДопПараметры.Исполнитель, ДопПараметры.Комментарий, ВыбЗнач, ДопПараметры.ЗвонокИнициатор, ВыбЗнач+600, ДопПараметры.ПисьмоИнициатор, ДопПараметры.Основание);
		Если Рез = Ложь Тогда
			Сообщить("Ошибка создания задачи обратного звонка во время активного автозвонка");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


&НаСервере
Функция ИзмениЗначениеРеквизитаЗадачиОбратныйЗвонок(Телефон, ИмяРеквизита, ЗначениеРеквизита)	
	Возврат РегистрыСведений.ЗадачиОбратныйЗвонок.УстановиЗначениеРеквизита(Телефон, ИмяРеквизита, ЗначениеРеквизита);
КонецФункции

&НаСервере
Функция ИзмениЗначениеРеквизитаЗадачиИнтернетЗаявки(Телефон, ИмяРеквизита, ЗначениеРеквизита)	
	Возврат РегистрыСведений.ЗадачиИнтернетЗаявки.УстановиЗначениеРеквизита(Телефон, ИмяРеквизита, ЗначениеРеквизита);
КонецФункции

&НаСервере
Функция ИзмениЗначениеРеквизитаЗадачиГАЗ(Телефон, ИмяРеквизита, ЗначениеРеквизита)	
	Возврат РегистрыСведений.ЗадачиГАЗЗаявки.УстановиЗначениеРеквизита(Телефон, ИмяРеквизита, ЗначениеРеквизита);
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ОбновитьДинСписки(Команда)
	ЭтаФорма.Элементы[ЭтаФорма.ИмяАктивногоДинамичСписка].Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаИстория1Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.Сигнатура) Тогда
		Возврат
	КонецЕсли;
	
	Парам = Новый Структура();
	Парам.Вставить("Сигнатура", Элемент.ТекущиеДанные.Сигнатура);

	
	Если Элемент.ТекущиеДанные.ЭтоЗвонок Тогда
		Если Элемент.ТекущиеДанные.ЭтоВходящий Тогда
			ИмяОткрываемойФормы = "РегистрСведений.Звонки.Форма.ФормаВходящегоЧтение";
		Иначе
			ИмяОткрываемойФормы = "РегистрСведений.Звонки.Форма.ФормаИсходящегоЧтение";
		КонецЕсли;
		ОткрытьФорму(ИмяОткрываемойФормы, Парам);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	//Для отправки письма сотруднику, которому последний раз переводили звонок
	//----------------------------------------------------------------------------
	Доступно = ИмяСобытия = ПоследнийНабранныйНомерВнутрАбонента;
	Доступно  = Доступно И СтрДлина(Параметр)=4;
	Если Не Доступно Тогда
		ЭтаФорма.к_ТелВнутрОП = Параметр;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Обратный_звонок

&НаСервереБезКонтекста
Функция ПолучитьКонтактЦентрТекущегоПользователя()
	
	КЦ = Справочники.КонтактЦентры.ПустаяСсылка();	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КонтактЦентрыПользователи.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КонтактЦентры.Пользователи КАК КонтактЦентрыПользователи
	|ГДЕ
	|	КонтактЦентрыПользователи.Пользователь = &Пользователь
	|
	|УПОРЯДОЧИТЬ ПО
	|	КонтактЦентрыПользователи.Ссылка.Наименование";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Пользователь",ПараметрыСеанса.ТекущийПользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат КЦ
	КонецЕсли;
	
	тз = РезультатЗапроса.Выгрузить();
	
	Возврат тз[0][0];
	
КонецФункции

&НаКлиенте
Процедура ЗадачиСписокЗвонкиПриАктивизацииСтроки(Элемент)
	
	ТекДанные = Элементы.ЗадачиСписокЗвонки.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	ТелНомер = ТекДанные.Телефон; 
	
	//Покажи историю телефонных звонков
	//---------------------------------
	//ПокажиИсториюОбщения(ТелНомер);
	
	Окончание = ТекущаяДата();
	Начало = ДобавитьМесяц(Окончание, -2);
	СформируйИсториюОбщения(СокрЛП(ТелНомер), Начало, Окончание, Ложь);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КомментарийЗадачи(ТелНомер)
	
	// Покажи комментарий
	//------------------------------------------------------------------------------------
	Результат = "";
		
	Запрос = Новый Запрос();
	Запрос.Текст  =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗадачиОбратныйЗвонок.Комментарий КАК Комментарий
	|ИЗ
	|	РегистрСведений.ЗадачиОбратныйЗвонок КАК ЗадачиОбратныйЗвонок
	|ГДЕ
	|	ЗадачиОбратныйЗвонок.Телефон = &Телефон
	|	И ЗадачиОбратныйЗвонок.ДатаЗакрытия = ДАТАВРЕМЯ(1,1,1)";
	
	Запрос.УстановитьПараметр("Телефон", СокрЛП(ТелНомер));
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат
	КонецЕсли;
	Результат = РезультатЗапроса.Выгрузить()[0][0];	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ЗадачаИсторияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.Сигнатура) Тогда
		Возврат
	КонецЕсли;
	
	Парам = Новый Структура();
	Парам.Вставить("Сигнатура", Элемент.ТекущиеДанные.Сигнатура);

	
	Если Элемент.ТекущиеДанные.ЭтоЗвонок Тогда
		Если Элемент.ТекущиеДанные.ЭтоВходящий Тогда
			ИмяОткрываемойФормы = "РегистрСведений.Звонки.Форма.ФормаВходящегоЧтение";
		Иначе
			ИмяОткрываемойФормы = "РегистрСведений.Звонки.Форма.ФормаИсходящегоЧтение";
		КонецЕсли;
		ОткрытьФорму(ИмяОткрываемойФормы, Парам);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Почта

&НаКлиенте
Процедура ЗадачиСписокГАЗПриАктивизацииСтроки(Элемент)
	//Очистить кэш вопросов - ответов
	//ЭтаФорма.ТаблицаВопросОтвет.Очистить();
	
	ИмяТекСтраницы = ЭтаФорма.Элементы.ПанельСтраниц.ТекущаяСтраница.Имя;
	ИмяЭлемента = "ЗадачиСписок"+ИмяТекСтраницы;
	
	Если (Элементы[ИмяЭлемента].ТекущиеДанные = Неопределено) Тогда
		Возврат
	КонецЕсли;
	
	ТелНомер = Элементы[ИмяЭлемента].ТекущиеДанные.Телефон;
	// Загрузим  историю звонков
	//ПокажиИсториюОбщения(Элементы[ИмяЭлемента].ТекущиеДанные.ТелНомер);
	 	
	Окончание = ТекущаяДата();
	Начало = ДобавитьМесяц(Окончание, -2);
	СформируйИсториюОбщения(ТелНомер, Начало, Окончание, Ложь);

	// Загрузим на форму данные анкеты
	//ЗаполниТаблицуВопросовТребующихВводОтветов(ИмяЭлемента, ТелНомер);		
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиСписокПочтаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	 ОткрытьПисьмоИзРегистраПисьмаСодержание(Элемент);
 КонецПроцедуры
 
 &НаКлиенте
Процедура ОткрытьПисьмоИзРегистраПисьмаСодержание(Команда)	
	Если ЭтаФорма.Элементы.ЗадачиСписокПочта.ТекущиеДанные =  Неопределено Тогда
		Возврат;
	КонецЕсли;
	Парам = Новый Структура();
	Парам.Вставить("Сигнатура", ЭтаФорма.Элементы.ЗадачиСписокПочта.ТекущиеДанные.ПисьмоИнициатор);
	ОткрытьФорму("РегистрСведений.ПисьмаСодержание.Форма.ФормаЗаписиЧтение", Парам);	
КонецПроцедуры

#КонецОбласти

#Область Магистральные_клиенты

//<Выбор сотрудника по умолчанию для обработки звонка (магистрального) контрагента>
&НаСервере
Процедура ВыбратьСотрудника_НаСервере()
	
	// Очисти старые значения
	//----------------------------------------------------
	ЭтаФорма.Объект.ОтветственныеЗаКонтрагента.Очистить();
	
	// Заполни ТЧ "Ответственные за контрагента"
	//-----------------------------------------------------------------------------------------------
	Об = РеквизитФормыВЗначение("Объект");
	
	Об.ЗаполниТЧ_ОтветственныеЗаКонтрагента(ЭтаФорма.АбонентВнешний);
	//для отладки =>
	//Об.ЗаполниТЧ_ОтветственныеЗаКонтрагента("9506080027");
	
	ЗначениеВРеквизитФормы(Об, "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСотрудника(Команда=Неопределено)
	
	//Открывает форму выбора сотрудника
	//------------------------------------------------------------------------------------------------------------
	ВыбратьСотрудника_НаСервере();
	
	Если ЭтаФорма.Объект.ОтветственныеЗаКонтрагента.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокСотрудников = Новый СписокЗначений();
	
	Для Каждого Стр Из ЭтаФорма.Объект.ОтветственныеЗаКонтрагента Цикл
		СписокСотрудников.Добавить(Стр.СотрудникТел, Стр.Сотрудник+" ("+Стр.СотрудникТел+")");
		
		//Добавь уровень +1
		//--------------------------------------------------------------------------------------------------------
		Если ЗначениеЗаполнено(Стр.Сотрудник1) и ЗначениеЗаполнено(Стр.Сотрудник1Тел) Тогда
			СписокСотрудников.Добавить(Стр.Сотрудник1Тел, "   "+Стр.Сотрудник1+" ("+Стр.Сотрудник1Тел+")");
			
			//Добавь уровень +2
			//----------------------------------------------------------------------------------------------------
			Если ЗначениеЗаполнено(Стр.Сотрудник2) и ЗначениеЗаполнено(Стр.Сотрудник2Тел) Тогда
				СписокСотрудников.Добавить(Стр.Сотрудник2Тел, "      "+Стр.Сотрудник2+" ("+Стр.Сотрудник2Тел+")");
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДопПарам = Новый Структура();
	Оп = Новый ОписаниеОповещения("ПослеВыбораСотрудникаИзМеню", ЭтотОбъект, ДопПарам);
	ПоказатьВыборИзМеню(Оп, СписокСотрудников);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСотрудникаИзМеню(ВыбЗнач, ДопПарам) Экспорт
	
	Если ВыбЗнач = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Доступно = ЗначениеЗаполнено(ЭтаФорма.КаналСистемный);
	Доступно = Доступно И ЗначениеЗаполнено(ВыбЗнач.Значение);
	
	Если Не Доступно Тогда
		Возврат
	КонецЕсли;
	
	//Переведи звонок контрагента на сотрудника с уведомлением
	//-------------------------------------------------------------------
	КонтактЦентр.КомандаAtxfer(ЭтаФорма.КаналСистемный,ВыбЗнач.Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура Дисплей03Нажатие(Элемент)
	СписокСотрудников = Новый СписокЗначений();
	
	Для Каждого Стр Из ЭтаФорма.Объект.ОтветственныеЗаКонтрагента Цикл
		СписокСотрудников.Добавить(Стр.СотрудникТел, Стр.Сотрудник+" ("+Стр.СотрудникТел+")");
		
		//Добавь уровень +1
		//--------------------------------------------------------------------------------------------------------
		Если ЗначениеЗаполнено(Стр.Сотрудник1) и ЗначениеЗаполнено(Стр.Сотрудник1Тел) Тогда
			СписокСотрудников.Добавить(Стр.Сотрудник1Тел, "   "+Стр.Сотрудник1+" ("+Стр.Сотрудник1Тел+")");
			
			//Добавь уровень +2
			//----------------------------------------------------------------------------------------------------
			Если ЗначениеЗаполнено(Стр.Сотрудник2) и ЗначениеЗаполнено(Стр.Сотрудник2Тел) Тогда
				СписокСотрудников.Добавить(Стр.Сотрудник2Тел, "      "+Стр.Сотрудник2+" ("+Стр.Сотрудник2Тел+")");
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДопПарам = Новый Структура();
	Оп = Новый ОписаниеОповещения("ПослеВыбораСотрудникаИзМеню", ЭтотОбъект, ДопПарам);
	ПоказатьВыборИзМеню(Оп, СписокСотрудников);
	
КонецПроцедуры






#КонецОбласти

#Область  Отладочная_информация

&НаСервере
Функция Отладка_ЗначенияПеременных_НаСервере()
	ТекстДок = Новый ТекстовыйДокумент();
	
	НоваяСтрока = "       ******* Отчет об ошибках от "+ТекущаяДата()+" *******"+Символы.ПС+Символы.ВК;
	ТекстДок.ДобавитьСтроку(НоваяСтрока);
	
	НоваяСтрока = "     ***** Параметры сеанса *****"+Символы.ПС+Символы.ВК;
	ТекстДок.ДобавитьСтроку(НоваяСтрока);
	НоваяСтрока = "ККЦКонтактЦентр 		= " + ПараметрыСеанса.ККЦКонтактЦентр		+ Символы.ПС;
	ТекстДок.ДобавитьСтроку(НоваяСтрока);
	НоваяСтрока = "ККЦОчередь 			= " + ПараметрыСеанса.ККЦОчередь			+ Символы.ПС;
	ТекстДок.ДобавитьСтроку(НоваяСтрока);
	НоваяСтрока = "ККЦТелефон 			= " + ПараметрыСеанса.ККЦТелефон			+ Символы.ПС;
	ТекстДок.ДобавитьСтроку(НоваяСтрока);
	НоваяСтрока	= "ТекущийПользователь 	= "	+ ПараметрыСеанса.ТекущийПользователь	+ Символы.ПС;
	ТекстДок.ДобавитьСтроку(НоваяСтрока);
	НоваяСтрока	= "ИнтерактивныйРежим	= "	+ ПараметрыСеанса.ИнтерактивныйРежим	+ Символы.ПС;
	ТекстДок.ДобавитьСтроку(НоваяСтрока);
	НоваяСтрока = "ФонЗадания			= " + ПараметрыСеанса.ФонЗадания			+ Символы.ПС;
	ТекстДок.ДобавитьСтроку(НоваяСтрока);

	
	//НоваяСтрока = "     ***** Реквизиты формы ******"+Символы.ПС+Символы.ВК;
	//ТекстДок.ДобавитьСтроку(НоваяСтрока);
	//
	//РеквизитыФормы = ЭтаФорма.ПолучитьРеквизиты();
	//Для Каждого Рекв Из РеквизитыФормы Цикл
	//	ИмяРеквизита = Рекв.Имя;
	//	ЗначениеРеквизита = ЭтаФорма[ИмяРеквизита];
	//	НоваяСтрока = ИмяРеквизита +" = " +ЗначениеРеквизита+ " (ТипЗнч = "+Рекв.ТипЗначения+")"+Символы.ПС;
	//	ТекстДок.ДобавитьСтроку(НоваяСтрока);
	//	
	//	Если Рекв.ТипЗначения = Тип("СписокЗначений") Тогда
	//		Для Каждого Эл Из ЭтаФорма[ИмяРеквизита] Цикл
	//			НоваяСтрока = "   "+Эл.Значение+" = " +ЗначениеРеквизита+Символы.ПС;
	//			ТекстДок.ДобавитьСтроку(НоваяСтрока);
	//		КонецЦикла;
	//	КонецЕсли;
	//КонецЦикла;
		
	Адрес = ПоместитьВоВременноеХранилище(ТекстДок);
	Возврат Адрес
КонецФункции

&НаКлиенте
Функция Отладка_ЗначенияПеременных(Команда)
	
	Адрес = Отладка_ЗначенияПеременных_НаСервере();
	Если СтрДлина(Адрес)=0 Тогда
		Возврат "Ошибка";
	КонецЕсли;
	Рез = ПолучитьИзВременногоХранилища(Адрес);
	Если ТипЗнч(Рез)<>Тип("ТекстовыйДокумент") Тогда
		Возврат "Ошибка";
	КонецЕсли;
	
	//Рез.Показать();
	
	НоваяСтрока = "     ***** Параметры клиента ******"+Символы.ПС;
	Рез.ДобавитьСтроку(НоваяСтрока);
	НоваяСтрока ="Имя компьютера = "+ ИмяКомпьютера();
	Рез.ДобавитьСтроку(НоваяСтрока);
	НоваяСтрока = "**** ЛОГ *****";	
	Рез.ДобавитьСтроку(НоваяСтрока);
	НоваяСтрока = ЭтаФорма.Отладка_Лог.ПолучитьТекст();	
	Рез.ДобавитьСтроку(НоваяСтрока);
	
	ИдФонЗадания = Новый УникальныйИдентификатор();
	ЭтаФорма.СписокИдФоновыхЗаданийОтправкиПисем.Добавить(ИдФонЗадания);
	//
	Парам = Новый Структура();	
	Парам.Вставить("Сигнатура",					"");	//сигнатура текущего звонка, который переводился с уведомлением на ОП, но не был им принят
	Парам.Вставить("АбонентВнешний",			"9506080027");			//номер телефона внешнего абонента, будет ключом задачи на обратный звонок
	Парам.Вставить("ТелВнутренний",  			"1387");	    		//номер внутреннего телефона сотрудника ОП, на которого с уведомлением переводили звонок, но он  его не принял,
																		//будет значением поля Исполнитель для задачи на обратный звонок
	Парам.Вставить("ИдентификаторФонЗадания", 	ИдФонЗадания);			//идентификатор фонового задания, которым будет отправляься это письмо, необходимо для извещения об ошибках отправки письма
	Парам.Вставить("От", 						"info@luidor.ru");		//адрес эл.почты отправителя (абсолютно любой адрес) 
	Парам.Вставить("Тема",						"Ошибка Агрегатора");
	Парам.Вставить("Содержание",				Рез.ПолучитьТекст());

	ОткрытьФорму("ОбщаяФорма.ЭлПисьмо", Парам);

КонецФункции
#КонецОбласти

#Область Новости
&НаСервере
Функция ЛентаНовостей()
	Перем Новости;
	Новости ="";

	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Новости.Ссылка КАК Ссылка,
	|	Новости.Тело КАК Тело,
	|	Новости.Вложения.(
	|		Ключ КАК Ключ,
	|		Вложение КАК Вложение
	|	) КАК Вложения,
	|	Новости.Период КАК Период
	|ИЗ
	|	Справочник.Сообщения КАК Новости
	|ГДЕ
	|	Новости.Активность = ИСТИНА
	|	И Новости.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ";
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Сч = 0;
	
	Пока Выборка.Следующий() Цикл
		Сч = Сч + 1;
		
		ТекстHTML = Выборка.Тело;
		ВложенияВыб = Выборка.Вложения.Выбрать();
		Пока ВложенияВыб.Следующий() Цикл
			стр = ВложенияВыб.Вложение;
			
			ТекстHTML = СтрЗаменить(ТекстHTML, ВложенияВыб.Ключ, "data:image/png;base64,"+стр);
		КонецЦикла;
		
		Если Сч = 1 Тогда
			Новости = ТекстHTML
		Иначе
			Новости = Новости + "<hr/>"+ТекстHTML;
		КонецЕсли;
	КонецЦикла;
	Возврат Новости;
КонецФункции

Функция АрхивНовостей()
	Перем Новости;
	Новости ="";
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Новости.Ссылка КАК Ссылка,
	|	Новости.Тело КАК Тело,
	|	Новости.Вложения.(
	|		Ключ КАК Ключ,
	|		Вложение КАК Вложение
	|	) КАК Вложения,
	|	Новости.Период КАК Период
	|ИЗ
	|	Справочник.Сообщения КАК Новости
	|ГДЕ
	|	Новости.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ";
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Сч = 0;
	Пока Выборка.Следующий() Цикл
		Сч = Сч + 1;
		
		ТекстHTML = Выборка.Тело;
		ВложенияВыб = Выборка.Вложения.Выбрать();
		Пока ВложенияВыб.Следующий() Цикл
			стр = ВложенияВыб.Вложение;
			
			ТекстHTML = СтрЗаменить(ТекстHTML, ВложенияВыб.Ключ, "data:image/png;base64,"+стр);
		КонецЦикла;
		
		Если Сч = 1 Тогда
			Новости = ТекстHTML
		Иначе
			Новости = Новости + "<hr/>"+ТекстHTML;
		КонецЕсли;
	КонецЦикла;
	Возврат Новости;
КонецФункции

&НаКлиенте
Процедура НовостиПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	ПриНажатииГиперСсылкиВНовости(Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура АрхивНовостей1ПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	ПриНажатииГиперСсылкиВНовости(Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте 
Процедура ПриНажатииГиперСсылкиВНовости(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	href = ДанныеСобытия.Href;
	Если href = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Попытка
		ПерейтиПоНавигационнойСсылке(href);
	Исключение
		href = СтрЗаменить(href, "e1c://server/MainAppL/sys_agr/", "");
		href = "http://"+href;
		ПерейтиПоНавигационнойСсылке(href);
	КонецПопытки
КонецПроцедуры
#КонецОбласти

&НаКлиенте
Процедура ИзменитьНапоминаниеПерезвонитьВоВремяЗвонка(Команда)
	
	//Признак автозвонка
	//-------------------
	Доступно = Истина;
	Доступно = Доступно И СтрДлина(СайтИнтернетЗаявкиАвтозвонка)>3;
	
	Если Доступно = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ДатаЗакрытия 		= Дата(1,1,1,0,0,0);
	Тип 				= "Перечисления.ТипЗадачи.ПросьбаПерезвонить";
	Исполнитель 		= "ПараметрыСеанса.ККЦКонтактЦентр";
	Комментарий 		= "Просьба перезвонить по автозвонку";
	ДатаПостановки 		=  ЗначенияСервера.ТекущаяДатаСервер();
	ЗвонокИнициатор 	= "0#"+к_LinkedID+"#"+Телефония.ПолучиСерверТелефонииВнутрТелефона(КонсольТелефон);
	ДатаАктуальности 	= ДатаПостановки+600;
	ПисьмоИнициатор  	= СайтИнтернетЗаявкиАвтозвонка; 	

	РегистрыСведений_ЗадачиОбратныйЗвонок_Добавить(АбонентВнешний, ДатаЗакрытия, Тип, Исполнитель, Комментарий, ДатаПостановки, ЗвонокИнициатор, ДатаАктуальности, ПисьмоИнициатор);
	
КонецПроцедуры

#Область Выбор_звонка_в_истории_звонков
&НаКлиенте
Процедура ИсторияЗвонковВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.Сигнатура) Тогда
		Возврат
	КонецЕсли;
	ВыборЗвонкаВИсторииЗвонков(Элемент.ТекущиеДанные.Сигнатура, Элемент.ТекущиеДанные.ЭтоЗвонок, Элемент.ТекущиеДанные.ЭтоВходящий);
КонецПроцедуры

&НаКлиенте
Процедура ИсторияЗвонков1Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.Сигнатура) Тогда
		Возврат
	КонецЕсли;
	ВыборЗвонкаВИсторииЗвонков(Элемент.ТекущиеДанные.Сигнатура, Элемент.ТекущиеДанные.ЭтоЗвонок, Элемент.ТекущиеДанные.ЭтоВходящий);
КонецПроцедуры

&НаКлиенте
Процедура ИсторияЗвонков2Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
		Если Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.Сигнатура) Тогда
		Возврат
	КонецЕсли;
	ВыборЗвонкаВИсторииЗвонков(Элемент.ТекущиеДанные.Сигнатура, Элемент.ТекущиеДанные.ЭтоЗвонок, Элемент.ТекущиеДанные.ЭтоВходящий);
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗвонкаВИсторииЗвонков(Сигнатура, ЭтоЗвонок, ЭтоВходящий)
	// Звонок - сигнатура звонка
	
	Если Не ЗначениеЗаполнено(Сигнатура) Тогда
		Возврат
	КонецЕсли;
	
	Парам = Новый Структура();
	Парам.Вставить("Сигнатура", Сигнатура);

	Если ЭтоЗвонок Тогда
		Если ЭтоВходящий Тогда
			ИмяОткрываемойФормы = "РегистрСведений.Звонки.Форма.ФормаВходящегоЧтение";
		Иначе
			ИмяОткрываемойФормы = "РегистрСведений.Звонки.Форма.ФормаИсходящегоЧтение";
		КонецЕсли;
		ОткрытьФорму(ИмяОткрываемойФормы, Парам);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти








