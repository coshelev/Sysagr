		
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//Лояльность ремонтов - отборы
	//----------------------------
	
	ЭтаФорма.ИмяАктивногоДинамичСписка = "ЗадачиСписокЛояльностьРемонта";	
	ЭтаФорма.ЗадачиСписокЛояльностьРемонта.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы.Очистить();

	ЭлОтбора1 = ЭтаФорма.ЗадачиСписокЛояльностьРемонта.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлОтбора1.ЛевоеЗначение =	Новый ПолеКомпоновкиДанных("Выполнена");
	ЭлОтбора1.ПравоеЗначение	=	ЛОЖЬ;
	ЭлОтбора1.ВидСравнения		=	ВидСравненияКомпоновкиДанных.Равно;
	ЭлОтбора1.Использование		=	Истина;		
	
	 
	//Отбор по типу
	//ЭлОтбора1 = ЭтаФорма.ЗадачиСписокЛояльностьРемонта.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлОтбора1.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("Тип");
	//Если  ДоступнаРольПросмотраЗадачАдминистратора() = Истина Тогда
	//	ЭлОтбора1.ПравоеЗначение=1;
	//Иначе
	//	ЭлОтбора1.ПравоеЗначение=0;
	//КонецЕсли;
	//ЭлОтбора1.ВидСравнения=ВидСравненияКомпоновкиДанных.Равно;     
	//ЭлОтбора1.Использование=Истина;	

	//Отбор по не выполненным задачам>
	//--------------------------------
	
	//Отбор по подразделениям
	//-----------------------
	//ЭлОтбора1 = ЭтаФорма.ЗадачиСписокЛояльностьРемонта.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлОтбора1.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("Подразделение");
	//ЭлОтбора1.ПравоеЗначение=ЗначенияСервера.ДоступныеПодразделения();
	//ЭлОтбора1.ВидСравнения=ВидСравненияКомпоновкиДанных.ВСписке;
	//ЭлОтбора1.Использование=Истина;	

	//Отбор по исполнителям плановым
	//--------------------------------
	//ЭлОтбора1 = ЭтаФорма.ЗадачиСписокЛояльностьРемонта.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлОтбора1.ЛевоеЗначение		=	Новый ПолеКомпоновкиДанных("Исполнитель");
	//ЭлОтбора1.ПравоеЗначение	=	ТекущийПользователь() ;
	//ЭлОтбора1.ВидСравнения		=	ВидСравненияКомпоновкиДанных.Равно;
	//ЭлОтбора1.Использование		=	Истина;	
	//
	//ДоступныеПодразделения = ЗначенияСервера.ДоступныеПодразделения();
	//ЭлОтбора2 = ЭтаФорма.ЗадачиСписокЛояльностьРемонта.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлОтбора2.ЛевоеЗначение		=	Новый ПолеКомпоновкиДанных("Подразделение");
	//ЭлОтбора2.ПравоеЗначение	=	ДоступныеПодразделения;
	//ЭлОтбора2.ВидСравнения		=	ВидСравненияКомпоновкиДанных.ВИерархии;
	//ЭлОтбора2.Использование		=	Истина;	
	
	//Отбор задач для просмотра: или личные (пользовательские) или привязанные к подразделению без исполнителя 
	//----------------------------------------------------------------------------------------------------------
		
	ГрОтбора1 = ЭтаФорма.ЗадачиСписокЛояльностьРемонта.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГрОтбора1.ТипГруппы			=	ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	// Задачи текущего пользователя
	//----------------------------------------------------------------------------
	ЭлОтбора1 = ГрОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлОтбора1.ЛевоеЗначение		=	Новый ПолеКомпоновкиДанных("Исполнитель");
	ЭлОтбора1.ПравоеЗначение	=	ТекущийПользователь();
	ЭлОтбора1.ВидСравнения		=	ВидСравненияКомпоновкиДанных.Равно;
	ЭлОтбора1.Использование		=	Истина;	
	
	//Задачи текущего подразделения, в которых пустой исполнитель
		
	ДоступныеПодразделения = ЗначенияСервера.ДоступныеПодразделения();
	
	СписокДоступныхПодразделений = Новый СписокЗначений();
	Для Каждого Эл Из ДоступныеПодразделения Цикл
		СписокДоступныхПодразделений.Добавить(Эл);
	КонецЦикла;
	
	ГрОтбора2 = ГрОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГрОтбора2.ТипГруппы=ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ЭлОтбора2 = ГрОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлОтбора2.ЛевоеЗначение		=	Новый ПолеКомпоновкиДанных("Подразделение");
	ЭлОтбора2.ПравоеЗначение	=	СписокДоступныхПодразделений;
	ЭлОтбора2.ВидСравнения		=	ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
	ЭлОтбора2.Использование		=	Истина;	
	
	ЭлОтбора3 = ГрОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлОтбора3.ЛевоеЗначение		=	Новый ПолеКомпоновкиДанных("Исполнитель");
	ЭлОтбора3.Использование		=	Истина;	
	
	//Обычная практика - пользователь должен видеть свои личные задачи (см. выше ЭлОтбора2) и задачи своего подразделения у которых не назначен исполнитель, т.е.
	//ЭлОтбора3.ПравоеЗначение	=	ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка") ;
	//ЭлОтбора3.ВидСравнения	=	ВидСравненияКомпоновкиДанных.Равно;
	//но мы поставим условие, что пользователь видит задачи своего подразделения, у которых назначен исполнитель, т.е
	//---------------------------------------------------------------------------------------------------------------
	ЭлОтбора3.ПравоеЗначение	=	ТекущийПользователь();	
	ЭлОтбора3.ВидСравнения		=	ВидСравненияКомпоновкиДанных.НеРавно;

	//Отбор по ролям
	//---------------	
	РольДоступна_КлиентскаяСлужбаРегионы_Оператор		= РольДоступна_НаСервере("КлиентскаяСлужбаРегионы_Оператор");	
	РольДоступна_КлиентскаяСлужбаЦентр_Администратор 	= РольДоступна_НаСервере("КлиентскаяСлужбаЦентр_Администратор");
	Доступно = РольДоступна_КлиентскаяСлужбаЦентр_Администратор Или РольДоступна_КлиентскаяСлужбаРегионы_Оператор;	
	Если Доступно Тогда	
		ДоступныеРоли = Новый СписокЗначений();
		Если РольДоступна_КлиентскаяСлужбаРегионы_Оператор Тогда
			ДоступныеРоли.Добавить(ПредопределенноеЗначение("Справочник.Роли.КлиентскаяСлужбаРегионы_Оператор"));
		КонецЕсли;
		
		Если РольДоступна_КлиентскаяСлужбаЦентр_Администратор Тогда
			ДоступныеРоли.Добавить(ПредопределенноеЗначение("Справочник.Роли.КлиентскаяСлужбаЦентр_Администратор"));
		КонецЕсли;
		
		ЭлОтбора1 = ГрОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); // ЭтаФорма.ЗадачиСписокЛояльностьРемонта.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлОтбора1.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("Роль");
		ЭлОтбора1.ПравоеЗначение	= ДоступныеРоли;
		ЭлОтбора1.ВидСравнения		= ВидСравненияКомпоновкиДанных.ВСписке; 
		ЭлОтбора1.Использование		= Истина;	
	КонецЕсли;

	
	
	//ЭтаФорма.МоиНастройки_ИспользоватьАвтоподбор = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РольДоступна_НаСервере(ИмяРоли)
	Возврат РольДоступна(ИмяРоли);	
КонецФункции

&НаСервере
Функция ДоступнаРольПросмотраЗадачАдминистратора() 
	
	Результат = Ложь;
	Если ПараметрыСеанса.РольДоступнаАдминистратор Тогда
		Результат = Истина
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция ТекущийПользователь()
	Возврат ПараметрыСеанса.ТекущийПользователь;
КонецФункции

&НаКлиенте
Процедура ПанельСтраницПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ЭтаФорма.ЗадачаИстория.Очистить();
	
	Если ТекущаяСтраница.Имя = "ЛояльностьРемонта" Тогда
		ЭтаФорма.ИмяАктивногоДинамичСписка = "ЗадачиСписокЛояльностьРемонта";
		ТекТаблицаФормы = ЭтаФорма.Элементы.ЗадачиСписокЛояльностьРемонта;	
		ЗадачиСписокЛояльностьРемонтаПриАктивизацииСтроки(ТекТаблицаФормы);
	КонецЕсли;
КонецПроцедуры
	
&НаКлиенте
Процедура ОбработкаОповещения_ТаблицаВведенныхОтветовОтветНачалоВыбора(ВыбЗначОтвет, ДопПараметры) Экспорт
	
	Если ВыбЗначОтвет = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	НайденныеСтроки = ЭтаФорма.ТаблицаВведенныхОтветов.НайтиСтроки(ДопПараметры); // должны найти одну строку
	Если НайденныеСтроки.Количество()<>1 Тогда
		Возврат
	КонецЕсли;

	НайденныеСтроки[0].ОтветСтрокой = ВыбЗначОтвет.Значение;
	НайденныеСтроки[0].ФорматТекстаОтвета = 2;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиСписокЛояльностьРемонтаПриАктивизацииСтроки(Элемент=Неопределено)
	
	//Очисти кэш вопросов - ответов
	//-------------------------------------
	ЭтаФорма.ТаблицаВопросОтвет.Очистить();
		
	ИмяТекСтраницы = ЭтаФорма.Элементы.ПанельСтраниц.ТекущаяСтраница.Имя;
	ИмяЭлемента = "ЗадачиСписок"+ИмяТекСтраницы;
	
	ТекДанные = Элементы[ИмяЭлемента].ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	БизнесПроцессСсылка = ТекДанные.БизнесПроцесс;
	
	// Загрузи на форму историю бизнесс-процесса
	//-------------------------------------------	
	БизнесПроцессИсторияНаСервере(БизнесПроцессСсылка);
			
	//Покажи/скрой кнопки закрытия задач
	//-----------------------------------
	ЭтаФорма.Элементы.КнЗаписатьАнкету.Доступность						= Ложь;
	ЭтаФорма.Элементы.КнЗадачаПроверкиПринять.Доступность				= Ложь;
	ЭтаФорма.Элементы.КнЗадачаПроверкиВернутьНаДоработку.Доступность	= Ложь;
	//ЭтаФорма.Элементы.ЗадачаКомментарий.Доступность						= Ложь;

	ЭтаФорма.ЗадачаКомментарий = Элементы[ИмяЭлемента].ТекущиеДанные.Комментарий; 
	
	Выполнена =  ТекДанные.Выполнена;
	Если Не Выполнена Тогда	
		ЗадачаТип =  Элементы[ИмяЭлемента].ТекущиеДанные.Тип;
		Если Не ЗначениеЗаполнено(ЗадачаТип) Или ЗадачаТип = 0 Тогда
			ЭтаФорма.Элементы.КнЗаписатьАнкету.Доступность = Истина;	
		ИначеЕсли ЗадачаТип = 1 Тогда
			ЭтаФорма.Элементы.КнЗадачаПроверкиПринять.Доступность				= Истина;
			ЭтаФорма.Элементы.КнЗадачаПроверкиВернутьНаДоработку.Доступность	= Истина;	
		//	ЭтаФорма.Элементы.ЗадачаКомментарий.Доступность						= Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура БизнесПроцессИсторияНаСервере(БизнесПроцессСсылка)
	
	//Об = РеквизитФормыВЗначение("Объект"); 
	//Об.БизнесПроцессИстория(БизнесПроцессСсылка);
	//ЗначениеВРеквизитФормы(Об, "Объект");
	
	ЭтаФорма.ТаблицаБизнесПроцесса.Очистить();
		
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗадачаОбратнаяСвязь.Ссылка КАК Ссылка,
	|	ЗадачаОбратнаяСвязь.Выполнена КАК Выполнена,
	|	ЗадачаОбратнаяСвязь.ИсполнительФакт КАК Исполнитель,
	|	ЗадачаОбратнаяСвязь.Комментарий КАК Комментарий,
	|	ЗадачаОбратнаяСвязь.Дата КАК Дата
	|ИЗ
	|	Задача.ЗадачаОбратнаяСвязь КАК ЗадачаОбратнаяСвязь
	|ГДЕ
	|	ЗадачаОбратнаяСвязь.БизнесПроцесс = &БизнесПроцесс
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцессСсылка);
	РезультатЗапроса = ОбщегоНазначения.ВыполнитьЗапрос(Запрос);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		//Новая = ЭтаФорма.ТаблицаБизнесПроцесса.Добавить();
		//Новая.Выполнена = Истина;

		Новая = ЭтаФорма.ТаблицаБизнесПроцесса.Добавить();
		Новая.Задача 		= Выборка.Ссылка;
		Новая.Выполнена 	= Выборка.Выполнена;
		Новая.Исполнитель 	= Выборка.Исполнитель;
		Новая.Комментарий	= Выборка.Комментарий;	
	КонецЦикла;
	
	//ЭтаФорма.ЗадачаКомментарий = Новая.Комментарий;

КонецПроцедуры


&НаКлиенте
Процедура ИсправитьКанал(Команда)
	ТекДанные = ЭтаФорма.Элементы[ЭтаФорма.ИмяАктивногоДинамичСписка].ТекущиеДанные;
	
	Доступно = ТекДанные <> Неопределено;
	
	Если Не Доступно Тогда
		Возврат
	КонецЕсли;
	
	ДопПараметры = Новый Структура("ИмяАктивногоДинамичСписка", ЭтаФорма.ИмяАктивногоДинамичСписка);
	Оп = Новый ОписаниеОповещения("ОбработчикОповещения_ИсправьКанал", ЭтотОбъект, ДопПараметры);
	ВыбЗнач = ТекДанные.Канал;
	ПоказатьВводЗначения(Оп, ВыбЗнач, "Введите канал:", Тип("Строка"));

КонецПроцедуры

&НаКлиенте
 Процедура ОбработчикОповещения_ИсправьКанал(ВыбЗнач, ДопПараметры) Экспорт
	 //Выполянет замену сайта в активном динамическом списке
	 //ВыбЗнач = новое имя сайта, с которого поступила заявка
	 //ДопПараметры - структура, содержащая имя активного динамического списка
	 
	Доступно = ТипЗнч(ВыбЗнач) = Тип("Строка");
	Доступно = Доступно И ЗначениеЗаполнено(ВыбЗнач);
	Доступно = Доступно И ТипЗнч(ДопПараметры) = Тип("Структура");
	Доступно = Доступно И ДопПараметры <> Неопределено;
	
	ИмяАктивногоСписка =  "";
	ДопПараметры.Свойство("ИмяАктивногоДинамичСписка", ИмяАктивногоСписка);
	
	Доступно = Доступно И ИмяАктивногоСписка <> Неопределено;
	Доступно = Доступно И ЗначениеЗаполнено(ИмяАктивногоСписка);
	
	Если Не Доступно Тогда
		Возврат
	КонецЕсли;
	
	Сигнатура = ЭтаФорма.Элементы[ИмяАктивногоДинамичСписка].ТекущиеДанные.ПисьмоИнициатор;

	Если ИмяАктивногоСписка = "ЗадачиСписокПочта" Тогда
		Успех = ИсправьКаналНаСервере(Сигнатура, "Инициатор", ВыбЗнач);	
		Если Успех Тогда
			ЭтаФорма.Элементы[ИмяАктивногоСписка].Обновить();
		Иначе
			ПоказатьПредупреждение(, "Не удалось изменить канал", 3);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИсправьКаналНаСервере(Сигнатура, ИмяРеквизита, ЗначениеРеквизита)
	Возврат РегистрыСведений.Письма.УстановиЗначениеРеквизита(Сигнатура, ИмяРеквизита, ЗначениеРеквизита);
КонецФункции

&НаКлиенте
Процедура ЗадачаИсторияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.Сигнатура) Тогда
		Возврат
	КонецЕсли;
	
	Парам = Новый Структура();
	Парам.Вставить("Сигнатура", Элемент.ТекущиеДанные.Сигнатура);

	
	Если Элемент.ТекущиеДанные.ЭтоЗвонок Тогда
		Если Элемент.ТекущиеДанные.ЭтоВходящий Тогда
			ИмяОткрываемойФормы = "РегистрСведений.Звонки.Форма.ФормаВходящегоЧтение";
		Иначе
			ИмяОткрываемойФормы = "РегистрСведений.Звонки.Форма.ФормаИсходящегоЧтение";
		КонецЕсли;
		ОткрытьФорму(ИмяОткрываемойФормы, Парам);
	КонецЕсли;
	
	КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДинСписки(Команда)
	ЭтаФорма.Элементы[ЭтаФорма.ИмяАктивногоДинамичСписка].Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаПроверкиПринять(Команда)
	Если ЭтаФорма.Элементы[ЭтаФорма.ИмяАктивногоДинамичСписка].ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	//Закрой задачу
	// В реквизит ЗвонокЗакрытия запиши или сигнатуру или внутренний номер сотрудника контакт-центра
	Если ИмяАктивногоДинамичСписка = "ЗадачиСписокЛояльностьРемонта" Тогда		
		ЗадачаСсылка = ЭтаФорма.Элементы[ЭтаФорма.ИмяАктивногоДинамичСписка].ТекущиеДанные.Ссылка;
		Выполнена = ЗадачаПроверкиПринятьНаСервере(ЗадачаСсылка, ЭтаФорма.ЗадачаКомментарий);		
		Если Не Выполнена Тогда
			Предупреждение("Ошибка закрытия задачи "+ЗадачаСсылка);
		КонецЕсли;
	КонецЕсли;
	
	ЭтаФорма.Элементы[ЭтаФорма.ИмяАктивногоДинамичСписка].Обновить();
	ЗадачиСписокЛояльностьРемонтаПриАктивизацииСтроки();


КонецПроцедуры

&НаСервере
Функция ЗадачаПроверкиПринятьНаСервере(ЗадачаСсылка, ЗадачаКомментарий)
	ЗначениеПоУмолчанию = Ложь;
	
	Если ЗадачаСсылка.Выполнена Тогда
		Возврат ЗначениеПоУмолчанию
	КонецЕсли;
	
	ЗадачаОб = ЗадачаСсылка.ПолучитьОбъект();
	ЗадачаОб.ДатаВыполнения = ТекущаяДата();
	Попытка
		ЗадачаОб.ОценкаВыполненияПредшествующейЗадачи = 5;
		ЗадачаОб.ДатаВыполнения		= ТекущаяДата();	
		ЗадачаОб.ИсполнительФакт	= ПараметрыСеанса.ТекущийПользователь;	
		ЗадачаОб.Комментарий		= ЗадачаКомментарий;
		ЗадачаОб.ВыполнитьЗадачу();
	Исключение
		Данные		= ЗадачаСсылка;
		Комментарий = ОписаниеОшибки();
		ОбслуживаниеСервер.ЗарегистрироватьСобытие("Запись задачи", УровеньЖурналаРегистрации.Ошибка, Метаданные.Задачи.ЗадачаОбратнаяСвязь, Данные, Комментарий)
	КонецПопытки;
	
	Возврат Истина
	
КонецФункции

&НаКлиенте
Процедура ЗадачаПроверкиВернутьНаДоработку(Команда)
	Если ЭтаФорма.Элементы[ЭтаФорма.ИмяАктивногоДинамичСписка].ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;

	//Закрой задачу
	// В реквизит ЗвонокЗакрытия запиши или сигнатуру или внутренний номер сотрудника контакт-центра
	Если ИмяАктивногоДинамичСписка = "ЗадачиСписокЛояльностьРемонта" Тогда		
		ЗадачаСсылка = ЭтаФорма.Элементы[ЭтаФорма.ИмяАктивногоДинамичСписка].ТекущиеДанные.Ссылка;
		Выполнена = ЗадачаПроверкиВернутьНаДоработкуНаСервере(ЗадачаСсылка, ЭтаФорма.ЗадачаКомментарий);	
		Если Не Выполнена Тогда
			//Предупреждение("Ошибка закрытия задачи "+ЗадачаСсылка);
			Сообщ = Новый СообщениеПользователю();
			Сообщ.Текст ="Ошибка закрытия задачи "+ЗадачаСсылка;
			Сообщ.Сообщить();
		КонецЕсли;

	КонецЕсли;
	
	ЭтаФорма.Элементы[ЭтаФорма.ИмяАктивногоДинамичСписка].Обновить();
	ЗадачиСписокЛояльностьРемонтаПриАктивизацииСтроки();

КонецПроцедуры

&НаСервере
Функция ЗадачаПроверкиВернутьНаДоработкуНаСервере(ЗадачаСсылка, ЗадачаКомментарий)
	ЗначениеПоУмолчанию = Ложь;
	
	Если ЗадачаСсылка.Выполнена Тогда
		Возврат ЗначениеПоУмолчанию
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗадачаКомментарий) Тогда
		Сообщ = Новый СообщениеПользователю();
		Сообщ.ПутьКДанным="ЗадачаКомментарий";
		Сообщ.Поле = "ЗадачаКомментарий";
		Сообщ.Текст = "Комментарий не заполнен";
		Сообщ.Сообщить();
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	ЗадачаОб = ЗадачаСсылка.ПолучитьОбъект();
	ЗадачаОб.ДатаВыполнения = ТекущаяДата();
	Попытка
		ЗадачаОб.ОценкаВыполненияПредшествующейЗадачи = 1;
		ЗадачаОб.ДатаВыполнения		= ТекущаяДата();	
		ЗадачаОб.ИсполнительФакт	= ПараметрыСеанса.ТекущийПользователь;	
		ЗадачаОб.Комментарий = ЗадачаКомментарий;
		ЗадачаОб.ВыполнитьЗадачу();
	Исключение
		Данные		= ЗадачаСсылка;
		Комментарий = ОписаниеОшибки();
		ОбслуживаниеСервер.ЗарегистрироватьСобытие("Запись задачи", УровеньЖурналаРегистрации.Ошибка, Метаданные.Задачи.ЗадачаОбратнаяСвязь, Данные, Комментарий)
	КонецПопытки;
	
	Возврат Истина
	
КонецФункции

&НаКлиенте
Процедура КомментарийИзменить(Команда)
	//Изменить комментарий у незакрытой задачи
	//-----------------------------------------
	
	ТекДанные = ЭтаФорма.Элементы[ЭтаФорма.ИмяАктивногоДинамичСписка].ТекущиеДанные;
	
	Доступно = ТекДанные = Неопределено;
	Доступно = Доступно И ТекДанные.Выполнена = Истина;
	Доступно = Доступно И ЗначениеЗаполнено(ЭтаФорма.ЗадачаКомментарий)=Ложь;
	
	Если Доступно Тогда
		Возврат
	КонецЕсли;
		
	ЗадачаЗаписатьКомментарий_НаСервере(ТекДанные.Ссылка, ЭтаФорма.ЗадачаКомментарий);
	ЭтаФорма.Элементы[ЭтаФорма.ИмяАктивногоДинамичСписка].Обновить();
КонецПроцедуры

&НаСервере
Процедура ЗадачаЗаписатьКомментарий_НаСервере(ЗадачаСсылка, ЗадачаКомментарий)
		
	ЗадачаОб = ЗадачаСсылка.ПолучитьОбъект();
	ЗадачаОб.Комментарий = ЗадачаКомментарий;
	
	Попытка
		ЗадачаОб.Записать();	
	Исключение
		Сообщить("При сохранении комментария возникла ошибка");
		Данные = "ЗадачаСсылка ="+ЗадачаСсылка+" ; ЗадачаКомментарий = "+ЗадачаКомментарий; 
		Комментарий = ОписаниеОшибки();
		ОбслуживаниеСервер.ЗарегистрироватьСобытие("ЗадачаЗаписатьКомментарий_НаСервере", УровеньЖурналаРегистрации.Ошибка, Метаданные.Задачи.ЗадачаОбратнаяСвязь, Данные, Комментарий);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаСоздатьВложенныйПроцесс(Команда)
	Если ЭтаФорма.Элементы[ЭтаФорма.ИмяАктивногоДинамичСписка].ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	ТекЗадача 			= ЭтаФорма.Элементы[ЭтаФорма.ИмяАктивногоДинамичСписка].ТекущиеДанные.Ссылка;
	СигнатураПродажи	= ЭтаФорма.Элементы[ЭтаФорма.ИмяАктивногоДинамичСписка].ТекущиеДанные.СигнатураПродажи;
	НомерДок			= ЭтаФорма.Элементы[ЭтаФорма.ИмяАктивногоДинамичСписка].ТекущиеДанные.НомерДок;
	ДатаДок 			= ЭтаФорма.Элементы[ЭтаФорма.ИмяАктивногоДинамичСписка].ТекущиеДанные.ДатаДок;
	Товар				= ЭтаФорма.Элементы[ЭтаФорма.ИмяАктивногоДинамичСписка].ТекущиеДанные.Товар;
	
	Текст = "Заказ-наряд "+ НомерДок+ " от "+ Формат(ДатаДок,"ДФ=dd.MM.yyyy")+". Автомобиль "+  Товар;
	
	Парам = Новый Структура();
	Парам.Вставить("ЗадачаОснование", 	ТекЗадача);
	Парам.Вставить("СигнатураПродажи", 	СигнатураПродажи);
	Парам.Вставить("Текст",				Текст); 		
	ОткрытьФорму("Обработка.КонсольНегативныхОтзывов.Форма.ЗапускОбращения", Параметры, ЭтаФорма, ТекущаяДата());
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакройЗадачу(Команда)
	Если ЭтаФорма.Элементы[ЭтаФорма.ИмяАктивногоДинамичСписка].ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	ЗадачаСсылка = ЭтаФорма.Элементы[ЭтаФорма.ИмяАктивногоДинамичСписка].ТекущиеДанные.Ссылка;
	ЗакройЗадачуНаСервере(ЗадачаСсылка, ЭтаФорма.ЗадачаКомментарий);
КонецПроцедуры

&НаСервере
Функция ЗакройЗадачуНаСервере(ЗадачаСсылка, ЗадачаКомментарий)
	
	ЗначениеПоУмолчанию = Ложь;
	
	Если ЗадачаСсылка.Выполнена Тогда
		Возврат ЗначениеПоУмолчанию
	КонецЕсли;
	
	ЗадачаОб = ЗадачаСсылка.ПолучитьОбъект();
	ЗадачаОб.ДатаВыполнения = ТекущаяДата();
	Попытка
		ЗадачаОб.ДатаВыполнения 	= ТекущаяДата();
		ЗадачаОб.ИсполнительФакт	= ПараметрыСеанса.ТекущийПользователь; 
		ЗадачаОб.Комментарий		= ЗадачаКомментарий;
		ЗадачаОб.ВыполнитьЗадачу();
	Исключение
		Данные		= ЗадачаСсылка;
		Комментарий = ОписаниеОшибки();
		ОбслуживаниеСервер.ЗарегистрироватьСобытие("Запись задачи", УровеньЖурналаРегистрации.Ошибка, Метаданные.Задачи.ЗадачаОбратнаяСвязь, Данные, Комментарий)
	КонецПопытки;
	
	Возврат Истина
КонецФункции






 











