&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИдОбъектаМетаданных				= ЭтаФорма.Параметры.ИдОбъектаМетаданных;
	ИдВидаДокумента 				= ЭтаФорма.Параметры.ИдВидаДокумента;
	ГУИДДокументаИсточникаСтрокой 	= ЭтаФорма.Параметры.ГУИДДокументаИсточникаСтрокой;
	ПрефиксИБ						= ЭтаФорма.Параметры.ПрефиксИБ;
	ИмяМакета						= ЭтаФорма.Параметры.ИмяМакета;
		
	стрДанныеДокумента 				= БазаИсточник__ПолучиДанныеДокумента(ИдОбъектаМетаданных, ИдВидаДокумента, ГУИДДокументаИсточникаСтрокой, ПрефиксИБ);
	тзШапкаДокумента 				= стрДанныеДокумента.ШапкаДокумента;

	Если Не ЗначениеЗаполнено(ИмяМакета) Тогда
		ИмяМакета = "МакетHTML1";
	КонецЕсли;
	
	ТекстHTML = ПолучиМакетИзЭтогоОбъекта(ИмяМакета);
	
	////<вывод шапки>
	htmlТаблицаШапкиДокумента		= КонвертируйТаблицуЗначений_в_HTMLТаблицу(тзШапкаДокумента, "classDocHeadTable", "ТипИСсылка");
	ТекстHTML 	= СтрЗаменить(ТекстHTML, "#ШапкаДокумента#", htmlТаблицаШапкиДокумента); 	
	//</вывод шапки>
	
	Сч = 0;
	Для Каждого КлЗнч Из стрДанныеДокумента Цикл
		Если СтрНайти(КлЗнч.Ключ, "ТабличнаяЧасть_")>0 Тогда
			Сч = Сч+1;
			тзТаблЧасть						= КлЗнч.Значение;
			htmlТабличнаяЧасть				= КонвертируйТаблицуЗначенийТабличнойЧасти_в_HTMLТаблицу(тзТаблЧасть, "classDocTableРаrt");
			ТекстHTML	= СтрЗаменить(ТекстHTML, "#ТабличнаяЧасть"+Сч+"#", htmlТабличнаяЧасть);
			ТекстHTML	= СтрЗаменить(ТекстHTML, "ТабличнаяЧасть"+Сч, СтрЗаменить(КлЗнч.Ключ,"_", " "));
		ИначеЕсли СтрНайти(КлЗнч.Ключ, "ДвижениеНЭ")>0 Тогда  //движение по регистру ДвижениеНЭ
			тзТаблЧасть						= КлЗнч.Значение;
			htmlТабличнаяЧасть				= КонвертируйТаблицуЗначений_в_HTMLТаблицу(тзТаблЧасть, "classReg");
			ТекстHTML	= СтрЗаменить(ТекстHTML, "#ДвижениеНЭ#", htmlТабличнаяЧасть);
		ИначеЕсли СтрНайти(КлЗнч.Ключ, "СебестоимостьНЭ")>0 Тогда  //движение по регистру ДвижениеНЭ
			тзТаблЧасть						= КлЗнч.Значение;
			htmlТабличнаяЧасть				= КонвертируйТаблицуЗначений_в_HTMLТаблицу(тзТаблЧасть, "classReg");
			ТекстHTML	= СтрЗаменить(ТекстHTML, "#СебестоимостьНЭ#", htmlТабличнаяЧасть);

		КонецЕсли;
	КонецЦикла;
	
	//Если нет табличных частей
	ТекстHTML	= СтрЗаменить(ТекстHTML, "#ТабличнаяЧасть1#", "");
	ТекстHTML	= СтрЗаменить(ТекстHTML, "ТабличнаяЧасть1", "");

	//Если нет табличных частей
	ТекстHTML	= СтрЗаменить(ТекстHTML, "#ТабличнаяЧасть2#", "");
	ТекстHTML	= СтрЗаменить(ТекстHTML, "ТабличнаяЧасть2", "");

	//<Если нет движений регистров>
	Если СтрНайти(ТекстHTML, "#ДвижениеНЭ#") Тогда
		ТекстHTML	= СтрЗаменить(ТекстHTML, "#ДвижениеНЭ#", "");
		ТекстHTML	= СтрЗаменить(ТекстHTML, "Регистр накопления ДвижениеНЭ", "");
	КонецЕсли;
	
	Если СтрНайти(ТекстHTML, "#СебестоимостьНЭ#") Тогда
		ТекстHTML	= СтрЗаменить(ТекстHTML, "#СебестоимостьНЭ#", "");
		ТекстHTML	= СтрЗаменить(ТекстHTML, "Регистр накопления СебестоимостьНЭ", "");
	КонецЕсли;
    //</Если нет движений регистров>

		
	//
	//Чт = Новый ЧтениеHTML();
	//Чт.УстановитьСтроку(ТекстHTML);
	//Постр = Новый ПостроительDOM();	
	//doc = Постр.Прочитать(Чт);

	//
	//table = doc.createElement("table");
	////table. ТекстовоеСодержимое = ДанныеДокумента; 
	//

	//
	////получи div с id=root. Это первый div после body
	//jobs =doc.getElementById("root");  
	//jobs.AppendChild(table);
	//
	//ЗаписьHTML = Новый ЗаписьHTML;
	//ЗаписьHTML.УстановитьСтроку();

	//	ЗаписьДОМ = Новый ЗаписьDOM();
	//	ЗаписьДОМ.Записать(doc, ЗаписьHTML);
	//
	//СтрHTML = ЗаписьHTML.Закрыть();

	ЭтаФорма.ТекстHTML = ТекстHTML;

КонецПроцедуры

&НаСервере
Функция ПолучиМакетИзЭтогоОбъекта(ИмяМакета)
	Доступно = ТипЗнч(ИмяМакета) = Тип("Строка");
	Доступно = Доступно И ЗначениеЗаполнено(ИмяМакета);
	ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ = "<html><body>Ошибка поиска макета</body></html>";
	
	Если Не Доступно Тогда
		Возврат ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ 
	КонецЕсли;
	
	ЭтаОбработка = РеквизитФормыВЗначение("Объект");	
	Оболочка = ЭтаОбработка.НTML__ПолучитьМакет(ИмяМакета);

	Результат = Оболочка.ПолучитьТекст();
	
	Доступно = ТипЗнч(Результат) = Тип("Строка");

	Если Не Доступно Тогда
		Возврат ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ 
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция БазаИсточник__ПолучиДанныеДокумента(ИдОбъектаМетаданных, ИдВидаДокумента, ГУИДДокументаИсточникаСтрокой, ПрефиксБазы)
	
	Результат = Новый Соответствие();
	ТЗ = Новый ТаблицаЗначений();
	Результат.Вставить("ШапкаДокумента", ТЗ);
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПараметрыСоединения ИЗ Справочник.ИБ_ИсточникиДанных ГДЕ Префикс = &Префикс");
	Запрос.УстановитьПараметр("Префикс", ПрефиксБазы);
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПараметрыСоединения = Рез.Выгрузить()[0][0];	
	БазаИсточник = ОбщегоНазначения.ПолучитьПодключениеБД(ПараметрыСоединения);
	
	Если БазаИсточник= Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
		
	Данные = "ИдВидаДокумента="+ИдВидаДокумента+"; ГУИДДокументаИсточникаСтрокой="+ГУИДДокументаИсточникаСтрокой; // для журнала регистрации
	
	БазаИсточник_ГУИД_ДокументаИсточника = БазаИсточник.NewObject("УникальныйИдентификатор", ГУИДДокументаИсточникаСтрокой);
	
	Если ИдОбъектаМетаданных = "Документ" Тогда
		БазаИсточник_ДокументСсылка=БазаИсточник.Документы[ИдВидаДокумента].ПолучитьСсылку(БазаИсточник_ГУИД_ДокументаИсточника);
	ИначеЕсли ИдОбъектаМетаданных = "Справочник" Тогда
		БазаИсточник_ДокументСсылка=БазаИсточник.Справочники[ИдВидаДокумента].ПолучитьСсылку(БазаИсточник_ГУИД_ДокументаИсточника);
	КонецЕсли;
		
	БазаИсточник_МетаданныеРеквизиты =  БазаИсточник_ДокументСсылка.Метаданные().Реквизиты;
		
	//<Шапка документа>
	тз = Новый ТаблицаЗначений();
	тз.Колонки.Добавить("ИмяРеквизита");
	тз.Колонки.Добавить("ПредставлениеРеквизита");
	кол = тз.Колонки.Добавить("ЗначениеРеквизита");	
	кол.Заголовок="<Свойства><МожетСодержатьГиперСсылку>Истина</МожетСодержатьГиперСсылку></Свойства>";
	тз.Колонки.Добавить("ТипИСсылка");
	
	//Сформируй поля выборки запроса
	СписокПолейВыборки = "ПРЕДСТАВЛЕНИЕ(Ссылка) КАК Ссылка";	
	СтрокаТЗ							= тз.Добавить();
	СтрокаТЗ.ИмяРеквизита 				= "Ссылка";
	СтрокаТЗ.ПредставлениеРеквизита 	= "Ссылка";
	
	Для Каждого Эл Из БазаИсточник_МетаданныеРеквизиты Цикл
			СписокПолейВыборки = СписокПолейВыборки + ", ПРЕДСТАВЛЕНИЕ("+Эл.Имя+") КАК "+Эл.Имя;
			СписокПолейВыборки = СписокПолейВыборки + ", "+ Эл.Имя +" КАК "+Эл.Имя+"_Ссылка";
			СписокПолейВыборки = СписокПолейВыборки +  ", ТИПЗНАЧЕНИЯ("+Эл.Имя+") КАК "+Эл.Имя+"_Тип";
	
			НовСтрока = тз.Добавить();
			НовСтрока.ИмяРеквизита = Эл.Имя;
	КонецЦикла;
	
	//убери лидирующую запятую
	Если Лев(СписокПолейВыборки,1)="," Тогда
		СписокПолейВыборки = Прав(СписокПолейВыборки, СтрДлина(СписокПолейВыборки)-1);
	КонецЕсли;
		
	БазаИсточник_Запрос = БазаИсточник.NewObject("Запрос");
	БазаИсточник_Запрос.Текст = "ВЫБРАТЬ "+ СписокПолейВыборки+ " ИЗ "+ИдОбъектаМетаданных+"." + ИдВидаДокумента + " КАК Источник ГДЕ Источник.Ссылка = &Ссылка";
	БазаИсточник_Запрос.УстановитьПараметр("Ссылка", БазаИсточник_ДокументСсылка);
	БазаИсточник_РезультатЗапроса = БазаИсточник_Запрос.Выполнить();
	Если БазаИсточник_РезультатЗапроса.Пустой() Тогда
		Сообщить("Пустой результат запроса");
		//Возврат "Пустой результат запроса";
	КонецЕсли;
	
	БИ_Выборка = БазаИсточник_РезультатЗапроса.Выбрать();
	БИ_Выборка.Следующий();	
	
	СтрокаТЗ.ЗначениеРеквизита = БИ_Выборка["Ссылка"];
				
	Для Каждого Эл Из БазаИсточник_МетаданныеРеквизиты Цикл
		ИмяРеквизита =  Эл.Имя;
		ПредставлениеРекв = Эл.Представление();
		ЗначениеРекв = БИ_Выборка[Эл.Имя];
		
		ЗначениеРеквКакСсылка = БИ_Выборка[Эл.Имя+"_Ссылка"];
		
		Если ТипЗнч(ЗначениеРеквКакСсылка) = Тип("COMОбъект") Тогда
			ЗначениеРеквКакСсылка = БазаИсточник.xmlСтрока(ЗначениеРеквКакСсылка);
			типзн2 =  БазаИсточник.xmlТип(БИ_Выборка[Эл.Имя+"_Тип"]).TypeName;	
		Иначе
			типзн2 = "";
			ЗначениеРеквКакСсылка = "";
		КонецЕсли;
				
		СтрокаТЗ = тз.Найти(Эл.Имя, "ИмяРеквизита");
		Если СтрокаТЗ = Неопределено Тогда
			СтрокаТЗ = тз.Добавить();
			СтрокаТЗ.ИмяРеквизита 					= ИмяРеквизита;
		КонецЕсли;
		СтрокаТЗ.ПредставлениеРеквизита 		= ПредставлениеРекв;
		СтрокаТЗ.ЗначениеРеквизита 				= ЗначениеРекв;
		
		структ1 = Новый Структура();
		структ1.Вставить("ПрефиксИБ"	,	ПрефиксБазы); 
		структ1.Вставить("Тип"			, 	типзн2);
		структ1.Вставить("Ссылка"		, 	ЗначениеРеквКакСсылка);
		СтрокаТЗ.ТипИСсылка = структ1;

	КонецЦикла;

	ТЗ.Колонки.Удалить(0);
	Результат = Новый Структура();
	Результат.Вставить("ШапкаДокумента", ТЗ);
	//</Шапка документа>
	
	//<Табл. части>
 	Для Каждого МетаТаблЧасть Из БазаИсточник_ДокументСсылка.Метаданные().ТабличныеЧасти Цикл
		
		   	тз = Новый ТаблицаЗначений();
			тз.Очистить();
			тз.Колонки.Очистить();

		     ТаблЧастьИмя = МетаТаблЧасть.Имя;
			 Результат.Вставить("ТабличнаяЧасть_"+ ТаблЧастьИмя, тз);
			 
			СписокПолейВыборки = "";
			Для Каждого МетаРекв Из МетаТаблЧасть.Реквизиты Цикл		
				СписокПолейВыборки = СписокПолейВыборки + ", ПРЕДСТАВЛЕНИЕ("+МетаРекв.Имя+") КАК "+МетаРекв.Имя;
				
				СписокПолейВыборки = СписокПолейВыборки + ", "+ МетаРекв.Имя +" КАК "+МетаРекв.Имя+"_Ссылка";

				СписокПолейВыборки = СписокПолейВыборки +  ", ТИПЗНАЧЕНИЯ("+МетаРекв.Имя+") КАК "+МетаРекв.Имя+"_Тип";

				НовКолонка = тз.Колонки.Добавить();
				Попытка
					НовКолонка.Имя = МетаРекв.Имя;
					НовКолонка.Заголовок = МетаРекв.Представление();
				Исключение
					//сообщить(МетаРекв.Имя+" "+ОписаниеОшибки());
					ЗаписьЖурналаРегистрации("БазаИсточник__ПолучиДанныеДокумента(). Ошибка создания колонки тз", УровеньЖурналаРегистрации.Ошибка,,Данные, ОписаниеОшибки());
					Продолжить;
				КонецПопытки;
				
				НовКолонка = тз.Колонки.Добавить();
				НовКолонка.Имя = МетаРекв.Имя+"_ТипИСсылка";
				НовКолонка.Заголовок="Системная";
			
			КонецЦикла;
			//убери лидирующую запятую
			Если Лев(СписокПолейВыборки,1)="," Тогда
				СписокПолейВыборки = Прав(СписокПолейВыборки, СтрДлина(СписокПолейВыборки)-1);
			КонецЕсли;
			
			БазаИсточник_Запрос = БазаИсточник.NewObject("Запрос");
			БазаИсточник_Запрос.Текст = "ВЫБРАТЬ "+ СписокПолейВыборки+ " ИЗ "+ИдОбъектаМетаданных+"." + ИдВидаДокумента + "."+ТаблЧастьИмя+" КАК Ист ГДЕ Ист.Ссылка = &Ссылка";
			БазаИсточник_Запрос.УстановитьПараметр("Ссылка", БазаИсточник_ДокументСсылка);
			БазаИсточник_РезультатЗапроса = БазаИсточник_Запрос.Выполнить();
			Если БазаИсточник_РезультатЗапроса.Пустой() Тогда
				//Сообщить("Пустой результат запроса");
				Продолжить;
			КонецЕсли;
	
			БИ_Выборка = БазаИсточник_РезультатЗапроса.Выбрать();
			Пока БИ_Выборка.Следующий() Цикл
				НоваяСтрока = тз.Добавить();
				
						
				Для Каждого Кол Из тз.Колонки Цикл
					Если СтрНайти(Кол.имя,"_ТипИСсылка") = 0 Тогда // взять данные из 
						НоваяСтрока[Кол.Имя] = БИ_Выборка[Кол.имя];
					Иначе
						
						КолИмяБезПостфикса__ТипИСсылка = СтрЗаменить(Кол.имя, "_ТипИСсылка", "") ;//; без постфикса _ТипИСсылка;
						
						структ1 = Новый Структура();
						НоваяСтрока[Кол.Имя] = структ1;
						
						ЗначениеРеквКакСсылка = БИ_Выборка[КолИмяБезПостфикса__ТипИСсылка+"_Ссылка"];
						Если ТипЗнч(ЗначениеРеквКакСсылка) = Тип("COMОбъект") Тогда
							ЗначениеРеквКакСсылка = БазаИсточник.xmlСтрока(ЗначениеРеквКакСсылка);
							типзн2 =  БазаИсточник.xmlТип(БИ_Выборка[КолИмяБезПостфикса__ТипИСсылка+"_Тип"]).TypeName;	
						Иначе
							ЗначениеРеквКакСсылка = "";
							типзн2 = "";
						КонецЕсли;
						
						НоваяСтрока[КолИмяБезПостфикса__ТипИСсылка+"_ТипИСсылка"].Вставить("ПрефиксИБ"		,	ПрефиксБазы); 
						НоваяСтрока[КолИмяБезПостфикса__ТипИСсылка+"_ТипИСсылка"].Вставить("Ссылка"		, 	ЗначениеРеквКакСсылка);
						НоваяСтрока[КолИмяБезПостфикса__ТипИСсылка+"_ТипИСсылка"].Вставить("Тип"			, 	типзн2);

					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			тз = ВставьВТаблицуЗначенийПервойСтрокойЗаголовкиКолонок(тз);

		 	Результат.Вставить("ТабличнаяЧасть_"+ ТаблЧастьИмя, тз);
	КонецЦикла;
	//</Табл. части>

	Возврат Результат;
КонецФункции

&НаСервере
Функция ВставьВТаблицуЗначенийПервойСтрокойЗаголовкиКолонок(ТЗ)
	//добавить строчку с заголовком, если есть хотябы одна строка с данными
	
	//Если ТЗ.Количество()= 0 Тогда
	//	Возврат ТЗ
	//КонецЕсли;
	
	НовСтрока = ТЗ.Вставить(0);
	Для Каждого Кол Из ТЗ.Колонки Цикл
		Если ЗначениеЗаполнено(Кол.Заголовок) Тогда
			ВставитьЗначение = Кол.Заголовок;
		Иначе 
			ВставитьЗначение = Кол.Имя
		КонецЕсли;
		НовСтрока[Кол.Имя] = ВставитьЗначение;
	КонецЦикла;	
	Возврат ТЗ;
КонецФункции

&НаСервере
Функция КонвертируйТаблицуЗначений_в_HTMLТаблицу(ТЗ, ИмяКласса = "", ИмяКолонкиСТипомИСсылкой="");
	ЗначениеПоУмолчанию = "";
	
	Доступно = ТипЗнч(тз) = Тип("ТаблицаЗначений");
	
	Если Не Доступно Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Ряды="";

	Для Каждого СтрокаТЗ из ТЗ Цикл
		//ТекРяд ="<tr><td>"+ИмяРеквизита+"</td><td>"+ПредставлениеРекв+"</td><td>"+ЗначениеРекв+"</td></tr>"; 
		
		ТекРяд = "";
		Для Каждого Кол из ТЗ.Колонки Цикл
			// Если значение в колонке ТЗ не имеет тип значения строка, значит она не выводится в html-таблицу,
			// но предназначена для иных целей, например для формирования гиперссылки
			Если ТипЗнч(СтрокаТЗ[Кол.Имя])<>Тип("Строка") Тогда 
			 	Продолжить;
			КонецЕсли;
			Если ИмяКолонкиСТипомИСсылкой = "" Тогда // не формируем гиперссылку
				ТекРяд = ТекРяд+"<td>"+СтрокаТЗ[Кол.Имя]+"</td>";
			Иначе
				Если СтрНайти(Кол.Заголовок, "<Свойства><МожетСодержатьГиперСсылку>Истина</МожетСодержатьГиперСсылку></Свойства>") = 0 Тогда // не формируем гиперссылку
					ТекРяд = ТекРяд+"<td>"+СтрокаТЗ[Кол.Имя]+"</td>";
				Иначе
					Если СтрокаТЗ["ТипИСсылка"] = Неопределено Тогда // не формируем гиперссылку
						ТекРяд = ТекРяд+"<td>"+СтрокаТЗ[Кол.Имя]+"</td>";	
					Иначе
						ТипЗн = СтрокаТЗ["ТипИСсылка"].Тип;
						СсылкаЗн = СтрокаТЗ["ТипИСсылка"].Ссылка;
						Если СсылкаЗн="" Тогда  // не формируем гиперссылку
							ТекРяд = ТекРяд+"<td>"+СтрокаТЗ[Кол.Имя]+"</td>";
						Иначе
							Гиперссылка = СтрокаТЗ["ТипИСсылка"].ПрефиксИБ+"#"+СтрокаТЗ["ТипИСсылка"].Тип+"#"+ СтрокаТЗ["ТипИСсылка"].Ссылка;
							ТекРяд = ТекРяд+"<td><a href = "+Гиперссылка+">"+СтрокаТЗ[Кол.Имя]+"</a></td>";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ТекРяд  ="<tr class = ""tableRowDocHead"">"+ТекРяд+"</tr>";
		Ряды = Ряды + ТекРяд;
	КонецЦикла;
	
	Табл = "<div><table"+?("table_"+СтрДлина(ИмяКласса)=0,""," class = """+ИмяКласса+"""") +"><tbody>"+Ряды+"</tbody></table></div>";
	
	Возврат Табл;
	
КонецФункции

&НаСервере
Функция КонвертируйТаблицуЗначенийТабличнойЧасти_в_HTMLТаблицу(ТЗ, ИмяКласса = "");
	ЗначениеПоУмолчанию = "";
	
	Доступно = ТипЗнч(тз) = Тип("ТаблицаЗначений");
	
	Если Не Доступно Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Ряды="";

	Для Каждого СтрокаТЗ из ТЗ Цикл
		//ТекРяд ="<tr><td>"+ИмяРеквизита+"</td><td>"+ПредставлениеРекв+"</td><td>"+ЗначениеРекв+"</td></tr>"; 
		
		ТекРяд = "";
		Для Каждого Кол из ТЗ.Колонки Цикл
			
			// Если значение в колонке ТЗ не имеет тип значения строка, значит она не выводится в html-таблицу,
			// но предназначена для иных целей, например для формирования гиперссылки
			Если ТипЗнч(СтрокаТЗ[Кол.Имя])<>Тип("Строка") Тогда 
			 	Продолжить;
			КонецЕсли;
			
			//Если ИмяКолонкиСТипомИСсылкой = "" Тогда // не формируем гиперссылку
			//	ТекРяд = ТекРяд+"<td>"+СтрокаТЗ[Кол.Имя]+"</td>";
			//Иначе
				//Если СтрНайти(Кол.Заголовок, "<Свойства><МожетСодержатьГиперСсылку>Истина</МожетСодержатьГиперСсылку></Свойства>") = 0 Тогда // не формируем гиперссылку
				//	ТекРяд = ТекРяд+"<td>"+СтрокаТЗ[Кол.Имя]+"</td>";
				//Иначе
					//Если СтрокаТЗ["ТипИСсылка"] = Неопределено Тогда // не формируем гиперссылку
					//	ТекРяд = ТекРяд+"<td>"+СтрокаТЗ[Кол.Имя]+"</td>";	
					//Иначе
					    Попытка
							ТипЗн = СтрокаТЗ[Кол.Имя+"_ТипИСсылка"].Тип;
							СсылкаЗн = СтрокаТЗ[Кол.Имя+"_ТипИСсылка"].Ссылка;
						Исключение
							ТипЗн = "";
							СсылкаЗн = "";
					    КонецПопытки;
						Если СсылкаЗн="" Тогда  // не формируем гиперссылку
							ТекРяд = ТекРяд+"<td>"+СтрокаТЗ[Кол.Имя]+"</td>";
						Иначе
							Гиперссылка = СтрокаТЗ[Кол.Имя+"_ТипИСсылка"].ПрефиксИБ+"#"+СтрокаТЗ[Кол.Имя+"_ТипИСсылка"].Тип+"#"+ СтрокаТЗ[Кол.Имя+"_ТипИСсылка"].Ссылка;
							ТекРяд = ТекРяд+"<td><a href = "+Гиперссылка+">"+СтрокаТЗ[Кол.Имя]+"</a></td>";
						КонецЕсли;
					//КонецЕсли;
				//КонецЕсли;
			//КонецЕсли;
		КонецЦикла;
		
		ТекРяд  ="<tr class = ""tableRowDocHead"">"+ТекРяд+"</tr>";
		Ряды = Ряды + ТекРяд;
	КонецЦикла;
	
	Табл = "<div><table"+?("table_"+СтрДлина(ИмяКласса)=0,""," class = """+ИмяКласса+"""") +"><tbody>"+Ряды+"</tbody></table></div>";
	
	Возврат Табл;
	
КонецФункции

&НаСервере
Функция ПолучиПараметрыСоединенияПоПрефиксуИБ(ПрефиксИБ)
	ЗначениеПоУмолчанию = "";
	
	Доступно = ТипЗнч(ПрефиксИБ) = Тип("Строка");
	Доступно = Доступно И ЗначениеЗаполнено(ПрефиксИБ);
	
	Если Не Доступно Тогда
		Возврат  ЗначениеПоУмолчанию;
	КонецЕсли;
	
	ПараметрыСоединения = "";	
	
	Если ПрефиксИБ = "ОУ" Тогда
		ПараметрыСоединения = "Srvr=""MainAPPL"";Ref=""asc_oper"";";		
	КонецЕсли;
	Возврат  ПараметрыСоединения
КонецФункции

&НаКлиенте
Процедура ТекстHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	Если ДанныеСобытия.Anchor = Неопределено Тогда
		Возврат
	КонецЕсли;

	СтандартнаяОбработка = Ложь;
	
	Гиперссылка = ДанныеСобытия.Anchor.nameProp;
	Если СтрДлина(Гиперссылка) = 0 Тогда
		Возврат
	КонецЕсли;
	
	ПозицияРазделителя1 = СтрНайти(Гиперссылка,"#",,,1);
	Если ПозицияРазделителя1 = 0 Тогда
		Возврат
	КонецЕсли;
	ПрефиксИБ = Лев(Гиперссылка,ПозицияРазделителя1-1);
	
	ПозицияРазделителя2 = СтрНайти(Гиперссылка,"#",,,2);
	ГУИДДокументаИсточникаСтрокой = Прав(Гиперссылка, СтрДлина(Гиперссылка)-ПозицияРазделителя2);
	
	ТипЗн = Сред(Гиперссылка, ПозицияРазделителя1+1,СтрДлина(Гиперссылка)-(СтрДлина(ПрефиксИБ)+1) - (СтрДлина(ГУИДДокументаИсточникаСтрокой)+1));
	Если СтрНайти(ТипЗн, "CatalogRef") Тогда
		ИдОбъекта = "Справочник"
	ИначеЕсли  СтрНайти(ТипЗн, "DocumentRef") Тогда
		ИдОбъекта = "Документ"
	КонецЕсли;
	
	ПозицияРазделителя	= СтрНайти(ТипЗн, ".");
	ИдВидаДокумента		= Прав(ТипЗн, СтрДлина(ТипЗн)-ПозицияРазделителя);
	
			
	Парам = Новый Структура();
	Парам.Вставить("ПрефиксИБ"							, ПрефиксИБ);
	Парам.Вставить("ИдОбъектаМетаданных"				, ИдОбъекта); 	//"Справочник", "Документ"
	Парам.Вставить("ИдВидаДокумента"					, ИдВидаДокумента);
	Парам.Вставить("ГУИДДокументаИсточникаСтрокой"		, ГУИДДокументаИсточникаСтрокой);
	
	Фрм = ОткрытьФорму("Обработка.НTMLПредставление.Форма.Форма", Парам,,Новый УникальныйИдентификатор());

КонецПроцедуры



