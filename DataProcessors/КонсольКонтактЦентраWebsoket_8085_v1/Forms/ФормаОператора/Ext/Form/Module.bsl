
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Об = РеквизитФормыВЗначение("Объект");
	Об.ЗаполниТЧ_КонтактныеЛица();
	ЗначениеВРеквизитФормы(Об, "Объект");
	
	ЭтаФорма.МоиНастройки_ОповещатьОбОшибкахОтправкиПочты = Истина;
	
КонецПроцедуры

#Область WebSocket
&НаСервере
Процедура ПриОткрытииНаСервере()
	Об = РеквизитФормыВЗначение("Объект");
	текстHtml = Об.ПолучиМакетHTML();
	ЗначениеВРеквизитФормы(Об, "Объект");	
	ЭтаФорма.html=текстHtml;
КонецПроцедуры	

&НаКлиенте
Процедура htmlПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	Если ДанныеСобытия.Button = Неопределено Тогда
		Возврат
	КонецЕсли;
	Данные = ДанныеСобытия.Button.value;
	//Сообщить(Данные);
	Если Данные = "send" Тогда
		Возврат
	КонецЕсли;
	_ВнешнееСобытие("TCPCLIENT","Reseeved",Данные);
КонецПроцедуры

&НаКлиенте
Функция WebSocket_КомандаHangup(Канал)	
// Функция выполняет отключение звонка в переданном Канале
// Возвращает Истину в случае успеха
//-------------------------------------------------------------------------------------------------
	//Доступно = (ТипЗнч(Канал) = Тип("Строка"));
	//Доступно = Доступно И ЗначениеЗаполнено(Канал);

	//Если (Доступно = Истина) Тогда
		ТекстКоманды = "Action: Hangup" 			+ Символы.ПС +
					   "Channel: " 	+ СокрЛП(Канал) + Символы.ПС + Символы.ПС;

		//Если (КомпонентаВыполнитьКоманду(ТекстКоманды) = Истина) Тогда
		//	Возврат Истина;
		//КонецЕсли;
		
		ф=ЭтаФорма.Элементы.html.Документ.GetElementById("messageField");
		ф.value = ТекстКоманды;
		
		кн = ЭтаФорма.Элементы.html.Документ.GetElementById("sendButton");
		кн.Click();
	//КонецЕсли;

	Возврат Ложь;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ПриОткрытии(Отказ)

// Если компонента телефонии не зарегистрирована в системе, то завершим работу консоли
//-------------------------------------------------------------------------------------------------
	Результат = КонтактЦентр.КомпонентаИнициализировать();

	Если (ЗначениеЗаполнено(Результат)) Тогда
		Предупреждение(Результат);
		Отказ = Истина;
		Возврат;
	КонецЕсли;

// Начальная установка видимости элементов
//-------------------------------------------------------------------------------------------------
	СправочникПоискПриИзменении();
	
	//<14.06.2018 10-37, //, Телефон нужно выбирать при каждом открытии консоли>
	//КонсольТелефонВыбрать();
	//<14.06.2018 10-37, //, >

	ВнешнееСобытиеHangup();

	#Область WebSocket
	ПриОткрытииНаСервере();
	#КонецОбласти

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()

	// Отключим компоненту телефонии
	//---------------------------------
	КонтактЦентр.КомпонентаОтключить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеОтображения(Элемент = Неопределено)

	// Убедимся в том, что телефон рабочего места выбран
	//---------------------------------------------------
	//ТелСсылка = ЗначенияСервера.ПолучитьЗначениеПараметраСеанса("ККЦТелефон");
	Элементы.ЗадачаПерезвонить.Доступность = Ложь;

	// Настроим отображение колонок в списке "Телефоны"
	//--------------------------------------------------
	Если (ЗначениеЗаполнено(ЭтаФорма.КонсольТелефон)) Тогда
		Если (ЭтаФорма.КонсольСостояние = 0) Тогда 	// звонок не выполняется
			Элементы.ЗадачаПерезвонить.Доступность = Истина;
			Элементы.Телефоны.ПодчиненныеЭлементы.ТелефоныAtxfer.Видимость = Ложь;
			Элементы.Телефоны.ПодчиненныеЭлементы.ТелефоныRedirect.Заголовок = "Вызвать";
			Элементы.Телефоны.ПодчиненныеЭлементы.ТелефоныRedirect.ГиперссылкаЯчейки = Истина;
		Иначе
			Элементы.Телефоны.ПодчиненныеЭлементы.ТелефоныAtxfer.Видимость = Истина;
			Элементы.Телефоны.ПодчиненныеЭлементы.ТелефоныRedirect.ГиперссылкаЯчейки = Истина;
			Элементы.Телефоны.ПодчиненныеЭлементы.ТелефоныAtxfer.Заголовок = "С уведомлением";
			Элементы.Телефоны.ПодчиненныеЭлементы.ТелефоныRedirect.Заголовок = "Без уведомления";
		КонецЕсли;
	Иначе
		Элементы.Телефоны.ПодчиненныеЭлементы.ТелефоныAtxfer.Видимость = Ложь;
		Элементы.Телефоны.ПодчиненныеЭлементы.ТелефоныRedirect.Заголовок = "Телефоны";
		Элементы.Телефоны.ПодчиненныеЭлементы.ТелефоныRedirect.ГиперссылкаЯчейки = Ложь;
	КонецЕсли;
КонецПроцедуры

#Область Выбор_телефона

&НаКлиенте
Процедура КонсольТелефонВыбрать(Команда)
	ОпОбработчикЗакрытияФормыВыбораТелефона = Новый ОписаниеОповещения("ОбработчикЗакрытияФормыВыбораТелефона", ЭтотОбъект);
	ОткрытьФорму("Обработка.КонсольКонтактЦентраТест.Форма.ФормаВыбораОператора",,ЭтаФорма,,,,ОпОбработчикЗакрытияФормыВыбораТелефона, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикЗакрытияФормыВыбораТелефона(Параметр, ДопПарам) Экспорт

// Проверим заполненность параметров сеанса, отвечающих за регистрацию оператора консоли
// Если параметры заданы, то получим текущее состояние режима "Пауза" для оператора-агента
// Также выполним подключение компоненты телефонии к серверу
//-------------------------------------------------------------------------------------------------

	ОчерСсылка = ЗначенияСервера.ПолучитьЗначениеПараметраСеанса("ККЦОчередь");
	ТелСсылка = ЗначенияСервера.ПолучитьЗначениеПараметраСеанса("ККЦТелефон");

	Если (ЗначениеЗаполнено(ОчерСсылка) И ЗначениеЗаполнено(ТелСсылка)) Тогда
				
		//<14.06.2018 10-37, //=>, >
		//Темп = ОчередиАгенты.АгентПаузаПолучить(ОчерСсылка,ТелСсылка);
		//ЭтаФорма.КонсольПауза = ?(Темп = Истина,Истина,Ложь);
		//=>
		
		//Получи состояние агента телефонии
		//---------------------------------
		ЭтаФорма.КонсольПауза = ОчередиАгенты.АгентПаузаПолучить(ОчерСсылка,ТелСсылка);
		
		ОбработайВыборТелефонаНаСервере();
	
		//Сформируй заголовок формы с указанием назначения очереди
		//---------------------------------------------------------
		Темп = ЗначенияСервера.ПолучитьЗначениеРеквизита(ОчерСсылка,"Назначение");
		ЭтаФорма.Заголовок = СокрЛП(ТелСсылка) + " - " + СокрЛП(Темп);
		//</14.06.2018 10-37>
		
		Результат = КонтактЦентр.КомпонентаПодключить(КонсольТелефон);

		Если (ЗначениеЗаполнено(Результат)) Тогда
			Предупреждение(Результат);
		КонецЕсли;
		
		//31.08.2018, +, Автоматически включить прием автозвонков
		//--------------------------------------------------------
		ВключитьВыключитьПодключениеОбработчикаОжидания(Истина);
	
	КонецЕсли;

		
КонецПроцедуры

&НаСервере
Процедура ОбработайВыборТелефонаНаСервере()
	
	//<29.08.2018, +>
	ЭтаФорма.КонсольТелефон = ПараметрыСеанса.ККЦТелефон.Код;
	//</29.08.2018>
	
	Элементы.СтраницаЗадачи.Видимость = Ложь;
	
	// Настроим элементы страницы "СтраницаЗадачи" и признак обработки автозвонка
	//-------------------------------------------------------------------------------------------------
	Если (ЗначениеЗаполнено(ПараметрыСеанса.ККЦКонтактЦентр)) Тогда
		ЭтаФорма.ЗадачиСписок.Параметры.УстановитьЗначениеПараметра("КонтактЦентр",ПараметрыСеанса.ККЦКонтактЦентр);
		Элементы.СтраницаЗадачи.Видимость = Истина;
		
		//Установить признак обработки автозвонка
		//-----------------------------------------
		Если ПараметрыСеанса.ККЦКонтактЦентр.ИспользуетсяКаскадОчередей Тогда
			Запрос = Новый Запрос();
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	КаскадОчередей.ОбрабатыватьАвтозвонок КАК ОбрабатыватьАвтозвонок
			|ИЗ
			|	Справочник.КонтактЦентры.КаскадОчередей КАК КаскадОчередей
			|ГДЕ
			|	КаскадОчередей.Ссылка = &КонтактЦентр
			|	И КаскадОчередей.Очередь = &Очередь";
			Запрос.УстановитьПараметр("КонтактЦентр", 	ПараметрыСеанса.ККЦКонтактЦентр);
			Запрос.УстановитьПараметр("Очередь",		ПараметрыСеанса.ККЦОчередь);
			РезультатЗапроса = ОбщегоНазначения.ВыполнитьЗапрос(Запрос);
			Если РезультатЗапроса.Пустой() Тогда
				Возврат;
			КонецЕсли;
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			ЭтаФорма.МоиНастройки_ОбрабатыватьАвтозвонки = Выборка.ОбрабатыватьАвтозвонок;
		Иначе
			ЭтаФорма.МоиНастройки_ОбрабатыватьАвтозвонки = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

# Область Управление_паузой
&НаКлиенте
Процедура КонсольПаузаПриИзменении(Элемент = Неопределено)
	
	// Получим текущие настройки консоли
	//-------------------------------------------------------------------------------------------------
	ОчерСсылка = ЗначенияСервера.ПолучитьЗначениеПараметраСеанса("ККЦОчередь");
	ТелСсылка = ЗначенияСервера.ПолучитьЗначениеПараметраСеанса("ККЦТелефон");
	
	// Если параметры не заданы, то завершим работу процедуры
	//-------------------------------------------------------------------------------------------------
	Доступно = ЗначениеЗаполнено(ТелСсылка);
	Доступно = Доступно И ЗначениеЗаполнено(ОчерСсылка);
	
	Элементы.КонсольПауза.ТолькоПросмотр = (НЕ Доступно);
	
	Если (Доступно = Ложь) Тогда
		ЭтаФорма.Заголовок = "Консоль оператора: Не выбран телефон рабочего места";
		ЭтаФорма.КонсольПауза = Истина;
		ОбновлениеОтображения();
		Возврат;
	КонецЕсли;
	
	// Параметры заданы
	// Сформируем заголовок для переключателя активности
	//-------------------------------------------------------------------------------------------------
	Темп = ЗначенияСервера.ПолучитьЗначениеРеквизита(ОчерСсылка,"Назначение");
	ЭтаФорма.Заголовок = СокрЛП(ТелСсылка) + " - " + СокрЛП(Темп);
	
	//оу

	// Если процедура вызвана интерактивно (из элемента), то изменим режим паузы на заданный
	// Если процедура вызвана каким-либо автоматом, то просто зарегистрируем событие
	//-------------------------------------------------------------------------------------------------
	Если (Элемент <> Неопределено) Тогда
		
		//Результат = ОчередиАгенты.АгентПаузаИзменить(ОчерСсылка,ТелСсылка,НЕ ЭтаФорма.КонсольПауза);
		//=>
		//как в оу через web-сервис
		Результат = Интеграция_Агр_ТелАгентСостояниеУстановить(ОчерСсылка, ТелСсылка, Не ЭтаФорма.КонсольПауза);

		Если (ЗначениеЗаполнено(Результат)) Тогда
			// изменение режима пауза не выполнено
			
			//<14.06.2018 10-37, //=>, >	
			//Темп = ОчередиАгенты.АгентПаузаПолучить(ОчерСсылка,ТелСсылка);
			//ЭтаФорма.КонсольПауза = ОчередиАгенты.АгентПаузаПолучить(ОчерСсылка,ТелСсылка);
			//=>
			ЭтаФорма.КонсольПауза = Не ЭтаФорма.КонсольПауза;
			//</14.06.2018 10-37>	
			
			Предупреждение(Результат);
			
			//<Кошелев_05092017, //, т.к. исходящий автозвонок теперь выполняется в режиме паузы телефона, а события нам нужны!!!>
			////<Кошелев_03.03.2017_14-26, +, включи/отключи получение потока событий при постановке на паузу>
			//Иначе 
			//	//изменение режима пауза успешно выполнено
			//	Если ЭтаФорма.КонсольПауза Тогда
			//		//встали на паузу, тогда отключи получение потока событий
			//		ТекстКоманды = "Action: Events" + Символы.ПС;
			//		ТекстКоманды = ТекстКоманды + "Eventmask: off" + Символы.ПС + Символы.ПС;	
			//
			//        // обнули реквизиты формы
			//		ЭтаФорма.КонсольСостояние = 0;
			//		ЭтаФорма.КаналСистемный = "";
			//		ЭтаФорма.АбонентВнешний="";
			//		ЭтаФорма.к_ТелВнутрОП="";
			//		ЭтаФорма.к_LinkedID="";
			//	Иначе
			//		//снялись с паузы - включи получение потока событий
			//		ТекстКоманды = "Action: Events" + Символы.ПС;
			//		ТекстКоманды = ТекстКоманды + "Eventmask: on" + Символы.ПС + Символы.ПС;
			//	КонецЕсли;
			//	КонтактЦентр.КомпонентаВыполнитьКоманду(ТекстКоманды)
			////</Кошелев_03.03.2017_14-26>
			//</Кошелев_05092017>
			
		КонецЕсли;
		
		ОчередиАгенты.АгентСостояниеЗарегистрировать(ТелСсылка,ЭтаФорма.КонсольПауза);
	//<14.06.2018 10-37, //, >	
	//Иначе
	//	ОчередиАгенты.АгентСостояниеЗарегистрировать(ТелСсылка,ЭтаФорма.КонсольПауза);
	//<14.06.2018 10-37, //, >	
	КонецЕсли;
	
	//<14.06.2018 10-37, //, >		
	//ОбновлениеОтображения();
	//</14.06.2018 10-37>
	
	//31.08.2018, +, Автоматически включить прием автозвонков
	//-------------------------------------------------------
	Если КонсольПауза = Ложь Тогда
		ВключитьВыключитьПодключениеОбработчикаОжидания(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция Интеграция_Агр_ТелАгентСостояниеУстановить(Очередь, Телефон, НовСостояние) Экспорт
	//Изменение состояния телефона через web-service asterisk по аналогии с ОУ
	
	//http://astws.main.luidorauto.ru:8081/asterisk_ws/soap/description
	//:param queuename: queue name (string)
	//:param agentnum: agent phone number (string)
	//:param active: False - set pause, True - set unpause (bool)
	//:param min_agents: minimum count of agents (int)
	
	Доступно = 				ТипЗнч(Очередь) = Тип("СправочникСсылка.ТелОчереди");
	Доступно = Доступно И 	ТипЗнч(Телефон) = Тип("СправочникСсылка.ТелВнутренние");
	Доступно = Доступно И 	ТипЗнч(НовСостояние) = Тип("Булево");
	Доступно = Доступно И 	ЗначениеЗаполнено(Очередь);
	Доступно = Доступно И 	ЗначениеЗаполнено(Телефон);
	
	Данные = "Очередь = " + Очередь + "; Телефон = "+Телефон+"; НовСостояние = "+НовСостояние ;
	
	Если Не Доступно Тогда
		Комментарий = "Ошибка в типе или заполнении аргументов";
		ЗаписьЖурналаРегистрации("Интеграция_Агр_ТелАгентСостояниеУстановить", УровеньЖурналаРегистрации.Ошибка, ,Данные, Комментарий);
	КонецЕсли;
	
	ОчередьИмя 	 = Очередь.Наименование;
	ТелефонНомер = Телефон.Код;
	Ответ = "";
	Попытка
		
		//ВебСервис = WSСсылки.PbxService.СоздатьWSПрокси("http://tempuri.org/","asterisk_ws","asterisk_ws");
		//=>
		ОпределениеСервиса = Новый WSОпределения("http://astws.main.luidorauto.ru:8081/asterisk_ws/soap/description");
		ВебСервис = Новый WSПрокси(ОпределениеСервиса, "http://tempuri.org/", "asterisk_ws", "asterisk_ws"); 

		Результат = ВебСервис.change_agent_state(ОчередьИмя, ТелефонНомер, НовСостояние, 0);
		
		Если (ТипЗнч(Результат) = Тип("Строка")) И (ЗначениеЗаполнено(Результат)) Тогда
			Ответ = "Изменение состояния для агента  невозможно по причине: " + СокрЛП(Результат);
			Возврат (Ответ);
		КонецЕсли;
	Исключение
		Комментарий = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("Интеграция_Агр_ТелАгентСостояниеУстановить", УровеньЖурналаРегистрации.Ошибка, ,Данные, Комментарий);
		Ответ = Комментарий;
	КонецПопытки;

	// Если мы оказались здесь, значит сервис успешно отработал
	// Обновим информацию о состоянии агента в базе данных
	//-------------------------------------------------------------------------------------------------
	//Агр_ТелАгентСостояниеОбновить(СтрАгент.Телефон);
	//СтрАгент = Агр_ТелАгентСостояниеПолучить(СтрАгент.Телефон);
	//Ответ = ?(ТипЗнч(СтрАгент) = Тип("Структура"),СтрАгент.Состояние,"Общая ошибка изменения состояния агента");
	

	Возврат (Ответ);
КонецФункции
#КонецОбласти

#Область Работа_со_справочником_Предприятие
&НаКлиенте
Процедура СправочникПоискПриИзменении(Элемент = Неопределено)

// Удалим существующий отбор
//-------------------------------------------------------------------------------------------------
	Для Каждого ТекСтрока Из ЭтаФорма.Справочник.Отбор.Элементы Цикл
		Если (ТекСтрока.Представление = "ОтборПоПодстрокеПоиска") Тогда
			ЭтаФорма.Справочник.Отбор.Элементы.Удалить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;

// Если подстрока поиска не заполнена, то завершим процедуру
//-------------------------------------------------------------------------------------------------
	Если (НЕ ЗначениеЗаполнено(ЭтаФорма.СправочникПоиск)) Тогда
		Элементы.Справочник.Отображение = ОтображениеТаблицы.ИерархическийСписок;
		ЭтаФорма.ТекущийЭлемент = Элементы.СправочникПоиск;

// Если подстрока поиска заполнена, то сформируем условие фильтрации
// Поиск может производиться по одному или нескольким словам
//-------------------------------------------------------------------------------------------------
	Иначе
		МассивСлов = Конвертация.СтрокаРазделить(СокрЛП(ЭтаФорма.СправочникПоиск)," ");
		ГруппаОтбора = ЭтаФорма.Справочник.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		ГруппаОтбора.Представление = "ОтборПоПодстрокеПоиска";
		ГруппаОтбора.Использование = Истина;

		Для Каждого ТекСлово Из МассивСлов Цикл
			ВнутрГруппаОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ВнутрГруппаОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
			ВнутрГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ;
			ВнутрГруппаОтбора.Использование = Истина;

			ЭлементОтбора = ВнутрГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("НаименованиеПолное");
			ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Содержит;
			ЭлементОтбора.ПравоеЗначение	= СокрЛП(ТекСлово);
			ЭлементОтбора.Использование		= Истина;

			ЭлементОтбора = ВнутрГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Телефоны");
			ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Содержит;
			ЭлементОтбора.ПравоеЗначение	= СокрЛП(ТекСлово);
			ЭлементОтбора.Использование		= Истина;
		КонецЦикла;

		Элементы.Справочник.Отображение = ОтображениеТаблицы.Список;
		ЭтаФорма.ТекущийЭлемент = Элементы.Справочник;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СправочникВыбор(Элемент,ВыбраннаяСтрока,Поле,СтандартнаяОбработка)

// Если пользователь выбрал строку и эта строка является группой, то необходимо проверить
// используется ли фильтр для поиска по Списку (заполненность реквизита "ПодстрокаПоиска")
// Если реквизит заполнен (т.е. фильтр существует), то для правильного входа в группу и отображения
// элементов группы - очистим фильтр и переведем режим отображения списка в "ИерархическийСписок"
//-------------------------------------------------------------------------------------------------
	Если (Элемент.ТекущиеДанные.ЭтоГруппа = Истина) Тогда
		ЭтаФорма.СправочникПоиск = Неопределено;
		СправочникПоискПриИзменении();
	Иначе
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СправочникПриАктивизацииСтроки(Элемент)

// Отобразим все телефоны текущего выбранного элемента справочника
//-------------------------------------------------------------------------------------------------
	ТекСсылка = ?(Элемент.ТекущиеДанные = Неопределено,Неопределено,Элемент.ТекущиеДанные.Ссылка);
	СправочникЭлементПолучитьТелефоны(ТекСсылка);
КонецПроцедуры

&НаСервере
Процедура СправочникЭлементПолучитьТелефоны(ТекСсылка)

// Если переданная ссылка не пустая
// Получим все телефоны закрепленные за объектом
//-------------------------------------------------------------------------------------------------
	ЭтаФорма.Телефоны.Очистить();

	Если (ЗначениеЗаполнено(ТекСсылка)) Тогда
		ТЗТемп = Телефония.ТелефоныВладельцаПолучить(ТекСсылка);

		Для Каждого ТекСтрока Из ТЗТемп Цикл
			НовСтрока = ЭтаФорма.Телефоны.Добавить();
			НовСтрока.Ссылка = ТекСтрока.Телефон;
			НовСтрока.Тип = СокрЛП(ТекСтрока.Тип);
			НовСтрока.Atxfer = СокрЛП(ТекСтрока.Телефон);
			НовСтрока.Redirect = СокрЛП(ТекСтрока.Телефон);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ВнешнееСобытие

//*************************************************************************************************
// Обработка внешних событий (событий компоненты телефонии)
//*************************************************************************************************
&НаКлиенте
Процедура _ВнешнееСобытие(Источник,Событие,Данные)
	
	Если МоиНастройки_ТестовыйРежим Тогда
		Если ЭтаФорма.Отладка_Лог.КоличествоСтрок()>20000 Тогда
			ЭтаФорма.Отладка_Лог.Очистить();
		КонецЕсли;
		ЭтаФорма.Отладка_Лог.ДобавитьСтроку("**********************");
		ЭтаФорма.Отладка_Лог.ДобавитьСтроку("ДатаВремя = "+ТекущаяДата()+"; Источник = "+Источник+ "; Событие = "+Событие);
		ЭтаФорма.Отладка_Лог.ДобавитьСтроку("Данные = "+Данные);
		Сообщить(Данные);
	КонецЕсли;
	
	// Убедимся в том, что полученное событие - это событие телефонной компоненты
	//-------------------------------------------------------------------------------------------------
	Доступно = (ТипЗнч(Источник) = Тип("Строка"));
	Доступно = Доступно И (ТипЗнч(Данные) = Тип("Строка"));
	Доступно = Доступно И (Найти(ВРег(СокрЛП(Источник)),"TCPCLIENT") > 0);
	
	Если (Доступно = Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	//<Кошелев_05092017, //>
	//Игнорировать событие,  если консоль в режиме паузы
	//---------------------------------------------------
	Если ЭтаФорма.КонсольПауза Тогда
		Возврат
	КонецЕсли;
	//</Кошелев_05092017>
	
	// Disconnect - событие, извещающее о разрыве соединения с сервером телефонии
	//-------------------------------------------------------------------------------------------------
	Доступно = (ТипЗнч(Событие) = Тип("Строка"));
	Доступно = Доступно И (ВРег(СокрЛП(Событие)) = "DISCONNECT");
	
	Если (Доступно = Истина) Тогда
		ВнешнееСобытиеHangup();
		//ПриОткрытии(Ложь);
		Возврат;
	КонецЕсли;	
		
	// В полученном пакете может находиться несколько событий
	// Каждое событие начинается со строки "Event:" и заканчивается двойным символом переноса строки
	// Выполним разбиение полученного пакета на строки - события
	//-------------------------------------------------------------------------------------------------
	ПакетСобытий = ВРег(СокрЛП(Данные));
	
	// Получим очередное событие
	//-------------------------------------------------------------------------------------------------
	Пока СтрДлина(ПакетСобытий)>6 Цикл // СтрДлина("EVENT:")
		
		ПозОкончания = СтрНайти(ПакетСобытий,"EVENT:", , 2)-1; // ищи 2-й Event
		ПозОкончания = ?(ПозОкончания <= 0,СтрДлина(ПакетСобытий),ПозОкончания);
		ТекСобытие = СокрЛП(Лев(ПакетСобытий,ПозОкончания));
		
		// Получим тип события
		// DialBegin 	- Вызов оператора не из очереди (оператор выполняет начал исходящий звонок)
		// AgentCalled 	- Вызов оператора из очереди (поступил входящий звонок на оператора)
		// Hangup 		- Завершение звонка
		//-------------------------------------------------------------------------------------------------
		Если (ЗначениеЗаполнено(ЭтаФорма.КаналСистемный)) Тогда 
			// Переменная КаналСистемный заполнена, если агент очереди уже взял трубку и разговаривает с абонентом 
			// при входящем или исходящем вызове. Здесь обработаем события связанные с завершением текущего разговора
				
			Если (СтрНайти(ТекСобытие,"EVENT: HANGUP")) Тогда
					ВнешнееСобытиеHangup(ТекСобытие);		
			ИначеЕсли(Найти(ТекСобытие,"EVENT: DIALEND")) И ЭтаФорма.МоиНастройки_ОбрабатыватьАвтозвонки Тогда
			// Обработка непринятого автозвонка
			//-----------------------------------
				ВнешнееСобытиеDialEnd(ТекСобытие);
			КонецЕсли;
		Иначе
			// абонент в текущий момент не обрабатывает вызов, т.е. трубка телефона лежит
			
			Если (Найти(ТекСобытие,"EVENT: DIALBEGIN")) Тогда
				ВнешнееСобытиеDialBegin(ТекСобытие);
			ИначеЕсли (Найти(ТекСобытие,"EVENT: AGENTCALLED")) Тогда
				ВнешнееСобытиеAgentCalled(ТекСобытие);
			КонецЕсли;
		КонецЕсли;
		
		// Уберем из текущего пакета событий обработанный блок
		//-------------------------------------------------------------------------------------------------
		ПакетСобытий = СокрЛП(Сред(ПакетСобытий,ПозОкончания,СтрДлина(ПакетСобытий)));
		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура __ВнешнееСобытие(Источник,Событие,Данные)
	
	Если МоиНастройки_ТестовыйРежим Тогда
		Если ЭтаФорма.Отладка_Лог.КоличествоСтрок()>20000 Тогда
			ЭтаФорма.Отладка_Лог.Очистить();
		КонецЕсли;
		ЭтаФорма.Отладка_Лог.ДобавитьСтроку("**********************");
		ЭтаФорма.Отладка_Лог.ДобавитьСтроку("ДатаВремя = "+ТекущаяДата()+"; Источник = "+Источник+ "; Событие = "+Событие);
		ЭтаФорма.Отладка_Лог.ДобавитьСтроку("Данные = "+Данные);
		Сообщить(Данные);
	КонецЕсли;
	
	// Убедимся в том, что полученное событие - это событие телефонной компоненты
	//-------------------------------------------------------------------------------------------------
	Доступно = (ТипЗнч(Источник) = Тип("Строка"));
	Доступно = Доступно И (ТипЗнч(Данные) = Тип("Строка"));
	Доступно = Доступно И (Найти(ВРег(СокрЛП(Источник)),"TCPCLIENT") > 0);
	
	Если (Доступно = Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	//<Кошелев_05092017, //>
	//Игнорировать событие,  если консоль в режиме паузы
	//---------------------------------------------------
	Если ЭтаФорма.КонсольПауза Тогда
		Возврат
	КонецЕсли;
	//</Кошелев_05092017>
	
	// Disconnect - событие, извещающее о разрыве соединения с сервером телефонии
	//-------------------------------------------------------------------------------------------------
	Доступно = (ТипЗнч(Событие) = Тип("Строка"));
	Доступно = Доступно И (ВРег(СокрЛП(Событие)) = "DISCONNECT");
	
	Если (Доступно = Истина) Тогда
		ВнешнееСобытиеHangup();
		//ПриОткрытии(Ложь);
		Возврат;
	КонецЕсли;	
		
	// В полученном пакете может находиться несколько событий
	// Каждое событие начинается со строки "Event:" и заканчивается двойным символом переноса строки
	// Выполним разбиение полученного пакета на строки - события
	//-------------------------------------------------------------------------------------------------
	ПакетСобытий = ВРег(СокрЛП(Данные));
	
	// Получим очередное событие
	//-------------------------------------------------------------------------------------------------
	Пока СтрДлина(ПакетСобытий)>6 Цикл // СтрДлина("EVENT:")
		
		ПозОкончания = СтрНайти(ПакетСобытий,"EVENT:", , 2)-1; // ищи 2-й Event
		ПозОкончания = ?(ПозОкончания <= 0,СтрДлина(ПакетСобытий),ПозОкончания);
		ТекСобытие = СокрЛП(Лев(ПакетСобытий,ПозОкончания));
		
		// Получим тип события
		// DialBegin 	- Вызов оператора не из очереди (оператор выполняет начал исходящий звонок)
		// AgentCalled 	- Вызов оператора из очереди (поступил входящий звонок на оператора)
		// Hangup 		- Завершение звонка
		//-------------------------------------------------------------------------------------------------
		Если (ЗначениеЗаполнено(ЭтаФорма.КаналСистемный)) Тогда 
			// Переменная КаналСистемный заполнена, если агент очереди уже взял трубку и разговаривает с абонентом 
			// при входящем или исходящем вызове. Здесь обработаем события связанные с завершением текущего разговора
				
			Если (СтрНайти(ТекСобытие,"EVENT: HANGUP")) Тогда
					ВнешнееСобытиеHangup(ТекСобытие);		
			ИначеЕсли(Найти(ТекСобытие,"EVENT: DIALEND")) И ЭтаФорма.МоиНастройки_ОбрабатыватьАвтозвонки Тогда
			// Обработка непринятого автозвонка
			//-----------------------------------
				ВнешнееСобытиеDialEnd(ТекСобытие);
			КонецЕсли;
		Иначе
			// абонент в текущий момент не обрабатывает вызов, т.е. трубка телефона лежит
			
			Если (Найти(ТекСобытие,"EVENT: DIALBEGIN")) Тогда
				ВнешнееСобытиеDialBegin(ТекСобытие);
			ИначеЕсли (Найти(ТекСобытие,"EVENT: AGENTCALLED")) Тогда
				ВнешнееСобытиеAgentCalled(ТекСобытие);
			КонецЕсли;
		КонецЕсли;
		
		// Уберем из текущего пакета событий обработанный блок
		//-------------------------------------------------------------------------------------------------
		ПакетСобытий = СокрЛП(Сред(ПакетСобытий,ПозОкончания,СтрДлина(ПакетСобытий)));
		
	КонецЦикла;
КонецПроцедуры

//<Кошелев_211116, +,Обработка непринятого автозвонка>
&НаКлиенте
Процедура ВнешнееСобытиеDialEnd(Данные)
	// Обработка непринятого автозвонка
	
	//Пример события для номера 5240
	//Event: DialEnd
	//Privilege: call,all
	//Channel: SIP/5240-00037327
	//ChannelState: 6
	//ChannelStateDesc: Up
	//CallerIDNum: 5240
	//CallerIDName: 5240
	//ConnectedLineNum: 5240
	//ConnectedLineName: 5240
	//Language: ru
	//AccountCode: 
	//Context: macro-outcalls
	//Exten: s
	//Priority: 7
	//Uniqueid: 1540886642.1871116
	//Linkedid: 1540886642.1871116
	//DestChannel: SIP/edgeast-0003732a
	//DestChannelState: 6
	//DestChannelStateDesc: Up
	//DestCallerIDNum: 89216115438
	//DestCallerIDName: 5240
	//DestConnectedLineNum: 5240
	//DestConnectedLineName: 5240
	//DestLanguage: ru
	//DestAccountCode: 
	//DestContext: default
	//DestExten: 
	//DestPriority: 1
	//DestUniqueid: 1540886643.1871143
	//DestLinkedid: 1540886642.1871116
	//DialStatus: ANSWER
	
	#Область Перенесено_создание_задачи_на_перезвон_при_неудаче_автозвонка_из_DialEnd_с_08ноя18
		Возврат;
	#КонецОбласти
	
	//Игнорировать событие,  если консоль в режиме паузы
	Если ЭтаФорма.КонсольПауза Тогда
		Возврат
	КонецЕсли;

	// Получи номер телефона оператора консоли
	//ТелСсылка = ЗначенияСервера.ПолучитьЗначениеПараметраСеанса("ККЦТелефон");
	//ТелКонсоли = ЗначенияСервера.ПолучитьЗначениеРеквизита(ТелСсылка,"Код");
	ТелКонсоли = ЭтаФорма.КонсольТелефон;

	// Относится ли событие к этой консоли?
	Доступно = (СтрНайти(Данные,"CALLERIDNUM: " + ТелКонсоли) > 0);	
	Если Доступно = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	//Если ЭтаФорма.ФильтрПоКаналу И ЗначениеЗаполнено(КаналСистемный) И СтрНайти(ПоследняяКомандаFilter, КаналСистемный) = 0  Тогда
	//		ТекстКоманды =	"Action: Filter" 					 + Символы.ПС +
	//						"Operation: Add" 					 + Символы.ПС +
	//						"Filter: Channel: *"+ Символы.ПС + Символы.ПС;
	//		КонтактЦентр.КомпонентаВыполнитьКоманду(ТекстКоманды);
	//		ПоследняяКомандаFilter = ТекстКоманды;
	//КонецЕсли;
	
	// Определим направление вызова - входящий или исходящий. Если не исхдящий - выход
	ТелВызывающий = Конвертация.ПараметрПолучить(Данные,"CALLERIDNUM");
	Если (ВРег(СокрЛП(ТелВызывающий)) <> ТелКонсоли) Тогда
		Возврат		
	КонецЕсли;
	
	//Телефон вызываемого внешнего абонента
	Телефон = Конвертация.ПараметрПолучить(Данные,"DESTCALLERIDNUM");	
	Телефон = Конвертация.ТелефонВнешнийНормализовать(Телефон);
		
	Доступно = СтрДлина(Телефон)>=10;
	Доступно = Доступно И СтрДлина(ЭтаФорма.Элементы.Дисплей03.Заголовок)>3; //Признак автозвонка
	Если Доступно = Ложь Тогда
		Возврат
	КонецЕсли;
	
	Доступно = Найти(Данные,"DIALSTATUS: ABORT") > 0;				  		//The call was aborted (звонок прерван)
	Доступно = Доступно Или (Найти(Данные,"DIALSTATUS: BUSY") 		> 0);  	//The caller was busy (звонящий занят)
	Доступно = Доступно Или (Найти(Данные,"DIALSTATUS: CANCEL") 	> 0); 	//The caller cancelled the call (звонящий отменил вызов)
	Доступно = Доступно Или (Найти(Данные,"DIALSTATUS: CONGESTION") > 0); 	//The called party is congested (вызываемый абонент перегружен)
	Доступно = Доступно Или (Найти(Данные,"DIALSTATUS: NOANSWER") 	> 0);    //The called party failed to answer (вызываемый абонент не  принял вызов)
	Доступно = Доступно Или (Найти(Данные,"DIALSTATUS: FAILED") 	> 0);    //The called party failed to answer (вызываемый абонент не  принял вызов)
	
	Если Доступно = Ложь Тогда
		Возврат
	КонецЕсли;
								
	ДатаЗакрытия = Дата(1,1,1,0,0,0);
	Тип = "Перечисления.ТипЗадачи.НепринятыйИсходящий";
	Исполнитель = "ПараметрыСеанса.ККЦКонтактЦентр";
	Комментарий = "Пропущеный автозвонок";
	ДатаПостановки =  ЗначенияСервера.ТекущаяДатаСервер();
	ЗвонокИнициатор = "0#"+Конвертация.ПараметрПолучить(Данные,"LinkedID")+"#"+Телефония.ПолучиСерверТелефонииВнутрТелефона(ТелКонсоли);
	ДатаАктуальности = ДатаПостановки+600;
	ПисьмоИнициатор  = ЭтаФорма.Элементы.Дисплей03.Заголовок; 	
	РегистрыСведений_ЗадачиОбратныйЗвонок_Добавить(Телефон, ДатаЗакрытия, Тип, Исполнитель, Комментарий, ДатаПостановки, ЗвонокИнициатор, ДатаАктуальности, ПисьмоИнициатор);
	
	ДисплейСайтОтправительАвтозвонка 	= "";
	ДисплейТекстАвтозвонка 				= "";
	ДисплейИмяАвтозвонка 				= "";
	ДисплейМайлАвтозвонка 				= "";

КонецПроцедуры 
//</Кошелев_211116>

&НаКлиенте
Процедура ВнешнееСобытиеAgentCalled(Данные)
	//возникает, когда агенту очереди поступает из нее входящий вызов
	
	//Пример параметра Данные:
	//Агенту (оператору КЦ) с внутренним телефоном 5240, состоящим в очереди  RECEPTION 
	//поступает из нее входящий звонок от внешнего абонента 9253651964, позвонившего в компанию на телефон  88002002402:
	//Event: AgentCalled
	//Privilege: agent,all
	//Channel: SIP/edgeast-001e5e69
	//ChannelState: 6
	//ChannelStateDesc: Up
	//CallerIDNum: 9253651964
	//CallerIDName: 88002002402
	//ConnectedLineNum: <unknown>
	//ConnectedLineName: <unknown>
	//Language: ru
	//AccountCode: 
	//Context: macro-QueueRoutine
	//Exten: s
	//Priority: 23
	//Uniqueid: 1535529257.16433228
	//Linkedid: 1535529257.16433228
	//DestChannel: SIP/5240-001e5e6a
	//DestChannelState: 0
	//DestChannelStateDesc: Down
	//DestCallerIDNum: <unknown>
	//DestCallerIDName: <unknown>
	//DestConnectedLineNum: 9253651964
	//DestConnectedLineName: 88002002402
	//DestLanguage: ru
	//DestAccountCode: 
	//DestContext: default
	//DestExten: 5519
	//DestPriority: 1
	//DestUniqueid: 1535529257.16433236
	//DestLinkedid: 1535529257.16433228
	//Queue: RECEPTION
	//Interface: SIP/5240
	//MemberName: 5240


//<24.10.2018 15-21>
//Если оператор не свободен, отключи дальнейшую обработку события
//----------------------------------------------------------------
	Если ЭтаФорма.КонсольСостояние > 0 Тогда
		Возврат;
	КонецЕсли;
//</24.10.2018 15-21>

// Выясним относится ли полученное событие к данной консоли -
// в этом случае в полученном событии поле MemberName совпадает с номером консоли
//-------------------------------------------------------------------------------------------------

	//<29.08.2018, =>, замена обращения к серверу>
	// Код сохранен, но также отбор по MemberName добавлен при подключении компоненты
	Доступно = (СтрНайти(Данные,"MEMBERNAME: " + ЭтаФорма.КонсольТелефон) > 0);
	//</29.08.2018>

	Если (Доступно = Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтаФорма.МоиНастройки_ТестовыйРежим Тогда
		Если ЭтаФорма.Отладка_Лог.КоличествоСтрок()>20000 Тогда
			ЭтаФорма.Отладка_Лог.Очистить();
		КонецЕсли;
		ЭтаФорма.Отладка_Лог.ДобавитьСтроку("****************************************************************************");
		ЭтаФорма.Отладка_Лог.ДобавитьСтроку("**********************ВнешнееСобытиеAgentCalled******************************");
		ЭтаФорма.Отладка_Лог.ДобавитьСтроку("ДатаВремя = "+ТекущаяДата());
		ЭтаФорма.Отладка_Лог.ДобавитьСтроку("Данные = "+Данные);
	КонецЕсли;

	//Обработка автозвонков
	//----------------------
	ВключитьВыключитьПодключениеОбработчикаОжидания(Ложь);

// Поступил входящий звонок из системной очереди
//-------------------------------------------------------------------------------------------------
	ЭтаФорма.КаналСистемный = Конвертация.ПараметрПолучить(Данные,"DESTCHANNEL");
	ЭтаФорма.КаналИнициатор = Конвертация.ПараметрПолучить(Данные,"CALLERIDNAME");
	ЭтаФорма.АбонентВнешний = Конвертация.ПараметрПолучить(Данные,"CALLERIDNUM");
	
	//Если ЭтаФорма.ФильтрПоКаналу Тогда
	//	ТекстКоманды =	"Action: Filter" 							 + Символы.ПС +
	//					"Operation: Add" 							 + Символы.ПС +
	//					"Filter: Event: Hangup"+ Символы.ПС + "*Channel: SIP/"+КонсольТелефон+"-*"+ Символы.ПС + Символы.ПС;                                                    
	//	КонтактЦентр.КомпонентаВыполнитьКоманду(ТекстКоманды);
	//	ПоследняяКомандаFilter = ТекстКоманды;
	//КонецЕсли;
	
	ЭтаФорма.к_LinkedID 	= Конвертация.ПараметрПолучить(Данные,"LinkedID");
	
	Элементы.ГруппаДисплей.Видимость = Истина;
	ЭтаФорма.КонсольСостояние = 1;

// Если звонок поступил по каналу с номером "88342270703" (Саранск), то поменяем местами значения
// реквизитов "КаналИнициатор" и "АбонентВнешний"
//-------------------------------------------------------------------------------------------------
	Доступно = (СтрДлина(СокрЛП(ЭтаФорма.АбонентВнешний)) = 11);
	Доступно = Доступно И (СокрЛП(ЭтаФорма.АбонентВнешний) = "88342270703");

	Если (Доступно = Истина) Тогда
		ЭтаФорма.АбонентВнешний = СокрЛП(ЭтаФорма.КаналИнициатор);
		ЭтаФорма.КаналИнициатор = "88342270703";
	КонецЕсли;

// Вызовем процедуру визуализации звонка
// Тестовые значения идентификаторов звонков
//-------------------------------------------------------------------------------------------------
	Если (СтрДлина(ЭтаФорма.АбонентВнешний) = 4) Тогда
		ЗвонокОбработатьВнутренний();
	Иначе
		ЗвонокОбработатьВнешнийВходящий();
	КонецЕсли;

	ОбновлениеОтображения();
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытиеDialBegin(Данные)
	
	//Пример параметра Данные:

	//Event: DialBegin
	//Privilege: call,all
	//Channel: SIP/5240-00037260
	//ChannelState: 6
	//ChannelStateDesc: Up
	//CallerIDNum: 5240
	//CallerIDName: 5240
	//ConnectedLineNum: 5240
	//ConnectedLineName: 5240
	//Language: ru
	//AccountCode: 
	//Context: macro-outcalls
	//Exten: s
	//Priority: 7
	//Uniqueid: 1540886586.1869498
	//Linkedid: 1540886586.1869498
	//DestChannel: SIP/edgeast-00037266
	//DestChannelState: 0
	//DestChannelStateDesc: Down
	//DestCallerIDNum: 89519054422
	//DestCallerIDName: 5240
	//DestConnectedLineNum: 5240
	//DestConnectedLineName: 5240
	//DestLanguage: ru
	//DestAccountCode: 
	//DestContext: default
	//DestExten: 89519054422
	//DestPriority: 1
	//DestUniqueid: 1540886588.1869553
	//DestLinkedid: 1540886586.1869498
	//DialString: edgeast/89519054422	

// Выполняется прямой вызов {кош: оператора} (вызов не из очереди){кош: например при автозвонке}
// Получим номер телефона оператора консоли
//-------------------------------------------------------------------------------------------------
	ТелСсылка = ЗначенияСервера.ПолучитьЗначениеПараметраСеанса("ККЦТелефон");
	ТелКонсоли = ЗначенияСервера.ПолучитьЗначениеРеквизита(ТелСсылка,"Код");

// Выясним выполняется ли данный вызов в режиме "CallBack" (т.е. телефонный сервер вызывает
// абонента). Системный вызов отличается от полноценного тем, что у него нет реквизита "Channel"
//-------------------------------------------------------------------------------------------------
	Доступно = (Найти(Данные,"CALLERIDNUM: " + ТелКонсоли) > 0);
	Доступно = Доступно ИЛИ (Найти(Данные,"DESTEXTEN: " + ТелКонсоли) > 0);
	Доступно = Доступно И ЗначениеЗаполнено(Конвертация.ПараметрПолучить(Данные,"CHANNEL"));

	Если (Доступно = Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтаФорма.МоиНастройки_ТестовыйРежим Тогда
		Если ЭтаФорма.Отладка_Лог.КоличествоСтрок()>20000 Тогда
			ЭтаФорма.Отладка_Лог.Очистить();
		КонецЕсли;
		ЭтаФорма.Отладка_Лог.ДобавитьСтроку("****************************************************************************");
		ЭтаФорма.Отладка_Лог.ДобавитьСтроку("********************** ВнешнееСобытиеDialBegin******************************");
		ЭтаФорма.Отладка_Лог.ДобавитьСтроку("ДатаВремя = "+ТекущаяДата());
		ЭтаФорма.Отладка_Лог.ДобавитьСтроку("Данные = "+Данные);
	КонецЕсли;

	//<Кошелев_07.09.2017_14-29, +, ЭТОТ КОД НЕПРАВИЛЬНЫЙ>
	//Исключи повторный DialBegin при слепом переводе автозвонка
	//-----------------------------------------------------------
	_LinkedID 	= Конвертация.ПараметрПолучить(Данные,"Linkedid");
	_UniqueID 	= Конвертация.ПараметрПолучить(Данные,"UniqueID");
	Если _LinkedID <> _UniqueID Тогда
		Возврат;
	КонецЕсли;
	//<Кошелев_07.09.2017_14-29
		
	// ОбработкаАвтозвонков
	//----------------------
	ВключитьВыключитьПодключениеОбработчикаОжидания(Ложь);

// Вызов не системный. Определим направление вызова - входящий или исходящий
//-------------------------------------------------------------------------------------------------
	ТелВызывающий = Конвертация.ПараметрПолучить(Данные,"CALLERIDNUM");
	Элементы.ГруппаДисплей.Видимость = Истина;
	ЭтаФорма.КаналИнициатор = "";

// Если вызов исходящий
//-------------------------------------------------------------------------------------------------
	Если (ВРег(СокрЛП(ТелВызывающий)) = ТелКонсоли) Тогда
		ЭтаФорма.КаналСистемный = Конвертация.ПараметрПолучить(Данные,"CHANNEL");
		ЭтаФорма.АбонентВнешний = Конвертация.ПараметрПолучить(Данные,"DESTCALLERIDNUM");
		ЭтаФорма.КонсольСостояние = 2;
		
		//<Кошелев_05092017, +>
		// Поставь агента в паузу, чтобы при автозвонке на него поступали входящие из очереди
		//-----------------------------------------------------------------------------------
		//Если ЭтаФорма.МоиНастройки_ОбрабатыватьАвтозвонки Тогда
		//	ЭтаФорма.КонсольПауза = Истина;
		//	КонсольПаузаПриИзменении("просто какое-то значение");
		//КонецЕсли;
		//</Кошелев_05092017>


// Если вызов входящий
//-------------------------------------------------------------------------------------------------
	Иначе
		ЭтаФорма.КаналСистемный = Конвертация.ПараметрПолучить(Данные,"DESTCHANNEL");
		ЭтаФорма.АбонентВнешний = Конвертация.ПараметрПолучить(Данные,"CALLERIDNUM");
		
		//<Кошелев>
		ЭтаФорма.к_LinkedID = Конвертация.ПараметрПолучить(Данные,"Linkedid");
		//</Кошелев>
		
		ЭтаФорма.КонсольСостояние = 1;
	КонецЕсли;

// Вызовем процедуру визуализации информации о звонке
//-------------------------------------------------------------------------------------------------
	Если (СтрДлина(ЭтаФорма.АбонентВнешний) = 4) Тогда
		ЗвонокОбработатьВнутренний();
	ИначеЕсли (ЭтаФорма.КонсольСостояние = 2) Тогда
		ЗвонокОбработатьВнешнийИсходящий();
	Иначе
		ЗвонокОбработатьВнешнийВходящий();
	КонецЕсли;

	ОбновлениеОтображения();
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытиеHangup(Данные = Неопределено)
	
	//Пример параметра Данные по номеру 5240
	//Event: Hangup
	//Privilege: call,all
	//Channel: SIP/5240-0003729c
	//ChannelState: 0
	//ChannelStateDesc: Down
	//CallerIDNum: <unknown>
	//CallerIDName: <unknown>
	//ConnectedLineNum: 89209161927
	//ConnectedLineName: 84922778079
	//Language: ru
	//AccountCode: 
	//Context: default
	//Exten: 5519
	//Priority: 1
	//Uniqueid: 1540886600.1869935
	//Linkedid: 1540886600.1869931
	//Cause: 17
	//Cause-txt: User busy
	
		
// Выясним относится ли полученное событие к данной консоли
//-------------------------------------------------------------------------------------------------
	Доступно = (Данные = Неопределено);
	Доступно = Доступно ИЛИ (СтрДлина(КаналСистемный)>0  И СтрНайти(Данные,"CHANNEL: " + ВРег(СокрЛП(КаналСистемный))) > 0);

	Если (Доступно = Истина) Тогда
				
		//Если ЭтаФорма.МоиНастройки_ТестовыйРежим Тогда
		//	Если ЭтаФорма.Отладка_Лог.КоличествоСтрок()>20000 Тогда
		//		ЭтаФорма.Отладка_Лог.Очистить();
		//	КонецЕсли;
		//	ЭтаФорма.Отладка_Лог.ДобавитьСтроку("****************************************************************************");	
		//	ЭтаФорма.Отладка_Лог.ДобавитьСтроку("********************** ВнешнееСобытиеHangup******************************");
		//	ЭтаФорма.Отладка_Лог.ДобавитьСтроку("ДатаВремя = "+ТекущаяДата());
		//	ЭтаФорма.Отладка_Лог.ДобавитьСтроку("Данные = "+Данные);
		//КонецЕсли;

		//<Кошелев_05092017,+>
		// Сними с паузы. При автозвонке поставили на паузу, т.к. телефонный сервер не считает
		// при исходящем звонке, что оператор занят
		//---------------------------------------------------------------------------------------
		//Доступно = ЭтаФорма.МоиНастройки_ОбрабатыватьАвтозвонки;
		//Доступно = Доступно И ЭтаФорма.КонсольПауза = Истина;
		//Доступно = Доступно И ЭтаФорма.КонсольСостояние = 2;
		//Если Доступно Тогда
		//	ЭтаФорма.КонсольПауза = Ложь;
		//	КонсольПаузаПриИзменении("просто какое-то значение");
		//КонецЕсли;
		//</Кошелев_05092017>
		
		//Если ЭтаФорма.ФильтрПоКаналу И ЗначениеЗаполнено(КаналСистемный) И СтрНайти(ПоследняяКомандаFilter, КаналСистемный) = 0 Тогда
		//	ТекстКоманды =	"Action: Filter" 	+ Символы.ПС +
		//					"Operation: Add" 	+ Символы.ПС +
		//					"Filter: Channel: SIP/"+КонсольТелефон+"-*"+ Символы.ПС + Символы.ПС;
		//	КонтактЦентр.КомпонентаВыполнитьКоманду(ТекстКоманды);
		//	ПоследняяКомандаFilter = ТекстКоманды;
		//КонецЕсли;
	
		// Закрой задачу автозвонка
		//-------------------------------------------------------
		Если СтрДлина(ЭтаФорма.ДисплейСайтОтправительАвтозвонка)>0 Тогда
			ЗакрытьЗадачуАвтоЗвонка(ЭтаФорма.АбонентВнешний);
			
			#Область Перенесено_создание_задачи_на_перезвон_при_неудаче_автозвонка_из_DialEnd_с_08ноя18
			//Причины создания задачи на перезвон в DialEnd
			//Доступно = Найти(Данные,"DIALSTATUS: ABORT") > 0;				  		//The call was aborted (звонок прерван)
			//Доступно = Доступно Или (Найти(Данные,"DIALSTATUS: BUSY") 		> 0);  	//The caller was busy (звонящий занят)
			//Доступно = Доступно Или (Найти(Данные,"DIALSTATUS: CANCEL") 	> 0); 	//The caller cancelled the call (звонящий отменил вызов)
			//Доступно = Доступно Или (Найти(Данные,"DIALSTATUS: CONGESTION") > 0); 	//The called party is congested (вызываемый абонент перегружен)
			//Доступно = Доступно Или (Найти(Данные,"DIALSTATUS: NOANSWER") 	> 0);    //The called party failed to answer (вызываемый абонент не  принял вызов)
			//Доступно = Доступно Или (Найти(Данные,"DIALSTATUS: FAILED") 	> 0);    //The called party failed to answer (вызываемый абонент не  принял вызов)
			//=>
			Доступно = Найти(Данные,"CAUSE-TXT: USER BUSY") 								> 0;   // Вызываемый номер занят (User busy)
			Доступно = Доступно Или (Найти(Данные,"CAUSE-TXT: CALL REJECTED") 				> 0);  // Вызов отклонен (Call rejected)
			Доступно = Доступно Или (Найти(Данные,"CAUSE-TXT: NORMAL TEMPORARY FAILURE") 	> 0);  // Временная неработоспособность (Temporary failure)
			Доступно = Доступно Или (Найти(Данные,"CAUSE-TXT: SWITCH CONGESTION") 			> 0);  // Сетевое оборудование перегружено (Switching equipment congestion)
			Доступно = Доступно Или (Найти(Данные,"CAUSE-TXT: INCOMPATIBLE DESTINATION") 	> 0);  // Несовместимый адресат (Incompatible destination)
			Доступно = Доступно Или (Найти(Данные,"CAUSE-TXT: NO ANSWER") 					> 0);  // Нет сигнализации от пользователя, нет ответа (User Alerted, No answer from user)
			Доступно = Доступно Или (Найти(Данные,"CAUSE-TXT: NOT DEFINED") 				> 0);  // Неопределенная ошибка (Cause not defined)
			Доступно = Доступно Или (Найти(Данные,"CAUSE-TXT: UNALLOCATED") 				> 0);  // Номер не найден (Номера не существует) (Unallocated or unassigned number)
			Доступно = Доступно Или (Найти(Данные,"CAUSE-TXT: NO USER RESPONSE") 			> 0);  // Нет ответа (No user responding)
			Доступно = Доступно Или (Найти(Данные,"CAUSE-TXT: INVALID NUMBER FORMAT") 		> 0);  // Неверный формат номера или неполный адрес (Invalid number format or incomplete address)
	        Доступно = Доступно Или (Найти(Данные,"CAUSE-TXT: NETWORK OUT OF ORDER") 		> 0);  // Сеть вышла из строя (Network out of order)
	        Доступно = Доступно Или (Найти(Данные,"CAUSE-TXT: INCOMING CALL BARRED") 		> 0);  // Входящие вызовы закрыты (Incoming calls barred)			
			#КонецОбласти

		Иначе
			//Обработка ситуации когда ДисплейСайтОтправительАвтозвонка ошибочно не заполнена
			// тогда также закрываем интернет-заявку, но только ту, которая выполняется автозвонком
			//(т.е. ночные задачи, перезваниваемые вручную не должны закрываться)
			//-----------------------------------------------------------------------
			Если ЭтаФорма.КонсольСостояние = 2 Тогда
				ЗакрытьЗадачуАвтоЗвонка(ЭтаФорма.АбонентВнешний);	
			КонецЕсли;
		КонецЕсли;
		
		Элементы.АбонентИстория.Видимость 			= Ложь;
		Элементы.ГруппаДисплей.Видимость 			= Ложь;

		КонсольСостояние = 0;
		КаналСистемный = "";
				
		ДисплейСайтОтправительАвтозвонка 	= "";
		ДисплейТекстАвтозвонка 				= "";
		ДисплейИмяАвтозвонка 				= "";
		ДисплейМайлАвтозвонка 				= "";
		
		ЭтаФорма.АбонентВнешний				= "";
		ЭтаФорма.к_ТелВнутрОП				= "";
		ЭтаФорма.к_LinkedID					= "";
	
		ОбновлениеОтображения();
		
		//ОбработкаАвтозвонков
		//--------------------
		ВключитьВыключитьПодключениеОбработчикаОжидания(Истина);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗвонокОбработатьВнешнийИсходящий()

	// Включение и настройка элементов дисплея
	//---------------------------------------------------------------------------------------------
	Элементы.Дисплей02.Заголовок = "Исходящий звонок на телефон абонента";

	// Сформируем строку дисплея с номером телефона и направлением звонка
	//---------------------------------------------------------------------------------------------
	ЭтаФорма.АбонентВнешний = Конвертация.ТелефонВнешнийНормализовать(ЭтаФорма.АбонентВнешний);
	РегСсылка = Конвертация.РегионПолучитьПоНомеруТелефона(ЭтаФорма.АбонентВнешний);
	Элементы.Дисплей01.Заголовок = СокрЛП(ЭтаФорма.АбонентВнешний);

	Если (ЗначениеЗаполнено(РегСсылка)) Тогда
		Темп = СокрЛП(ЭтаФорма.АбонентВнешний) + " - " + СокрЛП(РегСсылка);
		Элементы.Дисплей01.Заголовок = СокрЛП(Темп);
	КонецЕсли;
	
	//<Кошелев_07.09.2017_11-35, +>	
	// Отобрази сайт, т.к. исходящий может быть автозвонком
	//------------------------------------------------------
	Элементы.Дисплей03.Заголовок = ЭтаФорма.ДисплейСайтОтправительАвтозвонка;
	//</Кошелев_07.09.2017_11-35>		
КонецПроцедуры

&НаСервере
Процедура ЗвонокОбработатьВнешнийВходящий()

// Сформируем ссылку на рекламный канал по которому поступил звонок
// Если ссылка получена, то обработаем вариант когда звонок поступил через подчиненный канал
//-------------------------------------------------------------------------------------------------
	ТелСсылка = Конвертация.ТелВнешнийПолучитьСсылку(ЭтаФорма.КаналИнициатор);
	КодГорода = "";

	Если (ЗначениеЗаполнено(ТелСсылка)) Тогда
		ТелСсылка = ?(ЗначениеЗаполнено(ТелСсылка.Родитель),ТелСсылка.Родитель,ТелСсылка);
		Элементы.Дисплей02.Заголовок = СокрЛП(ТелСсылка.Код) + " - " + СокрЛП(ТелСсылка.Назначение);
		КодГорода = СокрЛП(ТелСсылка.КодГорода);
		ЭтаФорма.КаналИнициатор = ТелСсылка;
	ИначеЕсли (ЗначениеЗаполнено(ЭтаФорма.КаналИнициатор)) Тогда
		Элементы.Дисплей02.Заголовок = СокрЛП(ЭтаФорма.КаналИнициатор) + " - неизвестный канал";
	Иначе
		Элементы.Дисплей02.Заголовок = "Канал поступления звонка не определен";
	КонецЕсли;
	
	//<Кошелев_08092017_12-18, +>
	Элементы.Дисплей03.Заголовок = ЭтаФорма.ДисплейСайтОтправительАвтозвонка;
	//<Кошелев_08092017_12-18>

// Отображение номера абонента
//-------------------------------------------------------------------------------------------------
	Если (ЗначениеЗаполнено(ЭтаФорма.АбонентВнешний)) Тогда
		ЭтаФорма.АбонентВнешний = Конвертация.ТелефонВнешнийНормализовать(ЭтаФорма.АбонентВнешний,КодГорода);
		
		
		//<Выбор сотрудника по умолчанию для обработки звонка (магистрального) контрагента>
	    ВыбратьСотрудника_НаСервере();
		Если ЭтаФорма.Объект.ОтветственныеЗаКонтрагента.Количество()>0 Тогда
			Элементы.Дисплей03.Заголовок = ЭтаФорма.Объект.ОтветственныеЗаКонтрагента[0].Контрагент;	
		КонецЕсли;
		//</Выбор сотрудника по умолчанию для обработки звонка (магистрального) контрагента>
		
		РегСсылка = Конвертация.РегионПолучитьПоНомеруТелефона(ЭтаФорма.АбонентВнешний);
		Элементы.Дисплей01.Заголовок = СокрЛП(ЭтаФорма.АбонентВнешний);
		
		Если (ЗначениеЗаполнено(РегСсылка)) Тогда
			Темп = СокрЛП(ЭтаФорма.АбонентВнешний) + " - " + СокрЛП(РегСсылка);
			Элементы.Дисплей01.Заголовок = СокрЛП(Темп);
		КонецЕсли;
	Иначе
		Элементы.Дисплей01.Заголовок = "Номер и регион абонента не определены";
	КонецЕсли;

// Отображение кнопки вызова формы истории звонков
//-------------------------------------------------------------------------------------------------
	Доступно = ЗначениеЗаполнено(ЭтаФорма.АбонентВнешний);
	Элементы.АбонентИстория.Видимость = Доступно;

КонецПроцедуры

&НаСервере
Процедура ЗвонокОбработатьВнутренний()

// Сформируем главную строку дисплея
//-------------------------------------------------------------------------------------------------
	Если (ЭтаФорма.КонсольСостояние = 1) Тогда
		Темп = "Входящий внутренний звонок от " + СокрЛП(ЭтаФорма.АбонентВнешний);
		Элементы.Дисплей01.Заголовок = СокрЛП(Темп);
	Иначе
		Темп = "Исходящий звонок внутреннему абоненту " + СокрЛП(ЭтаФорма.АбонентВнешний);
		Элементы.Дисплей01.Заголовок = СокрЛП(Темп);
	КонецЕсли;

// Получим ссылку на Владельца телефона абонента
//-------------------------------------------------------------------------------------------------
	ТелСсылка = Конвертация.ТелВнутреннийПолучитьСсылку(ЭтаФорма.АбонентВнешний);
	ВладСсылка = Телефония.ВладелецПолучить(ТелСсылка);

	Если (ЗначениеЗаполнено(ВладСсылка)) Тогда
		Если (ВладСсылка.ЭтоГруппа = Истина) Тогда
			Темп = СокрЛП(ВладСсылка) + ", " + СокрЛП(ВладСсылка.ТочкаРазмещения);
			Элементы.Дисплей02.Заголовок = СокрЛП(Темп);
		Иначе
			Темп = СокрЛП(ВладСсылка) + ", " + СокрЛП(ВладСсылка.Должность) + ", " + СокрЛП(ВладСсылка.ТочкаРазмещения);
			Элементы.Дисплей02.Заголовок = СокрЛП(Темп);
		КонецЕсли;
	Иначе
		Элементы.Дисплей02.Заголовок = "Абонент отсутствует в телефонном справочнике";
	КонецЕсли;
	
	//<Кошелев_08092017_12-18, +>
	Элементы.Дисплей03.Заголовок = ЭтаФорма.ДисплейСайтОтправительАвтозвонка;
	//<Кошелев_08092017_12-18>

КонецПроцедуры

#КонецОбласти

&НаСервере
Функция РегистрыСведений_ЗадачиОбратныйЗвонок_Добавить(Телефон, ДатаЗакрытия, Тип, Исполнитель, Комментарий, ДатаПостановки, ЗвонокИнициатор, ДатаАктуальности, ПисьмоИнициатор)
	// Обработка непринятого автозвонка - создание задачи на перезвон по пропущенному
	//-----------------------------------------------------------
	Если Тип = "Перечисления.ТипЗадачи.НепринятыйИсходящий" Тогда
		 Тип = Перечисления.ТипЗадачи.НепринятыйИсходящий;
	КонецЕсли;
	Если Исполнитель = "ПараметрыСеанса.ККЦКонтактЦентр" Тогда
		 Исполнитель = ПараметрыСеанса.ККЦКонтактЦентр;
	КонецЕсли;
	РегистрыСведений.ЗадачиОбратныйЗвонок.Добавить(Телефон, ДатаЗакрытия, Тип, Исполнитель, Комментарий, ДатаПостановки, ЗвонокИнициатор, ДатаАктуальности, ПисьмоИнициатор);
КонецФункции 

#Область Управление_звонками
//*************************************************************************************************
// Управление звонком
//*************************************************************************************************

&НаКлиенте
Процедура АбонентИстория(Команда)

// Откроем форму для показа истории звонков по внешнему абоненту
//-------------------------------------------------------------------------------------------------
	СтрПараметры = Новый Структура;
	СтрПараметры.Вставить("Канал",ЭтаФорма.КаналСистемный);
	СтрПараметры.Вставить("Телефон",ЭтаФорма.АбонентВнешний);
	ОткрытьФорму("Обработка.КонсольКонтактЦентраТест.Форма.ФормаИсторииЗвонков",СтрПараметры,ЭтаФорма);
КонецПроцедуры

#Область Команды_телефонии_через_Rest_API
&НаСервере
Функция _КомандаHangupНаСервере(ТекстКоманды)
	Соединение 	= Новый HTTPСоединение("192.168.0.137", 8084);
	Запрос 		= Новый HTTPЗапрос("/ami/?action="+ТекстКоманды);
	Соединение.Get(Запрос);	
КонецФункции

&НаКлиенте
Функция _КомандаHangup(Канал)
	
	Доступно = (ТипЗнч(Канал) = Тип("Строка"));
	Доступно = Доступно И ЗначениеЗаполнено(Канал);

	Если Не Доступно Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстКоманды = 	"Action: Hangup" 			+ Символы.ПС +
					"Channel: " + СокрЛП(Канал) + Символы.ПС + Символы.ПС;
	
	
	ТекстКоманды = 	СтрЗаменить(ТекстКоманды, Символы.ПС, "\n");
	
	#Если ВэбКлиент Тогда
		_КомандаHangupНаСервере(ТекстКоманды);	
		Возврат;
	#КонецЕсли
	
	Соединение 	= Новый HTTPСоединение("192.168.0.137", 8084);
	//Запрос 	= Новый HTTPЗапрос("/ami/?action="+ТекстКоманды);
	
	Запрос		= Новый HTTPЗапрос("/ami/action");
	Запрос.Заголовки.Вставить("Par1", ТекстКоманды);
	
	
	Соединение.Post(Запрос);	
КонецФункции
#КонецОбласти

&НаКлиенте
Процедура ЗвонокЗавершить(Команда)
	КонтактЦентр._КомандаHangup(ЭтаФорма.КаналСистемный);
	ВнешнееСобытиеHangup();
КонецПроцедуры

&НаКлиенте
Процедура ЗвонокПеревести(Команда)

// Попросим пользователя ввести номер телефона для перевода звонка
//-------------------------------------------------------------------------------------------------
	СтрПодсказка = "Перевести звонок на номер";
	ТелНомер = "";

// Если телефонный номер введен
//-------------------------------------------------------------------------------------------------
	Если (ВвестиСтроку(ТелНомер,СтрПодсказка,11,Ложь) = Истина) Тогда
		Если (СокрЛП(Команда.Имя) = "ЗвонокAtxfer") Тогда
			//Результат = КонтактЦентр.КомандаAtxfer(ЭтаФорма.КаналСистемный,ТелНомер);
			Результат = КонтактЦентр._КомандаAtxfer(ЭтаФорма.КаналСистемный,ТелНомер);

			//<Кошелев; Эл. письмо>
			ЭтаФорма.к_ТелВнутрОП = ТелНомер;
			//</Кошелев>
			
		Иначе
			//Результат = КонтактЦентр.КомандаBlindTransfer(ЭтаФорма.КаналСистемный,ТелНомер);
			Результат = КонтактЦентр._КомандаBlindTransfer(ЭтаФорма.КаналСистемный,ТелНомер);
		КонецЕсли;

// Вывод сведений о результате выполнения перевода
//-------------------------------------------------------------------------------------------------
		ТекстСообщения = ?(Результат,"Перевод выполнен","Ошибка перевода звонка");
		ПоказатьПредупреждение(,ТекстСообщения,3);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПанельБыстрогоВызова(Элемент)

// Откроем форму панели быстрого вызова
//-------------------------------------------------------------------------------------------------
	СтрПараметры = Новый Структура;
	СтрПараметры.Вставить("Канал",ЭтаФорма.КаналСистемный);
	СтрПараметры.Вставить("Телефон",ЭтаФорма.АбонентВнешний);
	ОткрытьФорму("Обработка.КонсольКонтактЦентраТест.Форма.ФормаБыстрогоВызова",СтрПараметры,ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ТелефоныВыбор(Элемент,ВыбраннаяСтрока,Поле,СтандартнаяОбработка)

// Если консоль находится в режиме ожидания, то выполним вызов выбранного номера
// Во всех остальных случаях (режим разговора) - выполним переадресацию в зависимости от команды
//-------------------------------------------------------------------------------------------------
	Доступно = (Поле.Имя = "ТелефоныAtxfer");
	Доступно = Доступно ИЛИ (Поле.Имя = "ТелефоныRedirect");
	Доступно = Доступно И (Элементы.Телефоны.ТекущиеДанные <> Неопределено);
	СтандартнаяОбработка = Ложь;

	Если (Доступно = Ложь) Тогда
		Возврат;
	КонецЕсли;

// Получим номер для переадресации
//-------------------------------------------------------------------------------------------------
	ТелНомер = ВРег(СокрЛП(Элементы.Телефоны.ТекущиеДанные.Redirect));
	
// Выполним команду
//-------------------------------------------------------------------------------------------------
	Если (ЭтаФорма.КонсольСостояние = 0) Тогда
		Результат = КонтактЦентр._КомандаOriginate(ТелНомер);
	ИначеЕсли (Поле.Имя = "ТелефоныAtxfer") Тогда
		Результат = КонтактЦентр._КомандаAtxfer(ЭтаФорма.КаналСистемный,ТелНомер);
		ЭтаФорма.к_ТелВнутрОП = ТелНомер;
	ИначеЕсли (Поле.Имя = "ТелефоныRedirect") Тогда
		Результат = КонтактЦентр._КомандаBlindTransfer(ЭтаФорма.КаналСистемный,ТелНомер);
		ЭтаФорма.к_ТелВнутрОП = ТелНомер;
	КонецЕсли;

// Выведем сообщение о результате
//-------------------------------------------------------------------------------------------------
	Если (Результат = Ложь) Тогда
		ПоказатьПредупреждение(,"Ошибка при наборе номера абонента",3);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)
	
		// обнули реквизиты формы
		//-----------------------------
		КонсольСостояние 	= 0;
		КаналСистемный 		= "";
		АбонентВнешний		= "";
		к_ТелВнутрОП		= "";
		к_LinkedID			= "";
		ДисплейСайтОтправительАвтозвонка	= "";
		ДисплейТекстАвтозвонка 		   		= "";
		ДисплейИмяАвтозвонка 				= "";
		ДисплейМайлАвтозвонка				= "";
		
		Элементы.Дисплей01.Заголовок = "";
		Элементы.Дисплей02.Заголовок = "";
		Элементы.Дисплей03.Заголовок = "";
		Элементы.ГруппаДисплей.Видимость = Ложь;
		
		//Переподключи компоненту
		//-----------------------
		КонтактЦентр.КомпонентаОтключить();
		КонтактЦентр.КомпонентаПодключить();
		
		ОбновлениеОтображения();
КонецПроцедуры

//<Кошелев_22.06.2016; Маршрутизация по расширенной анкете>
&НаКлиенте
Процедура ПереключитьЗвонокПоРасширеннойАнкете(Команда)
	
	Парам = Новый Структура;
	Парам.Вставить("Телефон", 					ЭтаФорма.АбонентВнешний);
	Парам.Вставить("КаналСистемный", 			ЭтаФорма.КаналСистемный);
	Парам.Вставить("КаналИнициатор", 			ЭтаФорма.КаналИнициатор);
	Парам.Вставить("Сигнатура", 				ПолучиСигнатуруВходящегоЗвонка());
	Парам.Вставить("СайтОтправительАвтозвонка",	ДисплейСайтОтправительАвтозвонка);
	
	ОткрытьФорму("Обработка.КонсольКонтактЦентраТест5334_8085_8084.Форма.ФормаРасширеннойАнкеты3", Парам);
	
КонецПроцедуры //</Кошелев_22.06.2016>

//<Кошелев_22.06.2016; Маршрутизация по расширенной анкете>
&НаСервере
Функция ПолучиСигнатуруВходящегоЗвонка()
	
	Если Не ЗначениеЗаполнено(ЭтаФорма.к_LinkedID) Тогда
		Возврат "";
	КонецЕсли;  
	ТелСсылка = ЗначенияСервера.ПолучитьЗначениеПараметраСеанса("ККЦТелефон");
	ТелСервер = ТелСсылка.Сервер;
	Возврат("1#" + ЭтаФорма.к_LinkedID+"#"+ТелСервер.Код); 
	
КонецФункции //</Кошелев_22.06.2016>

&НаКлиенте
Процедура ОтправитьПисьмо_ПоставитьЗадачу(Команда)
	// Если КЦ перевело звонок с уведомлением на ОП, но никто из сотрудинков ОП его не принял
	// тогда напиши письмо этому сотруднику и поставь  ему задачу перезвонить
	
	ИдФонЗадания = Новый УникальныйИдентификатор();
	ЭтаФорма.СписокИдФоновыхЗаданийОтправкиПисем.Добавить(ИдФонЗадания);
	
	Парам = Новый Структура();	
	Парам.Вставить("Сигнатура",					ПолучиСигнатуруВходящегоЗвонка());	//сигнатура текущего звонка, который переводился с уведомлением на ОП, но не был им принят
	Парам.Вставить("АбонентВнешний",			ЭтаФорма.АбонентВнешний);			//номер телефона внешнего абонента, будет ключом задачи на обратный звонок
	Парам.Вставить("ТелВнутренний",  			ЭтаФорма.к_ТелВнутрОП);	    		//номер внутреннего телефона сотрудника ОП, на которого с уведомлением переводили звонок, но он  его не принял,
																					//из него будет определен адрес эл. почты получателя (Кому) и будет значением поля Исполнитель для задачи на обратный звонок
	Парам.Вставить("ИдентификаторФонЗадания", 	ИдФонЗадания);						//идентификатор фонового задания, которым будет отправляься это письмо, необходимо для извещения об ошибках отправки письма
	Парам.Вставить("От", 						"info@luidor.ru");					//адрес эл.почты отправителя (абсолютно любой адрес) 
	Парам.Вставить("Тема",						"Перезвоните клиенту на номер: "+ЭтаФорма.АбонентВнешний);
	Парам.Вставить("Содержание",				"Перезвоните клиенту на номер: "+ЭтаФорма.АбонентВнешний);
	Парам.Вставить("ОтправлятьФоновымЗаданием",	Истина);
	ОткрытьФорму("ОбщаяФорма.ЭлПисьмо", Парам);
	
	//Полагаем, что время между открытием формы письма до отправки не превысит 3 минуты (180 секунд)
	ПодключитьОбработчикОжидания("ПроверьОшибкиФоновыхЗаданийПользователя", 60, Истина);

КонецПроцедуры

#КонецОбласти

#Область Управление_задачами_не_используется
//*************************************************************************************************
// Управление задачами
//*************************************************************************************************

&НаКлиенте
Процедура ЗадачиСписокПриАктивизацииСтроки(Элемент)

// Загрузим на форму данные выбранной задачи
//-------------------------------------------------------------------------------------------------
	Если (Элементы.ЗадачиСписок.ТекущиеДанные <> Неопределено) Тогда
		ЗадачиСписокВыборНаСервере(Элементы.ЗадачиСписок.ТекущиеДанные.Телефон);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗадачиСписокВыборНаСервере(ТелНомер)

// Предварительно очистим элементы относящиеся к визуализации выбранной задачи
//-------------------------------------------------------------------------------------------------
	ЭтаФорма.ЗадачаИстория.Очистить();
	ЭтаФорма.ЗадачаКомментарий = "";

// Прочитаем из регистра задач запись соответствующую переданному номеру телефона
//-------------------------------------------------------------------------------------------------
	ТекЗапись = РегистрыСведений.ЗадачиОбратныйЗвонок.СоздатьМенеджерЗаписи();
	ТекЗапись.ДатаЗакрытия = Дата("00010101");
	ТекЗапись.Телефон = СокрЛП(ТелНомер);
	ТекЗапись.Прочитать();

// Если задача выбрана, то выведем на форму описание задачи, а также сформируем историю звонков
//-------------------------------------------------------------------------------------------------
	Если (ТекЗапись.Выбран()) Тогда
		ЭтаФорма.ЗадачаКомментарий = СокрЛП(ТекЗапись.Комментарий);

		ТекстЗапроса = "
		|SELECT	Рег.Дата,Рег.ЭтоВходящий,CASE WHEN (Рег.ЭтоВходящий) THEN Опер.Владелец ELSE Иниц.Владелец END AS Оператор
		|FROM	РегистрСведений.Звонки Рег
		|LEFT	JOIN РегистрСведений.ОбъектыПривязка Иниц ON (Иниц.Объект = Рег.Инициатор)
		|LEFT	JOIN РегистрСведений.ОбъектыПривязка Опер ON (Опер.Объект = Рег.АбонентВнутренний)
		|WHERE	(Рег.АбонентВнешний = &АбонентВнешний) И (Рег.Дата >= &ОпорнаяДата)
		|ORDER	BY Рег.Дата DESC";

		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("АбонентВнешний",СокрЛП(ТелНомер));
		Запрос.УстановитьПараметр("ОпорнаяДата",ТекЗапись.ДатаПостановки);
		Результат = Запрос.Выполнить().Выбрать();

		Пока (Результат.Следующий()) Цикл
			НовСтрока = ЭтаФорма.ЗадачаИстория.Добавить();
			НовСтрока.ЭтоВходящий = Результат.ЭтоВходящий;
			НовСтрока.Оператор = Результат.Оператор;
			НовСтрока.Дата = Результат.Дата;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

//-------------------------------------------------------------------------------------------------

&НаКлиенте
Процедура ЗадачаПерезвонить(Команда)

// Выполним звонок на телефонный номер абонента задачи
// Сформируем сведения о результатах звонка
//-------------------------------------------------------------------------------------------------
	Если (Элементы.ЗадачиСписок.ТекущиеДанные <> Неопределено) Тогда
		ДанныеЗадачи = Элементы.ЗадачиСписок.ТекущиеДанные;
		Результат = КонтактЦентр._КомандаOriginate(ДанныеЗадачи.Телефон);

		Если (Результат = Ложь) Тогда
			ЗадачаПерезвонитьНаСервере(ДанныеЗадачи.Телефон,Ложь);
			ПоказатьПредупреждение(,"При вызове абонента произошла ошибка",3);
		Иначе
			ЗадачаПерезвонитьНаСервере(ДанныеЗадачи.Телефон,Истина);
			ПоказатьПредупреждение(,"Выполняется вызов",3);
		КонецЕсли;
	КонецЕсли;

	Элементы.ЗадачиСписок.Обновить();
КонецПроцедуры

&НаСервере
Процедура ЗадачаПерезвонитьНаСервере(ТелНомер,Результат)

// Получим объект задачи
//-------------------------------------------------------------------------------------------------
	ТекЗапись = РегистрыСведений.ЗадачиОбратныйЗвонок.СоздатьМенеджерЗаписи();
	ТекЗапись.ДатаЗакрытия = Дата("00010101");
	ТекЗапись.Телефон = СокрЛП(ТелНомер);
	ТекЗапись.Прочитать();

// Если задача получена, то в зависимости от результата сформируем комментарий и дату актуальности
//-------------------------------------------------------------------------------------------------
	Если (ТекЗапись.Выбран()) Тогда
		Темп = СокрЛП(ТекЗапись.Комментарий);
		Темп = Темп + ?(ЗначениеЗаполнено(Темп),Символы.ПС,"");
		Темп = Темп + СокрЛП(Формат(ТекущаяДата(),"ДЛФ=DDT")) + ", ";
		Темп = Темп + ?(Результат,"Выполнен звонок абоненту","Ошибка при наборе номера абонента");

		ТекЗапись.ДатаАктуальности = ?(Результат,ТекущаяДата() + 300,ТекЗапись.ДатаАктуальности);
		ТекЗапись.Комментарий = СокрЛП(Темп);
		ТекЗапись.Записать();
	КонецЕсли;
КонецПроцедуры

//-------------------------------------------------------------------------------------------------

&НаКлиенте
Процедура ЗадачаОтменить(Команда)

// Пометим задачу как принудительно закрытую
//-------------------------------------------------------------------------------------------------
	Если (Элементы.ЗадачиСписок.ТекущиеДанные <> Неопределено) Тогда
		ЗадачаОтменитьНаСервере(Элементы.ЗадачиСписок.ТекущиеДанные.Телефон);
		ПоказатьПредупреждение(,"Задача помечена как закрытая",3);
	КонецЕсли;

	Элементы.ЗадачиСписок.Обновить();
КонецПроцедуры

&НаСервере
Процедура ЗадачаОтменитьНаСервере(ТелНомер)

// Получим объект задачи
//-------------------------------------------------------------------------------------------------
	ТекЗапись = РегистрыСведений.ЗадачиОбратныйЗвонок.СоздатьМенеджерЗаписи();
	ТекЗапись.ДатаЗакрытия = Дата("00010101");
	ТекЗапись.Телефон = СокрЛП(ТелНомер);
	ТекЗапись.Прочитать();

// Если задача получена, то выполним ее принудительное закрытие
//-------------------------------------------------------------------------------------------------
	Если (ТекЗапись.Выбран()) Тогда
		Темп = СокрЛП(ТекЗапись.Комментарий);
		Темп = Темп + ?(ЗначениеЗаполнено(Темп),Символы.ПС,"");
		Темп = Темп + СокрЛП(Формат(ТекущаяДата(),"ДЛФ=DDT")) + ", задача закрыта вручную";

		ТекЗапись.Исполнитель = ПараметрыСеанса.ТекущийПользователь;
		ТекЗапись.ДатаЗакрытия = ТекущаяДата();
		ТекЗапись.Комментарий = СокрЛП(Темп);
		ТекЗапись.Записать();
	КонецЕсли;
КонецПроцедуры
#КонецОбласти

#Область Автозвонок
//<Кошелев_13102016; ОбработкаАвтозвонков>
&НаКлиенте
Процедура ВыполниИсходящийАвтоЗвонок()
	Доступно = ЭтаФорма.КонсольПауза = Ложь;
	Доступно = Доступно И ЭтаФорма.КонсольСостояние = 0; // звонок не выполняется
	Доступно = Доступно И ЭтаФорма.МоиНастройки_ОбрабатыватьАвтозвонки = Истина;

// Временное решение
// Разрешаем отрабатывать задачи по автозвонку только операторам ЕКЦ на Ларина
//-------------------------------------------------------------------------------------------------
	Доступно = Доступно И (СтрНайти("5334,5319,5242,5241,5240,1391,1392", КонсольТелефон) > 0);

	Если Не Доступно Тогда
		Возврат
	КонецЕсли;

	ТелефонИСигнатураОткрытойЗадачи = ТелефонИСигнатураИнтернетЗаявки();
	
	ТелефонОткрытойЗадачи = ТелефонИСигнатураОткрытойЗадачи.Телефон;
	Если ТелефонОткрытойЗадачи = "" Тогда
		Возврат
	КонецЕсли;
	
	ДисплейСайтОтправительАвтозвонка  	= "";
	ДисплейТекстАвтозвонка 		   		= "";
	ДисплейИмяАвтозвонка 			   	= "";
	ДисплейМайлАвтозвонка 			   	= "";

	ДисплейСайтОтправительАвтозвонка = РегистрыСведений_ЗадачиИнтернетЗаявки_НайдиИнициатораПоТелефонуОтрытойЗадачи(ТелефонОткрытойЗадачи);	
	ДисплейТекстАвтозвонка 	= СвойствоАвтозвонка(ТелефонИСигнатураОткрытойЗадачи.Сигнатура, "TEXT");
	ДисплейИмяАвтозвонка 	= СвойствоАвтозвонка(ТелефонИСигнатураОткрытойЗадачи.Сигнатура, "name");
	ДисплейМайлАвтозвонка 	= СвойствоАвтозвонка(ТелефонИСигнатураОткрытойЗадачи.Сигнатура, "email");
	
	Выполнено = КонтактЦентр._КомандаOriginate(ТелефонОткрытойЗадачи, "iq_"+ТелефонИСигнатураОткрытойЗадачи.Сигнатура);	
КонецПроцедуры

&НаСервере
Функция РегистрыСведений_ЗадачиИнтернетЗаявки_НайдиИнициатораПоТелефонуОтрытойЗадачи(ТелефонОткрытойЗадачи)
	Возврат РегистрыСведений.ЗадачиИнтернетЗаявки.НайдиИнициатораПоТелефонуОтрытойЗадачи(ТелефонОткрытойЗадачи)
КонецФункции

#Область Поиск_свойств_интернет_заявки
&НаСервереБезКонтекста
Функция СвойствоАвтозвонка(Сигнатура, ИмяСвойства = "TEXT")
	//Возвращает значение свойства интернет-заявки с заданной сигнатурой и именем, по которой совершается автозвонок
	//Параметры:
	//    Сигнатура - сигнатура интернет-заявки
	//	  ИмяСвойства - имя свойства интернет-заявки
	
	ЗначениеПоУмолчанию = "";
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИнтернетЗаявкиСвойства.Значение.ПолнаяСтрока КАК Значение
	|ИЗ
	|	РегистрСведений.ИнтернетЗаявкиСвойства КАК ИнтернетЗаявкиСвойства
	|ГДЕ
	|	ИнтернетЗаявкиСвойства.Сигнатура = &Сигнатура
	|	И ИнтернетЗаявкиСвойства.Свойство.Наименование = &Свойство";
	Запрос.УстановитьПараметр("Сигнатура", Сигнатура);
	Запрос.УстановитьПараметр("Свойство",  ИмяСвойства);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Результат = Выборка.Значение;
	Возврат Результат;
КонецФункции
#КонецОбласти

&НаСервере
Процедура ЗакрытьЗадачуАвтоЗвонка(Телефон)
	ТекДата = ТекущаяДата();
	Исполнитель = ПараметрыСеанса.ККЦТелефон.Код;
	РегистрыСведений.ЗадачиИнтернетЗаявки.ЗакройОткрытуюЗадачу(Телефон, ТекДата, Истина,Исполнитель);
КонецПроцедуры

&НаСервере
Функция ТелефонИСигнатураИнтернетЗаявки()	
	//Возвращает структуру в которой поле "Телефон" содержит телефон абонента, поле "СигнатураИнтернетЗаявки" сигнатуру заявки
	
	Возврат КонтактЦентрСервер.ПоставьЗадачуСвободномуОператору(ПараметрыСеанса.ККЦТелефон.Код);	
КонецФункции

&НаКлиенте
Процедура ВключитьВыключитьПодключениеОбработчикаОжидания(Включить)
	Если Включить Тогда
		Доступно = КонсольПауза = Ложь;
		Доступно = Доступно И КонсольСостояние = 0; // звонок не выполняется
		Доступно = Доступно И МоиНастройки_ОбрабатыватьАвтозвонки = Истина;
		Если Не Доступно Тогда
			Возврат
		КонецЕсли;

		ПодключитьОбработчикОжидания("ВыполниИсходящийАвтоЗвонок", 10, Ложь)	
	Иначе
		ОтключитьОбработчикОжидания("ВыполниИсходящийАвтоЗвонок")		
	КонецЕсли;
	
КонецПроцедуры
//</Кошелев_13102016; ОбработкаАвтозвонков>
#КонецОбласти

#Область Ошибки_фоновых_заданий

&НаСервере
Функция ПроверьОшибкиФоновыхЗаданийПользователя_Сервер(СписокИдФоновыхЗаданий)
	СписокИзМассивовСообщенийПользователю = Новый СписокЗначений();
	Для Каждого Эл Из СписокИдФоновыхЗаданий Цикл
		КлючФонЗад = Эл.Значение;
		
		стрОтбор = Новый Структура("Ключ", КлючФонЗад);
		//ФонЗад = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдФонЗад);
		
		// Метод ПолучитьФоновыеЗадания возвратит массив, установленный отбор,
		// но отбор по ключу должен вернуть не более одного фонового задания
		МассивФонЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(стрОтбор); 
		Если МассивФонЗаданий.Количество() = 0 Тогда
			Возврат СписокИзМассивовСообщенийПользователю;
		КонецЕсли;
		ФонЗад = МассивФонЗаданий[0];
		
		Если ФонЗад = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		МассивСообщенийПользователю = ФонЗад.ПолучитьСообщенияПользователю(Истина);
		СписокИзМассивовСообщенийПользователю.Добавить(МассивСообщенийПользователю);
	КонецЦикла;
	Возврат СписокИзМассивовСообщенийПользователю;
КонецФункции

&НаКлиенте
Процедура ПроверьОшибкиФоновыхЗаданийПользователя()
	
	Если Не ЭтаФорма.МоиНастройки_ОповещатьОбОшибкахОтправкиПочты Тогда
		Возврат;
	КонецЕсли;
	
    //Сформируй список из массивов сообщений пользователю, созданных в фоновых заданиях пользователя
	СписокИзМассивовСообщенийПользователю = ПроверьОшибкиФоновыхЗаданийПользователя_Сервер(ЭтаФорма.СписокИдФоновыхЗаданийОтправкиПисем);
	
	//Покажи сообщения пользователю
	Для Каждого Эл Из СписокИзМассивовСообщенийПользователю Цикл
		МассивСообщенийПользователюОдногоФонЗадания = Эл.Значение;
		Для Каждого Сообщ Из МассивСообщенийПользователюОдногоФонЗадания Цикл
			//Сообщ.Сообщить();
			ПоказатьОповещениеПользователя("Ошибка отправки письма", ,Сообщ.Текст);
			Сообщить(Сообщ.Текст);
		КонецЦикла;	
	КонецЦикла;
	
	//Очисти список идентификаторов фоновых заданий, т.о. сообщения об ошибках одного фонового задания выведутся один раз
	ЭтаФорма.СписокИдФоновыхЗаданийОтправкиПисем.Очистить();

КонецПроцедуры
#КонецОбласти

#Область Отладочная_информация
//Отладочная информация
//---------------------

&НаСервере
Функция Отладка_ЗначенияПеременных_НаСервере()
	ТекстДок = Новый ТекстовыйДокумент();
	
	НоваяСтрока = "       ******* Отчет об ошибках от "+ТекущаяДата()+" *******"+Символы.ПС+Символы.ВК;
	ТекстДок.ДобавитьСтроку(НоваяСтрока);
	
	НоваяСтрока = "     ***** Параметры сеанса *****"+Символы.ПС+Символы.ВК;
	ТекстДок.ДобавитьСтроку(НоваяСтрока);
	НоваяСтрока = "ККЦКонтактЦентр 		= " + ПараметрыСеанса.ККЦКонтактЦентр		+ Символы.ПС;
	ТекстДок.ДобавитьСтроку(НоваяСтрока);
	НоваяСтрока = "ККЦОчередь 			= " + ПараметрыСеанса.ККЦОчередь			+ Символы.ПС;
	ТекстДок.ДобавитьСтроку(НоваяСтрока);
	НоваяСтрока = "ККЦТелефон 			= " + ПараметрыСеанса.ККЦТелефон			+ Символы.ПС;
	ТекстДок.ДобавитьСтроку(НоваяСтрока);
	НоваяСтрока	= "ТекущийПользователь 	= "	+ ПараметрыСеанса.ТекущийПользователь	+ Символы.ПС;
	ТекстДок.ДобавитьСтроку(НоваяСтрока);
	НоваяСтрока	= "ИнтерактивныйРежим	= "	+ ПараметрыСеанса.ИнтерактивныйРежим	+ Символы.ПС;
	ТекстДок.ДобавитьСтроку(НоваяСтрока);
	НоваяСтрока = "ФонЗадания			= " + ПараметрыСеанса.ФонЗадания			+ Символы.ПС;
	ТекстДок.ДобавитьСтроку(НоваяСтрока);

	
	НоваяСтрока = "     ***** Реквизиты формы ******"+Символы.ПС+Символы.ВК;
	ТекстДок.ДобавитьСтроку(НоваяСтрока);
	
	РеквизитыФормы = ЭтаФорма.ПолучитьРеквизиты();
	Для Каждого Рекв Из РеквизитыФормы Цикл
		ИмяРеквизита = Рекв.Имя;
		ЗначениеРеквизита = ЭтаФорма[ИмяРеквизита];
		НоваяСтрока = ИмяРеквизита +" = " +ЗначениеРеквизита+ " (ТипЗнч = "+Рекв.ТипЗначения+")"+Символы.ПС;
		ТекстДок.ДобавитьСтроку(НоваяСтрока);
		
		Если Рекв.ТипЗначения = Тип("СписокЗначений") Тогда
			Для Каждого Эл Из ЭтаФорма[ИмяРеквизита] Цикл
				НоваяСтрока = "   "+Эл.Значение+" = " +ЗначениеРеквизита+Символы.ПС;
				ТекстДок.ДобавитьСтроку(НоваяСтрока);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
		
	Адрес = ПоместитьВоВременноеХранилище(ТекстДок);
	Возврат Адрес
КонецФункции

&НаКлиенте
Функция Отладка_ЗначенияПеременных(Команда)
	Адрес = Отладка_ЗначенияПеременных_НаСервере();
	Если СтрДлина(Адрес)=0 Тогда
		Возврат "Ошибка";
	КонецЕсли;
	Рез = ПолучитьИзВременногоХранилища(Адрес);
	Если ТипЗнч(Рез)<>Тип("ТекстовыйДокумент") Тогда
		Возврат "Ошибка";
	КонецЕсли;
	//Рез.Показать();
	
	НоваяСтрока = "     ***** Внешняя компонента ******"+Символы.ПС;
	Рез.ДобавитьСтроку(НоваяСтрока);
	НоваяСтрока = "Компонента подключена = " + КонтактЦентр.КомпонентаПодключена();
	Рез.ДобавитьСтроку(НоваяСтрока);
	НоваяСтрока = "     ***** Параметры клиента ******"+Символы.ПС;
	Рез.ДобавитьСтроку(НоваяСтрока);
	НоваяСтрока ="Имя компьютера = "+ ИмяКомпьютера();
	Рез.ДобавитьСтроку(НоваяСтрока);
	НоваяСтрока = "**** ЛОГ *****";	
	Рез.ДобавитьСтроку(НоваяСтрока);
	НоваяСтрока = ЭтаФорма.Отладка_Лог.ПолучитьТекст();	
	Рез.ДобавитьСтроку(НоваяСтрока);
	
	ИдФонЗадания = Новый УникальныйИдентификатор();
	ЭтаФорма.СписокИдФоновыхЗаданийОтправкиПисем.Добавить(ИдФонЗадания);
	//
	Парам = Новый Структура();	
	Парам.Вставить("Сигнатура",					"");	//сигнатура текущего звонка, который переводился с уведомлением на ОП, но не был им принят
	Парам.Вставить("АбонентВнешний",			"9506080027");			//номер телефона внешнего абонента, будет ключом задачи на обратный звонок
	Парам.Вставить("ТелВнутренний",  			"1387");	    		//номер внутреннего телефона сотрудника ОП, на которого с уведомлением переводили звонок, но он  его не принял,
																		//будет значением поля Исполнитель для задачи на обратный звонок
	Парам.Вставить("ИдентификаторФонЗадания", 	ИдФонЗадания);			//идентификатор фонового задания, которым будет отправляься это письмо, необходимо для извещения об ошибках отправки письма
	Парам.Вставить("От", 						"info@luidor.ru");		//адрес эл.почты отправителя (абсолютно любой адрес) 
	Парам.Вставить("Тема",						"Ошибка Агрегатора");
	Парам.Вставить("Содержание",				Рез.ПолучитьТекст());

	ОткрытьФорму("ОбщаяФорма.ЭлПисьмо", Парам);

КонецФункции

&НаКлиенте
Процедура Отладка_ПоказатьЛог(Команда)
	ТекстДок = Новый ТекстовыйДокумент();
	ТекстДок.УстановитьТекст(ЭтаФорма.Отладка_Лог.ПолучитьТекст());
	ТекстДок.Показать();
КонецПроцедуры
#КонецОбласти

#Область Магистральные_клиенты

//<Выбор сотрудника по умолчанию для обработки звонка (магистрального) контрагента>
&НаСервере
Процедура ВыбратьСотрудника_НаСервере()
	
	// Очисти старые значения
	//----------------------------------------------------
	ЭтаФорма.Объект.ОтветственныеЗаКонтрагента.Очистить();
	
	// Заполни ТЧ "Ответственные за контрагента"
	//-----------------------------------------------------------------------------------------------
	Об = РеквизитФормыВЗначение("Объект");
	
	Об.ЗаполниТЧ_ОтветственныеЗаКонтрагента(ЭтаФорма.АбонентВнешний);
	//для отладки =>
	//Об.ЗаполниТЧ_ОтветственныеЗаКонтрагента("9506080027");
	
	ЗначениеВРеквизитФормы(Об, "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСотрудника(Команда=Неопределено)
	
	//Открывает форму выбора сотрудника
	//------------------------------------------------------------------------------------------------------------
	ВыбратьСотрудника_НаСервере();
	
	Если ЭтаФорма.Объект.ОтветственныеЗаКонтрагента.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокСотрудников = Новый СписокЗначений();
	
	Для Каждого Стр Из ЭтаФорма.Объект.ОтветственныеЗаКонтрагента Цикл
		СписокСотрудников.Добавить(Стр.СотрудникТел, Стр.Сотрудник+" ("+Стр.СотрудникТел+")");
		
		//Добавь уровень +1
		//--------------------------------------------------------------------------------------------------------
		Если ЗначениеЗаполнено(Стр.Сотрудник1) и ЗначениеЗаполнено(Стр.Сотрудник1Тел) Тогда
			СписокСотрудников.Добавить(Стр.Сотрудник1Тел, "   "+Стр.Сотрудник1+" ("+Стр.Сотрудник1Тел+")");
			
			//Добавь уровень +2
			//----------------------------------------------------------------------------------------------------
			Если ЗначениеЗаполнено(Стр.Сотрудник2) и ЗначениеЗаполнено(Стр.Сотрудник2Тел) Тогда
				СписокСотрудников.Добавить(Стр.Сотрудник2Тел, "      "+Стр.Сотрудник2+" ("+Стр.Сотрудник2Тел+")");
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДопПарам = Новый Структура();
	Оп = Новый ОписаниеОповещения("ПослеВыбораСотрудникаИзМеню", ЭтотОбъект, ДопПарам);
	ПоказатьВыборИзМеню(Оп, СписокСотрудников);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСотрудникаИзМеню(ВыбЗнач, ДопПарам) Экспорт
	
	Если ВыбЗнач = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Доступно = ЗначениеЗаполнено(ЭтаФорма.КаналСистемный);
	Доступно = Доступно И ЗначениеЗаполнено(ВыбЗнач.Значение);
	
	Если Не Доступно Тогда
		Возврат
	КонецЕсли;
	
	//Переведи звонок контрагента на сотрудника с уведомлением
	//-------------------------------------------------------------------
	КонтактЦентр._КомандаAtxfer(ЭтаФорма.КаналСистемный,ВыбЗнач.Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура Дисплей03Нажатие(Элемент)
	СписокСотрудников = Новый СписокЗначений();
	
	Для Каждого Стр Из ЭтаФорма.Объект.ОтветственныеЗаКонтрагента Цикл
		СписокСотрудников.Добавить(Стр.СотрудникТел, Стр.Сотрудник+" ("+Стр.СотрудникТел+")");
		
		//Добавь уровень +1
		//--------------------------------------------------------------------------------------------------------
		Если ЗначениеЗаполнено(Стр.Сотрудник1) и ЗначениеЗаполнено(Стр.Сотрудник1Тел) Тогда
			СписокСотрудников.Добавить(Стр.Сотрудник1Тел, "   "+Стр.Сотрудник1+" ("+Стр.Сотрудник1Тел+")");
			
			//Добавь уровень +2
			//----------------------------------------------------------------------------------------------------
			Если ЗначениеЗаполнено(Стр.Сотрудник2) и ЗначениеЗаполнено(Стр.Сотрудник2Тел) Тогда
				СписокСотрудников.Добавить(Стр.Сотрудник2Тел, "      "+Стр.Сотрудник2+" ("+Стр.Сотрудник2Тел+")");
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДопПарам = Новый Структура();
	Оп = Новый ОписаниеОповещения("ПослеВыбораСотрудникаИзМеню", ЭтотОбъект, ДопПарам);
	ПоказатьВыборИзМеню(Оп, СписокСотрудников);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗвонокЗавершить2(Команда)
	
КонецПроцедуры


#КонецОбласти








