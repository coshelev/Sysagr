&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)	
КонецПроцедуры
		
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//Лояльность ремонтов - отборы
	//----------------------------
	
	ИмяАктивногоДинамичСписка = "ЗадачиСписокЛояльностьРемонта";	
	ЗадачиСписокЛояльностьРемонта.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы.Очистить();

	ЭлОтбора1 = ЗадачиСписокЛояльностьРемонта.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлОтбора1.ЛевоеЗначение =	Новый ПолеКомпоновкиДанных("Выполнена");
	ЭлОтбора1.ПравоеЗначение	=	ЛОЖЬ;
	ЭлОтбора1.ВидСравнения		=	ВидСравненияКомпоновкиДанных.Равно;
	ЭлОтбора1.Использование		=	Истина;		
		
	//Отбор задач для просмотра: или личные (пользовательские) или привязанные к подразделению без исполнителя 
	//----------------------------------------------------------------------------------------------------------
		
	ГрОтбора1 			= ЗадачиСписокЛояльностьРемонта.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГрОтбора1.ТипГруппы	= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	// Задачи текущего пользователя
	//----------------------------------------------------------------------------
	ЭлОтбора1 = ГрОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлОтбора1.ЛевоеЗначение		=	Новый ПолеКомпоновкиДанных("Исполнитель");
	ЭлОтбора1.ПравоеЗначение	=	ТекущийПользователь();
	ЭлОтбора1.ВидСравнения		=	ВидСравненияКомпоновкиДанных.Равно;
	ЭлОтбора1.Использование		=	Истина;	
	
	//Формирование группы отбора по модели ролевой адресации (не важно кто задан в задаче исполнителем,
	//другие пользователи с такой же ролью и доступными подразделениями как у исполнителя должны видеть эти задачи
	//==============================================================================================================
			
	ГрОтбора2 			= ГрОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГрОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	//Отбор по ролям
	//---------------	
	РольДоступна_КлиентскаяСлужбаРегионы_Оператор		= РольДоступна_НаСервере("КлиентскаяСлужбаРегионы_Оператор");	
	РольДоступна_КлиентскаяСлужбаЦентр_Администратор 	= РольДоступна_НаСервере("КлиентскаяСлужбаЦентр_Администратор");
	Доступно = РольДоступна_КлиентскаяСлужбаЦентр_Администратор Или РольДоступна_КлиентскаяСлужбаРегионы_Оператор;	
	Если Доступно Тогда	
		ДоступныеРоли = Новый СписокЗначений();
		Если РольДоступна_КлиентскаяСлужбаРегионы_Оператор Тогда
			ДоступныеРоли.Добавить(ПредопределенноеЗначение("Справочник.Роли.КлиентскаяСлужбаРегионы_Оператор"));
		КонецЕсли;
		
		Если РольДоступна_КлиентскаяСлужбаЦентр_Администратор Тогда
			ДоступныеРоли.Добавить(ПредопределенноеЗначение("Справочник.Роли.КлиентскаяСлужбаЦентр_Администратор"));
		КонецЕсли;
		
		ЭлОтбора1 = ГрОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлОтбора1.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Роль");
		ЭлОтбора1.ПравоеЗначение	= ДоступныеРоли;
		ЭлОтбора1.ВидСравнения		= ВидСравненияКомпоновкиДанных.ВСписке; 
		ЭлОтбора1.Использование		= Истина;	
	КонецЕсли;
	
	// Элемент отбора по доступным подразделениям
	//----------------------------------------------
	ДоступныеПодразделения = ЗначенияСервера.ДоступныеПодразделения();
	СписокДоступныхПодразделений = Новый СписокЗначений();
	Для Каждого Эл Из ДоступныеПодразделения Цикл
		СписокДоступныхПодразделений.Добавить(Эл);
	КонецЦикла;
	ЭлОтбора2 = ГрОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлОтбора2.ЛевоеЗначение		=	Новый ПолеКомпоновкиДанных("Подразделение");
	ЭлОтбора2.ПравоеЗначение	=	СписокДоступныхПодразделений;
	ЭлОтбора2.ВидСравнения		=	ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
	ЭлОтбора2.Использование		=	Истина;	
	
	// Элемент отбора по не текущему пользователю, но имеющему такую же роль и такие же доступные подразделения
	//----------------------------------------------------------------------------------------------------------
	ЭлОтбора3 = ГрОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлОтбора3.ЛевоеЗначение		=	Новый ПолеКомпоновкиДанных("Исполнитель");
	ЭлОтбора3.ПравоеЗначение	=	ТекущийПользователь();	
	ЭлОтбора3.ВидСравнения		=	ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлОтбора3.Использование		=	Истина;	
		
	//Отбор по доп.реквизиту адресации
	//---------------------------------
	ЭлОтбора1 = ГрОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлОтбора1.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ДопРеквизитАдресации");
	ЭлОтбора1.ПравоеЗначение	= ТекущийПользователь_ДопРеквизитАдресации();
	ЭлОтбора1.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно; 
	ЭлОтбора1.Использование		= Истина;	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РольДоступна_НаСервере(ИмяРоли)
	Возврат РольДоступна(ИмяРоли);	
КонецФункции

&НаСервере
Функция ДоступнаРольПросмотраЗадачАдминистратора() 
	
	Результат = Ложь;
	Если ПараметрыСеанса.РольДоступнаАдминистратор Тогда
		Результат = Истина
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция ТекущийПользователь()
	Возврат ПараметрыСеанса.ТекущийПользователь;
КонецФункции

&НаСервере
Функция ТекущийПользователь_ДопРеквизитАдресации()
	Возврат ПараметрыСеанса.ТекущийПользователь.ДопРеквизитАдресации;
КонецФункции

&НаКлиенте
Процедура ПанельСтраницПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ЗадачаИстория.Очистить();
		
	//Очистить кэш вопросов - ответов
	//-------------------------------------
	ТаблицаВопросОтвет.Очистить();
	ТаблицаВведенныхОтветов.Очистить();
	
	Если ТекущаяСтраница.Имя = "ЛояльностьПродаж" Тогда
		ИмяАктивногоДинамичСписка = "ЗадачиСписокЛояльностьПродаж";
		ТекТаблицаФормы = Элементы.ЗадачиСписокЛояльностьПродаж;	
		ЗадачиСписокЛояльностьПродажПриАктивизацииСтроки(ТекТаблицаФормы);	
	ИначеЕсли ТекущаяСтраница.Имя = "ЛояльностьРемонта" Тогда
		ИмяАктивногоДинамичСписка = "ЗадачиСписокЛояльностьРемонта";
		ТекТаблицаФормы = Элементы.ЗадачиСписокЛояльностьРемонта;	
		ЗадачиСписокЛояльностьРемонтаПриАктивизацииСтроки(ТекТаблицаФормы);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКонтактЦентрТекущегоПользователя()
	
	КЦ = Справочники.КонтактЦентры.ПустаяСсылка();	
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	КонтактЦентрыПользователи.Ссылка
	               |ИЗ
	               |	Справочник.КонтактЦентры.Пользователи КАК КонтактЦентрыПользователи
	               |ГДЕ
	               |	КонтактЦентрыПользователи.Пользователь = &Пользователь
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	КонтактЦентрыПользователи.Ссылка.Наименование";

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Пользователь",ПараметрыСеанса.ТекущийПользователь);
	
	РезультатЗапроса = ОбщегоНазначения.ВыполнитьЗапрос(Запрос);
	Если РезультатЗапроса.Пустой() Тогда
		Возврат КЦ
	КонецЕсли;
		
	тз = РезультатЗапроса.Выгрузить();
	
	Возврат тз[0][0];
	
КонецФункции


&НаСервере
Процедура ЗаполниТаблицуАнкетуОпроса(СигнатураПродажи)
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.Вопрос.Наименование КАК ВопросСтрокой,
	|	Т.Ответ.Наименование КАК ОтветСтрокой,
	|	Т.ОтветКомментарий.ПолнаяСтрока КАК ОтветКомментарийСтрокой
	|ИЗ
	|	РегистрСведений.АнкетыРасширенные.СрезПоследних(, СигнатураЗадачQ = &СигнатураЗадачи) КАК Т";
	Запрос.УстановитьПараметр("СигнатураЗадачи", СигнатураПродажи);	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаВведенныхОтветовАнкетыОпроса.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполниТаблицуВопросовТребующихВводОтветов(ИмяАктивногоДинамическогоСписка,Телефон, СигнатураПродажи="");
		
	Если Не ЗначениеЗаполнено(Телефон) Тогда
		Возврат
	КонецЕсли;
	
	//Оператор не увидит ответы анкеты по другому документу продажи с этим же номером телефона,
	//так как получаем анкету в разрезе документов продажи
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Анкеты.Ссылка КАК Вопрос,
	|	Анкеты.Наименование КАК ВопросСтрокой,
	|	Анкеты.Порядок КАК Порядок,
	|	Анкеты.ДопускаемоеЧислоОтветов КАК ДопускаемоеЧислоОтветов,
	|	ЕСТЬNULL(ИдентификаторыВопросов.Ссылка, ЗНАЧЕНИЕ(Справочник.ИдентификаторыСтрок.ПустаяСсылка)) КАК ИдВопроса
	|ПОМЕСТИТЬ ВТ00_ТекущиеВопросыАнкеты
	|ИЗ
	|	Справочник.Анкеты КАК Анкеты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИдентификаторыСтрок КАК ИдентификаторыВопросов
	|		ПО (ИдентификаторыВопросов.МодифицированнаяСтрока = Анкеты.МодифицированнаяСтрока)
	|ГДЕ
	|	Анкеты.ПометкаУдаления = ЛОЖЬ
	|	И Анкеты.ЭтоГруппа = ЛОЖЬ
	|	И Анкеты.Родитель.Наименование = &НаименованиеГруппы
	|	И Анкеты.НеПоказыватьПредыдущийОтвет = ЛОЖЬ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Вопрос,
	|	ИдВопроса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВариантыОтветов.Ссылка КАК Вопрос
	|ПОМЕСТИТЬ ВТ01_ВопросыСВыборомОтвета
	|ИЗ
	|	Справочник.Анкеты.ВариантыОтветов КАК ВариантыОтветов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ00_ТекущиеВопросыАнкеты КАК Анкеты
	|		ПО ВариантыОтветов.Ссылка = Анкеты.Вопрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегСрез.Вопрос КАК Вопрос,
	|	МАКСИМУМ(РегСрез.Период) КАК Период
	|ПОМЕСТИТЬ ВТ04_ПозднейшиеДатыОтветов
	|ИЗ
	|	РегистрСведений.АнкетыОбратнойСвязи.СрезПоследних(
	|			,
	|			СигнатураЗадачи = &СигнатураПродажи
	|				И Телефон = &Телефон) КАК РегСрез
	|
	|СГРУППИРОВАТЬ ПО
	|	РегСрез.Вопрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ00.Вопрос КАК Вопрос,
	|	ВТ00.ВопросСтрокой КАК ВопросСтрокой,
	|	ВТ00.ИдВопроса КАК ИдВопроса,
	|	ВТ00.Порядок КАК Порядок,
	|	ВЫБОР
	|		КОГДА ВТ00.Вопрос = ЕСТЬNULL(ВТ01.Вопрос, ЗНАЧЕНИЕ(Справочник.Анкеты.ПустаяСсылка))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВопросТребуетВыбораОтвета,
	|	ВТ00.ДопускаемоеЧислоОтветов КАК ДопускаемоеЧислоОтветов,
	|	РегСрез.Ответ.ПолнаяСтрока КАК ОтветСтрокой,
	|	РегСрез.ОтветКомментарий КАК ОтветКомментарий,
	|	РегСрез.Номер КАК Номер
	|ИЗ
	|	ВТ00_ТекущиеВопросыАнкеты КАК ВТ00
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ01_ВопросыСВыборомОтвета КАК ВТ01
	|		ПО (ВТ01.Вопрос = ВТ00.Вопрос)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АнкетыОбратнойСвязи.СрезПоследних(
	|				,
	|				СигнатураЗадачи = &СигнатураПродажи
	|					И Телефон = &Телефон) КАК РегСрез
	|		ПО (РегСрез.Вопрос = ВТ00.ИдВопроса)
	|			И ((РегСрез.Вопрос, РегСрез.Период) В
	|				(ВЫБРАТЬ
	|					ВТ04.Вопрос,
	|					ВТ04.Период
	|				ИЗ
	|					ВТ04_ПозднейшиеДатыОтветов КАК ВТ04))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ00.Порядок";

	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());	
	Запрос.УстановитьПараметр("Телефон", Телефон);
	Запрос.УстановитьПараметр("СигнатураПродажи", СигнатураПродажи);
	
	Если ИмяАктивногоДинамическогоСписка = "ЗадачиСписокЛояльностьПродаж" Тогда
		Запрос.УстановитьПараметр("НаименованиеГруппы", "ЛОЯЛЬНОСТЬ_ПРОДАЖ");
	ИначеЕсли ИмяАктивногоДинамическогоСписка = "ЗадачиСписокЛояльностьРемонта" Тогда
		 Запрос.УстановитьПараметр("НаименованиеГруппы", "ОБРАТНАЯ_СВЯЗЬ_ПРОДАЖА");
	КонецЕсли;

	РезультатЗапроса = ОбщегоНазначения.ВыполнитьЗапрос(Запрос);
	Если РезультатЗапроса.Пустой() Тогда
		Возврат
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		//Заполни таблицу ТаблицаВведенныхОтветов
		//---------------------------------------
		НоваяСтрока = ТаблицаВведенныхОтветов.Добавить();
		НоваяСтрока.ВопросАнкеты 				= Выборка.Вопрос;
		НоваяСтрока.ВопросСтрокой 				= Выборка.ВопросСтрокой;
		НоваяСтрока.ВопросТребуетВыбораОтвета	= Выборка.ВопросТребуетВыбораОтвета;
		НоваяСтрока.ДопускаемоеЧислоОтветов		= Выборка.ДопускаемоеЧислоОтветов;
		НоваяСтрока.ОтветСтрокой  				= Выборка.ОтветСтрокой;	
		НоваяСтрока.ОтветКомментарийСтрокой 	= Выборка.ОтветКомментарий;
			
		//Форматирование текста ответа: ответ серым цветом (=1)если есть ранее полученный ответ, иначе черным (=2)
		//---------------------------------------------------------------------------------------------------------
		Доступно = ЗначениеЗаполнено(Выборка.ОтветСтрокой);
		НоваяСтрока.ФорматТекстаОтвета = ?(Доступно, 1, 2);		
		
		//Заполни кэш вопросов-ответов
		//-----------------------------
		НовСтрока = ТаблицаВопросОтвет.Добавить();
		НовСтрока.Вопрос 							= Выборка.Вопрос;
		НовСтрока.Ответ								= "";
		НовСтрока.ВопросАнкетыТребовалОбновитьОтвет = НоваяСтрока.ВопросТребуетОбновитьОтвет;
		НовСтрока.ПорядковыйНомерВопроса 			= Выборка.Порядок;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ЛояльностьПродажПоказатьДокумент(Команда)
КонецПроцедуры

&НаКлиенте
Процедура ЛояльностьРемонтаПоказатьДокумент(Команда)
	Сигнатура = СокрЛП(Элементы.ЗадачиСписокЛояльностьРемонта.ТекущиеДанные.СигнатураПродажи);
	Если Не ЗначениеЗаполнено(Сигнатура) Тогда
		Возврат
	КонецЕсли;	
	Доступно = Истина;
	Доступно = Доступно И ЗначениеЗаполнено(Сигнатура);
	Доступно = Доступно И Лев(Сигнатура, 2) = "OU";
	Если НЕ Доступно Тогда
		Возврат;
	КонецЕсли;
	
	ГУИД 	  = Прав(Сигнатура, 36);
	ref		  = ОбщегоНазначения.GUID_2_ref(ГУИД);
	//АбсСсылка = "https://mainiis/asc_oper/#e1cib/data/Документ.ЗаказНаряд?ref="+ref; //доступ к веб-клиенту
	АбсСсылка = "e1c://server/MainAppM/asc_oper#e1cib/data/Документ.НЭРеализация?ref="+ref;
	ПерейтиПоНавигационнойСсылке(АбсСсылка);
КонецПроцедуры

&НаКлиенте 
Функция ПолучитьПодключениеБД_НаКлиенте(ПараметрыСоединения)
	//Возвращает com-соединение

	ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ = Неопределено;

	Доступно =  ТипЗнч(ПараметрыСоединения) = Тип("Строка");
	Доступно = Доступно И ЗначениеЗаполнено(ПараметрыСоединения);
	
	Если Не Доступно Тогда
		Возврат ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ
	КонецЕсли;
	
	V82COMConnector= Новый COMОбъект("V83.COMConnector");
	 Попытка
		 Возврат V82COMConnector.Connect(ПараметрыСоединения);
	 Исключение
		ПоказатьПредупреждение(, "Ошибка подключения к базе-источнику", 3);
		Возврат Неопределено;
	 КонецПопытки;
 КонецФункции

&НаКлиенте
Процедура ЗадачиСписокЛояльностьПродажПриАктивизацииСтроки(Элемент)
	
	//Очистить кэш вопросов - ответов
	ТаблицаВопросОтвет.Очистить();
	
	ИмяТекСтраницы = Элементы.ПанельСтраниц.ТекущаяСтраница.Имя;
	ИмяЭлемента = "ЗадачиСписок"+ИмяТекСтраницы;
	
	Если (Элементы[ИмяЭлемента].ТекущиеДанные = Неопределено) Тогда
		Возврат
	КонецЕсли;
	
	ЗадачаКомментарий = "";
	
	// Покажи историю общения
	ПокажиИсториюОбщения(Элементы[ИмяЭлемента].ТекущиеДанные.Телефон);
	
	// Загрузим на форму данные анкеты
	ЗаполниТаблицуВопросовТребующихВводОтветов(ИмяЭлемента, Элементы[ИмяЭлемента].ТекущиеДанные.Телефон);	

КонецПроцедуры
	
&НаСервере
Процедура ПокажиИсториюОбщения(ТелНомер)
					   
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 10
		               |	ИСТИНА КАК ЭтоЗвонок,
		               |	Рег.Дата КАК Дата,
		               |	Рег.ЭтоВходящий,
		               |	ВЫБОР
		               |		КОГДА Рег.ЭтоВходящий
		               |			ТОГДА Опер.Владелец
		               |		ИНАЧЕ Иниц.Владелец
		               |	КОНЕЦ КАК Оператор,
		               |	Рег.Сигнатура,
		               |	Рег.Принят
		               |ИЗ
		               |	РегистрСведений.Звонки КАК Рег
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыПривязка КАК Иниц
		               |		ПО (Иниц.Объект = Рег.Инициатор)
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыПривязка КАК Опер
		               |		ПО (Опер.Объект = Рег.АбонентВнутренний)
		               |ГДЕ
		               |	Рег.АбонентВнешний = &АбонентВнешний
		               |	И Рег.Дата >= &ОпорнаяДата
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Дата УБЫВ";

		   
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("АбонентВнешний", СокрЛП(ТелНомер));
		Запрос.УстановитьПараметр("ОпорнаяДата",ДобавитьМесяц(ТекущаяДата(), -3));
		
		РезультатЗапроса = ОбщегоНазначения.ВыполнитьЗапрос(Запрос);
		Если РезультатЗапроса.Пустой() Тогда
			Возврат;
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока (Выборка.Следующий()) Цикл			
			НовСтрока = ЗадачаИстория.Добавить();
			НовСтрока.ЭтоЗвонок 	= Выборка .ЭтоЗвонок;
			НовСтрока.ЭтоВходящий 	= Выборка .ЭтоВходящий;
			НовСтрока.Оператор 		= Выборка .Оператор;
			НовСтрока.Дата 			= Выборка .Дата;
			НовСтрока.Сигнатура 	= Выборка .Сигнатура;
			НовСтрока.Принят		= Выборка .Принят;
		КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВведенныхОтветовОтветСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВопросАнкеты 				= Элемент.Родитель.Родитель.ТекущиеДанные.ВопросАнкеты;
	СписокОтветов				= ТаблицаВведенныхОтветов_ПолучиСписокОтветов_НаСервере(ВопросАнкеты);
	ВопросТребуетОбновитьОтвет  = Элемент.Родитель.Родитель.ТекущиеДанные.ВопросТребуетОбновитьОтвет;
	
	Если СписокОтветов.Количество()>0 Тогда
		
		Если ДопускаемоеЧислоОтветов(ВопросАнкеты) >= 2 Тогда
			СтандартнаяОбработка = Ложь;
			
			Парам = Новый Структура();
			Парам.Вставить("Вопрос", ВопросАнкеты);
			
			ДопПарамОбработчикаОповещения = Новый Структура("ВопросАнкеты", ВопросАнкеты); 
			Оп = Новый ОписаниеОповещения("ОбработкаОповещения_ФормаВыбораОтвета", ЭтотОбъект, ДопПарамОбработчикаОповещения);

			ОткрытьФорму("Справочник.Анкеты.Форма.ВыборОтвета_РежимПользователя", Парам,ЭтаФорма, Новый УникальныйИдентификатор(),,,Оп,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			ДопПарамОбработчикаОповещения = Новый Структура("ВопросАнкеты", ВопросАнкеты); 
			Оп = Новый ОписаниеОповещения("ОбработкаОповещения_ТаблицаВведенныхОтветовОтветНачалоВыбора", ЭтотОбъект, ДопПарамОбработчикаОповещения);
			ПоказатьВыборИзСписка(Оп, СписокОтветов, Элемент);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ДопускаемоеЧислоОтветов(Вопрос)
	
	ЗначениеПоУмолчанию = 0;

	Доступно = ТипЗнч(Вопрос)=Тип("СправочникСсылка.Анкеты");
	Доступно = Доступно И ЗначениеЗаполнено(Вопрос);
	Если Не Доступно Тогда
		Возврат ЗначениеПоУмолчанию ;
	КонецЕсли;
	
	Возврат Вопрос.ДопускаемоеЧислоОтветов;
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения_ФормаВыбораОтвета(ВыбЗначОтвет, ДопПараметры)Экспорт
	
	Если ТипЗнч(ВыбЗначОтвет) <> Тип("СписокЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоОтветов = ВыбЗначОтвет.Количество();
	Если ВыбЗначОтвет.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеСтроки = ТаблицаВведенныхОтветов.НайтиСтроки(ДопПараметры); // должны найти одну строку
	Если НайденныеСтроки.Количество()<>1 Тогда
		Возврат
	КонецЕсли;
	
	НайденнаяСтрока = НайденныеСтроки[0];
	
	Если КоличествоОтветов = 1 Тогда
		Для Каждого Ответ Из ВыбЗначОтвет Цикл // одна итерация
			НайденнаяСтрока.ОтветСтрокой = Ответ.Значение;	
		КонецЦикла;
		ДобавитьЗаписьВТаблицуВопросОтвет(ДопПараметры.ВопросАнкеты, НайденнаяСтрока.ОтветСтрокой);
		НайденнаяСтрока.ФорматТекстаОтвета = 2;		
		Возврат;
	КонецЕсли;
	
	Если КоличествоОтветов > 1 Тогда
		
		СчЭлементов = 0;
		
		//Удали старый ответ
		//--------------------
		НайденнаяСтрока.ОтветСтрокой = ""; 
		
		Для Каждого Ответ Из ВыбЗначОтвет Цикл
			СчЭлементов = СчЭлементов + 1;
			
			НайденнаяСтрока.ОтветСтрокой = НайденнаяСтрока.ОтветСтрокой + Ответ.Значение;
			Если СчЭлементов < КоличествоОтветов Тогда
				НайденнаяСтрока.ОтветСтрокой = НайденнаяСтрока.ОтветСтрокой+" | ";	 
			КонецЕсли;
			
		КонецЦикла;
		ДобавитьЗаписьВТаблицуВопросОтвет(ДопПараметры.ВопросАнкеты, НайденнаяСтрока.ОтветСтрокой);
		
	КонецЕсли;
	
	НайденнаяСтрока.ФорматТекстаОтвета = 2;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения_ТаблицаВведенныхОтветовОтветНачалоВыбора(ВыбЗначОтвет, ДопПараметры) Экспорт
		
	Если ВыбЗначОтвет = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	НайденныеСтроки = ТаблицаВведенныхОтветов.НайтиСтроки(ДопПараметры); // должны найти одну строку
	Если НайденныеСтроки.Количество()<>1 Тогда
		Возврат
	КонецЕсли;
	
	НайденнаяСтрока = НайденныеСтроки[0];

	//Если не было других ответов на этот же вопрос, или вопрос допускает только один ответ
	//--------------------------------------------------------------------------------------
	Если НайденнаяСтрока.ОтветСтрокой = "" Тогда
		НайденнаяСтрока.ОтветСтрокой = ВыбЗначОтвет.Значение;
	Иначе
		НайденнаяСтрока.ОтветСтрокой = "";
		//Если вопрос допускает только один ответ (значения 0 и 1 равнозначны, означают только один ответ)
		//------------------------------------------------------------------------------------------------------	
		Если НайденнаяСтрока.ДопускаемоеЧислоОтветов = 0 ИЛИ   НайденнаяСтрока.ДопускаемоеЧислоОтветов = 1 Тогда
			НайденнаяСтрока.ОтветСтрокой = ВыбЗначОтвет.Значение;	
		Иначе
			НайденнаяСтрока.ОтветСтрокой = НайденнаяСтрока.ОтветСтрокой+" | "+ВыбЗначОтвет.Значение;	
		КонецЕсли;		
	КонецЕсли;
	ДобавитьЗаписьВТаблицуВопросОтвет(ДопПараметры.ВопросАнкеты, НайденнаяСтрока.ОтветСтрокой);
	НайденнаяСтрока.ФорматТекстаОтвета = 2;

КонецПроцедуры

&НаСервере
Функция ТаблицаВведенныхОтветов_ПолучиСписокОтветов_НаСервере(ВопросАнкеты)
	сзОтветы = Новый СписокЗначений();

	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АнкетыВариантыОтветов.Ответ КАК Ответ
	|ИЗ
	|	Справочник.Анкеты.ВариантыОтветов КАК АнкетыВариантыОтветов
	|ГДЕ
	|	АнкетыВариантыОтветов.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ВопросАнкеты);
	РезультатЗапроса = ОбщегоНазначения.ВыполнитьЗапрос(Запрос);
	Если РезультатЗапроса.Пустой() Тогда
		Возврат сзОтветы
	КонецЕсли;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		сзОтветы.Добавить(Выборка.Ответ);
	КонецЦикла;
	Возврат сзОтветы;
		
КонецФункции

&НаКлиенте
Процедура ТаблицаВведенныхОтветовОтветСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ТекДанные = Элементы.ТаблицаВведенныхОтветов.ТекущиеДанные;
	
	//Выход, если вопрос требует не выбора, а ввода ответа
	//----------------------------------------------------
	Если ТекДанные.ВопросТребуетВыбораОтвета Тогда 
		СтандартнаяОбработка=Ложь;
		Возврат
	КонецЕсли;
	ТекДанные.ФорматТекстаОтвета = 2;
	ДобавитьЗаписьВТаблицуВопросОтвет(ТекДанные.ВопросАнкеты, Текст);

	Элемент.СписокВыбора.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВведенныхОтветовОтветКомментарийСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ТекДанные = Элементы.ТаблицаВведенныхОтветов.ТекущиеДанные;	
	ТекДанные.ФорматТекстаОтвета = 2;
	ДобавитьЗаписьВТаблицуВопросОтвет(ТекДанные.ВопросАнкеты, ,Текст);
КонецПроцедуры


&НаСервере
Процедура ДобавитьЗаписьВТаблицуВопросОтвет(ВопросАнкеты, Ответ="", ОтветКомментарий = "")
	
	ПарамОтбора 	= Новый Структура("Вопрос", ВопросАнкеты);
	НайденныеСтроки = ТаблицаВопросОтвет.НайтиСтроки(ПарамОтбора);
	СтрокаТЧ 		= ?(НайденныеСтроки.Количество()>0, НайденныеСтроки[0], ТаблицаВопросОтвет.Добавить()); 
	СтрокаТЧ.Вопрос = ВопросАнкеты;    
	
 	//Если пользователь ввел/выбрал значение для поля Ответ	
	СтрокаТЧ.Ответ  = ?(ЗначениеЗаполнено(Ответ), Ответ, СтрокаТЧ.Ответ);  
	
	//Если пользователь ввел/выбрал значение для поля ОтветКомментарий
	СтрокаТЧ.ОтветКомментарий = ?(ЗначениеЗаполнено(ОтветКомментарий), ОтветКомментарий, СтрокаТЧ.ОтветКомментарий); 
КонецПроцедуры

//<Запись анкеты>
&НаКлиенте
Процедура ЗаписатьАнкету(Команда)
	
	Если Элементы[ИмяАктивногоДинамичСписка].ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
		
	ДатаАнкеты 		 = ТекущаяДата();
	Тел 			 = Элементы[ИмяАктивногоДинамичСписка].ТекущиеДанные.Телефон;
	СигнатураПродажи = Элементы[ИмяАктивногоДинамичСписка].ТекущиеДанные.СигнатураПродажи;	
		
	Доступно = ЗначениеЗаполнено(Тел);
	Если Не Доступно Тогда
		ПоказатьПредупреждение(, "Запись анкеты невозможна. Не указан телефон абонента", 3);
		Возврат;	
	КонецЕсли;
	
	Доступно = ЗначениеЗаполнено(СигнатураПродажи);
	Если Не Доступно Тогда
		ПоказатьПредупреждение(, "Запись анкеты невозможна. Не указана сигнатура продажи", 3);
		Возврат;		
	КонецЕсли;
	
	ТочкаМаршрута = Элементы[ИмяАктивногоДинамичСписка].ТекущиеДанные.ТочкаМаршрута;
	
	Доступно = Истина;
	Доступно = Доступно И ТочкаМаршрута = ПредопределенноеЗначение("БизнесПроцесс.ОбратнаяСвязьЛояльностиПродаж.ТочкаМаршрута.ОбработатьНегативнуюАнкету_1");
	Доступно = Доступно И ТаблицаВопросОтвет.Количество() = ТаблицаВведенныхОтветов.Количество();

	Если Доступно Тогда
		
		Для Каждого Стр Из ТаблицаВопросОтвет Цикл
			Доступно = Доступно И ЗначениеЗаполнено(Стр.Ответ);
			Если Не Доступно Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
			
		Если Не Доступно Тогда
			ПоказатьПредупреждение(, "Запись анкеты невозможна. Не заполнена анкета", 3);
			Возврат
		КонецЕсли;

	КонецЕсли;
	
	//Запиши анкету в РС.АнкетыОбратнойСвязи
	//---------------------------------------
	Доступно = ЗаписатьВыбранныйОтвет_НаСервере(ДатаАнкеты, Тел, СигнатураПродажи);
	Если Не Доступно Тогда	
		ПоказатьПредупреждение(, "Ошибка записи анкеты", 3);
	КонецЕсли;
	
	//Закрой задачу
	//-------------
	// В реквизит ЗвонокЗакрытия запиши или сигнатуру или внутренний номер сотрудника контакт-центра
	Если ИмяАктивногоДинамичСписка = "ЗадачиСписокЛояльностьРемонта" Тогда
		
		ЗадачаСсылка = Элементы[ИмяАктивногоДинамичСписка].ТекущиеДанные.Ссылка;
		Выполнена = ЗакройЗадачуНаСервере(ЗадачаСсылка, ЗадачаКомментарий);
		Если Не Выполнена Тогда
			Предупреждение("Ошибка закрытия задачи "+ЗадачаСсылка);
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы[ИмяАктивногоДинамичСписка].Обновить();
	ЗадачиСписокЛояльностьРемонтаПриАктивизацииСтроки();

КонецПроцедуры

&НаСервере
Функция ЗакройЗадачуНаСервере(ЗадачаСсылка, ЗадачаКомментарий)
	
	ЗначениеПоУмолчанию = Ложь;
	
	Если ЗадачаСсылка.Выполнена Тогда
		Возврат ЗначениеПоУмолчанию
	КонецЕсли;
	
	ЗадачаОб = ЗадачаСсылка.ПолучитьОбъект();
	ЗадачаОб.ДатаВыполнения = ТекущаяДата();
	Попытка
		ЗадачаОб.ДатаВыполнения 	= ТекущаяДата();
		ЗадачаОб.ИсполнительФакт	= ПараметрыСеанса.ТекущийПользователь; 
		ЗадачаОб.Комментарий		= ЗадачаКомментарий;
		ЗадачаОб.ВыполнитьЗадачу();
	Исключение
		Данные		= ЗадачаСсылка;
		Комментарий = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("Запись задачи", УровеньЖурналаРегистрации.Ошибка, Метаданные.Задачи.ЗадачаОбратнаяСвязь, Данные, Комментарий)
	КонецПопытки;
	
	Возврат Истина
КонецФункции

&НаСервере
Функция ЗаписатьВыбранныйОтвет_НаСервере(ДатаАнкеты, ТелАбонента, СигнатураЗадачи)
	//Эапись в регистр сведений АнкетыОбратнойСвязи
	
	ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ = Ложь;
	
	Доступно = ТипЗнч(ДатаАнкеты) = Тип("Дата");
	Доступно = Доступно И ЗначениеЗаполнено(ДатаАнкеты);
	Доступно = Доступно И ТипЗнч(ТелАбонента) = Тип("Строка") ;
	Доступно = Доступно И ЗначениеЗаполнено(ТелАбонента);
	
	Если Не Доступно Тогда
		Возврат ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ;
	КонецЕсли;
	
	ПустойИд = Справочники.ИдентификаторыСтрок.ПустаяСсылка();
	
	НЗ = РегистрыСведений.АнкетыОбратнойСвязи.СоздатьНаборЗаписей();
	НЗ.Отбор.Период.Установить(ДатаАнкеты);
	НЗ.Отбор.Телефон.Установить(ТелАбонента);
	НЗ.Прочитать();
	
	Для Каждого СтрТЗ Из ТаблицаВопросОтвет Цикл
		
		//Не записываем, если ответ не заполнен
		//-----------------------------------------------------
		Если Не ЗначениеЗаполнено(СтрТЗ.Ответ) Тогда
			Продолжить;
		КонецЕсли;
		
		ИдСтрокиВопроса = Справочники.ИдентификаторыСтрок.УстановиИдентификаторСтроки(Строка(СтрТЗ.Вопрос), "вопрос", Строка(СтрТЗ.Вопрос));
		
		Если ИдСтрокиВопроса = ПустойИд Тогда
			Продолжить
		КонецЕсли;
		
		
		Если СтрЧислоВхождений(СтрТЗ.Ответ, "|") = 0 Тогда
			
			
			ИдСтрокиОтвета  = Справочники.ИдентификаторыСтрок.УстановиИдентификаторСтроки(СтрТЗ.Ответ, "ответ", СтрТЗ.Ответ);
			
			ИдСтрокиОтветКомментарий  = Справочники.ИдентификаторыСтрок.УстановиИдентификаторСтроки(СтрТЗ.ОтветКомментарий, "ответ", СтрТЗ.ОтветКомментарий);
			
			//Если ответ не выбран или не введен,  тогда записываем пустую ссылку 
			//---------------------------------------------------------------------
			//Если ИдСтрокиОтвета = ПустойИд Тогда
			//	Продолжить
			//КонецЕсли;
			
			НоваяЗапись = НЗ.Добавить();
			НоваяЗапись.Период				=	ДатаАнкеты;
			НоваяЗапись.Телефон 			=	ТелАбонента;
			НоваяЗапись.Вопрос				=	ИдСтрокиВопроса;
			НоваяЗапись.Ответ				=	ИдСтрокиОтвета;
			НоваяЗапись.СигнтраЗадачи		=	СигнатураЗадачи;
			НоваяЗапись.ОтветКомментарий	=	ИдСтрокиОтветКомментарий;
			НоваяЗапись.СигнатураЗадачи		=	СигнатураЗадачи; 
		Иначе
			
			МасСтрок = СтрРазделить(СтрТЗ.Ответ, "|",Ложь);
			Счетчик = 0;
			Для Каждого Стр Из МасСтрок Цикл
				Счетчик 		= Счетчик+1;
				Отв 			= СокрЛП(Стр);
				ИдСтрокиОтвета  = Справочники.ИдентификаторыСтрок.УстановиИдентификаторСтроки(Стр, "ответ", Стр);
				
				Если ИдСтрокиОтвета = ПустойИд Тогда
					Продолжить
				КонецЕсли;
				
				НоваяЗапись				= НЗ.Добавить();
				НоваяЗапись.Период		= ДатаАнкеты;
				НоваяЗапись.Телефон		= ТелАбонента;
				НоваяЗапись.Вопрос		= ИдСтрокиВопроса;
				НоваяЗапись.Номер		= Счетчик;
				НоваяЗапись.Ответ		= ИдСтрокиОтвета;
				
				Если Счетчик = 1 Тогда
					ИдСтрокиОтветКомментарий  = Справочники.ИдентификаторыСтрок.УстановиИдентификаторСтроки(СтрТЗ.ОтветКомментарий, "ответ", СтрТЗ.ОтветКомментарий);
				КонецЕсли;
				
				НоваяЗапись.СигнтраЗадачи	= СигнатураЗадачи;
				НоваяЗапись.СигнатураЗадачи	= СигнатураЗадачи;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЗ.Количество()>0 Тогда
		Попытка
			НЗ.Записать(Истина);
		Исключение
			Данные =  "ДатаАнкеты = "+ДатаАнкеты+"; ТелАбонента = "+ТелАбонента+"; СигнатураЗадачи = "+СигнатураЗадачи;
			Комментарий = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("ЗаписатьВыбранныйОтвет_НаСервере()",  УровеньЖурналаРегистрации.Ошибка, Метаданные.РегистрыСведений.АнкетыОбратнойСвязи, Данные, Комментарий);
			Возврат ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ;
		КонецПопытки
	КонецЕсли;	
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ЗадачиСписокЛояльностьРемонтаПриАктивизацииСтроки(Элемент=Неопределено)
	
	//Очисти кэш вопросов - ответов
	//-------------------------------------
	ТаблицаВопросОтвет.Очистить();
		
	ИмяТекСтраницы 	= Элементы.ПанельСтраниц.ТекущаяСтраница.Имя;
	ИмяЭлемента 	= "ЗадачиСписок"+ИмяТекСтраницы;
	
	ТекДанные = Элементы[ИмяЭлемента].ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	БизнесПроцессСсылка = ТекДанные.БизнесПроцесс;
		
	// Загрузи на форму историю бизнесс-процесса
	//-------------------------------------------
	ТаблицаБизнесПроцесса.Очистить();
	БизнесПроцессИсторияНаСервере(БизнесПроцессСсылка);

	// Загрузи на форму данные выбранной задачи
	//------------------------------------------
	ЗадачаИстория.Очистить();
	ПокажиИсториюОбщения(ТекДанные.Телефон);
	
	// Очисти кэш вопросов - ответов
	//--------------------------------
	ТаблицаВведенныхОтветов.Очистить();
	ЗаполниТаблицуВопросовТребующихВводОтветов(ИмяЭлемента, ТекДанные.Телефон, ТекДанные.СигнатураПродажи);	
	
	//Загрузи на форму данные анкеты
	//------------------------------
	ТаблицаВведенныхОтветовАнкетыОпроса.Очистить();
	ЗаполниТаблицуАнкетуОпроса(ТекДанные.СигнатураПродажи);
				
	//Покажи/скрой кнопки закрытия задач
	//-----------------------------------
	Элементы.КнЗаписатьАнкету.Доступность						= Ложь;
	Элементы.КнЗадачаПроверкиПринять.Доступность				= Ложь;
	Элементы.КнЗадачаПроверкиВернутьНаДоработку.Доступность		= Ложь;
	Элементы.КнЗадачаПроверкиВернутьНаВедение.Доступность		= Ложь;

	ЗадачаКомментарий = Элементы[ИмяЭлемента].ТекущиеДанные.Комментарий; 
		
	ТочкаМаршрута = ТекДанные.ТочкаМаршрута;	
	Доступно = ТекДанные.Выполнена = Ложь;
	
	Если  Доступно Тогда
		
		Если 	ТочкаМаршрута = ПредопределенноеЗначение("БизнесПроцесс.ОбратнаяСвязьЛояльностиПродаж.ТочкаМаршрута.ОбработатьНегативнуюАнкету_1")
			Или ТочкаМаршрута = ПредопределенноеЗначение("БизнесПроцесс.ОбратнаяСвязьЛояльностиПродаж.ТочкаМаршрута.ОбработатьНегативнуюАнкету_2")
			Или ТочкаМаршрута = ПредопределенноеЗначение("БизнесПроцесс.ОбратнаяСвязьЛояльностиПродаж.ТочкаМаршрута.ОбработатьНегативнуюАнкету_3")
			Или ТочкаМаршрута = ПредопределенноеЗначение("БизнесПроцесс.ОбратнаяСвязьЛояльностиПродаж.ТочкаМаршрута.ОбработатьНегативнуюАнкету_4")
			Или ТочкаМаршрута = ПредопределенноеЗначение("БизнесПроцесс.ОбратнаяСвязьЛояльностиПродаж.ТочкаМаршрута.ОбработатьНегативнуюАнкету_5")
		Тогда
			Элементы.КнЗаписатьАнкету.Доступность = Истина;	
		КонецЕсли;
			
		Если 	ТочкаМаршрута = ПредопределенноеЗначение("БизнесПроцесс.ОбратнаяСвязьЛояльностиПродаж.ТочкаМаршрута.ПроверитьОбработаннуюНегативнуюАнкету_1")
			Или ТочкаМаршрута = ПредопределенноеЗначение("БизнесПроцесс.ОбратнаяСвязьЛояльностиПродаж.ТочкаМаршрута.ПроверитьОбработаннуюНегативнуюАнкету_2")
			Или ТочкаМаршрута = ПредопределенноеЗначение("БизнесПроцесс.ОбратнаяСвязьЛояльностиПродаж.ТочкаМаршрута.ПроверитьОбработаннуюНегативнуюАнкету_3")
			Или ТочкаМаршрута = ПредопределенноеЗначение("БизнесПроцесс.ОбратнаяСвязьЛояльностиПродаж.ТочкаМаршрута.ПроверитьОбработаннуюНегативнуюАнкету_4")
			Или ТочкаМаршрута = ПредопределенноеЗначение("БизнесПроцесс.ОбратнаяСвязьЛояльностиПродаж.ТочкаМаршрута.ПроверитьОбработаннуюНегативнуюАнкету_5")
		Тогда
			Элементы.КнЗадачаПроверкиПринять.Доступность				= Истина;
			Элементы.КнЗадачаПроверкиВернутьНаДоработку.Доступность		= Истина;
			Элементы.КнЗадачаПроверкиВернутьНаВедение.Доступность		= Истина;
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура БизнесПроцессИсторияНаСервере(БизнесПроцессСсылка)
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗадачаОбратнаяСвязь.Ссылка КАК Ссылка,
	|	ЗадачаОбратнаяСвязь.Выполнена КАК Выполнена,
	|	ЗадачаОбратнаяСвязь.ИсполнительФакт КАК Исполнитель,
	|	ЗадачаОбратнаяСвязь.Комментарий КАК Комментарий,
	|	ЗадачаОбратнаяСвязь.Дата КАК Дата
	|ИЗ
	|	Задача.ЗадачаОбратнаяСвязь КАК ЗадачаОбратнаяСвязь
	|ГДЕ
	|	ЗадачаОбратнаяСвязь.БизнесПроцесс = &БизнесПроцесс
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцессСсылка);
	РезультатЗапроса = ОбщегоНазначения.ВыполнитьЗапрос(Запрос);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Новая = ТаблицаБизнесПроцесса.Добавить();
		Новая.Задача 		= Выборка.Ссылка;
		Новая.Выполнена 	= Выборка.Выполнена;
		Новая.Исполнитель 	= Выборка.Исполнитель;
		Новая.Комментарий	= Выборка.Комментарий;	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаИсторияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.Сигнатура) Тогда
		Возврат
	КонецЕсли;
	
	Парам = Новый Структура();
	Парам.Вставить("Сигнатура", Элемент.ТекущиеДанные.Сигнатура);

	
	Если Элемент.ТекущиеДанные.ЭтоЗвонок Тогда
		Если Элемент.ТекущиеДанные.ЭтоВходящий Тогда
			ИмяОткрываемойФормы = "РегистрСведений.Звонки.Форма.ФормаВходящегоЧтение";
		Иначе
			ИмяОткрываемойФормы = "РегистрСведений.Звонки.Форма.ФормаИсходящегоЧтение";
		КонецЕсли;
		ОткрытьФорму(ИмяОткрываемойФормы, Парам);
	КонецЕсли;
	
	КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДинСписки(Команда)
	Элементы[ИмяАктивногоДинамичСписка].Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВведенныхОтветовОтветСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	//	Автоподбор для ответов	

	Элемент.СписокВыбора.Очистить();
	
	Если Не МоиНастройки_ИспользоватьАвтоподбор Тогда
		Возврат
	КонецЕсли;
	
	Текст = СокрЛП(Текст);
	Если СтрДлина(Текст)<=10 Или Ожидание=0 Тогда
		Возврат
	КонецЕсли;
	
	Результат = ТаблицаВведенныхОтветовОтветСтрокойАвтоПодбор_НаСервере(Текст); 
	Если Не ТипЗнч(Результат) = Тип("СписокЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Эл Из Результат Цикл
		Элемент.СписокВыбора.Добавить(Эл.Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТаблицаВведенныхОтветовОтветСтрокойАвтоПодбор_НаСервере(Текст)
	
	ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ = Ложь;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 10
	               |	ИдентификаторыСтрок.Наименование
	               |ИЗ
	               |	Справочник.ИдентификаторыСтрок КАК ИдентификаторыСтрок
	               |ГДЕ
	               |	ИдентификаторыСтрок.ПометкаУдаления = ЛОЖЬ
	               |	И ИдентификаторыСтрок.Наименование ПОДОБНО &Наименование";
	Запрос.УстановитьПараметр("Наименование", "%"+Текст+"%");
	РезультатЗапроса = ОбщегоНазначения.ВыполнитьЗапрос(Запрос);
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ
	КонецЕсли;
	
	МассивОтветов = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку(0);
	СписокОтветов = Новый СписокЗначений();
	СписокОтветов.ЗагрузитьЗначения(МассивОтветов);
	
	Возврат СписокОтветов;
КонецФункции

&НаСервере
Функция ТелВнутр(ТелВнутрСсылка)
	//Получает тел. внутр. как строку из ссылки
	//вызывается из ОткрытьАнкетуОпроса
	
	Возврат ТелВнутрСсылка.Код;
КонецФункции

&НаКлиенте
Процедура ОтобразитьАнкету(Команда)
	Элементы.Анкета.Видимость = Не Элементы.Анкета.Видимость
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаПроверкиПринять(Команда)
	Если Элементы[ИмяАктивногоДинамичСписка].ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	//Закрой задачу
	// В реквизит ЗвонокЗакрытия запиши или сигнатуру или внутренний номер сотрудника контакт-центра
	Если ИмяАктивногоДинамичСписка = "ЗадачиСписокЛояльностьРемонта" Тогда		
		ЗадачаСсылка = Элементы[ИмяАктивногоДинамичСписка].ТекущиеДанные.Ссылка;
		Выполнена = ЗадачаПроверкиПринятьНаСервере(ЗадачаСсылка, ЗадачаКомментарий);		
		Если Не Выполнена Тогда
			Предупреждение("Ошибка закрытия задачи "+ЗадачаСсылка);
		КонецЕсли;
	КонецЕсли;
	
	Элементы[ИмяАктивногоДинамичСписка].Обновить();
	ЗадачиСписокЛояльностьРемонтаПриАктивизацииСтроки();

КонецПроцедуры

&НаСервере
Функция ЗадачаПроверкиПринятьНаСервере(ЗадачаСсылка, ЗадачаКомментарий)
	ЗначениеПоУмолчанию = Ложь;
	
	Если ЗадачаСсылка.Выполнена Тогда
		Возврат ЗначениеПоУмолчанию
	КонецЕсли;
	
	ЗадачаОб = ЗадачаСсылка.ПолучитьОбъект();
	ЗадачаОб.ДатаВыполнения = ТекущаяДата();
	Попытка
		ЗадачаОб.ОценкаВыполненияПредшествующейЗадачи = 5;
		ЗадачаОб.ДатаВыполнения		= ТекущаяДата();	
		ЗадачаОб.ИсполнительФакт	= ПараметрыСеанса.ТекущийПользователь;	
		ЗадачаОб.Комментарий		= ЗадачаКомментарий;
		ЗадачаОб.ВыполнитьЗадачу();
	Исключение
		Данные		= ЗадачаСсылка;
		Комментарий = ОписаниеОшибки();
		ОбслуживаниеСервер.ЗарегистрироватьСобытие("Запись задачи", УровеньЖурналаРегистрации.Ошибка, Метаданные.Задачи.ЗадачаОбратнаяСвязь, Данные, Комментарий)
	КонецПопытки;
	
	Возврат Истина
	
КонецФункции

&НаКлиенте
Процедура ЗадачаПроверкиВернутьНаДоработку(Команда)
	Если Элементы[ИмяАктивногоДинамичСписка].ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;

	//Закрой задачу
	// В реквизит ЗвонокЗакрытия запиши или сигнатуру или внутренний номер сотрудника контакт-центра
	Если ИмяАктивногоДинамичСписка = "ЗадачиСписокЛояльностьРемонта" Тогда		
		ЗадачаСсылка = Элементы[ИмяАктивногоДинамичСписка].ТекущиеДанные.Ссылка;
		Выполнена = ЗадачаПроверкиВернутьНаДоработкуНаСервере(ЗадачаСсылка, ЗадачаКомментарий);	
		Если Не Выполнена Тогда
			//Предупреждение("Ошибка закрытия задачи "+ЗадачаСсылка);
			Сообщ = Новый СообщениеПользователю();
			Сообщ.Текст ="Ошибка закрытия задачи "+ЗадачаСсылка;
			Сообщ.Сообщить();
		КонецЕсли;

	КонецЕсли;
	
	Элементы[ИмяАктивногоДинамичСписка].Обновить();
	ЗадачиСписокЛояльностьРемонтаПриАктивизацииСтроки();

КонецПроцедуры

&НаСервере
Функция ЗадачаПроверкиВернутьНаДоработкуНаСервере(ЗадачаСсылка, ЗадачаКомментарий, ОценкаВыполненияПредшествующейЗадачи = 1)
	ЗначениеПоУмолчанию = Ложь;
	
	Если ЗадачаСсылка.Выполнена Тогда
		Возврат ЗначениеПоУмолчанию
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗадачаКомментарий) Тогда
		Сообщ = Новый СообщениеПользователю();
		Сообщ.ПутьКДанным="ЗадачаКомментарий";
		Сообщ.Поле = "ЗадачаКомментарий";
		Сообщ.Текст = "Комментарий не заполнен";
		Сообщ.Сообщить();
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	ЗадачаОб = ЗадачаСсылка.ПолучитьОбъект();
	ЗадачаОб.ДатаВыполнения = ТекущаяДата();
	Попытка
		ЗадачаОб.ОценкаВыполненияПредшествующейЗадачи = ОценкаВыполненияПредшествующейЗадачи;
		ЗадачаОб.ДатаВыполнения						  = ТекущаяДата();	
		ЗадачаОб.ИсполнительФакт					  = ПараметрыСеанса.ТекущийПользователь;	
		ЗадачаОб.Комментарий 						  = ЗадачаКомментарий;
		ЗадачаОб.ВыполнитьЗадачу();
	Исключение
		Данные		= ЗадачаСсылка;
		Комментарий = ОписаниеОшибки();
		ОбслуживаниеСервер.ЗарегистрироватьСобытие("Запись задачи", УровеньЖурналаРегистрации.Ошибка, Метаданные.Задачи.ЗадачаОбратнаяСвязь, Данные, Комментарий)
	КонецПопытки;
	
	Возврат Истина
	
КонецФункции

&НаКлиенте
Процедура КомментарийИзменить(Команда)
	//Изменить комментарий у незакрытой задачи
	//-----------------------------------------
	
	ТекДанные = Элементы[ИмяАктивногоДинамичСписка].ТекущиеДанные;
	
	Доступно = ТекДанные = Неопределено;
	Доступно = Доступно И ТекДанные.Выполнена = Истина;
	Доступно = Доступно И ЗначениеЗаполнено(ЗадачаКомментарий)=Ложь;
	
	Если Доступно Тогда
		Возврат
	КонецЕсли;
		
	ЗадачаЗаписатьКомментарий_НаСервере(ТекДанные.Ссылка, ЗадачаКомментарий);
	Элементы[ИмяАктивногоДинамичСписка].Обновить();
КонецПроцедуры

&НаСервере
Процедура ЗадачаЗаписатьКомментарий_НаСервере(ЗадачаСсылка, ЗадачаКомментарий)
		
	ЗадачаОб = ЗадачаСсылка.ПолучитьОбъект();
	ЗадачаОб.Комментарий = ЗадачаКомментарий;
	
	Попытка
		ЗадачаОб.Записать();	
	Исключение
		Сообщить("При сохранении комментария возникла ошибка");
		Данные = "ЗадачаСсылка ="+ЗадачаСсылка+" ; ЗадачаКомментарий = "+ЗадачаКомментарий; 
		Комментарий = ОписаниеОшибки();
		ОбслуживаниеСервер.ЗарегистрироватьСобытие("ЗадачаЗаписатьКомментарий_НаСервере", УровеньЖурналаРегистрации.Ошибка, Метаданные.Задачи.ЗадачаОбратнаяСвязь, Данные, Комментарий);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
	ТекДанные = Элементы[ИмяАктивногоДинамичСписка].ТекущиеДанные;
	
	Доступно = ТекДанные = Неопределено;
	
	Если Доступно Тогда
		Возврат
	КонецЕсли;
	
	СигнатураПродажи = ТекДанные.СигнатураПродажи;
	ЗаказНарядНомер	 = ТекДанные.НомерДок;	
	
	ТаблДок = Новый ТабличныйДокумент();

	Печать_НаСервере(СигнатураПродажи, ТаблДок);
	
	ТаблДок.ОтображатьСетку 	= Ложь;
	ТаблДок.ОтображатьЗаголовки	= Истина;
	ТаблДок.Показать("Анкета к заказ-наряду № "+ ЗаказНарядНомер);
КонецПроцедуры

&НаСервере
Процедура Печать_НаСервере(СигнатураПродажи, ТаблДок)
	Отч = Отчеты.Продажи_ПолныйРеестрНегативныхОтзывовРекомендацийПоДатеЗакрытияЗадачи_v122021.Создать();
	Отч.УстановитьНастройки();
	Отч.СформироватьОтчет(ТаблДок, СигнатураПродажи);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВведенныхОтветовАнкетыОпросаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
		ПоказатьПредупреждение(,Элемент.ТекущиеДанные.ОтветКомментарийСтрокой);
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаПроверкиВернутьНаВедение(Команда)
	Если Элементы[ИмяАктивногоДинамичСписка].ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;

	//Закрой задачу
	// В реквизит ЗвонокЗакрытия запиши или сигнатуру или внутренний номер сотрудника контакт-центра
	Если ИмяАктивногоДинамичСписка = "ЗадачиСписокЛояльностьРемонта" Тогда		
		ЗадачаСсылка = Элементы[ИмяАктивногоДинамичСписка].ТекущиеДанные.Ссылка;
		
		//Задача на доработку, оценка выполнения предшествующей задачи = 2
		Выполнена = ЗадачаПроверкиВернутьНаДоработкуНаСервере(ЗадачаСсылка, ЗадачаКомментарий, 2);	
		Если Не Выполнена Тогда
			Сообщ = Новый СообщениеПользователю();
			Сообщ.Текст ="Ошибка закрытия задачи "+ЗадачаСсылка;
			Сообщ.Сообщить();
		КонецЕсли;

	КонецЕсли;
	
	Элементы[ИмяАктивногоДинамичСписка].Обновить();
	ЗадачиСписокЛояльностьРемонтаПриАктивизацииСтроки();

КонецПроцедуры




 











