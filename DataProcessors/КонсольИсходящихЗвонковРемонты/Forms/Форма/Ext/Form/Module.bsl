&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)	
	МоиНастройки_ТолькоЗвонкиПоЗадачеВИсторииОбщения 	= Ложь;
	Элементы.МоиНастройки_ТолькоЗвонкиПоЗадачеВИсторииОбщения.Видимость = Истина;
	
	МоиНастройки_ИспользоватьАвтоподбор 				= Истина;
	
	Элементы.КоррректировкаСферы.Видимость 				= РольДоступна("Администратор")	Или РольДоступна("КонтактЦентр_Администратор");

	Об = РеквизитФормыВЗначение("Объект");
	Об.ЗагрузиСоответствиеТочекПродажПодразделениям();
	ЗначениеВРеквизитФормы(Об, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	КЦ = ПолучитьКонтактЦентрТекущегоПользователя();
	Если КЦ = ПредопределенноеЗначение("Справочник.КонтактЦентры.ПустаяСсылка") Тогда
		Отказ = Истина;
		Возврат
	Иначе
		ЭтаФорма.КЦ = КЦ;
	КонецЕсли;
	
	ОбновитьФорму();
	КонсольТелефонВыбратьНачало();

	ЭтаФорма.ИмяАктивногоДинамичСписка = "ЗадачиСписокЛояльностьРемонта";	
	 
	#Область Лояльность_Ремонтов
	ЭтаФорма.ЗадачиСписокЛояльностьРемонта.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы.Очистить();

	 //<Отбор по не выполненным задачам>
	ЭлОтбора1 = ЭтаФорма.ЗадачиСписокЛояльностьРемонта.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлОтбора1.ЛевоеЗначение	 = Новый ПолеКомпоновкиДанных("Выполнена");
	ЭлОтбора1.ПравоеЗначение = ЛОЖЬ;
	ЭлОтбора1.ВидСравнения	 = ВидСравненияКомпоновкиДанных.Равно;
	ЭлОтбора1.Использование	 = Истина;	
	//</Отбор по невыполненным задачам>
	
	 //<Отбор по закрытым заказ-нарядам>
	ЭлОтбора1 = ЭтаФорма.ЗадачиСписокЛояльностьРемонта.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлОтбора1.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("ДатаЗакрытияЗаказНаряда");
	ЭлОтбора1.ПравоеЗначение='00010101';
	ЭлОтбора1.ВидСравнения=ВидСравненияКомпоновкиДанных.Больше;
	ЭлОтбора1.Использование=Истина;	
	
	ЭлОтбора1 = ЭтаФорма.ЗадачиСписокЛояльностьРемонта.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлОтбора1.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("ДатаЗакрытияЗаказНаряда");
	ЭлОтбора1.ПравоеЗначение=НачалоДня(ТекущаяДата()) - 2*24*60*60;  // два дня назад
	ЭлОтбора1.ВидСравнения=ВидСравненияКомпоновкиДанных.Меньше;
	ЭлОтбора1.Использование=Истина;	
	//</Отбор по закрытым заказ-нарядам>	
	
	#Область Фильтр_По_Машинозаезду	
	ЭлОтбора1 = ЭтаФорма.ЗадачиСписокЛояльностьРемонта.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлОтбора1.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("МашинозаездДатаЗакрытия");
	ЭлОтбора1.ПравоеЗначение=НачалоДня(ТекущаяДата()) - 2*24*60*60;  // два дня назад
	ЭлОтбора1.ВидСравнения=ВидСравненияКомпоновкиДанных.Меньше;
	ЭлОтбора1.Использование=Истина;	
	
	ГрОтбора1 = ЗадачиСписокЛояльностьРемонта.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГрОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ГрОтбора1.Использование=Истина;	
	
	ЭлОтбора1 = ГрОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлОтбора1.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("МашинозаездСсылка");
	ЭлОтбора1.ВидСравнения=ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлОтбора1.Использование=Истина;	

	ЭлОтбора1 = ГрОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлОтбора1.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("МашинозаездДатаЗакрытия");
	ЭлОтбора1.ВидСравнения=ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлОтбора1.Использование=Истина;	
	#КонецОбласти
	
	#КонецОбласти	
		
КонецПроцедуры

&НаКлиенте
Функция Позвонить(Команда)	
	
	// Если не выбрана строка динамического списка, значит не знаем телефон, на который нужно звонить
	//-------------------------------------------------------------------------------------------------
	Если (Элементы[ИмяАктивногоДинамичСписка].ТекущиеДанные = Неопределено) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеЗадачи = Элементы[ИмяАктивногоДинамичСписка].ТекущиеДанные;
	
	Если 	ИмяАктивногоДинамичСписка = "ЗадачиСписокЛояльностьРемонта" Тогда	
		SYSAGR = "zn_"+ДанныеЗадачи.СигнатураПродажи;
		Результат = Коммуникации.АбонентВызвать(ЗначенияСервера.ПолучитьЗначениеРеквизита(ТелВнутр,"Код"), ДанныеЗадачи.Телефон, SYSAGR);
		
		Если Результат <> "" Тогда			
			ПоказатьПредупреждение(,"При вызове абонента произошла ошибка",3);
		КонецЕсли;
		ЗадачаЛояльностьПерезвонитьНаСервере(Элементы[ИмяАктивногоДинамичСписка].ТекущиеДанные.СигнатураПродажи,Результат);	
		Элементы[ИмяАктивногоДинамичСписка].Обновить();
		Возврат Неопределено;
	КонецЕсли;
КонецФункции
	
&НаСервере
Процедура ЗадачаЛояльностьПерезвонитьНаСервере(СигнатураПродажи, Результат)
	
	// Получим объект задачи
	//-------------------------------------------------------------------------------------------------
	ТекЗапись = РегистрыСведений.ЗадачиЗвонокЛояльности.СоздатьМенеджерЗаписи();
	ТекЗапись.ДатаЗакрытия 		= Дата("00010101");
	ТекЗапись.СигнатураПродажи 	= СигнатураПродажи;
	ТекЗапись.Прочитать();
	
	// Если задача получена, то в зависимости от результата сформируем комментарий и дату актуальности
	//-------------------------------------------------------------------------------------------------
	Если (ТекЗапись.Выбран()) Тогда
		Темп = СокрЛП(ТекЗапись.Комментарий);
		Темп = Темп + ?(ЗначениеЗаполнено(Темп),Символы.ПС,"");
		Темп = Темп + СокрЛП(Формат(ТекущаяДата(),"ДЛФ=DDT")) + ", ";
		Темп = Темп + "Выполнен звонок абоненту";
		ТекЗапись.Комментарий = СокрЛП(Темп);
		ТекЗапись.Записать();
	КонецЕсли;	
КонецПроцедуры
		
&НаКлиенте
Процедура ОбновитьФорму()
	ВыбранТелефон = ЗначениеЗаполнено(ЭтаФорма.ТелВнутр);
	ЭтаФорма.Элементы.Позвонить.Доступность = ВыбранТелефон;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	КонтактЦентр.КомпонентаОтключить();
КонецПроцедуры

&НаКлиенте
Процедура ПанельСтраницПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ЭтаФорма.ЗадачаИстория.Очистить();
		
	//Очистить кэш вопросов - ответов
	//-------------------------------------
	ЭтаФорма.ТаблицаВопросОтвет.Очистить();
	
	ЭтаФорма.ТаблицаВведенныхОтветов.Очистить();
	
	Если ТекущаяСтраница.Имя = "ЛояльностьПродаж" Тогда
		ЭтаФорма.ИмяАктивногоДинамичСписка = "ЗадачиСписокЛояльностьПродаж";
		ТекТаблицаФормы = ЭтаФорма.Элементы.ЗадачиСписокЛояльностьПродаж;	
		ЗадачиСписокЛояльностьПродажПриАктивизацииСтроки(ТекТаблицаФормы);
	ИначеЕсли ТекущаяСтраница.Имя = "ЛояльностьРемонта" Тогда
		ЭтаФорма.ИмяАктивногоДинамичСписка = "ЗадачиСписокЛояльностьРемонта";
		ТекТаблицаФормы = ЭтаФорма.Элементы.ЗадачиСписокЛояльностьРемонта;	
		ЗадачиСписокЛояльностьРемонтаПриАктивизацииСтроки(ТекТаблицаФормы);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКонтактЦентрТекущегоПользователя()
	
	КЦ = Справочники.КонтактЦентры.ПустаяСсылка();	
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	КонтактЦентрыПользователи.Ссылка
	               |ИЗ
	               |	Справочник.КонтактЦентры.Пользователи КАК КонтактЦентрыПользователи
	               |ГДЕ
	               |	КонтактЦентрыПользователи.Пользователь = &Пользователь
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	КонтактЦентрыПользователи.Ссылка.Наименование";

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Пользователь",ПараметрыСеанса.ТекущийПользователь);
	
	РезультатЗапроса = ОбщегоНазначения.ВыполнитьЗапрос(Запрос);
	Если РезультатЗапроса.Пустой() Тогда
		Возврат КЦ
	КонецЕсли;
		
	тз = РезультатЗапроса.Выгрузить();
	//Если тз.Количество()>1 Тогда
	//	Сообщить("Вы зарегистрированы как сотрудник нескольких КЦ. Это недопустимо");  
	//	Возврат КЦ
	//КонецЕсли;
	
	Возврат тз[0][0];
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения1(ВыбЗначОтвет, ДопПараметры) Экспорт
	Если ВыбЗначОтвет = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Запиши анкету
	Успех = ЗаписатьВыбранныйОтвет_НаСервере(ТекущаяДата(), ДопПараметры.Телефон);
	Если Не Успех Тогда	
		ПоказатьПредупреждение(, "Ошибка записи анкеты", 3);
	КонецЕсли;
	
	
	//Общая часть - одинаковая для всех закладок
	//-------------------------------------------			
	// Обнови динамический список (убери закрытую задачу)
	Элементы[ДопПараметры.ИмяЭлемента].Обновить();	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучиСписокОтветовПричинРучогоЗакрытияЗадачиЛояльности()
	
	СписЗнач = Новый СписокЗначений();
	
	ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ = списзнач;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ Ответ ИЗ Справочник.Анкеты.ВариантыОтветов ГДЕ Ссылка.Родитель.Наименование = &РодительНаименование И Ссылка.Наименование = &Наименование";
	Запрос.УстановитьПараметр("РодительНаименование", "ПРОЧЕЕ");
	Запрос.УстановитьПараметр("Наименование", "ЗАДАЧИ ЛОЯЛЬНОСТИ: ПРИЧИНА РУЧНОГО ЗАКРЫТИЯ");	
	РезультатЗапроса = ОбщегоНазначения.ВыполнитьЗапрос(Запрос);
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СписЗнач.Добавить(Выборка.Ответ, Выборка.Ответ);
	КонецЦикла;
	
	Возврат СписЗнач	
КонецФункции

&НаСервере
Процедура ИнформацияПредыдущейЗадачи(ИмяАктивногоДинамическогоСписка, Телефон, Автомобиль);
	//Используется для звонков и почты
		
	Если Не ЗначениеЗаполнено(Телефон) Тогда
		Возврат
	КонецЕсли;
	
	Если ТаблицаВведенныхОтветов.Количество()>0 Тогда
		ТаблицаВведенныхОтветов.Очистить();
	КонецЕсли;
	
	Если ТаблицаВопросОтвет.Количество()>0 Тогда
		ТаблицаВопросОтвет.Очистить();
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Задачи.СигнатураПродажи КАК СигнатураПродажи,
	|	МИНИМУМ(РАЗНОСТЬДАТ(Задачи.ДатаЗакрытия, &ТекДата, МИНУТА)) КАК Разность
	|ИЗ
	|	РегистрСведений.ЗадачиЗвонокЛояльности КАК Задачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Продажи КАК Продажи
	|		ПО Задачи.СигнатураПродажи = Продажи.Сигнатура
	|ГДЕ
	|	Задачи.ДатаЗакрытия <> ДАТАВРЕМЯ(1, 1, 1)
	|	И Продажи.Объект = &Объект
	|	И Задачи.Тип = ЗНАЧЕНИЕ(Перечисление.ТипЗадачи.ЛояльностьРемонтаАвто)
	|
	|СГРУППИРОВАТЬ ПО
	|	Задачи.СигнатураПродажи";
	Запрос.УстановитьПараметр("ТекДата",	ЗначенияСервера.ТекущаяДатаСервер());
	Запрос.УстановитьПараметр("Объект",	 	Автомобиль);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	ПредЗадача = РезультатЗапроса.Выгрузить()[0][0];
	ЭтаФорма.ПредыдущаяЗадача_Сигнатура = ПредЗадача;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ Т.ДатаЗакрытия КАК ДатаЗакрытия, Т.ПричинаЗакрытия КАК ПричинаЗакрытия ИЗ РегистрСведений.ЗадачиЗвонокЛояльности КАК Т ГДЕ Т.СигнатураПродажи = &СигнатураПродажи";
	Запрос.УстановитьПараметр("СигнатураПродажи",	ПредЗадача);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЭтаФорма.ПредыдущаяЗадача_Дата 				= Выборка.ДатаЗакрытия;
		ЭтаФорма.ПредыдущаяЗадача_ПричинаЗакрытия 	= Выборка.ПричинаЗакрытия;
		Возврат;
	КонецЕсли;    	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьОтветНаНеобязательныйВопрос(Телефон)
		
	Если Не ЗначениеЗаполнено(Телефон) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//Есть ли ответ по хотя бы одному необязательному вопросу за последние два месяца?
	//--------------------------------------------------------------------------------
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1 Т.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.АнкетыРасширенные КАК Д
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Анкеты КАК Т
	|		ПО Д.Вопрос.Наименование = Т.Наименование
	|ГДЕ
	|	Д.Телефон = &Телефон
	|	И РАЗНОСТЬДАТ(Д.Период, &ТекДата, МЕСЯЦ) < 2
	|	И Т.НеКонтролироватьОтвет = ИСТИНА";  
	Запрос.УстановитьПараметр("Телефон", Телефон);
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	
	//Пустой результат запроса - нет ответа
	//-------------------------------------
	Возврат НЕ Запрос.Выполнить().Пустой()
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения2(ВыбЗначОтвет, ДопПараметры) Экспорт
	
	Если ВыбЗначОтвет = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДатаЗакрытия = ТекущаяДата();
	
	Для Каждого i из ДопПараметры.СигнатураПродажи Цикл
		// Закрой мастер-задачу
		//---------------------
		Успех = УстановиПричинуЗакрытияЗадачиЛояльности(i, ДатаЗакрытия, ВыбЗначОтвет.Значение);
		Если Не Успех Тогда	
			ПоказатьПредупреждение(, "Ошибка закрытия задачи", 3);
			Возврат;
		КонецЕсли;
		
		//Закрой слейв-задачи по переданной сигнатуре мастер-задачи
		//---------------------------------------------------------
		Если Успех Тогда
			ЗакройСпакетированныеЗадачиПричинойРучногоЗакрытия(i, ДатаЗакрытия, ВыбЗначОтвет.Значение)
		КонецЕсли;
	КонецЦикла;
	
	// Обнови динамический список (убери закрытую задачу)
	//---------------------------------------------------
	Элементы[ДопПараметры.ИмяЭлемента].Обновить();
КонецПроцедуры

&НаСервере
Функция ЗакройСпакетированныеЗадачиПричинойРучногоЗакрытия(СигнатураМастерПродажи, ДатаАнкеты, ПричинаРучногоЗакрытия)
	
	НачатьТранзакцию();
	Для Каждого Подобная Из Объект.Ремонты_ПодобныеЗадачи Цикл
		Если Не Подобная.Спакетировать Тогда
			Продолжить;				
		КонецЕсли;
		
		Успех = ЗапишиПакетЗадач(СигнатураМастерПродажи, Подобная.СигнатураПродажи);
		Если Не Успех Тогда
			ОтменитьТранзакцию();	
			Возврат Ложь;
		КонецЕсли;
		
		Успех = ЗакройЗадачуЛояльностиНаСервереПричинойРучногоЗакрытия(Подобная.СигнатураПродажи, ДатаАнкеты, ПричинаРучногоЗакрытия);
		Если Не Успех Тогда
			ОтменитьТранзакцию();	
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
		
	Объект.Ремонты_ПодобныеЗадачи.Очистить();
	ЗафиксироватьТранзакцию();
	Возврат Истина;
КонецФункции

&НаСервере
Функция ЗакройЗадачуЛояльностиНаСервереПричинойРучногоЗакрытия(СигнатураПродажи, ДатаАнкеты, ПричинаЗакрытия)
	
	Доступно = 		ТипЗнч(СигнатураПродажи) = Тип("Строка")
				И 	ЗначениеЗаполнено(СигнатураПродажи)
				И 	ТипЗнч(ДатаАнкеты) = Тип("Дата")
				И 	ЗначениеЗаполнено(ДатаАнкеты);
	
	Если Не Доступно Тогда 
		ЗаписьЖурналаРегистрации("ЗакройЗадачуЛояльностиНаСервере()", УровеньЖурналаРегистрации.Ошибка, , СтрШаблон("СигнатураПродажи= %1; ДатаАнкеты= %2", СигнатураПродажи, ДатаАнкеты), "Ошибка в типах или заполнении аргументов");
		Возврат Ложь;
	КонецЕсли;
	
	Успех = РегистрыСведений.ЗадачиЗвонокЛояльности.ЗакрытьПричинойРучногоЗакрытия(СигнатураПродажи, ДатаАнкеты, ПричинаЗакрытия, ,ПараметрыСеанса.ТекущийПользователь);
	Если Не Успех Тогда
		Возврат Ложь
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

&НаСервере
Функция УстановиПричинуЗакрытияЗадачиЛояльности(СигнатураПродажи, Дата, ВыбЗнач)
	Возврат РегистрыСведений.ЗадачиЗвонокЛояльности.УстановиЗначениеРеквизитаИЗакройЗадачу(СигнатураПродажи, ТекущаяДата(), "ПричинаЗакрытия",ВыбЗнач, ПараметрыСеанса.ТекущийПользователь); 
КонецФункции

&НаКлиенте
Процедура ЛояльностьПродажПоказатьДокумент(Команда)
	
	Сигнатура = СокрЛП(ЭтаФорма.Элементы.ЗадачиСписокЛояльностьПродаж.ТекущиеДанные.СигнатураПродажи);
	Если Не ЗначениеЗаполнено(Сигнатура) Тогда
		Возврат
	КонецЕсли;	
	
	Парам = Новый Структура();
	Парам.Вставить("СигнатураПродажи", Сигнатура);
	Фрм = ОткрытьФорму("Обработка.КонсольИсходящихЗвонков.Форма.ФормаНTML", Парам);
КонецПроцедуры

&НаКлиенте
Процедура ЛояльностьРемонтаПоказатьДокумент(Команда)
	
	Сигнатура = СокрЛП(ЭтаФорма.Элементы.ЗадачиСписокЛояльностьРемонта.ТекущиеДанные.СигнатураПродажи);
	Если Не ЗначениеЗаполнено(Сигнатура) Тогда
		Возврат
	КонецЕсли;	
	
	ПрефиксБазы = Лев(Сигнатура, 2);
	Если ПрефиксБазы = "SK" Тогда
		ГУИД 	  = Прав(Сигнатура, 36);
		ref		  = ОбщегоНазначения.GUID_2_ref(ГУИД);
		//АбсСсылка = "https://mainiis/asc_oper/#e1cib/data/Документ.ЗаказНаряд?ref="+ref; // открыть в web-клиенте
		АбсСсылка = "e1c://server/MainAppM/asc_oper#e1cib/data/Документ.ЗаказНаряд?ref="+ref;

		ПерейтиПоНавигационнойСсылке(АбсСсылка)
	Иначе
		Парам = Новый Структура();
		Парам.Вставить("СигнатураПродажи", Сигнатура);
		Фрм = ОткрытьФорму("Обработка.КонсольИсходящихЗвонковРемонты.Форма.ФормаНTML", Парам);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЛояльностьРемонтаПоказатьМашинозаезд(Команда)
	
	СигнатураЗаказНаряда = СокрЛП(ЭтаФорма.Элементы.ЗадачиСписокЛояльностьРемонта.ТекущиеДанные.СигнатураПродажи);

	Сигнатура = СокрЛП(ЭтаФорма.Элементы.ЗадачиСписокЛояльностьРемонта.ТекущиеДанные.МашинозаездСсылка);
	Если Не ЗначениеЗаполнено(Сигнатура) Тогда
		Возврат
	КонецЕсли;	
	
	ПрефиксБазы = Лев(СигнатураЗаказНаряда, 2);
	Если ПрефиксБазы = "SK" Тогда
		ГУИД 	  = Прав(Сигнатура, 36);
		ref		  = ОбщегоНазначения.GUID_2_ref(ГУИД);
		АбсСсылка = "e1c://server/MainAppM/asc_oper#e1cib/data/Документ.МашиноЗаезд?ref="+ref;
		
		ПерейтиПоНавигационнойСсылке(АбсСсылка)
	Иначе
		Парам = Новый Структура();
		Парам.Вставить("СигнатураПродажи", Сигнатура);
		Фрм = ОткрытьФорму("Обработка.КонсольИсходящихЗвонков.Форма.ФормаНTML", Парам);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте 
Функция ПолучитьПодключениеБД_НаКлиенте(ПараметрыСоединения)
	//Возвращает com-соединение

	ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ = Неопределено;

	Доступно =  ТипЗнч(ПараметрыСоединения) = Тип("Строка");
	Доступно = Доступно И ЗначениеЗаполнено(ПараметрыСоединения);
	
	Если Не Доступно Тогда
		Возврат ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ
	КонецЕсли;
	
	V82COMConnector= Новый COMОбъект("V83.COMConnector");
	 Попытка
		 Возврат V82COMConnector.Connect(ПараметрыСоединения);
	 Исключение
		ПоказатьПредупреждение(, "Ошибка подключения к базе-источнику", 3);
		Возврат Неопределено;
	 КонецПопытки;
 КонецФункции

 #Область Измени_номер_телефон
 &НаКлиенте
Процедура ИсправьТелНомер(Команда)
	
	ТекДанные = ЭтаФорма.Элементы[ЭтаФорма.ИмяАктивногоДинамичСписка].ТекущиеДанные;
	
	Доступно = ТекДанные <> Неопределено;
	
	Если Не Доступно Тогда
		Возврат
	КонецЕсли;
	
	ДопПараметры = Новый Структура("ИмяАктивногоДинамичСписка", ЭтаФорма.ИмяАктивногоДинамичСписка);
	Оп = Новый ОписаниеОповещения("ОбработчикОповещения_ИсправьТелНомер", ЭтотОбъект, ДопПараметры);
	ВыбЗнач = ТекДанные.Телефон;
	ПоказатьВводЗначения(Оп, ВыбЗнач, "Новый номер", Тип("Строка"));	
КонецПроцедуры
 
 &НаКлиенте
 Процедура ОбработчикОповещения_ИсправьТелНомер(ВыбЗнач, ДопПараметры) Экспорт
	 //Выполянет замену номера телефона абонента в активном динамическом списке
	 //ВыбЗнач = новый тел. номер
	 //ДопПараметры - структура, содержащая имя активного динамического списка
	 
	Доступно = ТипЗнч(ВыбЗнач) = Тип("Строка");
	Доступно = Доступно И ЗначениеЗаполнено(ВыбЗнач);
	Доступно = Доступно И ТипЗнч(ДопПараметры) = Тип("Структура");
	Доступно = Доступно И ДопПараметры <> Неопределено;
		
	ИмяАктивногоСписка =  "";
	ДопПараметры.Свойство("ИмяАктивногоДинамичСписка", ИмяАктивногоСписка);
	
	Доступно = Доступно И ИмяАктивногоСписка <> Неопределено;
	Доступно = Доступно И ЗначениеЗаполнено(ИмяАктивногоСписка);
	
	Если Не Доступно Тогда
		Возврат
	КонецЕсли;
	
	ВыбЗнач = СокрЛП(ВыбЗнач); // удалим пробелы, ошибочно введенные пользователем
	
	СтароеЗначениеРеквизита = ЭтаФорма.Элементы[ИмяАктивногоДинамичСписка].ТекущиеДанные.Телефон;

	Если ИмяАктивногоСписка = "ЗадачиСписокЛояльностьПродаж" Или ИмяАктивногоСписка = "ЗадачиСписокЛояльностьРемонта" Тогда
		Контрагент 			= ЭтаФорма.Элементы[ИмяАктивногоСписка].ТекущиеДанные.Контрагент;
		СигнатураПродажи 	= ЭтаФорма.Элементы[ИмяАктивногоСписка].ТекущиеДанные.СигнатураПродажи;

		Успех = ИзмениЗначениеРеквизитаЗадачиЛояльности(СигнатураПродажи, "Телефон", СтароеЗначениеРеквизита, ВыбЗнач);	
		Если Успех Тогда
			ЭтаФорма.Элементы[ИмяАктивногоСписка].Обновить();
			//ЗаполниТаблицуВопросовТребующихВводОтветов(ИмяАктивногоСписка, ВыбЗнач);
		Иначе
			ПоказатьПредупреждение(, "Не удалось изменить номер", 3);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти

&НаСервере
Функция ИзмениЗначениеРеквизитаЗадачиЛояльности(СигнатураПродажи, ИмяРеквизита, СтароеЗначениеРеквизита, ВыбЗнач)
	Возврат РегистрыСведений.ЗадачиЗвонокЛояльности.УстановиЗначениеРеквизита(СигнатураПродажи, ИмяРеквизита, СтароеЗначениеРеквизита, ВыбЗнач);	
КонецФункции

&НаКлиенте
Процедура ЗадачиСписокЛояльностьПродажПриАктивизацииСтроки(Элемент)
	
	//Очистить кэш вопросов - ответов
	ЭтаФорма.ТаблицаВопросОтвет.Очистить();
	
	ИмяТекСтраницы = ЭтаФорма.Элементы.ПанельСтраниц.ТекущаяСтраница.Имя;
	ИмяЭлемента = "ЗадачиСписок"+ИмяТекСтраницы;
	
	Если (Элементы[ИмяЭлемента].ТекущиеДанные = Неопределено) Тогда
		Возврат
	КонецЕсли;
	
	ЭтаФорма.ЗадачаКомментарий = "";
	
	// Покажи историю общения
	ПокажиИсториюОбщения(Элементы[ИмяЭлемента].ТекущиеДанные.Телефон);
	
	// Загрузим на форму данные анкеты
	//ЗаполниТаблицуВопросовТребующихВводОтветов(ИмяЭлемента, Элементы[ИмяЭлемента].ТекущиеДанные.Телефон);	

КонецПроцедуры
	
&НаСервере
Процедура ПокажиИсториюОбщения(ТелНомер, СигнатураПродажи = "")
	
	//С 20.11.2020 показать только исходящие звонки по этой задаче
	//------------------------------------------------------------
	ЭтаФорма.ЗадачаИстория.Очистить();
	
	Запрос = Новый Запрос();
	Если МоиНастройки_ТолькоЗвонкиПоЗадачеВИсторииОбщения Тогда
		Запрос.Текст = 	
		"ВЫБРАТЬ ПЕРВЫЕ 10
		|	Звонки.Дата КАК Дата,
		|	Звонки.ЭтоВходящий КАК ЭтоВходящий,
		|	ЕСТЬNULL(Иниц.Владелец, ЗНАЧЕНИЕ(Справочник.Предприятие.ПустаяСсылка)) КАК Оператор,
		|	Звонки.Сигнатура КАК Сигнатура,
		|	Звонки.Принят КАК Принят
		|ИЗ
		|	РегистрСведений.Звонки КАК Звонки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗвонкиСтатОбщая КАК ЗвонкиСтатОбщая
		|		ПО (ЗвонкиСтатОбщая.Сигнатура = Звонки.Сигнатура)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыПривязка КАК Иниц
		|		ПО (Иниц.Объект = Звонки.Инициатор)
		|ГДЕ
		|	Звонки.АбонентВнешний = &АбонентВнешний
		|	И Звонки.Дата >= &ОпорнаяДата
		|	И Звонки.ЭтоВходящий = ЛОЖЬ
		|	И ЗвонкиСтатОбщая.Основание = &Основание
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 10
		|	Рег.Дата КАК Дата,
		|	Рег.ЭтоВходящий КАК ЭтоВходящий,
		|	ВЫБОР
		|		КОГДА Рег.ЭтоВходящий
		|			ТОГДА Опер.Владелец
		|		ИНАЧЕ Иниц.Владелец
		|	КОНЕЦ КАК Оператор,
		|	Рег.Сигнатура КАК Сигнатура,
		|	Рег.Принят КАК Принят
		|ИЗ
		|	РегистрСведений.Звонки КАК Рег
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыПривязка КАК Иниц
		|		ПО (Иниц.Объект = Рег.Инициатор)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыПривязка КАК Опер
		|		ПО (Опер.Объект = Рег.АбонентВнутренний)
		|ГДЕ
		|	Рег.АбонентВнешний = &АбонентВнешний
		|	И Рег.Дата >= &ОпорнаяДата
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
	КонецЕсли;

	Запрос.УстановитьПараметр("Основание",			"zn_"+СигнатураПродажи);
	Запрос.УстановитьПараметр("АбонентВнешний", 	СокрЛП(ТелНомер));
	Запрос.УстановитьПараметр("ОпорнаяДата",		ДобавитьМесяц(ТекущаяДата(), -1));
	
	РезультатЗапроса = ОбщегоНазначения.ВыполнитьЗапрос(Запрос);
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока (Выборка.Следующий()) Цикл			
		Новая = ЭтаФорма.ЗадачаИстория.Добавить();
		ЗаполнитьЗначенияСвойств(Новая, Выборка);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаЛояльностиПродажОтменить(Команда)
	// Пометим задачу как принудительно закрытую
	
	ИмяЭлемента = ЭтаФорма.ИмяАктивногоДинамичСписка;
	
	Если Элементы[ИмяЭлемента].ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Если Элементы[ИмяЭлемента].ТекущиеДанные.ДатаЗакрытия <> Дата("00010101") Тогда
		Возврат
	КонецЕсли;
	
	СписокОтветов =  ПолучиСписокОтветовПричинРучогоЗакрытияЗадачиЛояльности();
	
	Если СписокОтветов.Количество()=0 Тогда
		ПоказатьПредупреждение(,"Не задан список причин ручного закрытия задач",3);
		Возврат
	КонецЕсли;
	
	ДопПарам = Новый Структура();
	ДопПарам.Вставить("ИмяЭлемента", ИмяЭлемента);
	МассивЗадач = Новый Массив();
	Если Элементы[ИмяЭлемента].ВыделенныеСтроки.Количество()=1 Тогда
		МассивЗадач.Добавить(Элементы[ИмяЭлемента].ТекущиеДанные.СигнатураПродажи);
	ИначеЕсли Элементы[ИмяЭлемента].ВыделенныеСтроки.Количество()>1 Тогда
		Для Каждого i Из Элементы[ИмяЭлемента].ВыделенныеСтроки Цикл
			МассивЗадач.Добавить(i);
		КонецЦикла;
	КонецЕсли;
	ДопПарам.Вставить("СигнатураПродажи", МассивЗадач);
	
	Оп = Новый ОписаниеОповещения("ОбработкаОповещения2", ЭтотОбъект, ДопПарам);
	ПоказатьВыборИзМеню(Оп, СписокОтветов, Команда);

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВведенныхОтветовОтветСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВопросАнкеты = Элемент.Родитель.Родитель.ТекущиеДанные.ВопросАнкеты;
	СписокОтветов = ТаблицаВведенныхОтветов_ПолучиСписокОтветов_НаСервере(ВопросАнкеты);
	ВопросТребуетОбновитьОтвет = Элемент.Родитель.Родитель.ТекущиеДанные.ВопросТребуетОбновитьОтвет;
	Если СписокОтветов.Количество()>0 Тогда
		ДопПарамОбработчикаОповещения = Новый Структура("ВопросАнкеты", ВопросАнкеты); 
		Оп = Новый ОписаниеОповещения("ОбработкаОповещения_ТаблицаВведенныхОтветовОтветНачалоВыбора", ЭтотОбъект, ДопПарамОбработчикаОповещения);
		ПоказатьВыборИзСписка(Оп, СписокОтветов, Элемент);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения_ТаблицаВведенныхОтветовОтветНачалоВыбора(ВыбЗначОтвет, ДопПараметры) Экспорт
	
	Если ВыбЗначОтвет = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	НайденныеСтроки = ЭтаФорма.ТаблицаВведенныхОтветов.НайтиСтроки(ДопПараметры); // должны найти одну строку
	Если НайденныеСтроки.Количество()<>1 Тогда
		Возврат
	КонецЕсли;

	НайденныеСтроки[0].ОтветСтрокой = ВыбЗначОтвет.Значение;
	ДобавитьЗаписьВТаблицуВопросОтвет(ДопПараметры.ВопросАнкеты, ВыбЗначОтвет.Значение);
	НайденныеСтроки[0].ФорматТекстаОтвета = 2;
	
КонецПроцедуры

&НаСервере
Функция ТаблицаВведенныхОтветов_ПолучиСписокОтветов_НаСервере(ВопросАнкеты)
	сзОтветы = Новый СписокЗначений();

	Запрос = Новый Запрос("ВЫБРАТЬ Ответ ИЗ Справочник.Анкеты.ВариантыОтветов ГДЕ Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", ВопросАнкеты);
	РезультатЗапроса = ОбщегоНазначения.ВыполнитьЗапрос(Запрос);
	Если РезультатЗапроса.Пустой() Тогда
		Возврат сзОтветы
	КонецЕсли;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		сзОтветы.Добавить(Выборка.Ответ);
	КонецЦикла;
	Возврат сзОтветы;		
КонецФункции

&НаКлиенте
Процедура ТаблицаВведенныхОтветовОтветСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ТекДанные = ЭтаФорма.Элементы.ТаблицаВведенныхОтветов.ТекущиеДанные;
	
	//Выход, если вопрос требует не выбора, а ввода ответа
	Если ТекДанные.ВопросТребуетВыбораОтвета Тогда 
		СтандартнаяОбработка=Ложь;
		Возврат
	КонецЕсли;
	ТекДанные.ФорматТекстаОтвета = 2;
	ДобавитьЗаписьВТаблицуВопросОтвет(ТекДанные.ВопросАнкеты, Текст);

	Элемент.СписокВыбора.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВведенныхОтветовОтветКомментарийСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
		
	ТекДанные = ЭтаФорма.Элементы.ТаблицаВведенныхОтветов.ТекущиеДанные;	
	ТекДанные.ФорматТекстаОтвета = 2;
	ДобавитьЗаписьВТаблицуВопросОтвет(ТекДанные.ВопросАнкеты, ,Текст);

КонецПроцедуры


&НаСервере
Процедура ДобавитьЗаписьВТаблицуВопросОтвет(ВопросАнкеты, Ответ="", ОтветКомментарий = "")
	
	ПарамОтбора = Новый Структура("Вопрос", ВопросАнкеты);
	НайденныеСтроки = ЭтаФорма.ТаблицаВопросОтвет.НайтиСтроки(ПарамОтбора);
	
	Если НайденныеСтроки.Количество()>0 Тогда
		СтрокаТЧ = НайденныеСтроки[0];
	Иначе
		СтрокаТЧ = ЭтаФорма.ТаблицаВопросОтвет.Добавить();
	КонецЕсли;	
	
	СтрокаТЧ.Вопрос = ВопросАнкеты;
	
	Если ЗначениеЗаполнено(Ответ) Тогда //значит позльзователь ввел/выбрал значение для поля Ответ
		СтрокаТЧ.Ответ = Ответ;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтветКомментарий) Тогда //значит позльзователь ввел/выбрал значение для поля ОтветКомментарий
		СтрокаТЧ.ОтветКомментарий = ОтветКомментарий;
	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьАнкету(Команда)
	
	ДатаАнкеты = ТекущаяДата();
	
	Тел = ЭтаФорма.Элементы[ЭтаФорма.ИмяАктивногоДинамичСписка].ТекущиеДанные.Телефон;
		
	Доступно = ЗначениеЗаполнено(Тел);
	Доступно = Доступно И  ЭтаФорма.ТаблицаВопросОтвет.Количество()>0;
	
	Если Не Доступно Тогда
		ПоказатьПредупреждение(, "Запись анкеты невозможна. Не указан телефон абонента или не заполнена анкета", 3);
		Возврат
	КонецЕсли;
	
	// Запиши анкету
	//--------------------------------------------
	СигнатураПродажи = ""; //значение по умолчанию
	Если ЭтаФорма.ИмяАктивногоДинамичСписка = "ЗадачиСписокЛояльностьПродаж" Или  ЭтаФорма.ИмяАктивногоДинамичСписка = "ЗадачиСписокЛояльностьРемонта" Тогда
		СигнатураПродажи = ЭтаФорма.Элементы[ЭтаФорма.ИмяАктивногоДинамичСписка].ТекущиеДанные.СигнатураПродажи; 	
	КонецЕсли;
	
	Доступно = ЗаписатьВыбранныйОтвет_НаСервере(ДатаАнкеты, Тел, СигнатураПродажи);
	Если Не Доступно Тогда	
		ПоказатьПредупреждение(, "Ошибка записи анкеты", 3);
	КонецЕсли;
	
	//Закрой задачу
	// В реквизит ЗвонокЗакрытия запиши или сигнатуру или внутренний номер сотрудника контакт-центра
	Если ЭтаФорма.ИмяАктивногоДинамичСписка = "ЗадачиСписокЛояльностьПродаж" Или  ЭтаФорма.ИмяАктивногоДинамичСписка = "ЗадачиСписокЛояльностьРемонта" Тогда
		
		Успех = ЗакройЗадачуЛояльностиНаСервере(СигнатураПродажи, ДатаАнкеты);
		Если Не Успех Тогда
			ПоказатьПредупреждение(, "Ошибка закрытия задачи", 3);
		КонецЕсли;
		
		//16.10.2017,+, Закрой спакетированные задачи
		//-----------------------------------------------------------------------------
		Если ЭтаФорма.ИмяАктивногоДинамичСписка = "ЗадачиСписокЛояльностьРемонта" Тогда
			ЗакройСпакетированныеЗадачи(СигнатураПродажи, ДатаАнкеты);
		КонецЕсли;
		
		СтартуйБП(СигнатураПродажи);
	КонецЕсли;	
	ЭтаФорма.Элементы[ЭтаФорма.ИмяАктивногоДинамичСписка].Обновить();	
КонецПроцедуры

&НаСервере
Функция СтартуйБП(Сигнатура)
	
	ТекДата = ТекущаяДата();
	
	//Запусти процесс формирования задач обработки негативных анкет
	//-------------------------------------------------------------
	БП 					= БизнесПроцессы.ОбратнаяСвязьЛояльности.СоздатьБизнесПроцесс();
	БП.Дата 			= ТекДата;
	БП.ДатаСтарта		= ТекДата;
	БП.Точка			= ЭтаФорма.Параметры.ТочкаПродажи;
	БП.СигнатураПродажи	= ЭтаФорма.Параметры.СигнатураПродажи;
	БП.Телефон			= ЭтаФорма.Параметры.Телефон;
	
	//Определи подразделение-исполнитель и подразделение-контролер
	//------------------------------------------------------------
	
	//Если Не ЗначениеЗаполнено(ЭтотОбъект.Точка) Тогда 
	//...	
	//КонецЕсли;
	
	Если СтрНайти(БП.Точка, "осква") Тогда        
		Подр = Справочники.Предприятие.НайтиПоКоду("000000071"); // Луидор-Москва
		БП.ПодразделениеИсполнитель = Подр;
	ИначеЕсли 
		СтрНайти(БП.Точка, "19 км") Тогда
		Подр = Справочники.Предприятие.НайтиПоКоду("000001683"); //Гальяново
		БП.ПодразделениеИсполнитель = Подр;	

	ИначеЕсли 
		СтрНайти(БП.Точка, "Байкальская") Тогда
		Подр = Справочники.Предприятие.НайтиПоКоду("000001682"); //Братеево
		БП.ПодразделениеИсполнитель = Подр;	
	ИначеЕсли 
		СтрНайти(БП.Точка, "Балашиха") Тогда
		Подр = Справочники.Предприятие.НайтиПоКоду("000001681"); //Владимир
		БП.ПодразделениеИсполнитель = Подр;	
	ИначеЕсли 
		СтрНайти(БП.Точка, "Владимир") Тогда
		Подр = Справочники.Предприятие.НайтиПоКоду("000000145"); //Владимир
		БП.ПодразделениеИсполнитель = Подр;	
	ИначеЕсли 
		СтрНайти(БП.Точка, "Казань") Тогда
		Подр = Справочники.Предприятие.НайтиПоКоду("000001518"); //Луидор-Казань
		БП.ПодразделениеИсполнитель = Подр;	
	ИначеЕсли 
		СтрНайти(БП.Точка, "Саранск") Тогда
		Подр = Справочники.Предприятие.НайтиПоКоду("000000009"); //Луидор-Саранск
		БП.ПодразделениеИсполнитель = Подр;	
	ИначеЕсли 
		СтрНайти(БП.Точка, "Тамбов") Тогда
		Подр = Справочники.Предприятие.НайтиПоКоду("000002164"); //Азимут
		БП.ПодразделениеИсполнитель = Подр;	
	ИначеЕсли 
		СтрНайти(БП.Точка, "Уфа") Тогда
		Подр = Справочники.Предприятие.НайтиПоКоду("000000141"); //Луидор-Уфа
		БП.ПодразделениеИсполнитель = Подр;
	ИначеЕсли 
		СтрНайти(БП.Точка, "Химки") Тогда
		Подр = Справочники.Предприятие.НайтиПоКоду("000001684"); //Химки
		БП.ПодразделениеИсполнитель = Подр;	  	
	ИначеЕсли 
		СтрНайти(БП.Точка, "Чебоксары") Тогда
		Подр = Справочники.Предприятие.НайтиПоКоду("000000023"); //Луидор-Чебоксары
		БП.ПодразделениеИсполнитель = Подр;	
	ИначеЕсли 
		СтрНайти(БП.Точка, "Челябинск") Тогда
		Подр = Справочники.Предприятие.НайтиПоКоду("000001133"); //Челябинск
		БП.ПодразделениеИсполнитель = Подр;
		
	//Участок кузовного ремонта Москва
	ИначеЕсли  СтрНайти(БП.Точка, "Моторный центр") Тогда
		Подр = Справочники.Предприятие.НайтиПоКоду("000000071"); //Луидор-Москва
		БП.ПодразделениеИсполнитель = Подр;
	ИначеЕсли  СтрНайти(БП.Точка, "Участок СТО Экспресс Сервис") Тогда
		Подр = Справочники.Предприятие.НайтиПоКоду("000000071"); //Луидор-Москва
		БП.ПодразделениеИсполнитель = Подр;  	
		
	//Луидор-Тюнинг
	//-------------    
	ИначеЕсли  СтрНайти(БП.Точка, "Моторный центр") Тогда
		Подр = Справочники.Предприятие.НайтиПоКоду("000000117"); //Луидор-Тюнинг
		БП.ПодразделениеИсполнитель = Подр;
	ИначеЕсли  СтрНайти(БП.Точка, "Производственный участок") Тогда
		Подр = Справочники.Предприятие.НайтиПоКоду("000000117"); //Луидор-Тюнинг
		БП.ПодразделениеИсполнитель = Подр;
	ИначеЕсли  СтрНайти(БП.Точка, "Участок кузовного ремонта НН") Тогда
		Подр = Справочники.Предприятие.НайтиПоКоду("000000117"); //Луидор-Тюнинг
		БП.ПодразделениеИсполнитель = Подр;
	ИначеЕсли  СтрНайти(БП.Точка, "Участок Кузовного ремонта Плюс") Тогда
		Подр = Справочники.Предприятие.НайтиПоКоду("000000117"); //Луидор-Тюнинг
		БП.ПодразделениеИсполнитель = Подр;	  	
	ИначеЕсли  СтрНайти(БП.Точка, "Участок легковых а/м") Тогда
		Подр = Справочники.Предприятие.НайтиПоКоду("000000117"); //Луидор-Тюнинг
		БП.ПодразделениеИсполнитель = Подр;    
	ИначеЕсли  СтрНайти(БП.Точка, "Участок люксовки") Тогда
		Подр = Справочники.Предприятие.НайтиПоКоду("000000117"); //Луидор-Тюнинг
		БП.ПодразделениеИсполнитель = Подр;  
	ИначеЕсли  СтрНайти(БП.Точка, "Участок Ларина 12") Тогда
		Подр = Справочники.Предприятие.НайтиПоКоду("000000117"); //Луидор-Тюнинг
		БП.ПодразделениеИсполнитель = Подр;
	ИначеЕсли  СтрНайти(БП.Точка, "Участок ремонта агрегатов") Тогда
		Подр = Справочники.Предприятие.НайтиПоКоду("000000117"); //Луидор-Тюнинг
		БП.ПодразделениеИсполнитель = Подр;
	ИначеЕсли  СтрНайти(БП.Точка, "Участок грузовых а/м") Тогда
		Подр = Справочники.Предприятие.НайтиПоКоду("000000117"); //Луидор-Тюнинг
		БП.ПодразделениеИсполнитель = Подр;
	КонецЕсли;
	
	//Если подразделение не определено, тогда установи подразделение по умолчанию - Кошелев С. С.
	//-------------------------------------------------------------------------------------------
	Если Не ЗначениеЗаполнено(БП.ПодразделениеИсполнитель) Тогда
		Подр = Справочники.Предприятие.НайтиПоКоду("000001345");
		БП.ПодразделениеИсполнитель = Подр;
	КонецЕсли;
	
	// Подразделение-контролер
	//---------------------------------------------------------------------
	Подр = Справочники.Предприятие.НайтиПоКоду("000002320");// "Департамент работы с клиентами/Клиентская служба"
	БП.ПодразделениеКонтролер = Подр;	
	БП.ПодразделениеИнициатор = Подр;
	БП.Записать();
	
	//Стартовать
	//----------
	БП.Старт();
	
КонецФункции

&НаСервере 
Функция ЗакройСпакетированныеЗадачи(СигнатураМастерПродажи, ДатаАнкеты)
	ЗначениеПоУмолчанию = Ложь;
	
	НачатьТранзакцию();
	
	Для Каждого ПодобнаяЗадача Из ЭтаФорма.Объект.Ремонты_ПодобныеЗадачи Цикл
		Если ПодобнаяЗадача.Спакетировать Тогда
			
			Успех = ЗапишиПакетЗадач(СигнатураМастерПродажи, ПодобнаяЗадача.СигнатураПродажи);
			Если Не Успех Тогда
				ОтменитьТранзакцию();	
				Возврат ЗначениеПоУмолчанию;
			КонецЕсли;
			
			Успех = ЗакройЗадачуЛояльностиНаСервере(ПодобнаяЗадача.СигнатураПродажи, ДатаАнкеты);
			Если Не Успех Тогда
				ОтменитьТранзакцию();	
				Возврат ЗначениеПоУмолчанию;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ЭтаФорма.Объект.Ремонты_ПодобныеЗадачи.Очистить();
	ЗафиксироватьТранзакцию();
	Возврат Истина;
КонецФункции

&НаСервере
Функция ЗапишиПакетЗадач(СигнатураМастерЗадачи, СигнатураЗадачи)
	Возврат РегистрыСведений.ЗадачиЛояльностиПакеты.Добавить(СигнатураМастерЗадачи, СигнатураЗадачи);
КонецФункции

&НаСервере
Функция ЗакройЗадачуЛояльностиНаСервере(СигнатураПродажи, ДатаАнкеты)
	
	ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ = Ложь;
	
	Доступно = ТипЗнч(СигнатураПродажи) = Тип("Строка");
	Доступно = Доступно И ЗначениеЗаполнено(СигнатураПродажи);
	Доступно = Доступно И ТипЗнч(ДатаАнкеты) = Тип("Дата");
	Доступно = Доступно И ЗначениеЗаполнено(ДатаАнкеты);
	
	Если Не Доступно Тогда 
		Данные = "СигнатураПродажи="+СигнатураПродажи+" ;ДатаАнкеты="+ДатаАнкеты;
		ЗаписьЖурналаРегистрации("ЗакройЗадачуЛояльностиНаСервере()", УровеньЖурналаРегистрации.Ошибка, Метаданные.Обработки.КонсольИсходящихЗвонков, Данные, "Ошибка в типах или заполнении аргументов");
		Возврат ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭтаФорма.LinkedID) Тогда
		ЗначРекв = ЭтаФорма.LinkedID;
	Иначе
		ЗначРекв = ЭтаФорма.ТелВнутр.Код;
	КонецЕсли;

	Доступно = ЗначениеЗаполнено(ЗначРекв);	
	Если Не Доступно Тогда
		Данные = ЗначРекв;
		ЗаписьЖурналаРегистрации("ЗакройЗадачуЛояльностиНаСервере()", УровеньЖурналаРегистрации.Ошибка, Метаданные.Обработки.КонсольИсходящихЗвонков, Данные, "Не заполнено значение реквизита");
		Возврат ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ
	КонецЕсли;
	
	Успех = РегистрыСведений.ЗадачиЗвонокЛояльности.УстановиЗначениеРеквизитаИЗакройЗадачу(СигнатураПродажи, ДатаАнкеты, "ЗвонокЗакрытия", ЗначРекв, ПараметрыСеанса.ТекущийПользователь);
	
	Если Не Успех Тогда
		Возврат ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

&НаСервере
Функция ЗаписатьВыбранныйОтвет_НаСервере(ДатаАнкеты, ТелАбонента, СигнатураЗадачи = "")
	//Эапись в регистр сведений АнкетыРасширенные
	
	ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ = Ложь;
	
	Доступно = ТипЗнч(ДатаАнкеты) = Тип("Дата");
	Доступно = Доступно И ЗначениеЗаполнено(ДатаАнкеты);
	Доступно = Доступно И ТипЗнч(ТелАбонента) = Тип("Строка") ;
	Доступно = Доступно И ЗначениеЗаполнено(ТелАбонента);
	
	Если Не Доступно Тогда
		Возврат ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ;
	КонецЕсли;
	
	ПустойИд = Справочники.ИдентификаторыСтрок.ПустаяСсылка();
	
	НЗ = РегистрыСведений.АнкетыРасширенные.СоздатьНаборЗаписей();
	НЗ.Отбор.Период.Установить(ДатаАнкеты);
	НЗ.Отбор.Телефон.Установить(ТелАбонента);
	НЗ.Прочитать();
	
	//<Запись ответов на вопросы  и самих вопросов анкеты. Вопросы маршрутизации записываются в момент выбора строки списка>
	Для Каждого Эл Из ЭтаФорма.ТаблицаВопросОтвет Цикл
		
		//14.07.2017, +, не записываем, если ответ не заполнен
		//-----------------------------------------------------
		Если Не ЗначениеЗаполнено(Эл.Ответ) Тогда
			Продолжить;
		КонецЕсли;
		
		ИдСтрокиВопроса = Справочники.ИдентификаторыСтрок.УстановиИдентификаторСтроки(Строка(Эл.Вопрос), "вопрос", Строка(Эл.Вопрос));
		
		Если ИдСтрокиВопроса = ПустойИд Тогда
			Продолжить
		КонецЕсли;
		
		ИдСтрокиОтвета  = Справочники.ИдентификаторыСтрок.УстановиИдентификаторСтроки(Эл.Ответ, "ответ", Эл.Ответ);
		
		ИдСтрокиОтветКомментарий  = Справочники.ИдентификаторыСтрок.УстановиИдентификаторСтроки(Эл.ОтветКомментарий, "ответ", Эл.ОтветКомментарий);
		
		//Если ответ не выбран или не введен,  тогда записываем пустую ссылку 
		//---------------------------------------------------------------------
		//Если ИдСтрокиОтвета = ПустойИд Тогда
		//	Продолжить
		//КонецЕсли;
		
		НоваяЗапись = НЗ.Добавить();
		НоваяЗапись.Период								=	ДатаАнкеты;
		НоваяЗапись.Телефон 							=	ТелАбонента;
		НоваяЗапись.Вопрос								=	ИдСтрокиВопроса;
		НоваяЗапись.Ответ								=	ИдСтрокиОтвета;
		НоваяЗапись.ОтветКомментарий					=	ИдСтрокиОтветКомментарий;
		НоваяЗапись.ПорядковыйНомерВопроса 				=	Эл.ПорядковыйНомерВопроса;
		НоваяЗапись.ВопросАнкетыТребовалОбновитьОтвет 	=	Эл.ВопросАнкетыТребовалОбновитьОтвет;	
		НоваяЗапись.СигнатураЗадачи						=	СигнатураЗадачи; 
	КонецЦикла;
	//</Запись ответов на вопросы и самих вопросов>
	
	Если НЗ.Количество()>0 Тогда
		Попытка
			НЗ.Записать(Истина);
		Исключение
			ЗаписьЖурналаРегистрации("ЗаписатьВыбранныйОтвет_НаСервере()", УровеньЖурналаРегистрации.Ошибка, Метаданные.РегистрыСведений.АнкетыРасширенные, , ОписаниеОшибки());
			Возврат ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ;
		КонецПопытки
	КонецЕсли;	
	
	Возврат Истина;
	
КонецФункции

#Область Выбор_телефона
&НаКлиенте
Процедура КонсольТелефонВыбратьНачало()
	ОпОбработчикЗакрытияФормыВыбораТелефона = Новый ОписаниеОповещения("КонсольТелефонВыбратьОкончание", ЭтотОбъект);
	ОткрытьФорму("Обработка.КонсольКонтактЦентраТест4.Форма.ФормаВыбораОператора",,ЭтаФорма,,,,ОпОбработчикЗакрытияФормыВыбораТелефона, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура КонсольТелефонВыбратьОкончание(Параметр, ДопПарам) Экспорт

// Проверим заполненность параметров сеанса, отвечающих за регистрацию оператора консоли
// Если параметры заданы, то получим текущее состояние режима "Пауза" для оператора-агента
// Также выполним подключение компоненты телефонии к серверу
//-------------------------------------------------------------------------------------------------
	ОчерСсылка = ЗначенияСервера.ПолучитьЗначениеПараметраСеанса("ККЦОчередь");
	ТелСсылка  = ЗначенияСервера.ПолучитьЗначениеПараметраСеанса("ККЦТелефон");

	Если (ЗначениеЗаполнено(ОчерСсылка) И ЗначениеЗаполнено(ТелСсылка)) Тогда
		ТелВнутр 		= ТелСсылка;
	КонецЕсли;
	ОбновитьФорму();
КонецПроцедуры
#КонецОбласти

&НаКлиенте
Процедура ЗадачиСписокЛояльностьРемонтаПриАктивизацииСтроки(Элемент)
	
	//Очисти кэш вопросов - ответов
	//-------------------------------------
	ЭтаФорма.ТаблицаВопросОтвет.Очистить();
		
	ИмяТекСтраницы 	= ЭтаФорма.Элементы.ПанельСтраниц.ТекущаяСтраница.Имя;
	ИмяЭлемента 	= "ЗадачиСписок"+ИмяТекСтраницы;
	
	Тек = Элементы[ИмяЭлемента].ТекущиеДанные;
	Если Тек = Неопределено Тогда
		Возврат
	КонецЕсли;
			
	ЭтаФорма.ЗадачаКомментарий 					= "";
	ЭтаФорма.ПредыдущаяЗадача_Дата 				= "";
	ЭтаФорма.ПредыдущаяЗадача_ПричинаЗакрытия 	= "";
	ЭтаФорма.ПредыдущаяЗадача_Сигнатура			= "";
	
	// Покажи заказ-наряды из пакета, связанного с этой задачей
	//---------------------------------------------------------
	СформируйПодобныеЗадачи(Тек.Автомобиль, Тек.СигнатураПродажи, Тек.МашинозаездСсылка);

	// Загрузи на форму данные выбранной задачи
	//-----------------------------------------
	ПокажиИсториюОбщения(Тек.Телефон, Тек.СигнатураПродажи);
	
	// Загрузи на форму данные анкеты
	//-------------------------------------------------------------------------
	ИнформацияПредыдущейЗадачи(ИмяЭлемента, Тек.Телефон, Тек.Автомобиль);
	
	// Установи признак задавать необязательные вопросы
	//--------------------------------------------------
	ЭтаФорма.ЗадаватьНеобязательныеВопросы = Не ЕстьОтветНаНеобязательныйВопрос(Тек.Телефон);
КонецПроцедуры

&НаСервере
Функция СформируйПодобныеЗадачи(Автомобиль, СигнатураМастерПродажи, МашинозаездСсылка = "");
	
	Объект.Ремонты_ПодобныеЗадачи.Очистить();
	
	//Если задан машинозаезд
	//----------------------
	Если МашинозаездСсылка <> "" Тогда
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачиЗвонокЛояльности.СигнатураПродажи КАК СигнатураПродажи,
		|	ЗадачиЗвонокЛояльности.Телефон КАК Телефон,
		|	ЗадачиЗвонокЛояльности.Телефоны КАК Телефоны,
		|	ЕСТЬNULL(Продажи.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаДок,
		|	ЕСТЬNULL(Продажи.Номер, """") КАК НомерДок,
		|	ЕСТЬNULL(Продажи.ДопДата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаЗакрытияЗаказНаряда,
		|	ЕСТЬNULL(Продажи.Объект, """") КАК Товар,
		|	ЕСТЬNULL(Продажи.ХарактеристикаОбъекта, """") КАК ВидРемонта,
		|	ЕСТЬNULL(Продажи.Точка, """") КАК ТочкаПродажи,
		|	ЕСТЬNULL(Продажи.КонтактноеЛицо, """") КАК КонтактноеЛицо,
		|	ЕСТЬNULL(Продажи.Машинозаезд, """") КАК Машинозаезд
		|ИЗ
		|	РегистрСведений.ЗадачиЗвонокЛояльности КАК ЗадачиЗвонокЛояльности
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Продажи КАК Продажи
		|		ПО ЗадачиЗвонокЛояльности.СигнатураПродажи = Продажи.Сигнатура
		|ГДЕ
		|	ЗадачиЗвонокЛояльности.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
		|	И ЗадачиЗвонокЛояльности.СигнатураПродажи <> &СигнатураМастерПродажи
		|	И ЕСТЬNULL(Продажи.Объект, """") = &Автомобиль
		|	И ЕСТЬNULL(Продажи.Машинозаезд, """") = &Машинозаезд";
		
		Запрос.УстановитьПараметр("СигнатураМастерПродажи", СигнатураМастерПродажи);
		Запрос.УстановитьПараметр("Автомобиль", 			Автомобиль);
		Запрос.УстановитьПараметр("Машинозаезд",			МашинозаездСсылка);
		
		РезультатЗапроса = ОбщегоНазначения.ВыполнитьЗапрос(Запрос);
		Выборка = РезультатЗапроса.Выбрать();	
		Пока Выборка.Следующий() Цикл			
			Новая = Объект.Ремонты_ПодобныеЗадачи.Добавить();
			ЗаполнитьЗначенияСвойств(Новая, Выборка);
			Новая.Спакетировать 			= 	Истина;
		КонецЦикла;
		Возврат "";
	КонецЕсли;
	
	//Если оказались здесь, значит машинозаезд не задан
	//-------------------------------------------------
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗадачиЗвонокЛояльности.СигнатураПродажи КАК СигнатураПродажи,
	|	ЗадачиЗвонокЛояльности.Телефон КАК Телефон,
	|	ЗадачиЗвонокЛояльности.Телефоны КАК Телефоны,
	|	ЕСТЬNULL(Продажи.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаДок,
	|	ЕСТЬNULL(Продажи.Номер, """") КАК НомерДок,
	|	ЕСТЬNULL(Продажи.ДопДата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаЗакрытияЗаказНаряда,
	|	ЕСТЬNULL(Продажи.Объект, """") КАК Товар,
	|	ЕСТЬNULL(Продажи.ХарактеристикаОбъекта, """") КАК ВидРемонта,
	|	ЕСТЬNULL(Продажи.Точка, """") КАК ТочкаПродажи,
	|	ЕСТЬNULL(Продажи.КонтактноеЛицо, """") КАК КонтактноеЛицо,
	|	ЕСТЬNULL(Продажи.Машинозаезд, """") КАК Машинозаезд
	|ИЗ
	|	РегистрСведений.ЗадачиЗвонокЛояльности КАК ЗадачиЗвонокЛояльности
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Продажи КАК Продажи
	|		ПО ЗадачиЗвонокЛояльности.СигнатураПродажи = Продажи.Сигнатура
	|ГДЕ
	|	ЗадачиЗвонокЛояльности.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
	|	И ЗадачиЗвонокЛояльности.СигнатураПродажи <> &СигнатураМастерПродажи
	|	И ЕСТЬNULL(Продажи.Объект, """") = &Автомобиль";
	
	Запрос.УстановитьПараметр("СигнатураМастерПродажи", СигнатураМастерПродажи);
	Запрос.УстановитьПараметр("Автомобиль", 			Автомобиль);
	РезультатЗапроса = ОбщегоНазначения.ВыполнитьЗапрос(Запрос);
		
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ""
	КонецЕсли;
		
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл		
		Новая = ЭтаФорма.Объект.Ремонты_ПодобныеЗадачи.Добавить();
		ЗаполнитьЗначенияСвойств(Новая, Выборка);
	КонецЦикла;
	
	Возврат "";
КонецФункции

#Область Напоминание_перезвонить
&НаКлиенте
Процедура ИзменитьНапоминаниеПерезвонить(Команда)
	// Вставить содержимое обработчика.
	
	ТекДанные = ЭтаФорма.Элементы[ИмяАктивногоДинамичСписка].ТекущиеДанные;
	
	Доступно = ТекДанные <> Неопределено;
	
	Если Не Доступно Тогда
		Возврат
	КонецЕсли;
	
	ДопПараметры = Новый Структура("ИмяАктивногоДинамичСписка", ЭтаФорма.ИмяАктивногоДинамичСписка);
	Оп = Новый ОписаниеОповещения("ОбработчикОповещения_ИсправьНапоминаниеПерезвонить", ЭтотОбъект, ДопПараметры);
	ВыбЗнач = ТекущаяДата();
	ПоказатьВводЗначения(Оп, ВыбЗнач, "Когда перезвонить:", Тип("Дата"));
КонецПроцедуры

 &НаКлиенте
 Процедура ОбработчикОповещения_ИсправьНапоминаниеПерезвонить(ВыбЗнач, ДопПараметры) Экспорт
	 //Выполянет замену комментария в активном динамическом списке
	 //ВыбЗнач = новый тел. номер
	 //ДопПараметры - структура, содержащая имя активного динамического списка
	 
	Доступно = ТипЗнч(ВыбЗнач) = Тип("Дата");
	Доступно = Доступно И ЗначениеЗаполнено(ВыбЗнач);
	Доступно = Доступно И ТипЗнч(ДопПараметры) = Тип("Структура");
	Доступно = Доступно И ДопПараметры <> Неопределено;
	
	ИмяАктивногоСписка =  "";
	ДопПараметры.Свойство("ИмяАктивногоДинамичСписка", ИмяАктивногоСписка);
	
	Доступно = Доступно И ИмяАктивногоСписка <> Неопределено;
	Доступно = Доступно И ЗначениеЗаполнено(ИмяАктивногоСписка);
	
	Если Не Доступно Тогда
		Возврат
	КонецЕсли;
	
	СтароеЗначениеРеквизита = ЭтаФорма.Элементы[ИмяАктивногоДинамичСписка].ТекущиеДанные.НапоминаниеПерезвонить;

	Если ИмяАктивногоСписка = "ЗадачиСписокЛояльностьПродаж" Или ИмяАктивногоСписка = "ЗадачиСписокЛояльностьРемонта" Тогда
		СигнатураПродажи 	= ЭтаФорма.Элементы[ИмяАктивногоСписка].ТекущиеДанные.СигнатураПродажи;	
		Успех = ИзмениЗначениеРеквизитаЗадачиЛояльности(СигнатураПродажи, "НапоминаниеПерезвонить", СтароеЗначениеРеквизита, ВыбЗнач);	
		Если Успех Тогда
			Если  ИмяАктивногоСписка = "ЗадачиСписокЛояльностьРемонта" Тогда
				Для Каждого ПодобныеЗадачи Из ЭтаФорма.Объект.Ремонты_ПодобныеЗадачи Цикл
					Если ПодобныеЗадачи.Спакетировать Тогда
						ИзмениЗначениеРеквизитаЗадачиЛояльности(ПодобныеЗадачи.СигнатураПродажи, "НапоминаниеПерезвонить", СтароеЗначениеРеквизита, ВыбЗнач);	
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ЭтаФорма.Элементы[ИмяАктивногоСписка].Обновить();
		Иначе
			ПоказатьПредупреждение(, "Не удалось изменить реквизит", 3);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти

&НаСервере
Функция ИсправьКаналНаСервере(Сигнатура, ИмяРеквизита, ЗначениеРеквизита)
	Возврат РегистрыСведений.Письма.УстановиЗначениеРеквизита(Сигнатура, ИмяРеквизита, ЗначениеРеквизита);
КонецФункции

#Область Инфо_по_звонкам
&НаКлиенте
Процедура ЗадачаИсторияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.Сигнатура) Тогда
		Возврат
	КонецЕсли;
	
	Парам = Новый Структура();
	Парам.Вставить("Сигнатура", Элемент.ТекущиеДанные.Сигнатура);

	Если Элемент.ТекущиеДанные.ЭтоВходящий Тогда
		ИмяОткрываемойФормы = "РегистрСведений.Звонки.Форма.ФормаВходящегоЧтение";
	Иначе
		ИмяОткрываемойФормы = "РегистрСведений.Звонки.Форма.ФормаИсходящегоЧтение";
	КонецЕсли;
	ОткрытьФорму(ИмяОткрываемойФормы, Парам);	
КонецПроцедуры

&НаКлиенте
Процедура МоиНастройки_ТолькоЗвонкиПоЗадачеВИсторииОбщенияПриИзменении()
	ТекДанные = Элементы[ИмяАктивногоДинамичСписка].ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	// Загрузи на форму данные выбранной задачи
	//-----------------------------------------
	ПокажиИсториюОбщения(ТекДанные.Телефон, ТекДанные.СигнатураПродажи);
КонецПроцедуры
#КонецОбласти

&НаКлиенте
Процедура ОбновитьДинСписки(Команда)
	ЭтаФорма.Элементы[ЭтаФорма.ИмяАктивногоДинамичСписка].Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВведенныхОтветовОтветСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	//	Автоподбор для ответов	

	Элемент.СписокВыбора.Очистить();
	
	Если Не ЭтаФорма.МоиНастройки_ИспользоватьАвтоподбор Тогда
		Возврат
	КонецЕсли;
	
	Текст = СокрЛП(Текст);
	Если СтрДлина(Текст)<=10 Или Ожидание=0 Тогда
		Возврат
	КонецЕсли;
	
	Результат = ТаблицаВведенныхОтветовОтветСтрокойАвтоПодбор_НаСервере(Текст); 
	Если Не ТипЗнч(Результат) = Тип("СписокЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Эл Из Результат Цикл
		Элемент.СписокВыбора.Добавить(Эл.Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТаблицаВведенныхОтветовОтветСтрокойАвтоПодбор_НаСервере(Текст)
	
	ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ = Ложь;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 10
	               |	ИдентификаторыСтрок.Наименование
	               |ИЗ
	               |	Справочник.ИдентификаторыСтрок КАК ИдентификаторыСтрок
	               |ГДЕ
	               |	ИдентификаторыСтрок.ПометкаУдаления = ЛОЖЬ
	               |	И ИдентификаторыСтрок.Наименование ПОДОБНО &Наименование";
	Запрос.УстановитьПараметр("Наименование", "%"+Текст+"%");
	РезультатЗапроса = ОбщегоНазначения.ВыполнитьЗапрос(Запрос);
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ
	КонецЕсли;
	
	МассивОтветов = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку(0);
	СписокОтветов = Новый СписокЗначений();
	СписокОтветов.ЗагрузитьЗначения(МассивОтветов);
	
	Возврат СписокОтветов;
КонецФункции

&НаКлиенте
Процедура ОткрытьАнкетуОпроса(Команда)
	//Открывает форму анкеты опроса
	
	Телефон				=	ЭтаФорма.Элементы[ЭтаФорма.ИмяАктивногоДинамичСписка].ТекущиеДанные.Телефон;
	СигнатураПродажи	=	ЭтаФорма.Элементы[ЭтаФорма.ИмяАктивногоДинамичСписка].ТекущиеДанные.СигнатураПродажи;
	ТочкаПродажи		=	ЭтаФорма.Элементы[ЭтаФорма.ИмяАктивногоДинамичСписка].ТекущиеДанные.ТочкаПродажи;
	ДатаЗакрытия		=	ЭтаФорма.Элементы[ЭтаФорма.ИмяАктивногоДинамичСписка].ТекущиеДанные.ДатаЗакрытия;

	Если ЗначениеЗаполнено(ЭтаФорма.LinkedID) Тогда
		ЗначРекв = ЭтаФорма.LinkedID;
	Иначе
		ЗначРекв = ТелВнутр(ЭтаФорма.ТелВнутр);
	КонецЕсли;
	
	ПакетЗаказНарядов = Новый СписокЗначений();
	Для Каждого Стр Из ЭтаФорма.Объект.Ремонты_ПодобныеЗадачи Цикл
		Если Стр.Спакетировать = Истина Тогда
			ПакетЗаказНарядов.Добавить(Стр.СигнатураПродажи);	
		КонецЕсли;
	КонецЦикла;
	
	Парам = Новый Структура();
	Парам.Вставить("Телефон", 			Телефон);
	Парам.Вставить("СигнатураПродажи",	СигнатураПродажи);
	Парам.Вставить("ЗвонокЗакрытия",	ЗначРекв);
	Парам.Вставить("ПакетЗаказНарядов",	ПакетЗаказНарядов);
	Парам.Вставить("ТочкаПродажи",      ТочкаПродажи);
	Парам.Вставить("ДатаЗакрытия",		ДатаЗакрытия);
	
	ОткрытьФорму("Обработка.КонсольИсходящихЗвонковРемонты.Форма.ФормаАнкетыОпроса", Парам, ЭтаФорма, СигнатураПродажи);
КонецПроцедуры

&НаСервере
Функция ТелВнутр(ТелВнутрСсылка)
	//Получает тел. внутр. как строку из ссылки
	//вызывается из ОткрытьАнкетуОпроса
	
	Возврат ТелВнутрСсылка.Код;
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "Анкета сохранена, задача закрыта" Тогда		
	    ОчиститьПодобныеЗадачи();
		Элементы[ЭтаФорма.ИмяАктивногоДинамичСписка].Обновить();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ОчиститьПодобныеЗадачи()
		ЭтаФорма.Объект.Ремонты_ПодобныеЗадачи.Очистить();	
КонецФункции 

&НаКлиенте
Процедура ОтобразитьАнкету(Команда)
	ЭтаФорма.Элементы.Анкета.Видимость = Не ЭтаФорма.Элементы.Анкета.Видимость
КонецПроцедуры

&НаКлиенте
Процедура Ремонты_ПодобныеЗадачи1СпакетироватьПриИзменении(Элемент)
	
	//Запрети устновку/снятие признака пакетирования если задан машинозаезд
	ТекДанные = Элементы.Ремонты_ПодобныеЗадачи1.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекДанные.Машинозаезд) Тогда
		Возврат;
	КонецЕсли;
	
	СпакетироватьПослеИзм = ТекДанные.Спакетировать;
	ТекДанные.Спакетировать = Не СпакетироватьПослеИзм;
КонецПроцедуры

#Область Анкета_предыдущей_задачи
&НаКлиенте
Процедура ПоказатьАнкетуПредыдущейЗадачи(Команда)
	ПоказатьАнкетуПредыдущейЗадачиНаСервере();	
КонецПроцедуры

&НаСервере
Процедура ПоказатьАнкетуПредыдущейЗадачиНаСервере()
	Если Не ЗначениеЗаполнено(ЭтаФорма.ПредыдущаяЗадача_Сигнатура) Тогда
		Возврат;
	КонецЕсли;
	
	ПредЗадача = ЭтаФорма.ПредыдущаяЗадача_Сигнатура;
	
	Запрос = Новый Запрос("ВЫБРАТЬ Сигнатура ИЗ РегистрСведений.ЗадачиЛояльностиПакеты ГДЕ Продажа = &Продажа");
	Запрос.УстановитьПараметр("Продажа",  ПредЗадача);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ПредЗадача = РезультатЗапроса.Выгрузить()[0][0];
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Анкеты.Ссылка КАК ВопросАнкеты,
	|	Анкеты.Наименование КАК ВопросСтрокой,
	|	Анкеты.Порядок КАК Порядок,
	|	ИдентификаторыВопросов.Ссылка КАК ИдВопроса,
	|	РегСрез.Ответ КАК ОтветСтрокой
	|ИЗ
	|	Справочник.Анкеты КАК Анкеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИдентификаторыСтрок КАК ИдентификаторыВопросов
	|		ПО (ИдентификаторыВопросов.МодифицированнаяСтрока = Анкеты.МодифицированнаяСтрока)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АнкетыРасширенные.СрезПоследних(, СигнатураЗадачQ = &Задача) КАК РегСрез
	|		ПО (РегСрез.Вопрос = ИдентификаторыВопросов.Ссылка)
	|ГДЕ
	|	Анкеты.Родитель.Наименование = &НаименованиеГруппы
	|	И НЕ Анкеты.ЭтоГруппа
	|	И НЕ Анкеты.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Анкеты.Порядок";
	Запрос.УстановитьПараметр("Задача", 			ПредЗадача);
	Запрос.УстановитьПараметр("НаименованиеГруппы", "ЛОЯЛЬНОСТЬ_РЕМОНТА");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Новая = ЭтаФорма.ТаблицаВведенныхОтветов.Добавить();
		ЗаполнитьЗначенияСвойств(Новая, Выборка);
		Новая.ФорматТекстаОтвета = 1;
	КонецЦикла;

КонецПроцедуры
#КонецОбласти

&НаКлиенте
Процедура КоррректировкаСферы(Команда)
	ТекДанные =  Элементы[ЭтаФорма.ИмяАктивногоДинамичСписка].ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТекДанные.ДатаЗакрытия = '00010101' Тогда
		ПоказатьПредупреждение(, "Задача не закрыта", 5);
		Возврат 
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекДанные.ПричинаЗакрытия) Тогда
		ПоказатьПредупреждение(, "Задача закрыта причиной ручного закрытия", 5);
		Возврат;
	КонецЕсли;
	Парам = Новый Структура();
	Парам.Вставить("СигнатураПродажи",	ТекДанные.СигнатураПродажи);
	ОткрытьФорму("Обработка.КонсольИсходящихЗвонковРемонты.Форма.ФормаКорректировкиСферы", Парам, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

#Область Заметка
&НаКлиенте
Процедура ИсправьЗаметку(Команда)
	
	ТекДанные = Элементы[ЭтаФорма.ИмяАктивногоДинамичСписка].ТекущиеДанные;	
	Доступно = ТекДанные <> Неопределено;
	Если Не Доступно Тогда
		Возврат
	КонецЕсли;
	
	ДопПараметры = Новый Структура("ИмяАктивногоДинамичСписка", ИмяАктивногоДинамичСписка);
	Оп = Новый ОписаниеОповещения("ОбработчикОповещения_ИсправьЗаметку", ЭтотОбъект, ДопПараметры);
	ВыбЗнач = ТекДанные.Заметка;
	ПоказатьВводЗначения(Оп, ВыбЗнач, "Новая заметка", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(1024)));	
КонецПроцедуры

&НаКлиенте
 Процедура ОбработчикОповещения_ИсправьЗаметку(ВыбЗнач, ДопПараметры) Экспорт
	 //Выполянет замену номера телефона абонента в активном динамическом списке
	 //ВыбЗнач = новый тел. номер
	 //ДопПараметры - структура, содержащая имя активного динамического списка
	 
	Доступно = 		ТипЗнч(ВыбЗнач) 	 = Тип("Строка")
				И 	ЗначениеЗаполнено(ВыбЗнач)
				И 	ТипЗнч(ДопПараметры) = Тип("Структура")
				И 	ДопПараметры 		<> Неопределено;
		
	ИмяАктивногоСписка =  "";
	ДопПараметры.Свойство("ИмяАктивногоДинамичСписка", ИмяАктивногоСписка);
	
	Доступно = 		Доступно И ИмяАктивногоСписка <> Неопределено
	 			И 	ЗначениеЗаполнено(ИмяАктивногоСписка);
	Если Не Доступно Тогда
		Возврат
	КонецЕсли;
	
	// Удали пробелы, ошибочно введенные пользователем
	ВыбЗнач = СокрЛП(ВыбЗнач); 	
	СтароеЗначениеРеквизита = ЭтаФорма.Элементы[ИмяАктивногоДинамичСписка].ТекущиеДанные.Заметка;

	Если ИмяАктивногоСписка = "ЗадачиСписокЛояльностьПродаж" Или ИмяАктивногоСписка = "ЗадачиСписокЛояльностьРемонта" Тогда
		Контрагент 			= Элементы[ИмяАктивногоСписка].ТекущиеДанные.Контрагент;
		СигнатураПродажи 	= Элементы[ИмяАктивногоСписка].ТекущиеДанные.СигнатураПродажи;

		Успех = ИзмениЗначениеРеквизитаЗадачиЛояльности(СигнатураПродажи, "Заметка", СтароеЗначениеРеквизита, ВыбЗнач);	
		Если Успех Тогда
			ЭтаФорма.Элементы[ИмяАктивногоСписка].Обновить();
		Иначе
			ПоказатьПредупреждение(, "Не удалось изменить заметки", 3);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти










