#Область ОбработчикиСобытийФормы

// Заполняет поля формы по переданным в форму параметрам.
//
// В форму могут передаваться следующие параметры:
// УчетнаяЗапись* - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты, список - 
//               ссылка на учетную запись, которая будет использоваться
//               при отправке сообщения, либо список из учетных записей (для выбора).
// Вложения      - соответствие - вложения в письмо, где
//                 ключ     - имя файла
//                 значение - двоичные данные файла.
// Тема          - строка - тема письма.
// Тело          - строка - тело письма.
// Кому          - соответствие/строка - адресаты письма
//                 если тип соответствие, то
//                 ключ     - строка - Имя адресата
//                 значение - строка - электронный адрес в формате addr@server.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Элементы.ГруппаУправление.Видимость= НЕ Параметры.ПриОткрытииСвернутьШапку;
		
	ТемаПисьма = Параметры.Тема;
	ТелоПисьмаТекст  = Параметры.Тело; 
	ТелоПисьма.УстановитьHTML(ТекстВHTML(Параметры.Тело), Новый Структура);
	
	ТелоПисьма2 = Параметры.Тело;
	АдресОтвета = Параметры.АдресОтвета;
	
	Если ТипЗнч(Параметры.Вложения) = Тип("СписокЗначений") Или ТипЗнч(Параметры.Вложения) = Тип("Массив") Тогда
		Для Каждого Вложение Из Параметры.Вложения Цикл
			ОписаниеВложения = Вложения.Добавить();
			Если ТипЗнч(Параметры.Вложения) = Тип("СписокЗначений") Тогда
				ОписаниеВложения.Представление = Вложение.Представление;
				Если ТипЗнч(Вложение.Значение) = Тип("ДвоичныеДанные") Тогда
					ОписаниеВложения.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Вложение.Значение, УникальныйИдентификатор);
				Иначе
					Если ЭтоАдресВременногоХранилища(Вложение.Значение) Тогда
						ОписаниеВложения.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ПолучитьИзВременногоХранилища(Вложение.Значение), УникальныйИдентификатор);
					Иначе
						ОписаниеВложения.ПутьКФайлу = Вложение.Значение;
					КонецЕсли;
				КонецЕсли;
			Иначе // ТипЗнч(Параметры.Вложения) = "массив структур"
				ЗаполнитьЗначенияСвойств(ОписаниеВложения, Вложение);
				Если Не ПустаяСтрока(ОписаниеВложения.АдресВоВременномХранилище) Тогда
					ОписаниеВложения.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(
						ПолучитьИзВременногоХранилища(ОписаниеВложения.АдресВоВременномХранилище), УникальныйИдентификатор);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Обработка сложных параметров формы (составного типа). Кому
	//-----------------------------------------------------------
	Если ТипЗнч(Параметры.Кому) = Тип("СписокЗначений") Тогда
		ПочтовыйАдресПолучателя = "";
		Для Каждого ЭлементПочтовыйАдрес Из Параметры.Кому Цикл
			Если ЗначениеЗаполнено(ЭлементПочтовыйАдрес.Представление) Тогда 
				ПочтовыйАдресПолучателя = ПочтовыйАдресПолучателя
										+ ЭлементПочтовыйАдрес.Представление
										+ " <"
										+ ЭлементПочтовыйАдрес.Значение
										+ ">; "
			Иначе
				ПочтовыйАдресПолучателя = ПочтовыйАдресПолучателя 
										+ ЭлементПочтовыйАдрес.Значение
										+ "; ";
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(Параметры.Кому) = Тип("Строка") Тогда
		ПочтовыйАдресПолучателя = Параметры.Кому;
	ИначеЕсли ТипЗнч(Параметры.Кому) = Тип("Массив") Тогда
		Если Параметры.Кому.Количество() > 1 Тогда
			Элементы.ЭлектронныйАдресКому.КнопкаВыбора = Истина;
		КонецЕсли;
		Для Каждого СтруктураПолучателя Из Параметры.Кому Цикл
			ЕстьСвойствоВыбран = СтруктураПолучателя.Свойство("Выбран");
			МассивАдресов = СтрРазделить(СтруктураПолучателя.Адрес, ";");
			Для Каждого Адрес Из МассивАдресов Цикл
				Если ПустаяСтрока(Адрес) Тогда 
					Продолжить;
				КонецЕсли;
				Если (ЕстьСвойствоВыбран И СтруктураПолучателя.Выбран) ИЛИ (НЕ ЕстьСвойствоВыбран) Тогда
					ПочтовыйАдресПолучателя = ПочтовыйАдресПолучателя + СтруктураПолучателя.Представление + " <" + СокрЛП(Адрес) + ">; ";
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Если ТипЗнч(Параметры.Кому) = Тип("Массив") Тогда
		ПолучателиСообщения = ПоместитьВоВременноеХранилище(Параметры.Кому, УникальныйИдентификатор);
	Иначе
		ПолучателиСообщения = ПоместитьВоВременноеХранилище(Новый Массив, УникальныйИдентификатор);
	КонецЕсли;
	
	ТелоПисьма3 = ТелоПисьма2;
	
	//Вставь картинки из вложений в тело письма, если в теле письма есть ссылки на них
	//---------------------------------------------------------------------------------
	МассивВставленныхВложений = Новый Массив();
	ТелоПисьма2 = ВставьКартинкиВТелоПисьма(ТелоПисьма2, МассивВставленныхВложений);
	
	//Удали из тела письма те вложения, которые удалось вставить как картинки
	//------------------------------------------------------------------------
	//Для Каждого Вложение Из МассивВставленныхВложений Цикл
	//	Ответ.Вложения.Удалить(Вложение);
	//КонецЦикла;

	
КонецПроцедуры

Функция ВставьКартинкиВТелоПисьма(Тело, МассивУдаления)
	Попытка
		ЧтениеHTML = Новый ЧтениеHTML;
		ЧтениеHTML.УстановитьСтроку(Тело);
		Построитель = Новый ПостроительDOM;
		Документ = Построитель.Прочитать(ЧтениеHTML);
	Исключение
		Возврат Тело;
	КонецПопытки;
	
	// Убедимся в том, что в переменной "Документ" находится объект типа "ДокументHTML"
	//-------------------------------------------------------------------------------------------------
	Если ТипЗнч(Документ) <> Тип("ДокументHTML") Тогда
		Возврат Тело;
	КонецЕсли;
	
	// На данном этапе в контейнере "Документ" содержится разобранное из HTML тело письма
	//-------------------------------------------------------------------------------------------------
	СписокКартинок = Документ.ПолучитьЭлементыПоИмени("img");
	
	// Все картинки, которые необходимо интегрировать в документ, содержатся в элементах с тегом "IMG"
	// Наименование вложения, на которое ссылается тег, содержится в атрибуте "Источник" и имеет формат
	// "cid:image001.jpg@01D5F6BA.0B8393A0", где "image001.jpg@01D5F6BA.0B8393A0" - имя файла-вложения
	//-------------------------------------------------------------------------------------------------
	Для Каждого ТекКартинка Из СписокКартинок Цикл
		КартинкаИмя = Конвертация.СловоПолучить(ТекКартинка.Источник,2,":");
		
		ТабВложение = Новый Структура("ТипСодержимого, Данные", "", "");
		Для Каждого i Из Параметры.ВложенияИдентификаторы Цикл
			Если i.Представление = КартинкаИмя Тогда
				ТабВложение.Вставить("ТипСодержимого", i.Значение.ТипСодержимого);
				ТабВложение.Вставить("Данные",			i.Значение.Данные);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если (ТабВложение <> Неопределено) Тогда
			ВложениеСтрокой = "data:" + СокрЛП(ТабВложение.ТипСодержимого) + ";base64," + Base64Строка(ТабВложение.Данные);
			Тело = СтрЗаменить(Тело, ТекКартинка.Источник, ВложениеСтрокой);
			МассивУдаления.Добавить(ТабВложение);
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Тело;
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗагрузитьВложенияИзФайлов();
	ОбновитьПредставлениеВложений();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ВыборПолучателейСообщения" И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ПочтовыйАдресПолучателя = ВыбранноеЗначение.ПочтовыйАдресПолучателя;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЭлектронныйАдресКомуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПолучателиСообщения", ПолучателиСообщения);
	ПараметрыФормы.Вставить("ПочтовыйАдресПолучателя", Элемент.ТекстРедактирования);
	ОткрытьФорму("ОбщаяФорма.ВыборПолучателейСообщения", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВложения

// Удаляет вложение из списка, а так же вызывает функцию
// обновления таблицы представления вложений.
//
&НаКлиенте
Процедура ВложенияПередУдалением(Элемент, Отказ)
	
	НаименованиеВложения = Элемент.ТекущиеДанные[Элемент.ТекущийЭлемент.Имя];
	
	Для Каждого Вложение Из Вложения Цикл
		Если Вложение.Представление = НаименованиеВложения Тогда
			Вложения.Удалить(Вложение);
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьПредставлениеВложений();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ДобавитьФайлВоВложения();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьВложение();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВложенияПеретаскиваниеЗавершение", ЭтотОбъект, Новый Структура("Имя", ПараметрыПеретаскивания.Значение.Имя));
		НачатьПомещениеФайла(ОписаниеОповещения, , ПараметрыПеретаскивания.Значение.ПолноеИмя, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресОтветаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)	
		АдресОтвета = ПолучитьПриведенныйПочтовыйАдресВФормате(Текст);	
КонецПроцедуры

// Снимает флаг авто подстановки адреса ответа.
//
&НаКлиенте
Процедура АдресОтветаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	АвтоматическаяПодстановкаАдресаОтвета = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресОтветаОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	АктуализироватьАдресОтветаВХранимомСписке(АдресОтвета, Ложь);
	
	Для Каждого ЭлементаАдресОтвета Из Элементы.АдресОтвета.СписокВыбора Цикл
		Если ЭлементаАдресОтвета.Значение = АдресОтвета
		   И ЭлементаАдресОтвета.Представление = АдресОтвета Тогда
			Элементы.АдресОтвета.СписокВыбора.Удалить(ЭлементаАдресОтвета);
		КонецЕсли;
	КонецЦикла;
	
	АдресОтвета = "";
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	ОткрытьВложение();
КонецПроцедуры

#Область Отправить_письмо
&НаКлиенте
Процедура ОтправитьПисьмо()  
	
	//Получи список причин отправки письма
	СписокОтветов =  СписокПричинНеРучогоЗакрытияЗадачиПисьма("ПРИЧИНЫ НЕ РУЧНОГО ЗАКРЫТИЯ ЗАДАЧ ПИСЬМА");
	
	//Если не заполнен перечень причин - просто отправь письмо
	//-----------------------------------------------------------
	Если СписокОтветов.Количество() = 0 Тогда
		ОтправьПисьмо();	
		Возврат;
	КонецЕсли;

	//Покажи меню  
	ДопПарам = Новый Структура(); 
    Оп = Новый ОписаниеОповещения("ОбработкаОповещенияПричинаОтправки", ЭтаФорма, ДопПарам);
	ПоказатьВыборИзМеню(Оп, СписокОтветов, ЭтаФорма.Элементы.ОтправитьПисьмо1);
	
КонецПроцедуры  

&НаКлиенте
Процедура ОтправьПисьмо(ПричинаЗакрытия = "Пересылка из Агр")
	ОчиститьСообщения();
	
	// 1. Отправь почтовое сообщение;  2. Зарегистрируй факт отправки в Агр; 3. Закрой задачу
	Если ОтправитьПочтовоеСообщение(ПричинаЗакрытия) Тогда
		Состояние(НСтр("ru = 'Сообщение успешно отправлено'"));
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры    

 &НаСервереБезКонтекста
Функция СписокПричинНеРучогоЗакрытияЗадачиПисьма(ИмяШаблона = "ПРИЧИНЫ НЕ РУЧНОГО ЗАКРЫТИЯ ЗАДАЧ ПИСЬМА")
	
	Запрос = Новый Запрос("ВЫБРАТЬ Ответ ИЗ Справочник.Анкеты.ВариантыОтветов ГДЕ Ссылка.Родитель.Наименование = &РодительНаименование И Ссылка.Наименование = &Наименование");
	Запрос.УстановитьПараметр("РодительНаименование", 	"ПРОЧЕЕ");
	Запрос.УстановитьПараметр("Наименование",			ИмяШаблона);
	
	РезультатЗапроса = ОбщегоНазначения.ВыполнитьЗапрос(Запрос);
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый СписокЗначений();
	КонецЕсли;
	
	СписЗнач = Новый СписокЗначений();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СписЗнач.Добавить(Выборка.Ответ, Выборка.Ответ);
	КонецЦикла;
	
	Возврат СписЗнач
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещенияПричинаОтправки(ВыбЗначОтвет, ДопПараметры) Экспорт
	
	Если ВыбЗначОтвет = Неопределено Тогда
		Возврат;
	КонецЕсли;  
	
	ОтправьПисьмо(ВыбЗначОтвет.Значение);
КонецПроцедуры

&НаСервереБезКонтекста
Функция УстановиПричинуЗакрытияЗадачи(Телефон, Дата, ВыбЗнач)
	Возврат РегистрыСведений.ЗадачиОбратныйЗвонок.УстановиЗначениеРеквизитаИЗакройЗадачу(Телефон, ТекущаяДата(), "ПричинаЗакрытия",ВыбЗнач, ПараметрыСеанса.ТекущийПользователь); 
КонецФункции

  
#КонецОбласти

&НаКлиенте
Процедура ПриложитьФайлВыполнить()
	
	ДобавитьФайлВоВложения();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ОтправитьПочтовоеСообщение(ПричинаЗакрытия = "Пересылка из Агр")
	// 1. Отправь почтовое сообщение; 2. Зарегистрируй факт отправки в Агр; 3. Закрой задачу
	
	ПараметрыПисьма = СформироватьПараметрыПисьма();
	Если ПараметрыПисьма = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка формирования письма");
		Возврат Ложь;
	КонецЕсли;
	
	//Отправка письма
	//------------------
	Отправлено = ЭлПочта.ОУ_ПисьмоОтправить(ПараметрыПисьма.АдресОтвета, ПараметрыПисьма.Кому, ПараметрыПисьма.Копия, "", ПараметрыПисьма.Тема, ПараметрыПисьма.Тело, ПараметрыПисьма.Вложения, "Луидор",Ложь); 
	Если Не Отправлено Тогда
			Возврат Ложь;
	КонецЕсли;	
	
	//Регистрация в Агрегаторе факта отправки
	ВнутреннийИд 	= xmlСтрока(Новый УникальныйИдентификатор());
	ОтправкуПисьмаЗарегистрируй(ВнутреннийИд, ТекущаяДата(), ПараметрыПисьма.Кому, Параметры.ВходящееПисьмоОснование, ПараметрыПисьма.Тема, ПараметрыПисьма.Тело);
	
	//Закрой задачу на обратный звонок
	ЗакройЗадачу(Параметры.ВходящееПисьмоОснование, ПричинаЗакрытия);

	Возврат Истина;
КонецФункции  


&НаСервере
Функция ЗакройЗадачу(ВходящееПисьмоОснование, ПричинаЗакрытия = "Пересылка из Агр")
	//Закрывает задачу в РС.ЗадачиНаОбратныйЗвонок
	
	Доступно = 		ТипЗнч(ВходящееПисьмоОснование) = Тип("Строка")
				И   ЗначениеЗаполнено(ВходящееПисьмоОснование);
				
	Если Не Доступно Тогда
		Возврат "ошибка" ;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 Телефон ИЗ РегистрСведений.ЗадачиОбратныйЗвонок ГДЕ ПисьмоИнициатор = &ПисьмоИнициатор И ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)");
	Запрос.УстановитьПараметр("ПисьмоИнициатор", ВходящееПисьмоОснование);
	РезЗапроса = Запрос.Выполнить();
	Если РезЗапроса.Пустой() Тогда
		Возврат "ошибка"
	КонецЕсли;
	Телефон = РезЗапроса.Выгрузить()[0][0];
	РегистрыСведений.ЗадачиОбратныйЗвонок.УстановиЗначениеРеквизитаИЗакройЗадачу(Телефон , ТекущаяДата(), "ПричинаЗакрытия", ПричинаЗакрытия, ПараметрыСеанса.ТекущийПользователь);

КонецФункции


&НаСервере
Функция ОтправкуПисьмаЗарегистрируй(Сигнатура, Отправлено, Получатели, Входящее, Тема, Содержание)
	//Добавляет запись в РС.ПисьмаОтправленные
	
	 Доступно = 	ТипЗнч(Сигнатура) = Тип("Строка")
	 			И   ЗначениеЗаполнено(Сигнатура);
				
	Если Не Доступно Тогда
		Возврат Ложь;				
	КонецЕсли;			
	
	Зап = РегистрыСведений.ПисьмаОтправленные.СоздатьМенеджерЗаписи();
	Зап.Сигнатура = Сигнатура;
	Зап.Отправлено = Отправлено;
	Зап.Получатели = Получатели;
	Зап.Входящее = Входящее;
	Зап.Тема = Тема;
	Зап.Содержание = Содержание;
	Попытка
		Зап.Записать();
	Исключение
		ЗаписьЖурналаРегистрации("ОтправкуПисьмаЗарегистрируй", УровеньЖурналаРегистрации.Ошибка,, СтрШаблон("Сигнатура = %1, Получатели = %2, Входящее = %3, Тема = %4", Сигнатура, Получатели, Входящее, Тема), ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	Возврат Истина;
КонецФункции



&НаСервереБезКонтекста
Функция ПолучитьПочтовыйАдресПоУчетнойЗаписи(Знач УчетнаяЗапись)
	
	Возврат СокрЛП(УчетнаяЗапись.ИмяПользователя)
			+ ? (ПустаяСтрока(СокрЛП(УчетнаяЗапись.ИмяПользователя)),
					УчетнаяЗапись.АдресЭлектроннойПочты,
					" <" + УчетнаяЗапись.АдресЭлектроннойПочты + ">");
	
КонецФункции

&НаКлиенте
Процедура ОткрытьВложение()
	
	ВыбранноеВложение = ВыбранноеВложение();
	Если ВыбранноеВложение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		ПолучитьФайл(ВыбранноеВложение.АдресВоВременномХранилище, ВыбранноеВложение.Представление, Истина);
	#Иначе
		ИмяВременнойПапки = ПолучитьИмяВременногоФайла();
		СоздатьКаталог(ИмяВременнойПапки);
		
		ИмяВременногоФайла = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременнойПапки) + ВыбранноеВложение.Представление;
		
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ВыбранноеВложение.АдресВоВременномХранилище);
		ДвоичныеДанные.Записать(ИмяВременногоФайла);
		
		Файл = Новый Файл(ИмяВременногоФайла);
		Файл.УстановитьТолькоЧтение(Истина);
		Если Файл.Расширение = ".mxl" Тогда
			ТабличныйДокумент = ПолучитьТабличныйДокументПоДвоичнымДанным(ВыбранноеВложение.АдресВоВременномХранилище);
			ПараметрыОткрытия = Новый Структура;
			ПараметрыОткрытия.Вставить("ИмяДокумента", ВыбранноеВложение.Представление);
			ПараметрыОткрытия.Вставить("ТабличныйДокумент", ТабличныйДокумент);
			ПараметрыОткрытия.Вставить("ПутьКФайлу", ИмяВременногоФайла);
			ОткрытьФорму("ОбщаяФорма.РедактированиеТабличногоДокумента", ПараметрыОткрытия, ЭтотОбъект);
		Иначе
			ЗапуститьПриложение(ИмяВременногоФайла);
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Функция ВыбранноеВложение()
	
	Результат = Неопределено;
	Если Элементы.Вложения.ТекущиеДанные <> Неопределено Тогда
		НаименованиеВложения = Элементы.Вложения.ТекущиеДанные[Элементы.Вложения.ТекущийЭлемент.Имя];
		Для Каждого Вложение Из Вложения Цикл
			Если Вложение.Представление = НаименованиеВложения Тогда
				Результат = Вложение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТабличныйДокументПоДвоичнымДанным(Знач ДвоичныеДанные)
	
	Если ТипЗнч(ДвоичныеДанные) = Тип("Строка") Тогда
		// Передан адрес двоичных данных во временном хранилище.
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДвоичныеДанные);
	КонецЕсли;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("mxl");
	ДвоичныеДанные.Записать(ИмяФайла);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.Прочитать(ИмяФайла);
	
	Попытка
		УдалитьФайлы(ИмяФайла);
	Исключение
		ЗаписьЖурналаРегистрации("ПолучитьТабличныйДокументПоДвоичнымДанным", УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат ТабличныйДокумент;	
КонецФункции

#Область Добавление_вложения
&НаКлиенте
Процедура ДобавитьФайлВоВложения()
	
	НовыйФайл = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	НовыйФайл.Заголовок = "Выберите файл для загрузки";
	НовыйФайл.ПроверятьСуществованиеФайла = Истина;
	НовыйФайл.МножественныйВыбор = Истина;
	
	Если НовыйФайл.Выбрать() = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ПолноеИмяФайла Из НовыйФайл.ВыбранныеФайлы Цикл
		ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
		Файл = Новый Файл(ПолноеИмяФайла);
		
		Вложение = Вложения.Добавить();
		Вложение.Представление = Файл.Имя;
		Вложение.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
	КонецЦикла;
	
	ОбновитьПредставлениеВложений();

КонецПроцедуры


#КонецОбласти

&НаКлиенте
Процедура ДобавитьФайлВоВложенияПриПомещенииФайлов(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	Если ПомещенныеФайлы = Неопределено Или ПомещенныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ДобавитьФайлыВСписок(ПомещенныеФайлы);
	ОбновитьПредставлениеВложений();
КонецПроцедуры

&НаСервере
Процедура ДобавитьФайлыВСписок(ПомещенныеФайлы)
	
	Для Каждого ОписаниеФайла Из ПомещенныеФайлы Цикл
		Файл = Новый Файл(ОписаниеФайла);
		Вложение = Вложения.Добавить();
		Вложение.Представление = Файл.Имя;
		Вложение.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ПолучитьИзВременногоХранилища(ОписаниеФайла), УникальныйИдентификатор);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредставлениеВложений()
	
	ПредставлениеВложений.Очистить();
	
	Индекс = 0;
	
	Для Каждого Вложение Из Вложения Цикл
		Если Индекс = 0 Тогда
			СтрокаПредставления = ПредставлениеВложений.Добавить();
		КонецЕсли;
		
		СтрокаПредставления["Вложение" + Строка(Индекс + 1)] = Вложение.Представление;
		
		Индекс = Индекс + 1;
		Если Индекс = 2 Тогда 
			Индекс = 0;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Проверяет возможность отправления письма и если
// это возможно - формирует параметры отправки.
//
&НаСервере
Функция СформироватьПараметрыПисьма()
	
	ПараметрыПисьма = Новый Структура;
		
	СписокПолучателей = ПочтовыйАдресПолучателя;
	Кому = СписокПолучателей;
			
	Если ЗначениеЗаполнено(Кому) Тогда
		ПараметрыПисьма.Вставить("Кому", Кому);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Необходимо заполнить получателя письма'"), , "ПочтовыйАдресПолучателя");
		Возврат Неопределено;
	КонецЕсли;
		
	Копия = ПолучателиКопииСообщения;
	ПараметрыПисьма.Вставить("Копия", Копия);
	
	Если ЗначениеЗаполнено(АдресОтвета) Тогда
		ПараметрыПисьма.Вставить("АдресОтвета", АдресОтвета);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТемаПисьма) Тогда
		ПараметрыПисьма.Вставить("Тема", ТемаПисьма);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПолучателиСообщения) Тогда
		ПараметрыПисьма.Вставить("ПолучателиСообщения", ПолучитьИзВременногоХранилища(ПолучателиСообщения));
	КонецЕсли;
	
	СодержимоеПисьма = ПолучитьHTMLФорматированногоДокументаДляПисьма(ТелоПисьма);
	ТекстHTML = СодержимоеПисьма.ТекстHTML;
	Картинки = СодержимоеПисьма.Картинки;
	
	//ПараметрыПисьма.Вставить("Тело", ТекстHTML); //=>
	ПараметрыПисьма.Вставить("Тело", ТелоПисьма3);
	ПараметрыПисьма.Вставить("ТипТекста", "HTML");
	ПараметрыПисьма.Вставить("Вложения", Вложения());
	
	Для Каждого Картинка Из Картинки Цикл
		ИмяКартинки = Картинка.Ключ;
		ДанныеКартинки = Картинка.Значение;
		ПараметрыПисьма.Вложения.Добавить(ПоместитьВоВременноеХранилище(ДанныеКартинки.ПолучитьДвоичныеДанные()), ИмяКартинки);
	КонецЦикла;
	
	Возврат ПараметрыПисьма;
	
КонецФункции

&НаСервере
Функция ПолучитьHTMLФорматированногоДокументаДляПисьма(ФорматированныйДокумент)
	
	// Выгрузка форматированного документа в HTML текст и картинки.
	ТекстHTML = "";
	Картинки = Новый Структура;
	ФорматированныйДокумент.ПолучитьHTML(ТекстHTML, Картинки);
	
	// Конвертация HTML текста в ДокументHTML.
	Построитель = Новый ПостроительDOM;
	ЧтениеHTML = Новый ЧтениеHTML;
	ЧтениеHTML.УстановитьСтроку(ТекстHTML);
	ДокументHTML = Построитель.Прочитать(ЧтениеHTML);
	
	// Замена имен картинок в документе HTML на идентификаторы.
	Для Каждого Картинка Из ДокументHTML.Картинки Цикл
		АтрибутИсточникКартинки = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src");
		АтрибутИсточникКартинки.ТекстовоеСодержимое = "cid:" + АтрибутИсточникКартинки.ТекстовоеСодержимое;
	КонецЦикла;
	
	// Конвертация ДокументHTML обратно в текст HTML.
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьHTML = Новый ЗаписьHTML;
	ЗаписьHTML.УстановитьСтроку();
	ЗаписьDOM.Записать(ДокументHTML, ЗаписьHTML);
	ТекстHTML = ЗаписьHTML.Закрыть();
	
	// Подготовка результата.
	Результат = Новый Структура;
	Результат.Вставить("ТекстHTML", ТекстHTML);
	Результат.Вставить("Картинки", Картинки);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТекстВHTML(Текст)
	
	Если СтрНайти(НРег(Текст), "</html>", НаправлениеПоиска.СКонца) > 0 Тогда
		Возврат Текст;
	КонецЕсли;
	
	ДокументHTML = Новый ДокументHTML;
	
	ЭлементТело = ДокументHTML.СоздатьЭлемент("body");
	ДокументHTML.Тело = ЭлементТело;
	
	Для НомерСтроки = 1 По СтрЧислоСтрок(Текст) Цикл
		Строка = СтрПолучитьСтроку(Текст, НомерСтроки);
		
		ЭлементБлок = ДокументHTML.СоздатьЭлемент("p");
		ЭлементТело.ДобавитьДочерний(ЭлементБлок);
		
		ЭлементТекст = ДокументHTML.СоздатьТекстовыйУзел(Строка);
		ЭлементБлок.ДобавитьДочерний(ЭлементТекст);
	КонецЦикла;
	
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьHTML = Новый ЗаписьHTML;
	ЗаписьHTML.УстановитьСтроку();
	ЗаписьDOM.Записать(ДокументHTML, ЗаписьHTML);
	Результат = ЗаписьHTML.Закрыть();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция Вложения()
		
	Результат = Новый СписокЗначений();
	Для Каждого Вложение Из Вложения Цикл
		Результат.Добавить(Вложение.АдресВоВременномХранилище, Вложение.Представление);
	КонецЦикла;

	Возврат Результат;
	
КонецФункции

// Добавляет адрес ответа в список сохраняемых значений.
//
&НаСервереБезКонтекста
Функция АктуализироватьАдресОтветаВХранимомСписке(Знач АдресОтвета,
                                                   Знач ДобавлятьАдресВСписок = Истина)
	
	// Получаем список адресов, которые пользователь использовал ранее.
	СписокАдресовОтвета = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"РедактированиеНовогоПисьма",
		"СписокАдресовОтвета");
	
	Если СписокАдресовОтвета = Неопределено Тогда
		СписокАдресовОтвета = Новый СписокЗначений();
	КонецЕсли;
	
	Для Каждого ЭлементАдресОтвета Из СписокАдресовОтвета Цикл
		Если ЭлементАдресОтвета.Значение = АдресОтвета
		   И ЭлементАдресОтвета.Представление = АдресОтвета Тогда
			СписокАдресовОтвета.Удалить(ЭлементАдресОтвета);
		КонецЕсли;
	КонецЦикла;
	
	Если ДобавлятьАдресВСписок
	   И ЗначениеЗаполнено(АдресОтвета) Тогда
		СписокАдресовОтвета.Вставить(0, АдресОтвета, АдресОтвета);
	КонецЕсли;
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"РедактированиеНовогоПисьма",
		"СписокАдресовОтвета",
		СписокАдресовОтвета);
	
КонецФункции

// Сравнивает два e-mail адреса.
// Параметры:
// АдресСоответствие1 - строка - первый e-mail адрес.
// АдресСоответствие2 - строка - второй e-mail адрес.
// Возвращаемое значение
// Истина, или Ложь в зависимости от того одинаковы ли e-mail адреса.
//
&НаКлиенте
Функция EMAILАдресаОдинаковы(АдресСоответствие1, АдресСоответствие2)
	
	Если АдресСоответствие1.Количество() <> 1
	 Или АдресСоответствие2.Количество() <> 1 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если АдресСоответствие1[0].Представление = АдресСоответствие2[0].Представление
	   И АдресСоответствие1[0].Адрес         = АдресСоответствие2[0].Адрес Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПолучитьПриведенныйПочтовыйАдресВФормате(Текст)
	
	ПочтовыйАдрес = "";
	
	МассивАдресов = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(Текст);
	
	Для Каждого ЭлементАдрес Из МассивАдресов Цикл
		Если ЗначениеЗаполнено(ЭлементАдрес.Представление) Тогда 
			ПочтовыйАдрес = ПочтовыйАдрес + ЭлементАдрес.Представление
							+ ? (ПустаяСтрока(СокрЛП(ЭлементАдрес.Адрес)), "", " <" + ЭлементАдрес.Адрес + ">");
		Иначе
			ПочтовыйАдрес = ПочтовыйАдрес + ЭлементАдрес.Адрес + "; ";
		КонецЕсли;
	КонецЦикла;
		
	Возврат ПочтовыйАдрес;
	
КонецФункции

&НаКлиенте
Процедура ВложенияПеретаскиваниеЗавершение(Результат, АдресВременногоХранилища, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Файлы = Новый Массив;
	ПередаваемыйФайл = Новый ОписаниеПередаваемогоФайла(ДополнительныеПараметры.Имя, АдресВременногоХранилища);
	Файлы.Добавить(ПередаваемыйФайл);
	ДобавитьФайлыВСписок(Файлы);
	ОбновитьПредставлениеВложений();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьВложенияИзФайлов()
	
	Для Каждого Вложение Из Вложения Цикл
		Если Не ПустаяСтрока(Вложение.ПутьКФайлу) Тогда
			ДвоичныеДанные = Новый ДвоичныеДанные(Вложение.ПутьКФайлу);
			Вложение.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ДобавитьКому(Команда)
	ОткрытьФорму("Справочник.Предприятие.ФормаВыбора", , ЭтаФорма.Элементы.ЭлектронныйАдресКому,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца)
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКопия(Команда)
	ОткрытьФорму("Справочник.Предприятие.ФормаВыбора", , ЭтаФорма.Элементы.ПолучателиКопииСообщения,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца)
КонецПроцедуры

&НаКлиенте
Процедура ЭлектронныйАдресКомуОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ВыбЗнач = ВыбранноеЗначение;
	
	Доступно = ТипЗнч(ВыбранноеЗначение) = Тип ("СправочникСсылка.Предприятие");
	Если Доступно Тогда
		ВыбЗнач = ЗначенияСервера.ПолучитьЗначениеРеквизита(ВыбЗнач, "АдресЭлектроннойПочты");
	КонецЕсли;
			
	Если Не ЗначениеЗаполнено(ПочтовыйАдресПолучателя) Тогда
		ПочтовыйАдресПолучателя = ВыбЗнач;
	Иначе
		ПочтовыйАдресПолучателя = ПочтовыйАдресПолучателя+"; "+ВыбЗнач;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиКопииСообщенияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ВыбЗнач = ВыбранноеЗначение;
	Доступно = ТипЗнч(ВыбранноеЗначение) = Тип ("СправочникСсылка.Предприятие");
	Если Доступно Тогда
		ВыбЗнач = ЗначенияСервера.ПолучитьЗначениеРеквизита(ВыбЗнач, "АдресЭлектроннойПочты");
	КонецЕсли;
			
	Если Не ЗначениеЗаполнено(ПолучателиКопииСообщения) Тогда
		ПолучателиКопииСообщения = ВыбЗнач;
	Иначе
		ПолучателиКопииСообщения = ПолучателиКопииСообщения+"; "+ВыбЗнач;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Закрытие_причиной_ручного_закрытия_без_отправки_письма 
&НаКлиенте
Процедура ЗадачаОтменить(Команда)
	СписокОтветов =  ПолучиСписокОтветовПричинРучогоЗакрытияЗадачи("ПРИЧИНЫ РУЧНОГО ЗАКРЫТИЯ ПОЧТА");	
		Если СписокОтветов.Количество()=0 Тогда
			ПоказатьПредупреждение(,"Не задан список причин ручного закрытия задач",3);
			Возврат 
		КонецЕсли;	
		
	ДопПарам = Новый Структура("Телефон", );
	Оп = Новый ОписаниеОповещения("ОбработкаОповещенияЗадачаОтменить", ЭтаФорма, ДопПарам);
	ПоказатьВыборИзМеню(Оп, СписокОтветов, Команда);
КонецПроцедуры  
	
&НаСервереБезКонтекста
Функция ПолучиСписокОтветовПричинРучогоЗакрытияЗадачи(ИмяШаблона = "ПРИЧИНЫ РУЧНОГО ЗАКРЫТИЯ ЗАДАЧ")
		
	Запрос = Новый Запрос("ВЫБРАТЬ Ответ ИЗ Справочник.Анкеты.ВариантыОтветов ГДЕ Ссылка.Родитель.Наименование = &РодительНаименование И Ссылка.Наименование = &Наименование");
	Запрос.УстановитьПараметр("РодительНаименование", "ПРОЧЕЕ");
	Запрос.УстановитьПараметр("Наименование", ИмяШаблона);
	
	РезультатЗапроса = ОбщегоНазначения.ВыполнитьЗапрос(Запрос);
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый СписокЗначений()
	КонецЕсли;

	СписЗнач = Новый СписокЗначений();
  	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СписЗнач.Добавить(Выборка.Ответ, Выборка.Ответ);
	КонецЦикла;
	
	Возврат СписЗнач	
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещенияЗадачаОтменить(ВыбЗначОтвет, ДопПараметры) Экспорт
			
	Если ВыбЗначОтвет = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Закрой задачу звонка или почты
	//-------------------------------------------------------------------------------------------------------------
	Успех = УстановиПричинуЗакрытияЗадачи(Параметры.ВходящееПисьмоОснование, ТекущаяДата(), ВыбЗначОтвет.Значение);
	Если Не Успех Тогда	
		ПоказатьПредупреждение(, "Ошибка закрытия задачи", 3);
		Возврат;
	КонецЕсли; 
	
	Если ЭтаФорма.ВладелецФормы <> Неопределено Тогда
		ЭтаФорма.ВладелецФормы.Элементы["ЗадачиСписокПочта"].Обновить();
	КонецЕсли;      
	
	ЭтаФорма.Закрыть();
КонецПроцедуры

#КонецОбласти