&НаСервере
Процедура ПриСозданииНаСервере(Отказ,СтандартнаяОбработка)

// Если форма открывается в режиме редактирования, то запретим корректировку реквизита "Телефон"
//-------------------------------------------------------------------------------------------------
	Доступно = (НЕ ЗначениеЗаполнено(Объект.Ссылка));
	Доступно = Доступно ИЛИ (НЕ ЗначениеЗаполнено(Объект.Телефон));
	Элементы.Телефон.ТолькоПросмотр = (НЕ Доступно);

// Доступность команды поиска конвергентного мобильного телефона в системном агрегаторе
//-------------------------------------------------------------------------------------------------
	Доступно = ЗначениеЗаполнено(Объект.Телефон);
	Элементы.Мобильный.КнопкаВыбора = Доступно;

// Настроим фильтрацию для списка очередей в которых абонент является агентом
//-------------------------------------------------------------------------------------------------
	ЭтаФорма.Очереди.Параметры.УстановитьЗначениеПараметра("Телефон",СокрЛП(Объект.Телефон));
	ЭтаФорма.Очереди.Параметры.УстановитьЗначениеПараметра("Целевая",Объект.ОчередьЦелевая);
	Элементы.ГруппаОчереди.Видимость = ЗначениеЗаполнено(Объект.Ссылка);

// Установим внешний вид для команды управления активностью агента в очередях
//-------------------------------------------------------------------------------------------------
	СтрАгент = Коммуникации.АгентСостояниеПолучить(Объект.Телефон);
	Доступно = (ТипЗнч(СтрАгент) = Тип("Структура"));
	Элементы.ПаузаПереключить.Видимость = Доступно;

	Если (Доступно = Истина) Тогда
		Если (СтрАгент.Активность = Истина) Тогда
			Элементы.ПаузаПереключить.Заголовок = "Прием входящих звонков: Включен";
			Элементы.ПаузаПереключить.Картинка = БиблиотекаКартинок.ШарикЗеленый;
			Элементы.ПаузаПереключить.ЦветТекста = WEBЦвета.Зеленый;
		Иначе
			Элементы.ПаузаПереключить.Заголовок = "Прием входящих звонков: Пауза";
			Элементы.ПаузаПереключить.Картинка = БиблиотекаКартинок.ШарикКрасный;
			Элементы.ПаузаПереключить.ЦветТекста = WEBЦвета.Красный;
		КонецЕсли;
	КонецЕсли;

// Инициализация элементов "ЗапретИсходящих" и "ЗаписьИсходящих"
//-------------------------------------------------------------------------------------------------
	ЭтаФорма.ЗапретИсходящих = ?(СтрНайти(ВРег(Объект.Параметры),"Z") > 0,Истина,Ложь);
	ЭтаФорма.ЗаписьИсходящих = ?(СтрНайти(ВРег(Объект.Параметры),"R") > 0,Истина,Ложь);

// Инициализация формы и ее элементов
//-------------------------------------------------------------------------------------------------
	ИсхДанныеПриИзмененииНаСервере();
	ТелефонПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ПриСозданииНаСервере(Ложь,Истина);
	Оповестить("Запись",Объект.Ссылка,ЭтаФорма);
КонецПроцедуры

//-------------------------------------------------------------------------------------------------

&НаКлиенте
Процедура ПаузаПереключить(Команда)

// Инвертируем состояние агента во всех доступных ему очередях
// Если функция инвертирования состояния вернет непустую строку, значит произошла ошибка
//-------------------------------------------------------------------------------------------------
	Если (ЭтаФорма.Записать()) Тогда
		Результат = Коммуникации.АгентСостояниеИнвертировать(Объект.Телефон);
		ЭтаФорма.Записать();

		Если (ЗначениеЗаполнено(Результат)) Тогда
			Предупреждение(Результат);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТелефонПриИзменении(Элемент)

// Выполним поиск связанного SIP-Объекта
//-------------------------------------------------------------------------------------------------
	Объект.Телефон = ВРег(СокрЛП(Объект.Телефон));
	ТелефонПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ТелефонПриИзмененииНаСервере()

// Получим ссылку на SIP-Объект связанный с номером телефона
//-------------------------------------------------------------------------------------------------
	ЭтаФорма.СипОбъектРегистрация = "Нет данных о регистрации";
	Доступно = ЗначениеЗаполнено(Объект.Телефон);
	ЭтаФорма.СипОбъектСсылка = Неопределено;

	Если (Доступно = Истина) Тогда
		СпрСсылка = ВнешниеИсточникиДанных.ТелСервер.Таблицы.ТелОбъекты.НайтиПоПолю("name",СокрЛП(Объект.abonent_num));
		ЭтаФорма.СипОбъектСсылка = ?(ЗначениеЗаполнено(СпрСсылка),СпрСсылка,Неопределено);

		Если (ЗначениеЗаполнено(СпрСсылка.ШтампАктивности)) Тогда
			РегДатаВремя = (Дата("19690101") + СпрСсылка.ШтампАктивности);
			ЭтаФорма.СипОбъектРегистрация = СокрЛП(Формат(РегДатаВремя,"ДЛФ=DDT"));
		КонецЕсли;
	КонецЕсли;

// Установим видимость элементов в зависимости от наличия SIP-Объекта
//-------------------------------------------------------------------------------------------------
	Доступно = ЗначениеЗаполнено(ЭтаФорма.СипОбъектСсылка);
	Элементы.НадписьСипОбъект.Видимость = (НЕ Доступно);
	Элементы.ГруппаСипОбъект.Видимость = Доступно;
КонецПроцедуры

&НаКлиенте
Процедура МобильныйНачалоВыбора(Элемент,ДанныеВыбора,СтандартнаяОбработка)

// Выполним поиск конвергентного мобильного номера в системном агрегаторе ОИТ
//-------------------------------------------------------------------------------------------------
	СтрТелефон = Коммуникации.АгрегаторМобильныйПолучить(Объект.Телефон);

	Если (ТипЗнч(СтрТелефон) = Тип("Структура")) Тогда
		Объект.Мобильный = СокрЛП(СтрТелефон.Телефон);
	КонецЕсли;
КонецПроцедуры

//-------------------------------------------------------------------------------------------------

&НаКлиенте
Процедура ЗапретИсходящихПриИзменении(Элемент)

// Если исходящие городские вызовы разрешены, то убедимся в том, что исходящий канал настроен
//-------------------------------------------------------------------------------------------------
	Если (ЭтаФорма.ЗапретИсходящих = Ложь) Тогда
		Если (НЕ ЗначениеЗаполнено(ЭтаФорма.ИсхКаналСсылка)) Тогда
			Предупреждение("Не настроен канал для выполнения исходящих городских вызовов");
			ЭтаФорма.ЗапретИсходящих = Истина;
			ЭтаФорма.ЗаписьИсходящих = Ложь;
		КонецЕсли;
	КонецЕсли;

	ИсхДанныеПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьИсходящихПриИзменении(Элемент)
	ИсхДанныеПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИсхКаналСсылкаПриИзменении(Элемент)

// Если канал выбран, то заполним реквизиты "ИсхПровайдер" и "ИсхТелефон"
//-------------------------------------------------------------------------------------------------
	Если (ЗначениеЗаполнено(ЭтаФорма.ИсхКаналСсылка)) Тогда
		Объект.ИсхПровайдер = ЗначенияСервера.РеквизитВычислить(ЭтаФорма.ИсхКаналСсылка,"Провайдер");
		Объект.ИсхТелефон = ЗначенияСервера.РеквизитВычислить(ЭтаФорма.ИсхКаналСсылка,"Телефон");
	Иначе
		Объект.ИсхПровайдер = Неопределено;
		Объект.ИсхТелефон = Неопределено;
	КонецЕсли;

	ИсхДанныеПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИсхПровайдерПриИзменении(Элемент)

// Получим ссылку на исходящий канал абонента
//-------------------------------------------------------------------------------------------------
	ИсхДанныеПриИзмененииНаСервере();

// Если ссылка не получена, значит в реквизите "ИсхТелефон" отсутствует значение, либо указанный
// там телефон не поддерживается выбранным провайдером (очистим реквизит в этом случае)
//-------------------------------------------------------------------------------------------------
	Если (НЕ ЗначениеЗаполнено(ЭтаФорма.ИсхКаналСсылка)) Тогда
		Объект.ИсхТелефон = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ИсхДанныеПриИзмененииНаСервере()

// Получим ссылку на исходящий канал абонента
//-------------------------------------------------------------------------------------------------
	Доступно = ЗначениеЗаполнено(Объект.ИсхТелефон);
	Доступно = Доступно И ЗначениеЗаполнено(Объект.ИсхПровайдер);
	ЭтаФорма.ИсхКаналСсылка = Неопределено;

	Если (Доступно = Истина) Тогда
		ТекстЗапроса = "
		|SELECT	TOP 1 Ссылка
		|FROM	ВнешнийИсточникДанных.ТелСервер.Таблица.КаналыИсходящие
		|WHERE	(Провайдер = &ИсхПровайдер) И (Телефон = &ИсхТелефон)";

		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("ИсхПровайдер",Объект.ИсхПровайдер);
		Запрос.УстановитьПараметр("ИсхТелефон",СокрЛП(Объект.ИсхТелефон));
		Результат = Запрос.Выполнить().Выбрать();

		Если (Результат.Следующий()) Тогда
			ЭтаФорма.ИсхКаналСсылка = Результат.Ссылка;
		КонецЕсли;
	КонецЕсли;

// Видимость группы "Параметры исходящих"
//-------------------------------------------------------------------------------------------------
	Доступно = ЗначениеЗаполнено(ЭтаФорма.ИсхКаналСсылка);
	Элементы.ГруппаПараметры.Видимость = Доступно;

// Если исходящий канал отсутствует, то запретим исходящие вызовы
// Если исходящие вызовы запрещены, то запретим запись исходящих звонков
//-------------------------------------------------------------------------------------------------
	ЭтаФорма.ЗапретИсходящих = ?(Доступно,ЭтаФорма.ЗапретИсходящих,Истина);
	ЭтаФорма.ЗаписьИсходящих = ?(ЭтаФорма.ЗапретИсходящих,Ложь,ЭтаФорма.ЗаписьИсходящих);

// Сформируем значение для реквизита "Объект.Параметры"
//-------------------------------------------------------------------------------------------------
	Объект.Параметры = ?(ЭтаФорма.ЗапретИсходящих = Истина,"Z","");
	Объект.Параметры = Объект.Параметры + ?(ЭтаФорма.ЗаписьИсходящих = Истина,"R","");
КонецПроцедуры

//-------------------------------------------------------------------------------------------------

&НаКлиенте
Процедура ИсхТелефонПриИзменении(Элемент)
	ИсхДанныеПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИсхТелефонНачалоВыбора(Элемент,ДанныеВыбора,СтандартнаяОбработка)

// Сформируем список телефонов, которые доступны для текущего провайдера
//-------------------------------------------------------------------------------------------------
	ИсхТелефонНачалоВыбораНаСервере(ДанныеВыбора,Объект.ИсхПровайдер);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИсхТелефонНачалоВыбораНаСервере(ДанныеВыбора,ПровСсылка)

// Инициализация переменных
//-------------------------------------------------------------------------------------------------
	ДанныеВыбора = Новый СписокЗначений;

// Сформируем список телефонов, которые доступны для текущего провайдера
//-------------------------------------------------------------------------------------------------
	Если (ЗначениеЗаполнено(ПровСсылка)) Тогда
		ТекстЗапроса = "
		|SELECT	DISTINCT Телефон,Комментарий
		|FROM	ВнешнийИсточникДанных.ТелСервер.Таблица.КаналыИсходящие
		|WHERE	(Провайдер = &ПровСсылка)
		|ORDER	BY Комментарий";

		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("ПровСсылка",ПровСсылка);
		Результат = Запрос.Выполнить().Выбрать();

		Пока (Результат.Следующий()) Цикл
			СтрЗаголовок = ВРег(СокрЛП(Результат.Телефон)) + " - ";
			СтрЗаголовок = СтрЗаголовок + СокрЛП(Результат.Комментарий);
			ДанныеВыбора.Добавить(Результат.Телефон,СокрЛП(СтрЗаголовок));
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

//-------------------------------------------------------------------------------------------------

&НаКлиенте
Процедура ОчередиПередУдалением(Элемент,Отказ)

// Инициализация переменных
//-------------------------------------------------------------------------------------------------
	Доступно = (Элемент.ТекущиеДанные <> Неопределено);
	ОчередьСсылка = Элемент.ТекущиеДанные.Очередь;
	ЭтоЦелевая = Элемент.ТекущиеДанные.Целевая;
	Отказ = Истина;

	Если (Доступно = Ложь) Тогда
		Возврат;
	КонецЕсли;

// Убедимся в том, что агента действительно необходимо удалить из очереди
//-------------------------------------------------------------------------------------------------
	ТекстВопроса = "Вы действительно желаете удалить текущего абонента выбранной из ";
	ТекстВопроса = ТекстВопроса + ?(ЭтоЦелевая,"ЦЕЛЕВОЙ ОЧЕРЕДИ","очереди") + " ?";

	Если (Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да) Тогда
		Возврат;
	КонецЕсли;

// Выполним удаление абонента из выбранной очереди
// Если переданная очередь является целевой для абонента, то очистим реквизит "ОчередьЦелевая"
//-------------------------------------------------------------------------------------------------
	Если (ОчередиПередУдалениемНаСервере(ОчередьСсылка)) Тогда
		Объект.ОчередьЦелевая = ?(ЭтоЦелевая,Неопределено,Объект.ОчередьЦелевая);
		ЭтаФорма.Записать();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ОчередиПередУдалениемНаСервере(ОчередьСсылка)

// Получим ссылку на таблицу "Агенты", в которой текущей абонент подключен к переданной очереди
//-------------------------------------------------------------------------------------------------
	Доступно = ЗначениеЗаполнено(Объект.Телефон);
	Доступно = Доступно И ЗначениеЗаполнено(ОчередьСсылка);

	Если (Доступно = Истина) Тогда
		ТекстЗапроса = "
		|SELECT	TOP 1 Ссылка
		|FROM	ВнешнийИсточникДанных.ТелСервер.Таблица.Агенты
		|WHERE	(Агент = &Телефон) И (Очередь = &ОчередьСсылка)";

		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("ОчередьСсылка",ОчередьСсылка);
		Запрос.УстановитьПараметр("Телефон",СокрЛП(Объект.Телефон));
		Результат = Запрос.Выполнить().Выбрать();

		Если (Результат.Следующий()) Тогда
			Попытка
				Результат.Ссылка.ПолучитьОбъект().Удалить();
				Возврат Истина;
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;

	Возврат Ложь;
КонецФункции

&НаКлиенте
Процедура ОчередиПередНачаломДобавления(Элемент,Отказ,Копирование,Родитель,Группа,Параметр)

// Вызовем форму для выбора очереди
// Если очередь выбрана, то попытаемся добавить текущего абонента в выбранную очередь как агента
//-------------------------------------------------------------------------------------------------
	ОчередьСсылка = ОткрытьФормуМодально("ВнешнийИсточникДанных.ТелСервер.Таблица.ОчередиЛогические.ФормаВыбора");
	ОчередьИмя = ЗначенияСервера.РеквизитВычислить(ОчередьСсылка,"Наименование");
	Доступно = ЗначениеЗаполнено(ОчередьИмя) И (ЭтаФорма.Записать() = Истина);
	Отказ = Истина;

	Если (Доступно = Истина) Тогда
		Результат = Коммуникации.ОчередьДобавитьАгента(Объект.Телефон,ОчередьИмя);
		ЭтаФорма.Записать();

		Если (ЗначениеЗаполнено(Результат)) Тогда
			Предупреждение(Результат);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры



//-------------------------------------------------------------------------------------------------

&НаКлиенте
Процедура ОчередьЦелеваяПриИзменении(Элемент)

// Выполним перезапись объекта при изменении целевой очереди
//-------------------------------------------------------------------------------------------------
	ЭтаФорма.Записать();
КонецПроцедуры

&НаКлиенте
Процедура ОчередьЦелеваяНачалоВыбора(Элемент,ДанныеВыбора,СтандартнаяОбработка)

// Сформируем список очередей, которые возможно выбрать в качестве целевой для абонента
//-------------------------------------------------------------------------------------------------
	ОчередьЦелеваяНачалоВыбораНаСервере(ДанныеВыбора,Объект.Телефон);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОчередьЦелеваяНачалоВыбораНаСервере(ДанныеВыбора,СтрТелефон)

// Инициализация переменных
//-------------------------------------------------------------------------------------------------
	ДанныеВыбора = Новый СписокЗначений;

// Получим список очередей, в которых абонент зарегистрирован как агент
// Исключим из списка очереди, которые не являются целевыми, а также текущую целевую очередь
//-------------------------------------------------------------------------------------------------
	Если (ЗначениеЗаполнено(СтрТелефон)) Тогда
		ТекстЗапроса = "
		|SELECT	DISTINCT Очередь,Очередь.Комментарий AS Комментарий
		|FROM	ВнешнийИсточникДанных.ТелСервер.Таблица.Агенты
		|WHERE	(Агент = &СтрТелефон) И (Очередь.КодПроекта <> """")";

		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("СтрТелефон",СокрЛП(СтрТелефон));
		Результат = Запрос.Выполнить().Выбрать();

		Пока (Результат.Следующий()) Цикл
			СтрЗаголовок = СокрЛП(Результат.Очередь) + ": " + СокрЛП(Результат.Комментарий);
			ДанныеВыбора.Добавить(Результат.Очередь,СокрЛП(СтрЗаголовок));
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
