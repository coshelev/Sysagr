Перем ГлобТелефония Экспорт;

#Область ROMAsterisk
Перем ГлобТелефония1 Экспорт;
#КонецОбласти

Процедура ПередНачаломРаботыСистемы(Отказ)

// Если параметр сеанса "ТекущийПользователь" не заполнен, значит отказываем пользователю во входе
// Если мы попали в этот модуль, значит приложение имеет клиентскую часть и запущено интерактивно
//-------------------------------------------------------------------------------------------------
	ТекущийПользователь = ЗначенияСервера.ПолучитьЗначениеПараметраСеанса("ТекущийПользователь");
	ЗначенияСервера.УстановитьЗначениеПараметраСеанса("ИнтерактивныйРежим",Истина);

	Если (НЕ ЗначениеЗаполнено(ТекущийПользователь)) Тогда
		ТекстСообщения = "Имя пользователя не определено
		|У текущего пользователя недостаточно полномочий на подключение к базе данных.
		|Обратитесь к администратору или координатору системы для добавления пользователя
		|с именем входа [" + СокрЛП(ИмяПользователя()) + "] в справочник ""Пользователи""";

		Предупреждение(ТекстСообщения,5,"Пользователь не зарегистрирован");
		Отказ = Истина;
		Возврат;
	КонецЕсли;

// Сформируем заголовок приложения
// Инициализация глобальных переменных
//-------------------------------------------------------------------------------------------------
	УстановитьКраткийЗаголовокПриложения(СокрЛП(ТекущийПользователь));
	ГлобТелефония = Неопределено;
	
	#Область ROMAsterisk	
	// Инициализация глобальной переменной "ГлобТелефония"
	//-------------------------------------------------------------------------------------------------
	ГлобТелефония1 = Новый Структура;
	ГлобТелефония1.Вставить("Состояние",0);
	ГлобТелефония1.Вставить("Оператор","");
	ГлобТелефония1.Вставить("КаналСистемный","");
	ГлобТелефония1.Вставить("КаналИнициатор","");
	ГлобТелефония1.Вставить("АбонентВнешний","");
	ГлобТелефония1.Вставить("Клиент",Неопределено);
	#КонецОбласти  
	
	
	
	

// Подключаем обработчик ожидания и обработки блокировки
//-------------------------------------------------------------------------------------------------
	БлокировкаОжидание();
	ПодключитьОбработчикОжидания("БлокировкаОжидание",300,Ложь);
КонецПроцедуры

Процедура БлокировкаОжидание() Экспорт

// Получим информацию о текущей или планируемой блокировке
// Если функция "БлокировкаСостояниеПолучить" возвратила Истину, значит время блокировки наступило
// Если функция возвратила строку, значит блокировка запланирована, но время еще не наступило
//-------------------------------------------------------------------------------------------------
	Результат = ЗначенияСервера.БлокировкаСостояниеПолучить();

	Если (ТипЗнч(Результат) = Тип("Строка")) Тогда
		ПоказатьПредупреждение(,Результат,10,"Планируется блокировка базы данных");
	ИначеЕсли (Результат = Истина) Тогда
		ПрекратитьРаботуСистемы();
	КонецЕсли;
КонецПроцедуры

Процедура ПриНачалеРаботыСистемы()
	
	//Покажи список задач
	//--------------------
	ТекущийПользователь = ЗначенияСервера.ПолучитьЗначениеПараметраСеанса("ТекущийПользователь");
	Доступно = ПроцессыСервер.ПриОткрытииПоказыватьЗадачи(ТекущийПользователь);
	Если Доступно Тогда 
	//	ОткрытьФорму("Задача.ЗадачаОбратнаяСвязь.Форма.ФормаСписка");
	КонецЕсли;	
КонецПроцедуры
