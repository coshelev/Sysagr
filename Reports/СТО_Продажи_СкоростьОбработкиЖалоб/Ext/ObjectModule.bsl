
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТекВариант = "ЛояльностьСкоростьОбработкиЖалобДетальный" Тогда 
		ТЗ = ЛояльностьСкоростьОбработкиЖалобДетальный();
		СхемаКомпоновкиДанных = ПолучитьСКД(ТекВариант, "C:\Users\Public\Documents\"+ТекВариант+".xml");
		ВнешниеНаборыДанных = Новый Структура();
		ВнешниеНаборыДанных.Вставить("ТЗ", ТЗ);
	КонецЕсли;  
	
	Если ТекВариант = "ЛояльностьСкоростьОбработкиЖалобТочки" Тогда 
		ТЗ = ЛояльностьСкоростьОбработкиЖалобДетальный();
		СхемаКомпоновкиДанных = ПолучитьСКД(ТекВариант, "C:\Users\Public\Documents\"+ТекВариант+".xml");
		ВнешниеНаборыДанных = Новый Структура();
		ВнешниеНаборыДанных.Вставить("ТЗ", ТЗ);
	КонецЕсли;
	
	//Если ТекВариант = "ОстаткиАвтомобилейСобственныхКомиссионныхСвойстваПодробно" Тогда
	//	ТекстЗапроса = ОстаткиАвтомобилейСобственныхКомиссионныхСвойстваПодробно();
	//	Парам = Новый Структура("Окончание", 	Период.ДатаОкончания);	
	//	РезультатЗапроса = ЗапросВыполнить(ТекстЗапроса, Парам, "C:\Users\Public\Documents\"+ТекВариант+".sql"); 
	//	Если РезультатЗапроса.Пустой() Тогда
	//		Возврат
	//	КонецЕсли;	
	//	СхемаКомпоновкиДанных = ПолучитьСКД(ТекВариант, "C:\Users\Public\Documents\"+ТекВариант+".xml");
	//	ВнешниеНаборыДанных = Новый Структура();
	//	ВнешниеНаборыДанных.Вставить("ТЗ", РезультатЗапроса);
	//КонецЕсли;
    	
	КомпоновщикМакет 	= Новый КомпоновщикМакетаКомпоновкиДанных;
	Макет 				= КомпоновщикМакет.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки, ДанныеРасшифровки);
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(Макет, ВнешниеНаборыДанных, ДанныеРасшифровки, Истина);
	ПроцессорВывода 	= Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	ДокументРезультат.ПоказатьУровеньГруппировокСтрок(0);	
КонецПроцедуры    

Функция ПолучитьСКД(ИмяМакета, ИмяФайла = "") Экспорт
	
	СхемаКомпоновкиДанных = Неопределено;
	
	Если ЗначениеЗаполнено(ИмяФайла) Тогда
		Ф = Новый Файл(ИмяФайла);
		Если Ф.Существует() Тогда			
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.ОткрытьФайл(ИмяФайла);
			СхемаКомпоновкиДанных = СериализаторXDTO.ПрочитатьXML(ЧтениеXML, Тип("СхемаКомпоновкиДанных"));
			ЧтениеXML.Закрыть();
			Возврат СхемаКомпоновкиДанных;
		КонецЕсли;
	КонецЕсли;

	Доступно = 		ТипЗнч(ИмяМакета) = Тип("Строка")
				И 	ЗначениеЗаполнено(ИмяМакета);
	Если Не Доступно Тогда
		Возврат СхемаКомпоновкиДанных;
	КонецЕсли;
	СхемаКомпоновкиДанных = ПолучитьМакет(ИмяМакета);
	Возврат СхемаКомпоновкиДанных;
КонецФункции

Функция ЗапросВыполнить(Текст, Параметры, ИмяФайла = "");
	
	//Значение по умолчанию - пустой результат запроса
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК Поле1
	|ГДЕ
	|	ИСТИНА = ЛОЖЬ";
	РезультатЗапроса = Запрос.Выполнить();
	
	Доступно = Истина;
	Доступно = Доступно И ТипЗнч(Текст) = Тип("Строка");
	Доступно = Доступно И ТипЗнч(Параметры) = Тип("Структура");
	
	Если Не Доступно Тогда
		Возврат РезультатЗапроса;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Для Каждого i Из Параметры Цикл
		Запрос.УстановитьПараметр(i.key, i.value);
	КонецЦикла;

	Запрос.Текст = Текст;
	
	Если ЗначениеЗаполнено(ИмяФайла) Тогда
		Ф = Новый Файл(ИмяФайла);
		Если Ф.Существует() Тогда
			ТекстДок = Новый ТекстовыйДокумент();
			ТекстДок.Прочитать(ИмяФайла);
			ТекстИзФайла = ТекстДок.ПолучитьТекст();
			Если СтрДлина(ТекстИзФайла)>0 Тогда
				Запрос.Текст = ТекстИзФайла;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса;
КонецФункции   

Функция ЛояльностьСкоростьОбработкиЖалобДетальный() 

	Тек = ЗначенияСервера.ТекущаяДатаСервер();
	
	//Сформируй таблицу праздников
	//----------------------------
	Запрос = Новый Запрос("ВЫБРАТЬ Дата ИЗ РегистрСведений.Праздники ГДЕ Дата МЕЖДУ &Начало и &Тек"); 
	Запрос.УстановитьПараметр("Начало", Период.ДатаНачала);      
	Запрос.УстановитьПараметр("Тек",	Тек);
	РезЗапроса 	= Запрос.Выполнить();     	
	Праздники 	= ?(РезЗапроса.Пустой(), Новый Массив(), РезЗапроса.Выгрузить().ВыгрузитьКолонку(0)); 
	 
	Запрос = Новый Запрос();
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	А01.Ссылка КАК А01Ссылка,
	|	ЕСТЬNULL(А11.Ссылка, ЗНАЧЕНИЕ(Задача.ЗадачаОбратнаяСвязь.ПустаяСсылка)) КАК А11Ссылка,
	|	ЕСТЬNULL(А02.Ссылка, ЗНАЧЕНИЕ(Задача.ЗадачаОбратнаяСвязь.ПустаяСсылка)) КАК А02Ссылка,
	|	ЕСТЬNULL(А12.Ссылка, ЗНАЧЕНИЕ(Задача.ЗадачаОбратнаяСвязь.ПустаяСсылка)) КАК А12Ссылка,
	|	ЕСТЬNULL(А03.Ссылка, ЗНАЧЕНИЕ(Задача.ЗадачаОбратнаяСвязь.ПустаяСсылка)) КАК А03Ссылка,
	|	ЕСТЬNULL(А13.Ссылка, ЗНАЧЕНИЕ(Задача.ЗадачаОбратнаяСвязь.ПустаяСсылка)) КАК А13Ссылка,
	|	ЕСТЬNULL(А04.Ссылка, ЗНАЧЕНИЕ(Задача.ЗадачаОбратнаяСвязь.ПустаяСсылка)) КАК А04Ссылка,
	|	ЕСТЬNULL(А14.Ссылка, ЗНАЧЕНИЕ(Задача.ЗадачаОбратнаяСвязь.ПустаяСсылка)) КАК А14Ссылка,
	|	ЕСТЬNULL(А05.Ссылка, ЗНАЧЕНИЕ(Задача.ЗадачаОбратнаяСвязь.ПустаяСсылка)) КАК А05Ссылка,
	|	ЕСТЬNULL(А15.Ссылка, ЗНАЧЕНИЕ(Задача.ЗадачаОбратнаяСвязь.ПустаяСсылка)) КАК А15Ссылка,
	|	А01.Дата КАК А01С,
	|	ВЫБОР
	|		КОГДА А01.Ссылка ЕСТЬ NULL
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		КОГДА ЕСТЬNULL(А01.ДатаВыполнения, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &Тек
	|		ИНАЧЕ ЕСТЬNULL(А01.ДатаВыполнения, ДАТАВРЕМЯ(1, 1, 1))
	|	КОНЕЦ КАК А01Ф,
	|	ЕСТЬNULL(А11.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК А11С,
	|	ВЫБОР
	|		КОГДА А11.Ссылка ЕСТЬ NULL
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		КОГДА ЕСТЬNULL(А11.ДатаВыполнения, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &Тек
	|		ИНАЧЕ ЕСТЬNULL(А11.ДатаВыполнения, ДАТАВРЕМЯ(1, 1, 1))
	|	КОНЕЦ КАК А11Ф,
	|	ЕСТЬNULL(А02.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК А02С,
	|	ВЫБОР
	|		КОГДА А02.Ссылка ЕСТЬ NULL
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		КОГДА ЕСТЬNULL(А02.ДатаВыполнения, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &Тек
	|		ИНАЧЕ ЕСТЬNULL(А02.ДатаВыполнения, ДАТАВРЕМЯ(1, 1, 1))
	|	КОНЕЦ КАК А02Ф,
	|	ЕСТЬNULL(А12.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК А12С,
	|	ВЫБОР
	|		КОГДА А12.Ссылка ЕСТЬ NULL
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		КОГДА ЕСТЬNULL(А12.ДатаВыполнения, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &Тек
	|		ИНАЧЕ ЕСТЬNULL(А12.ДатаВыполнения, ДАТАВРЕМЯ(1, 1, 1))
	|	КОНЕЦ КАК А12Ф,
	|	ЕСТЬNULL(А03.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК А03С,
	|	ВЫБОР
	|		КОГДА А03.Ссылка ЕСТЬ NULL
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		КОГДА ЕСТЬNULL(А03.ДатаВыполнения, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &Тек
	|		ИНАЧЕ ЕСТЬNULL(А03.ДатаВыполнения, ДАТАВРЕМЯ(1, 1, 1))
	|	КОНЕЦ КАК А03Ф,
	|	ЕСТЬNULL(А13.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК А13С,
	|	ВЫБОР
	|		КОГДА А13.Ссылка ЕСТЬ NULL
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		КОГДА ЕСТЬNULL(А13.ДатаВыполнения, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &Тек
	|		ИНАЧЕ ЕСТЬNULL(А13.ДатаВыполнения, ДАТАВРЕМЯ(1, 1, 1))
	|	КОНЕЦ КАК А13Ф,
	|	ЕСТЬNULL(А04.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК А04С,
	|	ВЫБОР
	|		КОГДА А04.Ссылка ЕСТЬ NULL
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		КОГДА ЕСТЬNULL(А04.ДатаВыполнения, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &Тек
	|		ИНАЧЕ ЕСТЬNULL(А04.ДатаВыполнения, ДАТАВРЕМЯ(1, 1, 1))
	|	КОНЕЦ КАК А04Ф,
	|	ЕСТЬNULL(А14.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК А14С,
	|	ВЫБОР
	|		КОГДА А14.Ссылка ЕСТЬ NULL
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		КОГДА ЕСТЬNULL(А14.ДатаВыполнения, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &Тек
	|		ИНАЧЕ ЕСТЬNULL(А14.ДатаВыполнения, ДАТАВРЕМЯ(1, 1, 1))
	|	КОНЕЦ КАК А14Ф,
	|	ЕСТЬNULL(А05.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК А05С,
	|	ВЫБОР
	|		КОГДА А05.Ссылка ЕСТЬ NULL
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		КОГДА ЕСТЬNULL(А05.ДатаВыполнения, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &Тек
	|		ИНАЧЕ ЕСТЬNULL(А05.ДатаВыполнения, ДАТАВРЕМЯ(1, 1, 1))
	|	КОНЕЦ КАК А05Ф,
	|	ЕСТЬNULL(А15.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК А15С,
	|	ВЫБОР
	|		КОГДА А15.Ссылка ЕСТЬ NULL
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		КОГДА ЕСТЬNULL(А15.ДатаВыполнения, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &Тек
	|		ИНАЧЕ ЕСТЬNULL(А15.ДатаВыполнения, ДАТАВРЕМЯ(1, 1, 1))
	|	КОНЕЦ КАК А15Ф
	|ПОМЕСТИТЬ ВТ01
	|ИЗ
	|	Задача.ЗадачаОбратнаяСвязь КАК А01
	|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаОбратнаяСвязь КАК А11
	|		ПО А01.БизнесПроцесс = А11.БизнесПроцесс
	|			И (А11.ТочкаМаршрута = ЗНАЧЕНИЕ(БизнесПроцесс.ОбратнаяСвязьЛояльности.ТочкаМаршрута.ПроверитьОбработаннуюНегативнуюАнкету_1))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаОбратнаяСвязь КАК А02
	|		ПО (А11.БизнесПроцесс = А02.БизнесПроцесс)
	|			И (А02.ТочкаМаршрута = ЗНАЧЕНИЕ(БизнесПроцесс.ОбратнаяСвязьЛояльности.ТочкаМаршрута.ОбработатьНегативнуюАнкету_2))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаОбратнаяСвязь КАК А12
	|		ПО А01.БизнесПроцесс = А12.БизнесПроцесс
	|			И (А12.ТочкаМаршрута = ЗНАЧЕНИЕ(БизнесПроцесс.ОбратнаяСвязьЛояльности.ТочкаМаршрута.ПроверитьОбработаннуюНегативнуюАнкету_2))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаОбратнаяСвязь КАК А03
	|		ПО (А11.БизнесПроцесс = А03.БизнесПроцесс)
	|			И (А03.ТочкаМаршрута = ЗНАЧЕНИЕ(БизнесПроцесс.ОбратнаяСвязьЛояльности.ТочкаМаршрута.ОбработатьНегативнуюАнкету_3))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаОбратнаяСвязь КАК А13
	|		ПО А01.БизнесПроцесс = А13.БизнесПроцесс
	|			И (А13.ТочкаМаршрута = ЗНАЧЕНИЕ(БизнесПроцесс.ОбратнаяСвязьЛояльности.ТочкаМаршрута.ПроверитьОбработаннуюНегативнуюАнкету_3))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаОбратнаяСвязь КАК А04
	|		ПО (А11.БизнесПроцесс = А04.БизнесПроцесс)
	|			И (А04.ТочкаМаршрута = ЗНАЧЕНИЕ(БизнесПроцесс.ОбратнаяСвязьЛояльности.ТочкаМаршрута.ОбработатьНегативнуюАнкету_4))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаОбратнаяСвязь КАК А14
	|		ПО А01.БизнесПроцесс = А14.БизнесПроцесс
	|			И (А14.ТочкаМаршрута = ЗНАЧЕНИЕ(БизнесПроцесс.ОбратнаяСвязьЛояльности.ТочкаМаршрута.ПроверитьОбработаннуюНегативнуюАнкету_4))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаОбратнаяСвязь КАК А05
	|		ПО (А11.БизнесПроцесс = А05.БизнесПроцесс)
	|			И (А04.ТочкаМаршрута = ЗНАЧЕНИЕ(БизнесПроцесс.ОбратнаяСвязьЛояльности.ТочкаМаршрута.ОбработатьНегативнуюАнкету_5))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаОбратнаяСвязь КАК А15
	|		ПО А01.БизнесПроцесс = А15.БизнесПроцесс
	|			И (А15.ТочкаМаршрута = ЗНАЧЕНИЕ(БизнесПроцесс.ОбратнаяСвязьЛояльности.ТочкаМаршрута.ПроверитьОбработаннуюНегативнуюАнкету_5))
	|ГДЕ
	|	А01.Дата МЕЖДУ &Начало И &Окончание
	|	И ТИПЗНАЧЕНИЯ(А01.БизнесПроцесс) = ТИП(БизнесПроцесс.ОбратнаяСвязьЛояльности)
	|	И А01.ТочкаМаршрута = ЗНАЧЕНИЕ(БизнесПроцесс.ОбратнаяСвязьЛояльности.ТочкаМаршрута.ОбработатьНегативнуюАнкету_1)  
	//|	И А01.БизнесПроцесс.СигнатураПродажи = ""SK#d524cac3-49bf-472c-8cf3-927388309718""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.А01Ссылка.БизнесПроцесс.СигнатураПродажи КАК Сигнатура,
	|	Т.А01Ссылка.БизнесПроцесс КАК БизнесПроцесс,
	|	Т.А01Ссылка.БизнесПроцесс.Точка КАК Точка,
	|	ЕСТЬNULL(Продажи.Номер, """") КАК Номер,
	|	Т.А01Ссылка КАК А01Ссылка,
	|	Т.А11Ссылка КАК А11Ссылка,
	|	Т.А02Ссылка КАК А02Ссылка,
	|	Т.А12Ссылка КАК А12Ссылка,
	|	Т.А03Ссылка КАК А03Ссылка,
	|	Т.А13Ссылка КАК А13Ссылка,
	|	Т.А04Ссылка КАК А04Ссылка,
	|	Т.А14Ссылка КАК А14Ссылка,
	|	Т.А05Ссылка КАК А05Ссылка,
	|	Т.А15Ссылка КАК А15Ссылка,
	|	Т.А01С КАК А01С,
	|	Т.А01Ф КАК А01Ф,
	|	Т.А11С КАК А11С,
	|	Т.А11Ф КАК А11Ф,
	|	Т.А02С КАК А02С,
	|	Т.А02Ф КАК А02Ф,
	|	Т.А12С КАК А12С,
	|	Т.А12Ф КАК А12Ф,
	|	Т.А03С КАК А03С,
	|	Т.А03Ф КАК А03Ф,
	|	Т.А13С КАК А13С,
	|	Т.А13Ф КАК А13Ф,
	|	Т.А04С КАК А04С,
	|	Т.А04Ф КАК А04Ф,
	|	Т.А14С КАК А14С,
	|	Т.А14Ф КАК А14Ф,
	|	Т.А05С КАК А05С,
	|	Т.А05Ф КАК А05Ф,
	|	Т.А15С КАК А15С,
	|	Т.А15Ф КАК А15Ф,
	|	РАЗНОСТЬДАТ(Т.А01С, Т.А01Ф, МИНУТА) КАК РазнМинутА01,
	|	РАЗНОСТЬДАТ(Т.А11С, Т.А11Ф, МИНУТА) КАК РазнМинутА11,
	|	РАЗНОСТЬДАТ(Т.А02С, Т.А02Ф, МИНУТА) КАК РазнМинутА02,
	|	РАЗНОСТЬДАТ(Т.А12С, Т.А12Ф, МИНУТА) КАК РазнМинутА12,
	|	РАЗНОСТЬДАТ(Т.А03С, Т.А03Ф, МИНУТА) КАК РазнМинутА03,
	|	РАЗНОСТЬДАТ(Т.А13С, Т.А13Ф, МИНУТА) КАК РазнМинутА13,
	|	РАЗНОСТЬДАТ(Т.А04С, Т.А04Ф, МИНУТА) КАК РазнМинутА04,
	|	РАЗНОСТЬДАТ(Т.А14С, Т.А14Ф, МИНУТА) КАК РазнМинутА14,
	|	РАЗНОСТЬДАТ(Т.А05С, Т.А05Ф, МИНУТА) КАК РазнМинутА05,
	|	РАЗНОСТЬДАТ(Т.А15С, Т.А15Ф, МИНУТА) КАК РазнМинутА15,
	|	РАЗНОСТЬДАТ(Т.А01С, Т.А01Ф, ЧАС) КАК ЧасА01,
	|	РАЗНОСТЬДАТ(Т.А11С, Т.А11Ф, ЧАС) КАК ЧасА11,
	|	РАЗНОСТЬДАТ(Т.А02С, Т.А02Ф, ЧАС) КАК ЧасА02,
	|	РАЗНОСТЬДАТ(Т.А12С, Т.А12Ф, ЧАС) КАК ЧасА12,
	|	РАЗНОСТЬДАТ(Т.А03С, Т.А03Ф, ЧАС) КАК ЧасА03,
	|	РАЗНОСТЬДАТ(Т.А13С, Т.А13Ф, ЧАС) КАК ЧасА13,
	|	РАЗНОСТЬДАТ(Т.А04С, Т.А04Ф, ЧАС) КАК ЧасА04,
	|	РАЗНОСТЬДАТ(Т.А14С, Т.А14Ф, ЧАС) КАК ЧасА14,
	|	РАЗНОСТЬДАТ(Т.А05С, Т.А05Ф, ЧАС) КАК ЧасА05,
	|	РАЗНОСТЬДАТ(Т.А15С, Т.А15Ф, ЧАС) КАК ЧасА15
	|ИЗ
	|	ВТ01 КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Продажи КАК Продажи
	|		ПО (Продажи.Сигнатура = Т.А01Ссылка.БизнесПроцесс.СигнатураПродажи)";
	
	Запрос.УстановитьПараметр("Начало", 	Период.ДатаНачала);
	Запрос.УстановитьПараметр("Окончание", 	Период.ДатаОкончания);
	Запрос.УстановитьПараметр("Тек",		ЗначенияСервера.ТекущаяДатаСервер());
	
	РезультатЗапроса = Запрос.Выполнить(); 
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый ТаблицаЗначений();
	КонецЕсли;                          
	
	ТЗ = РезультатЗапроса.Выгрузить();  
	ТЗ.Колонки.Добавить("РабочихЧасовОбработки",	Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(10,0)));
	ТЗ.Колонки.Добавить("РабочихЧасовПроверки",		Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(10,0)));   
	ТЗ.Колонки.Добавить("КоличествоПроверок",		Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(5,0)));	
	
	Для Каждого i Из ТЗ Цикл 
		
		//Сообщить("Старт i.ЧасА01");			
		i.ЧасА01 = ?(i.ЧасА01 = 0, i.ЧасА01, КоличествоРабочихЧасов(i.А01С, i.А01Ф, Праздники, i.Точка));	// Рабочих часов обработки, итерация 1 
		//Сообщить("Финиш i.ЧасА011");
		//Сообщить("Старт i.ЧасА11");
		i.ЧасА11 = ?(i.ЧасА11 = 0, i.ЧасА11, КоличествоРабочихЧасов(i.А11С, i.А11Ф, Праздники,));   	// Рабочих часов проверки,	итерация 1  
		//Сообщить(СтрШаблон("i.ЧасА11 = %1", i.ЧасА11));
		//Сообщить("Финиш i.ЧасА11");

			
		i.ЧасА02 = ?(i.ЧасА02 = 0, i.ЧасА02, КоличествоРабочихЧасов(i.А02С, i.А02Ф, Праздники,	i.Точка)); 
		//Сообщить("Старт i.ЧасА12");
		i.ЧасА12 = ?(i.ЧасА12 = 0, i.ЧасА12, КоличествоРабочихЧасов(i.А12С, i.А12Ф, Праздники)); 
		//Сообщить("Финиш i.ЧасА12");
			
		i.ЧасА03 = ?(i.ЧасА03 = 0, i.ЧасА03, КоличествоРабочихЧасов(i.А03С, i.А03Ф, Праздники,	i.Точка));  
		//Сообщить("Старт i.ЧасА13");
		i.ЧасА13 = ?(i.ЧасА13 = 0, i.ЧасА13, КоличествоРабочихЧасов(i.А13С, i.А13Ф, Праздники)); 
		//Сообщить("Финиш i.ЧасА13");
		
		
		i.ЧасА04 = ?(i.ЧасА04 = 0, i.ЧасА04, КоличествоРабочихЧасов(i.А04С, i.А04Ф, Праздники,	i.Точка)); 
		i.ЧасА14 = ?(i.ЧасА14 = 0, i.ЧасА14, КоличествоРабочихЧасов(i.А14С, i.А14Ф, Праздники)); 
		
        i.ЧасА05 = ?(i.ЧасА05 = 0, i.ЧасА05, КоличествоРабочихЧасов(i.А05С, i.А05Ф, Праздники,	i.Точка)); 
		i.ЧасА15 = ?(i.ЧасА15 = 0, i.ЧасА15, КоличествоРабочихЧасов(i.А15С, i.А15Ф, Праздники)); 
			
		i.РабочихЧасовОбработки = i.ЧасА01 + i.ЧасА02 + i.ЧасА03 + i.ЧасА04 + i.ЧасА05;
		i.РабочихЧасовПроверки	= i.ЧасА11 + i.ЧасА12 + i.ЧасА13 + i.ЧасА14 + i.ЧасА15;	 
		
		//Отладка 
		//Сообщить(СтрШаблон("i.А01С = %1, i.А01Ф = %2, i.А02С = %3, i.А02Ф = %4, i.А03С = %5, i.А03Ф = %6, i.А04С = %7, i.А04Ф = %8, i.А05С = %9, i.А05Ф = %10", i.А01С, i.А01Ф, i.А02С, i.А02Ф, i.А03С, i.А03Ф, i.А04С, i.А04Ф, i.А05С, i.А05Ф));
		//Сообщить(СтрШаблон("i.А11С = %1, i.А11Ф = %2, i.А12С = %3, i.А12Ф = %4, i.А13С = %5, i.А13Ф = %6, i.А14С = %7, i.А14Ф = %8, i.А15С = %9, i.А15Ф = %10", i.А11С, i.А11Ф, i.А12С, i.А12Ф, i.А13С, i.А13Ф, i.А14С, i.А14Ф, i.А15С, i.А15Ф));
		//Сообщить(СтрШаблон("i.ЧасА01=%1; i.ЧасА11=%2; i.ЧасА02=%3; i.ЧасА12=%4; i.ЧасА03=%5; i.ЧасА13=%6; i.ЧасА04=%7; i.ЧасА14=%8; i.ЧасА05=%9; i.ЧасА15=%10",i.ЧасА01, i.ЧасА11, i.ЧасА02, i.ЧасА12, i.ЧасА03, i.ЧасА13, i.ЧасА04, i.ЧасА14,  i.ЧасА05, i.ЧасА15));  					
		//Сообщить(СтрШаблон("i.РабочихЧасовОбработки =%1; i.РабочихЧасовПроверки = %2", i.РабочихЧасовОбработки, i.РабочихЧасовПроверки));
		
		Если i.А11Ссылка = Задачи.ЗадачаОбратнаяСвязь.ПустаяСсылка() Тогда
			i.КоличествоПроверок = 0;
			Продолжить;
		КонецЕсли;    
		
		Если i.А12Ссылка = Задачи.ЗадачаОбратнаяСвязь.ПустаяСсылка() Тогда
			i.КоличествоПроверок = 1;
			Продолжить;
		КонецЕсли;  
		
		Если i.А13Ссылка = Задачи.ЗадачаОбратнаяСвязь.ПустаяСсылка() Тогда
			i.КоличествоПроверок = 2;
			Продолжить;
		КонецЕсли; 	
		
		Если i.А14Ссылка = Задачи.ЗадачаОбратнаяСвязь.ПустаяСсылка() Тогда
			i.КоличествоПроверок = 3;
			Продолжить;
		КонецЕсли; 
		
		Если i.А15Ссылка = Задачи.ЗадачаОбратнаяСвязь.ПустаяСсылка() Тогда
			i.КоличествоПроверок = 4;
			Продолжить;
		КонецЕсли; 
		
		i.КоличествоПроверок = 5;
		
	КонецЦикла;
	
	Возврат ТЗ;
КонецФункции  

Функция КоличествоРабочихЧасов(ДатаНачала, ДатаОкончания, Праздники, Точка = "")
	//Возвращает разность дат в рабочих часах. Начало и Окончание должны относится к разным дням
	//Считаем что день 1...5 - рабочие с 08 до 17.00, день 6 и 7, а также выходные - нерабочие
	//Определи количество дней
	//----------------------------------------------------------------------------------------- 
	
			//Сообщить(СтрШаблон("ДатаНачала = %1, ДатаОкончания = %2", ДатаНачала, ДатаОкончания));
	
			Окончание 				= НачалоДня(ДатаОкончания);
			КоличествоРабочихДней 	= 0;    
			КоличествоРабочихЧасов 	= 0;
			
			КоличествоПолныхРабочихДней = 0; //Дни, в которые длительность периода задачи составляет 8 часов  
			КоличествоРабочихЧасовВПоследнемРабочемДне = 0;  
			
			ЕстьПредыдущиеРабочиеДни = Ложь;
			Тек = ДатаНачала - 1*24*60*60;
			Пока Тек <= Окончание Цикл
				
				//Перейди к следующим суткам
				//---------------------------
				Тек	= Тек + 1*24*60*60;
	
				//Отбрось праздники
				//-----------------
				ДеньНедели 			= ДеньНедели(Тек); 
				ДеньНедели          = ?(Праздники.Найти(Тек) = Неопределено, ДеньНедели, 7);   
				Если ДеньНедели > 5 Тогда				
					Продолжить;
				КонецЕсли; 
				
				Доступно = 		СтрНайти(Точка, "Уфа")>0 
							ИЛИ СтрНайти(Точка, "Челябинск");
				НормативныйЧасНачала 		= ?(Доступно, 360,  480);			//В часах 6 и 8 соответственно (6*60=360 и 8*60=480)
				НормативныйЧасОкончания		= ?(Доступно, 900,	1020);          //В часах 15 и 17 соответственно (15*60=900 и 17*60=1020) 

				
				//Если текущий день не совпадает с последним, значит задача длилась весь рабочий день
				//-----------------------------------------------------------------------------------
				Если Тек < Окончание Тогда
					//КоличествоПолныхРабочихДней = КоличествоПолныхРабочихДней + 1;
					ЧасНачала = Час(Тек)*60 + Минута(Тек); // В минутах 
						// Сообщить(СтрШаблон("0.1. ЧасНачала= %1", ЧасНачала));	
					ЧасНачала = ?(ЧасНачала > НормативныйЧасОкончания, НормативныйЧасОкончания, ЧасНачала); 
						// Сообщить(СтрШаблон("0.1. ЧасНачала = %1", ЧасНачала));
					ЧасНачала = ?(ЧасНачала < НормативныйЧасНачала,	 НормативныйЧасНачала,	ЧасНачала); 
				    	// Сообщить(СтрШаблон("0.1. ЧасНачала = %1", ЧасНачала));	
                    КоличествоРабочихЧасов = КоличествоРабочихЧасов + Окр((НормативныйЧасОкончания - ЧасНачала)/60, 2); 
						// Сообщить(СтрШаблон("0.КоличествоРабочихЧасов = %1", КоличествоРабочихЧасов)); 
					ЕстьПредыдущиеРабочиеДни = Истина;
					Продолжить;
				КонецЕсли;
				
				//Если оказались здесь, значит текущий день - это последний день
				//---------------------------------------------------------------  
				
				//Если были предыдущие рабочие дни, значит час начала совпадает с нормативным  
				
				ЧасНачала = Час(Тек)*60 + Минута(Тек); // В минутах 
				ЧасНачала = ?(ЕстьПредыдущиеРабочиеДни, НормативныйЧасНачала, ЧасНачала);
					//Сообщить(СтрШаблон("1. ЧасНачала= %1", ЧасНачала));	
				ЧасНачала = ?(ЧасНачала > НормативныйЧасОкончания, НормативныйЧасОкончания, ЧасНачала); 
					//Сообщить(СтрШаблон("2. ЧасНачала = %1", ЧасНачала));
				ЧасНачала = ?(ЧасНачала < НормативныйЧасНачала,	 НормативныйЧасНачала,	ЧасНачала); 
				    //Сообщить(СтрШаблон("3. ЧасНачала = %1", ЧасНачала));
					
				ЧасОкончания = Час(ДатаОкончания)*60 + Минута( ДатаОкончания);	
					//Сообщить(СтрШаблон("1. ЧасОкончания = %1", ЧасОкончания));	
				ЧасОкончания = ?(ЧасОкончания > НормативныйЧасОкончания, НормативныйЧасОкончания, 	ЧасОкончания); 
					//Сообщить(СтрШаблон("2. ЧасОкончания = %1", ЧасОкончания));
				ЧасОкончания = ?(ЧасОкончания < НормативныйЧасНачала,	 НормативныйЧасНачала,		ЧасОкончания); 
				    //Сообщить(СтрШаблон("3. ЧасОкончания = %1", ЧасОкончания));  
						
				КоличествоРабочихЧасов = КоличествоРабочихЧасов + Окр((ЧасОкончания - ЧасНачала)/60, 2);      
				//Сообщить(СтрШаблон("1.КоличествоРабочихЧасов = %1", КоличествоРабочихЧасов));

				//Сообщить(СтрШаблон("НормативныйЧасНачала = %1; НормативныйЧасОкончания = %2", НормативныйЧасНачала, НормативныйЧасОкончания));
				//Сообщить(СтрШаблон("Час(Тек)= %1; ЧасОкончания = %2; КоличествоРабочихЧасовВПоследнемРабочемДне = %3", Час(Тек), ЧасОкончания, КоличествоРабочихЧасовВПоследнемРабочемДне));
				Прервать;
				
			КонецЦикла;
			
		КоличествоРабочихЧасов = Окр(КоличествоРабочихЧасов, 0, РежимОкругления.Окр15как10);
		Возврат КоличествоРабочихЧасов;
КонецФункции  		
		
		
