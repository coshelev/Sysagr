
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("queue_name", 	ЭтотОбъект.ТекущаяОчередь.Наименование);	
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Период",		ЭтотОбъект.Период);
		
	Запрос = Новый Запрос();
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	Т.Id КАК Id,
	|	Т.eventtime КАК eventtime,
	|	Т.member_name КАК member_name,
	|	ВЫБОР
	|		КОГДА Т.old_value = 1
	|			ТОГДА ""Пауза""
	|		ИНАЧЕ ""Активен""
	|	КОНЕЦ КАК old_value,
	|	ВЫБОР
	|		КОГДА Т.new_value = 1
	|			ТОГДА ""Пауза""
	|		ИНАЧЕ ""Активен""
	|	КОНЕЦ КАК new_value,
	|	ВЫБОР
	|		КОГДА Т.old_value = 0
	|				И Т.new_value = 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИзРаботыВПаузу,
	|	ВЫБОР
	|		КОГДА Т.old_value = 1
	|				И Т.new_value = 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИзПаузыВРаботу
	|ИЗ
	|	ВнешнийИсточникДанных.AsteriskNnov.Таблица.АгентыИстория КАК Т
	|ГДЕ
	|	Т.queue_name = &queue_name
	|	И Т.eventtime МЕЖДУ &Начало И &Окончание
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	А.Id,
	|	&Начало,
	|	А.member_name,
	|	ВЫБОР
	|		КОГДА А.old_value = 1
	|			ТОГДА ""Пауза""
	|		ИНАЧЕ ""Активен""
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА А.new_value = 1
	|			ТОГДА ""Пауза""
	|		ИНАЧЕ ""Активен""
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА А.old_value = 0
	|				И А.new_value = 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА А.old_value = 1
	|				И А.new_value = 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|ИЗ
	|	ВнешнийИсточникДанных.AsteriskNnov.Таблица.АгентыИстория КАК А
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Т.member_name КАК member_name,
	|			МАКСИМУМ(Т.eventtime) КАК Период
	|		ИЗ
	|			ВнешнийИсточникДанных.AsteriskNnov.Таблица.АгентыИстория КАК Т
	|		ГДЕ
	|			Т.queue_name = &queue_name
	|			И Т.eventtime <= &Начало
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Т.member_name) КАК Т
	|		ПО А.member_name = Т.member_name
	|			И А.eventtime = Т.Период
	|ГДЕ
	|	А.queue_name = &queue_name";
	Запрос.УстановитьПараметр("Начало", 	Период.ДатаНачала);          
	Запрос.УстановитьПараметр("Окончание",	Период.ДатаОкончания);
  	Запрос.УстановитьПараметр("queue_name", ТекущаяОчередь.Наименование); 	
	РезультатЗапроса = ОбщегоНазначения.ВыполнитьЗапрос(Запрос);
	Если РезультатЗапроса.Пустой() Тогда
		Возврат
	КонецЕсли;
	ТЗ = РезультатЗапроса.Выгрузить();
		
	//Запрос = Новый Запрос();
	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	Т.Id КАК Id,
	//|	Т.eventtime КАК eventtime,
	//|	Т.member_name КАК member_name,
	//|	ВЫБОР
	//|		КОГДА Т.old_value = 1
	//|			ТОГДА ""Пауза""
	//|		ИНАЧЕ ""Активен""
	//|	КОНЕЦ КАК old_value,
	//|	ВЫБОР
	//|		КОГДА Т.new_value = 1
	//|			ТОГДА ""Пауза""
	//|		ИНАЧЕ ""Активен""
	//|	КОНЕЦ КАК new_value,
	//|	ВЫБОР
	//|		КОГДА Т.old_value = 0
	//|				И Т.new_value = 1
	//|			ТОГДА ИСТИНА
	//|		ИНАЧЕ ЛОЖЬ
	//|	КОНЕЦ КАК ИзРаботыВПаузу,
	//|	ВЫБОР
	//|		КОГДА Т.old_value = 1
	//|				И Т.new_value = 0
	//|			ТОГДА ИСТИНА
	//|		ИНАЧЕ ЛОЖЬ
	//|	КОНЕЦ КАК ИзПаузыВРаботу
	//|ИЗ
	//|	ВнешнийИсточникДанных.AsteriskNnov.Таблица.АгентыИстория КАК Т
	//|ГДЕ
	//|	Т.queue_name = &queue_name
	//|	И Т.eventtime МЕЖДУ &Начало И &Окончание";
	//Запрос.УстановитьПараметр("queue_name", 		ТекущаяОчередь.Наименование);
	//Запрос.УстановитьПараметр("Начало",		Период.ДатаНачала);
	//Запрос.УстановитьПараметр("Окончание",	Период.ДатаОкончания);
	//
	//РезультатЗапроса = ОбщегоНазначения.ВыполнитьЗапрос(Запрос);
	//Если РезультатЗапроса.Пустой() Тогда
	//	Возврат
	//КонецЕсли;
	
	ТЗ = РезультатЗапроса.Выгрузить();
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЗ.Id КАК Id,
	|	ТЗ.eventtime КАК eventtime,
	|	ТЗ.member_name КАК member_name,
	|	ТЗ.old_value КАК old_value,
	|	ТЗ.new_value КАК new_value,
	|	ТЗ.ИзРаботыВПаузу КАК ИзРаботыВПаузу,
	|	ТЗ.ИзПаузыВРаботу КАК ИзПаузыВРаботу
	|ПОМЕСТИТЬ Т1
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т1.member_name КАК member_name,
	|	МИНИМУМ(Т1.Id) КАК Id
	|ПОМЕСТИТЬ ВТА1_ПервоеСобытие
	|ИЗ
	|	Т1 КАК Т1
	|
	|СГРУППИРОВАТЬ ПО
	|	Т1.member_name
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 КАК Id,
	|	&Начало КАК eventtime,
	|	ВТА1.member_name КАК member_name,
	|	ВЫБОР
	|		КОГДА Т1.old_value = ""Пауза""
	|			ТОГДА ""Активен""
	|		ИНАЧЕ ""Пауза""
	|	КОНЕЦ КАК old_value,
	|	ВЫБОР
	|		КОГДА Т1.new_value = ""Пауза""
	|			ТОГДА ""Активен""
	|		ИНАЧЕ ""Пауза""
	|	КОНЕЦ КАК new_value,
	|	НЕ Т1.ИзРаботыВПаузу КАК ИзРаботыВПаузу,
	|	НЕ Т1.ИзПаузыВРаботу КАК ИзПаузыВРаботу
	|ПОМЕСТИТЬ ВТА1_СобытиеПередПервым
	|ИЗ
	|	ВТА1_ПервоеСобытие КАК ВТА1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Т1 КАК Т1
	|		ПО ВТА1.member_name = Т1.member_name
	|			И ВТА1.Id = Т1.Id
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т1.Id КАК Id,
	|	Т1.eventtime КАК eventtime,
	|	Т1.member_name КАК member_name,
	|	Т1.old_value КАК old_value,
	|	Т1.new_value КАК new_value,
	|	Т1.ИзРаботыВПаузу КАК ИзРаботыВПаузу,
	|	Т1.ИзПаузыВРаботу КАК ИзПаузыВРаботу
	|ПОМЕСТИТЬ ВТ01
	|ИЗ
	|	Т1 КАК Т1
	|
//	|ОБЪЕДИНИТЬ
//	|
//	|ВЫБРАТЬ
//	|	ВТА1.Id,
//	|	ВТА1.eventtime,
//	|	ВТА1.member_name,
//	|	ВТА1.old_value,
//	|	ВТА1.new_value,
//	|	ВТА1.ИзРаботыВПаузу,
//	|	ВТА1.ИзПаузыВРаботу
//	|ИЗ
//	|	ВТА1_СобытиеПередПервым КАК ВТА1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ01.Id КАК Id,
	|	ВТ01.eventtime КАК eventtime,
	|	ВТ01.member_name КАК member_name,
	|	ВТ01.old_value КАК old_value,
	|	ВТ01.new_value КАК new_value,
	|	ВТ01.ИзРаботыВПаузу КАК ИзРаботыВПаузу,
	|	ВТ01.ИзПаузыВРаботу КАК ИзПаузыВРаботу,
	|	РАЗНОСТЬДАТ(ВТ01.eventtime, ЕСТЬNULL(ВТ011.eventtime, &Окончание), СЕКУНДА) КАК Длительность,
	|	ЕСТЬNULL(ВТ011.Id, 0) КАК IdСледующего,
	|	ЕСТЬNULL(ВТ011.eventtime, ДАТАВРЕМЯ(1, 1, 1)) КАК eventtimeСледующего
	|ПОМЕСТИТЬ ВТ02_ВсеПоследующиеСобытия
	|ИЗ
	|	ВТ01 КАК ВТ01
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ01 КАК ВТ011
	|		ПО ВТ01.member_name = ВТ011.member_name
	|			И (ВТ01.ИзРаботыВПаузу
	|				ИЛИ ВТ01.ИзПаузыВРаботу)
	|			И ВТ01.Id < ВТ011.Id
//	|			И (НАЧАЛОПЕРИОДА(ВТ01.eventtime, ДЕНЬ) = НАЧАЛОПЕРИОДА(ВТ011.eventtime, ДЕНЬ))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ02.Id КАК Id,
	|	МИНИМУМ(ВТ02.Длительность) КАК Длительность
	|ПОМЕСТИТЬ ВТ03_НепосредственноСледующееСобытие
	|ИЗ
	|	ВТ02_ВсеПоследующиеСобытия КАК ВТ02
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ02.Id
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ01.Id КАК Id,
	|	ВТ01.eventtime КАК eventtime,
	|	ВТ01.member_name КАК member_name,
	|	ВТ01.old_value КАК old_value,
	|	ВТ01.new_value КАК new_value,
	|	ВТ01.ИзРаботыВПаузу КАК ИзРаботыВПаузу,
	|	ВТ01.ИзПаузыВРаботу КАК ИзПаузыВРаботу,
	|	ВТ03.Длительность / 60 КАК ДлительностьВМинутах,
	|	ВЫБОР
	|		КОГДА ВТ01.ИзРаботыВПаузу
	|			ТОГДА ВТ03.Длительность / 60
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДлительностьПаузыВМинутах,
	|	ВЫБОР
	|		КОГДА ВТ01.ИзПаузыВРаботу
	|			ТОГДА ВТ03.Длительность / 60
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДлительностьРаботыВМинутах
	|ИЗ
	|	ВТ01 КАК ВТ01
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ03_НепосредственноСледующееСобытие КАК ВТ03
	|		ПО ВТ01.Id = ВТ03.Id";
	
	Запрос.УстановитьПараметр("ТЗ", 		ТЗ);
	Запрос.УстановитьПараметр("Начало",    	Период.ДатаНачала);
	Запрос.УстановитьПараметр("Окончание", 	Период.ДатаОкончания);   
	
	РезультатЗапроса = ОбщегоНазначения.ВыполнитьЗапрос(Запрос);
	Если РезультатЗапроса.Пустой() Тогда
		Возврат
	КонецЕсли;
	
	//ТЗ = РезультатЗапроса.Выгрузить();
	
	ВнешниеНаборыДанных = Новый Структура();
	ВнешниеНаборыДанных.Вставить("ТЗ", РезультатЗапроса);
	
	СКД = ПолучитьМакет("Макет");
	Настройки = СКД.НастройкиПоУмолчанию;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, Настройки);
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных();
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент();
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
КонецПроцедуры
